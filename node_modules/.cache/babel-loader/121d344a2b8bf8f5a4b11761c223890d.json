{"ast":null,"code":"import { _ as __assign, c as __spreadArray } from '../chunks/bundle-BQi9-O76.js';\nimport React__default, { useContext, useState, useRef, useMemo, useEffect } from 'react';\nimport { f as format } from '../chunks/bundle-CAdqcqOm.js';\nimport { A as Avatar } from '../chunks/bundle-CFosTNce.js';\nimport { C as ContextMenu, b as MenuItems, c as MenuItem } from '../chunks/bundle-CwKZj-B6.js';\nimport Icon, { IconTypes, IconColors } from './Icon.js';\nimport IconButton from './IconButton.js';\nimport ImageRenderer from './ImageRenderer.js';\nimport LinkLabel from './LinkLabel.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../chunks/bundle-DhKQeIfP.js';\nimport Loader from './Loader.js';\nimport UserProfile from './UserProfile.js';\nimport { a as UserProfileContext } from '../chunks/bundle-BrTJ5Zbd.js';\nimport { u as uuidv4 } from '../chunks/bundle-etuaqevl.js';\nimport { c as copyToClipboard } from '../chunks/bundle-6BuULgEc.js';\nimport { u as useLocalization } from '../chunks/bundle-cQZ3UZoG.js';\nimport { g as getSenderFromMessage, s as showMenuTrigger, i as isFineCopy, a as isFineEdit, b as isFineResend, c as isFineDelete, O as OpenChannelMobileMenu, d as checkIsPending, e as checkIsFailed } from '../chunks/bundle-BdZytjCG.js';\nimport { u as useMediaQueryContext } from '../chunks/bundle-f-SpnOx2.js';\nimport { u as useLongPress } from '../chunks/bundle-AfQS5DGf.js';\nimport { T as TextFragment } from '../chunks/bundle-DofK8ySe.js';\nimport { t as tokenizeMessage } from '../chunks/bundle-GUbI4JcD.js';\nimport { o as openURL } from '../chunks/bundle-BgwzpLeQ.js';\nimport '../chunks/bundle-CA85nVxp.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport '../chunks/bundle-DXRRGizV.js';\nimport 'react-dom';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport './SortByRow.js';\nimport '../withSendbird.js';\nimport '../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CNWAfTVw.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport '../sendbirdSelectors.js';\nimport '../chunks/bundle-b6TpX_JP.js';\nimport './Button.js';\nimport '../useSendbirdStateContext.js';\nimport '../Message/context.js';\nimport './MentionLabel.js';\nfunction OpenChannelOGMessage(_a) {\n  var _b, _c, _d;\n  var message = _a.message,\n    isOperator = _a.isOperator,\n    _e = _a.isEphemeral,\n    isEphemeral = _e === void 0 ? false : _e,\n    className = _a.className,\n    disabled = _a.disabled,\n    showEdit = _a.showEdit,\n    showRemove = _a.showRemove,\n    resendMessage = _a.resendMessage,\n    chainTop = _a.chainTop,\n    userId = _a.userId;\n  var status = message === null || message === void 0 ? void 0 : message.sendingStatus;\n  var ogMetaData = (_b = message.ogMetaData) !== null && _b !== void 0 ? _b : null;\n  var defaultImage = ogMetaData === null || ogMetaData === void 0 ? void 0 : ogMetaData.defaultImage;\n  var _f = useLocalization(),\n    stringSet = _f.stringSet,\n    dateLocale = _f.dateLocale;\n  var isMobile = useMediaQueryContext().isMobile;\n  var _g = useContext(UserProfileContext),\n    disableUserProfile = _g.disableUserProfile,\n    renderUserProfile = _g.renderUserProfile;\n  var _h = useState({}),\n    contextStyle = _h[0],\n    setContextStyle = _h[1];\n  var _j = useState(false),\n    showContextMenu = _j[0],\n    setShowContextMenu = _j[1];\n  var openLink = function () {\n    return openURL(ogMetaData === null || ogMetaData === void 0 ? void 0 : ogMetaData.url);\n  };\n  var onLongPress = useLongPress({\n    onLongPress: function () {\n      return setShowContextMenu(true);\n    },\n    onClick: openLink\n  }, {\n    delay: 300\n  });\n  var messageComponentRef = useRef();\n  var contextMenuRef = useRef();\n  var mobileMenuRef = useRef();\n  var avatarRef = useRef();\n  var isPending = checkIsPending(status);\n  var isFailed = checkIsFailed(status);\n  var sender = getSenderFromMessage(message);\n  var tokens = useMemo(function () {\n    return tokenizeMessage({\n      messageText: message.message\n    });\n  }, [message === null || message === void 0 ? void 0 : message.updatedAt, message === null || message === void 0 ? void 0 : message.message]);\n  // place conxt menu top depending clientHeight of message component\n  useEffect(function () {\n    var _a, _b;\n    if (((_a = messageComponentRef === null || messageComponentRef === void 0 ? void 0 : messageComponentRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight) && ((_b = messageComponentRef === null || messageComponentRef === void 0 ? void 0 : messageComponentRef.current) === null || _b === void 0 ? void 0 : _b.clientHeight) > 36) {\n      setContextStyle({\n        top: '8px '\n      });\n    } else {\n      setContextStyle({\n        top: '2px'\n      });\n    }\n  }, [window.innerWidth]);\n  if (!message || message.messageType !== 'user') {\n    return React__default.createElement(React__default.Fragment, null);\n  }\n  return React__default.createElement(React__default.Fragment, null, React__default.createElement(\"div\", __assign({\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-og-message'], false).join(' '),\n    ref: messageComponentRef\n  }, isMobile ? __assign({}, onLongPress) : {}), React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top\"\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__left\"\n  }, !chainTop && React__default.createElement(ContextMenu, {\n    menuTrigger: function (toggleDropdown) {\n      return React__default.createElement(Avatar, {\n        className: \"sendbird-openchannel-og-message__top__left__avatar\",\n        src: sender.profileUrl || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function () {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function (closeDropdown) {\n      return renderUserProfile ? renderUserProfile({\n        user: sender,\n        close: closeDropdown,\n        currentUserId: userId,\n        avatarRef: avatarRef\n      }) : React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: '0px',\n          paddingBottom: '0px'\n        }\n      }, React__default.createElement(UserProfile, {\n        user: sender,\n        onSuccess: closeDropdown,\n        disableMessaging: true\n      }));\n    }\n  })), React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__right\"\n  }, !chainTop && React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__right__title\"\n  }, React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__top__right__title__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: isOperator ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2\n  }, sender && (sender.friendName || sender.nickname || sender.userId)), React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__top__right__title__sent-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_3\n  }, (message === null || message === void 0 ? void 0 : message.createdAt) && format(message === null || message === void 0 ? void 0 : message.createdAt, 'p', {\n    locale: dateLocale\n  }))), React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__right__description\"\n  }, React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__top__right__description__message\",\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, React__default.createElement(TextFragment, {\n    tokens: tokens\n  }), ((_c = message === null || message === void 0 ? void 0 : message.updatedAt) !== null && _c !== void 0 ? _c : 0) > 0 && React__default.createElement(Label, {\n    key: uuidv4(),\n    className: 'sendbird-openchannel-og-message--word',\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_2\n  }, stringSet.MESSAGE_EDITED)))), !isMobile && React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__context-menu\",\n    ref: contextMenuRef,\n    style: contextStyle\n  }, React__default.createElement(ContextMenu, {\n    menuTrigger: function (toggleDropdown) {\n      return showMenuTrigger({\n        message: message,\n        userId: userId,\n        status: status\n      }) && React__default.createElement(IconButton, {\n        className: \"sendbird-openchannel-og-message__top__context-menu--icon\",\n        width: \"32px\",\n        height: \"32px\",\n        onClick: function () {\n          toggleDropdown();\n        }\n      }, React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.CONTENT_INVERSE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function (closeDropdown) {\n      return React__default.createElement(MenuItems, {\n        parentRef: contextMenuRef,\n        parentContainRef: contextMenuRef,\n        closeDropdown: closeDropdown,\n        openLeft: true\n      }, isFineCopy({\n        message: message,\n        userId: userId,\n        status: status\n      }) && React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__copy\",\n        onClick: function () {\n          copyToClipboard(message.message);\n          closeDropdown();\n        },\n        testID: \"open_channel_og_message_menu_copy\"\n      }, stringSet.CONTEXT_MENU_DROPDOWN__COPY), !isEphemeral && isFineEdit({\n        message: message,\n        userId: userId,\n        status: status\n      }) && React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__edit\",\n        onClick: function () {\n          if (disabled) {\n            return;\n          }\n          showEdit(true);\n          closeDropdown();\n        },\n        testID: \"open_channel_og_message_menu_edit\"\n      }, stringSet.CONTEXT_MENU_DROPDOWN__EDIT), isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__resend\",\n        onClick: function () {\n          resendMessage(message);\n          closeDropdown();\n        },\n        testID: \"open_channel_og_message_menu_resend\"\n      }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND), !isEphemeral && isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__delete\",\n        onClick: function () {\n          if (disabled) {\n            return;\n          }\n          showRemove(true);\n          closeDropdown();\n        },\n        testID: \"open_channel_og_message_menu_delete\"\n      }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE));\n    }\n  }))), React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__bottom\"\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag\",\n    ref: mobileMenuRef\n  }, (ogMetaData === null || ogMetaData === void 0 ? void 0 : ogMetaData.url) && React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__url\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, ogMetaData.url), (ogMetaData === null || ogMetaData === void 0 ? void 0 : ogMetaData.title) && React__default.createElement(LinkLabel, {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__title\",\n    src: (_d = ogMetaData.url) !== null && _d !== void 0 ? _d : '',\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.PRIMARY\n  }, ogMetaData.title), (ogMetaData === null || ogMetaData === void 0 ? void 0 : ogMetaData.description) && React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__description\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, ogMetaData.description), (ogMetaData === null || ogMetaData === void 0 ? void 0 : ogMetaData.url) && React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__thumbnail\",\n    role: \"button\",\n    onClick: openLink,\n    onKeyDown: openLink,\n    tabIndex: 0\n  }, defaultImage && React__default.createElement(ImageRenderer, {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__thumbnail__image\",\n    url: defaultImage.url || '',\n    alt: defaultImage.alt || '',\n    height: \"189px\",\n    defaultComponent: React__default.createElement(\"div\", {\n      className: \"sendbird-openchannel-og-message__bottom__og-tag__thumbnail__image--placeholder\"\n    }, React__default.createElement(Icon, {\n      type: IconTypes.THUMBNAIL_NONE,\n      width: \"56px\",\n      height: \"56px\"\n    }))\n  }))), (isPending || isFailed) && React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__right__tail\"\n  }, isPending && React__default.createElement(Loader, {\n    width: \"16px\",\n    height: \"16px\"\n  }, React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-og-message__top__right__tail__pending\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })), isFailed && React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-og-message__top__right__tail__failed\",\n    type: IconTypes.ERROR,\n    fillColor: IconColors.ERROR,\n    width: \"16px\",\n    height: \"16px\"\n  })))), showContextMenu && React__default.createElement(OpenChannelMobileMenu, {\n    message: message,\n    parentRef: mobileMenuRef,\n    hideMenu: function () {\n      setShowContextMenu(false);\n    },\n    showRemove: function () {\n      setShowContextMenu(false);\n      showRemove(true);\n    },\n    showEdit: function () {\n      setShowContextMenu(false);\n      showEdit(true);\n    },\n    copyToClipboard: function () {\n      setShowContextMenu(false);\n      copyToClipboard(message === null || message === void 0 ? void 0 : message.message);\n    },\n    resendMessage: function () {\n      setShowContextMenu(false);\n      resendMessage(message);\n    }\n  }));\n}\nexport { OpenChannelOGMessage as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { _ as __assign, c as __spreadArray } from '../chunks/bundle-BQi9-O76.js';\nimport React__default, { useContext, useState, useRef, useMemo, useEffect } from 'react';\nimport { f as format } from '../chunks/bundle-CAdqcqOm.js';\nimport { A as Avatar } from '../chunks/bundle-CFosTNce.js';\nimport { C as ContextMenu, b as MenuItems, c as MenuItem } from '../chunks/bundle-CwKZj-B6.js';\nimport Icon, { IconTypes, IconColors } from './Icon.js';\nimport IconButton from './IconButton.js';\nimport ImageRenderer from './ImageRenderer.js';\nimport LinkLabel from './LinkLabel.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../chunks/bundle-DhKQeIfP.js';\nimport Loader from './Loader.js';\nimport UserProfile from './UserProfile.js';\nimport { a as UserProfileContext } from '../chunks/bundle-BrTJ5Zbd.js';\nimport { u as uuidv4 } from '../chunks/bundle-etuaqevl.js';\nimport { c as copyToClipboard } from '../chunks/bundle-6BuULgEc.js';\nimport { u as useLocalization } from '../chunks/bundle-cQZ3UZoG.js';\nimport { g as getSenderFromMessage, s as showMenuTrigger, i as isFineCopy, a as isFineEdit, b as isFineResend, c as isFineDelete, O as OpenChannelMobileMenu, d as checkIsPending, e as checkIsFailed } from '../chunks/bundle-BdZytjCG.js';\nimport { u as useMediaQueryContext } from '../chunks/bundle-f-SpnOx2.js';\nimport { u as useLongPress } from '../chunks/bundle-AfQS5DGf.js';\nimport { T as TextFragment } from '../chunks/bundle-DofK8ySe.js';\nimport { t as tokenizeMessage } from '../chunks/bundle-GUbI4JcD.js';\nimport { o as openURL } from '../chunks/bundle-BgwzpLeQ.js';\nimport '../chunks/bundle-CA85nVxp.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport '../chunks/bundle-DXRRGizV.js';\nimport 'react-dom';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport './SortByRow.js';\nimport '../withSendbird.js';\nimport '../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CNWAfTVw.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport '../sendbirdSelectors.js';\nimport '../chunks/bundle-b6TpX_JP.js';\nimport './Button.js';\nimport '../useSendbirdStateContext.js';\nimport '../Message/context.js';\nimport './MentionLabel.js';\n\nfunction OpenChannelOGMessage(_a) {\n    var _b, _c, _d;\n    var message = _a.message, isOperator = _a.isOperator, _e = _a.isEphemeral, isEphemeral = _e === void 0 ? false : _e, className = _a.className, disabled = _a.disabled, showEdit = _a.showEdit, showRemove = _a.showRemove, resendMessage = _a.resendMessage, chainTop = _a.chainTop, userId = _a.userId;\n    var status = message === null || message === void 0 ? void 0 : message.sendingStatus;\n    var ogMetaData = (_b = message.ogMetaData) !== null && _b !== void 0 ? _b : null;\n    var defaultImage = ogMetaData === null || ogMetaData === void 0 ? void 0 : ogMetaData.defaultImage;\n    var _f = useLocalization(), stringSet = _f.stringSet, dateLocale = _f.dateLocale;\n    var isMobile = useMediaQueryContext().isMobile;\n    var _g = useContext(UserProfileContext), disableUserProfile = _g.disableUserProfile, renderUserProfile = _g.renderUserProfile;\n    var _h = useState({}), contextStyle = _h[0], setContextStyle = _h[1];\n    var _j = useState(false), showContextMenu = _j[0], setShowContextMenu = _j[1];\n    var openLink = function () { return openURL(ogMetaData === null || ogMetaData === void 0 ? void 0 : ogMetaData.url); };\n    var onLongPress = useLongPress({\n        onLongPress: function () { return setShowContextMenu(true); },\n        onClick: openLink,\n    }, {\n        delay: 300,\n    });\n    var messageComponentRef = useRef();\n    var contextMenuRef = useRef();\n    var mobileMenuRef = useRef();\n    var avatarRef = useRef();\n    var isPending = checkIsPending(status);\n    var isFailed = checkIsFailed(status);\n    var sender = getSenderFromMessage(message);\n    var tokens = useMemo(function () {\n        return tokenizeMessage({\n            messageText: message.message,\n        });\n    }, [message === null || message === void 0 ? void 0 : message.updatedAt, message === null || message === void 0 ? void 0 : message.message]);\n    // place conxt menu top depending clientHeight of message component\n    useEffect(function () {\n        var _a, _b;\n        if (((_a = messageComponentRef === null || messageComponentRef === void 0 ? void 0 : messageComponentRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight) && ((_b = messageComponentRef === null || messageComponentRef === void 0 ? void 0 : messageComponentRef.current) === null || _b === void 0 ? void 0 : _b.clientHeight) > 36) {\n            setContextStyle({ top: '8px ' });\n        }\n        else {\n            setContextStyle({ top: '2px' });\n        }\n    }, [window.innerWidth]);\n    if (!message || message.messageType !== 'user') {\n        return React__default.createElement(React__default.Fragment, null);\n    }\n    return (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(\"div\", __assign({ className: __spreadArray(__spreadArray([], (Array.isArray(className) ? className : [className]), true), [\n                'sendbird-openchannel-og-message',\n            ], false).join(' '), ref: messageComponentRef }, (isMobile ? __assign({}, onLongPress) : {})),\n            React__default.createElement(\"div\", { className: \"sendbird-openchannel-og-message__top\" },\n                React__default.createElement(\"div\", { className: \"sendbird-openchannel-og-message__top__left\" }, !chainTop && (React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) { return (React__default.createElement(Avatar, { className: \"sendbird-openchannel-og-message__top__left__avatar\", src: sender.profileUrl || '', ref: avatarRef, width: \"28px\", height: \"28px\", onClick: function () {\n                            if (!disableUserProfile) {\n                                toggleDropdown();\n                            }\n                        } })); }, menuItems: function (closeDropdown) { return (renderUserProfile\n                        ? (renderUserProfile({\n                            user: sender,\n                            close: closeDropdown,\n                            currentUserId: userId,\n                            avatarRef: avatarRef,\n                        }))\n                        : (React__default.createElement(MenuItems, { parentRef: avatarRef, parentContainRef: avatarRef, closeDropdown: closeDropdown, style: { paddingTop: '0px', paddingBottom: '0px' } },\n                            React__default.createElement(UserProfile, { user: sender, onSuccess: closeDropdown, disableMessaging: true })))); } }))),\n                React__default.createElement(\"div\", { className: \"sendbird-openchannel-og-message__top__right\" },\n                    !chainTop && (React__default.createElement(\"div\", { className: \"sendbird-openchannel-og-message__top__right__title\" },\n                        React__default.createElement(Label, { className: \"sendbird-openchannel-og-message__top__right__title__sender-name\", type: LabelTypography.CAPTION_2, color: isOperator ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2 }, sender && (sender.friendName\n                            || sender.nickname\n                            || sender.userId)),\n                        React__default.createElement(Label, { className: \"sendbird-openchannel-og-message__top__right__title__sent-at\", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_3 }, (message === null || message === void 0 ? void 0 : message.createdAt) && (format(message === null || message === void 0 ? void 0 : message.createdAt, 'p', {\n                            locale: dateLocale,\n                        }))))),\n                    React__default.createElement(\"div\", { className: \"sendbird-openchannel-og-message__top__right__description\" },\n                        React__default.createElement(Label, { className: \"sendbird-openchannel-og-message__top__right__description__message\", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_1 },\n                            React__default.createElement(TextFragment, { tokens: tokens }),\n                            (((_c = message === null || message === void 0 ? void 0 : message.updatedAt) !== null && _c !== void 0 ? _c : 0) > 0) && (React__default.createElement(Label, { key: uuidv4(), className: 'sendbird-openchannel-og-message--word', type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_2 }, stringSet.MESSAGE_EDITED))))),\n                !isMobile && (React__default.createElement(\"div\", { className: \"sendbird-openchannel-og-message__top__context-menu\", ref: contextMenuRef, style: contextStyle },\n                    React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) { return (showMenuTrigger({ message: message, userId: userId, status: status }) && (React__default.createElement(IconButton, { className: \"sendbird-openchannel-og-message__top__context-menu--icon\", width: \"32px\", height: \"32px\", onClick: function () {\n                                toggleDropdown();\n                            } },\n                            React__default.createElement(Icon, { type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE, width: \"24px\", height: \"24px\" })))); }, menuItems: function (closeDropdown) { return (React__default.createElement(MenuItems, { parentRef: contextMenuRef, parentContainRef: contextMenuRef, closeDropdown: closeDropdown, openLeft: true },\n                            isFineCopy({ message: message, userId: userId, status: status }) && (React__default.createElement(MenuItem, { className: \"sendbird-openchannel-og-message__top__context-menu__copy\", onClick: function () {\n                                    copyToClipboard(message.message);\n                                    closeDropdown();\n                                }, testID: \"open_channel_og_message_menu_copy\" }, stringSet.CONTEXT_MENU_DROPDOWN__COPY)),\n                            (!isEphemeral && isFineEdit({ message: message, userId: userId, status: status })) && (React__default.createElement(MenuItem, { className: \"sendbird-openchannel-og-message__top__context-menu__edit\", onClick: function () {\n                                    if (disabled) {\n                                        return;\n                                    }\n                                    showEdit(true);\n                                    closeDropdown();\n                                }, testID: \"open_channel_og_message_menu_edit\" }, stringSet.CONTEXT_MENU_DROPDOWN__EDIT)),\n                            isFineResend({ message: message, userId: userId, status: status }) && (React__default.createElement(MenuItem, { className: \"sendbird-openchannel-og-message__top__context-menu__resend\", onClick: function () {\n                                    resendMessage(message);\n                                    closeDropdown();\n                                }, testID: \"open_channel_og_message_menu_resend\" }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND)),\n                            (!isEphemeral && isFineDelete({ message: message, userId: userId, status: status })) && (React__default.createElement(MenuItem, { className: \"sendbird-openchannel-og-message__top__context-menu__delete\", onClick: function () {\n                                    if (disabled) {\n                                        return;\n                                    }\n                                    showRemove(true);\n                                    closeDropdown();\n                                }, testID: \"open_channel_og_message_menu_delete\" }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE)))); } })))),\n            React__default.createElement(\"div\", { className: \"sendbird-openchannel-og-message__bottom\" },\n                React__default.createElement(\"div\", { className: \"sendbird-openchannel-og-message__bottom__og-tag\", ref: mobileMenuRef },\n                    (ogMetaData === null || ogMetaData === void 0 ? void 0 : ogMetaData.url) && (React__default.createElement(Label, { className: \"sendbird-openchannel-og-message__bottom__og-tag__url\", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_2 }, ogMetaData.url)),\n                    (ogMetaData === null || ogMetaData === void 0 ? void 0 : ogMetaData.title) && (React__default.createElement(LinkLabel, { className: \"sendbird-openchannel-og-message__bottom__og-tag__title\", src: (_d = ogMetaData.url) !== null && _d !== void 0 ? _d : '', type: LabelTypography.SUBTITLE_2, color: LabelColors.PRIMARY }, ogMetaData.title)),\n                    (ogMetaData === null || ogMetaData === void 0 ? void 0 : ogMetaData.description) && (React__default.createElement(Label, { className: \"sendbird-openchannel-og-message__bottom__og-tag__description\", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_1 }, ogMetaData.description)),\n                    (ogMetaData === null || ogMetaData === void 0 ? void 0 : ogMetaData.url) && (React__default.createElement(\"div\", { className: \"sendbird-openchannel-og-message__bottom__og-tag__thumbnail\", role: \"button\", onClick: openLink, onKeyDown: openLink, tabIndex: 0 }, defaultImage && (React__default.createElement(ImageRenderer, { className: \"sendbird-openchannel-og-message__bottom__og-tag__thumbnail__image\", url: defaultImage.url || '', alt: defaultImage.alt || '', height: \"189px\", defaultComponent: (React__default.createElement(\"div\", { className: \"sendbird-openchannel-og-message__bottom__og-tag__thumbnail__image--placeholder\" },\n                            React__default.createElement(Icon, { type: IconTypes.THUMBNAIL_NONE, width: \"56px\", height: \"56px\" }))) }))))),\n                (isPending || isFailed) && (React__default.createElement(\"div\", { className: \"sendbird-openchannel-og-message__top__right__tail\" },\n                    isPending && (React__default.createElement(Loader, { width: \"16px\", height: \"16px\" },\n                        React__default.createElement(Icon, { className: \"sendbird-openchannel-og-message__top__right__tail__pending\", type: IconTypes.SPINNER, fillColor: IconColors.PRIMARY, width: \"16px\", height: \"16px\" }))),\n                    isFailed && (React__default.createElement(Icon, { className: \"sendbird-openchannel-og-message__top__right__tail__failed\", type: IconTypes.ERROR, fillColor: IconColors.ERROR, width: \"16px\", height: \"16px\" })))))),\n        showContextMenu && (React__default.createElement(OpenChannelMobileMenu, { message: message, parentRef: mobileMenuRef, hideMenu: function () {\n                setShowContextMenu(false);\n            }, showRemove: function () {\n                setShowContextMenu(false);\n                showRemove(true);\n            }, showEdit: function () {\n                setShowContextMenu(false);\n                showEdit(true);\n            }, copyToClipboard: function () {\n                setShowContextMenu(false);\n                copyToClipboard(message === null || message === void 0 ? void 0 : message.message);\n            }, resendMessage: function () {\n                setShowContextMenu(false);\n                resendMessage(message);\n            } }))));\n}\n\nexport { OpenChannelOGMessage as default };\n//# sourceMappingURL=OpenchannelOGMessage.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}