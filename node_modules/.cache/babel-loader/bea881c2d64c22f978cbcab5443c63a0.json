{"ast":null,"code":"import React__default, { useRef, useState } from 'react';\nimport { n as noop, c as classnames } from './bundle-BgwzpLeQ.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { u as useMessageMenuContext, a as MenuItem, M as MessageMenuProvider, b as MenuItems, g as getObservingId } from './bundle-CwKZj-B6.js';\nimport { _ as __assign } from './bundle-BQi9-O76.js';\nimport IconButton from '../ui/IconButton.js';\nimport Icon, { IconTypes, IconColors } from '../ui/Icon.js';\nimport { l as isUserMessage, A as copyToClipboard, v as isFailedMessage, q as isSentMessage, u as isPendingMessage } from './bundle-DxTN4_0p.js';\nimport { u as useLocalization } from './bundle-cQZ3UZoG.js';\nimport { Role } from '@sendbird/chat';\nvar TriggerIcon = function (_a) {\n  var ref = _a.ref,\n    _b = _a.onClick,\n    onClick = _b === void 0 ? noop : _b,\n    _c = _a.onBlur,\n    onBlur = _c === void 0 ? noop : _c,\n    _d = _a.renderIcon,\n    renderIcon = _d === void 0 ? function (props) {\n      return React__default.createElement(Icon, __assign({}, props));\n    } : _d;\n  return React__default.createElement(IconButton, {\n    ref: ref,\n    width: \"32px\",\n    height: \"32px\",\n    onClick: onClick,\n    onBlur: onBlur\n  }, renderIcon({\n    type: IconTypes.MORE,\n    fillColor: IconColors.CONTENT_INVERSE,\n    width: '24px',\n    height: '24px'\n  }));\n};\nvar CopyMenuItem = function (props) {\n  var _a;\n  var stringSet = useLocalization().stringSet;\n  var _b = useMessageMenuContext(),\n    message = _b.message,\n    hideMenu = _b.hideMenu;\n  return React__default.createElement(MenuItem, __assign({}, props, {\n    onClick: function (e) {\n      var _a;\n      if (isUserMessage(message)) copyToClipboard(message.message);\n      hideMenu();\n      (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    }\n  }), (_a = props.children) !== null && _a !== void 0 ? _a : stringSet.MESSAGE_MENU__COPY);\n};\nvar ReplyMenuItem = function (props) {\n  var _a;\n  var stringSet = useLocalization().stringSet;\n  var _b = useMessageMenuContext(),\n    message = _b.message,\n    hideMenu = _b.hideMenu,\n    setQuoteMessage = _b.setQuoteMessage;\n  return React__default.createElement(MenuItem, __assign({}, props, {\n    disabled: message.parentMessageId > 0,\n    onClick: function (e) {\n      var _a;\n      setQuoteMessage(message);\n      hideMenu();\n      (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    }\n  }), (_a = props.children) !== null && _a !== void 0 ? _a : stringSet.MESSAGE_MENU__REPLY);\n};\nvar ThreadMenuItem = function (props) {\n  var _a;\n  var stringSet = useLocalization().stringSet;\n  var _b = useMessageMenuContext(),\n    message = _b.message,\n    hideMenu = _b.hideMenu,\n    onReplyInThread = _b.onReplyInThread;\n  return React__default.createElement(MenuItem, __assign({}, props, {\n    onClick: function (e) {\n      var _a;\n      onReplyInThread({\n        message: message\n      });\n      hideMenu();\n      (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    }\n  }), (_a = props.children) !== null && _a !== void 0 ? _a : stringSet.MESSAGE_MENU__THREAD);\n};\nvar OpenInChannelMenuItem = function (props) {\n  var _a;\n  var stringSet = useLocalization().stringSet;\n  var _b = useMessageMenuContext(),\n    hideMenu = _b.hideMenu,\n    onMoveToParentMessage = _b.onMoveToParentMessage;\n  return React__default.createElement(MenuItem, __assign({}, props, {\n    onClick: function (e) {\n      var _a;\n      onMoveToParentMessage();\n      hideMenu();\n      (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    }\n  }), (_a = props.children) !== null && _a !== void 0 ? _a : stringSet.MESSAGE_MENU__OPEN_IN_CHANNEL);\n};\nvar EditMenuItem = function (props) {\n  var _a;\n  var stringSet = useLocalization().stringSet;\n  var _b = useMessageMenuContext(),\n    hideMenu = _b.hideMenu,\n    showEdit = _b.showEdit,\n    isOnline = _b.isOnline;\n  return React__default.createElement(MenuItem, __assign({}, props, {\n    onClick: function (e) {\n      var _a;\n      if (isOnline) {\n        showEdit(true);\n        hideMenu();\n        (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n      }\n    }\n  }), (_a = props.children) !== null && _a !== void 0 ? _a : stringSet.MESSAGE_MENU__EDIT);\n};\nvar ResendMenuItem = function (props) {\n  var _a;\n  var stringSet = useLocalization().stringSet;\n  var _b = useMessageMenuContext(),\n    message = _b.message,\n    hideMenu = _b.hideMenu,\n    resendMessage = _b.resendMessage,\n    isOnline = _b.isOnline;\n  return React__default.createElement(MenuItem, __assign({}, props, {\n    onClick: function (e) {\n      var _a;\n      if (isOnline) {\n        resendMessage(message);\n        hideMenu();\n        (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n      }\n    }\n  }), (_a = props.children) !== null && _a !== void 0 ? _a : stringSet.MESSAGE_MENU__RESEND);\n};\nvar DeleteMenuItem = function (props) {\n  var _a, _b, _c;\n  var stringSet = useLocalization().stringSet;\n  var _d = useMessageMenuContext(),\n    message = _d.message,\n    hideMenu = _d.hideMenu,\n    deleteMessage = _d.deleteMessage,\n    showRemove = _d.showRemove,\n    isOnline = _d.isOnline,\n    disableDeleteMessage = _d.disableDeleteMessage;\n  return React__default.createElement(MenuItem, __assign({}, props, {\n    disabled: typeof disableDeleteMessage === 'boolean' ? disableDeleteMessage : ((_b = (_a = message.threadInfo) === null || _a === void 0 ? void 0 : _a.replyCount) !== null && _b !== void 0 ? _b : 0) > 0,\n    onClick: function (e) {\n      var _a;\n      if (isFailedMessage(message)) {\n        deleteMessage(message);\n      } else if (isOnline) {\n        showRemove(true);\n        hideMenu();\n        (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n      }\n    }\n  }), (_c = props.children) !== null && _c !== void 0 ? _c : stringSet.MESSAGE_MENU__DELETE);\n};\nvar isReplyTypeMessageEnabled = function (_a) {\n  var _b;\n  var channel = _a.channel,\n    message = _a.message;\n  if (isFailedMessage(message) || isPendingMessage(message)) {\n    return false;\n  }\n  if (!((_b = channel === null || channel === void 0 ? void 0 : channel.isGroupChannel) === null || _b === void 0 ? void 0 : _b.call(channel)) || (channel === null || channel === void 0 ? void 0 : channel.isEphemeral)) {\n    return false;\n  }\n  var isBroadcast = channel === null || channel === void 0 ? void 0 : channel.isBroadcast;\n  var isOperator = (channel === null || channel === void 0 ? void 0 : channel.myRole) === Role.OPERATOR;\n  if (isBroadcast) return isOperator;\n  return true;\n};\nvar showMenuItemCopy = function (_a) {\n  var message = _a.message;\n  return isUserMessage(message);\n};\nvar showMenuItemEdit = function (_a) {\n  var message = _a.message,\n    channel = _a.channel,\n    isByMe = _a.isByMe;\n  return !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral) && isUserMessage(message) && isSentMessage(message) && isByMe;\n};\nvar showMenuItemResend = function (_a) {\n  var message = _a.message,\n    isByMe = _a.isByMe;\n  return isFailedMessage(message) && (message === null || message === void 0 ? void 0 : message.isResendable) && isByMe;\n};\nvar showMenuItemDelete = function (_a) {\n  var message = _a.message,\n    channel = _a.channel,\n    isByMe = _a.isByMe;\n  return !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral) && !isPendingMessage(message) && isByMe;\n};\nvar showMenuItemOpenInChannel = function (_a) {\n  var _b = _a.onMoveToParentMessage,\n    onMoveToParentMessage = _b === void 0 ? undefined : _b;\n  return !!onMoveToParentMessage;\n};\nvar showMenuItemReply = function (_a) {\n  var channel = _a.channel,\n    message = _a.message,\n    replyType = _a.replyType;\n  return isReplyTypeMessageEnabled({\n    channel: channel,\n    message: message\n  }) && replyType === 'QUOTE_REPLY';\n};\nvar showMenuItemThread = function (_a) {\n  var channel = _a.channel,\n    message = _a.message,\n    replyType = _a.replyType,\n    onReplyInThread = _a.onReplyInThread;\n  return isReplyTypeMessageEnabled({\n    channel: channel,\n    message: message\n  }) && replyType === 'THREAD' && !(message === null || message === void 0 ? void 0 : message.parentMessageId) && typeof onReplyInThread === 'function';\n};\nvar MessageMenu = function (_a) {\n  var _b;\n  var className = _a.className,\n    message = _a.message,\n    channel = _a.channel,\n    isByMe = _a.isByMe,\n    replyType = _a.replyType,\n    _c = _a.renderTrigger,\n    renderTrigger = _c === void 0 ? TriggerIcon : _c,\n    renderMenuItems = _a.renderMenuItems,\n    _d = _a.disableDeleteMessage,\n    disableDeleteMessage = _d === void 0 ? null : _d,\n    _e = _a.showEdit,\n    showEdit = _e === void 0 ? noop : _e,\n    _f = _a.showRemove,\n    showRemove = _f === void 0 ? noop : _f,\n    deleteMessage = _a.deleteMessage,\n    resendMessage = _a.resendMessage,\n    setQuoteMessage = _a.setQuoteMessage,\n    onReplyInThread = _a.onReplyInThread,\n    onMoveToParentMessage = _a.onMoveToParentMessage;\n  var config = useSendbirdStateContext().config;\n  var isOnline = config.isOnline;\n  var triggerRef = useRef(null);\n  var containerRef = useRef(null);\n  var _g = useState(false),\n    isMenuVisible = _g[0],\n    setMenuVisibility = _g[1];\n  var hideMenu = function () {\n    return setMenuVisibility(false);\n  };\n  var showMenu = function () {\n    return setMenuVisibility(true);\n  };\n  var toggleMenu = function () {\n    return setMenuVisibility(function (visible) {\n      return !visible;\n    });\n  };\n  var params = {\n    message: message,\n    channel: channel,\n    isByMe: isByMe,\n    replyType: replyType,\n    onReplyInThread: onReplyInThread,\n    onMoveToParentMessage: onMoveToParentMessage\n  };\n  return React__default.createElement(\"div\", {\n    className: classnames('sendbird-message-menu', className),\n    ref: containerRef\n  }, React__default.createElement(MessageMenuProvider, {\n    value: {\n      message: message,\n      hideMenu: hideMenu,\n      showMenu: showMenu,\n      toggleMenu: toggleMenu,\n      setQuoteMessage: setQuoteMessage,\n      onReplyInThread: onReplyInThread,\n      onMoveToParentMessage: onMoveToParentMessage,\n      showEdit: showEdit,\n      showRemove: showRemove,\n      deleteMessage: deleteMessage,\n      resendMessage: resendMessage,\n      isOnline: isOnline,\n      disableDeleteMessage: disableDeleteMessage,\n      triggerRef: triggerRef,\n      containerRef: containerRef\n    }\n  }, renderTrigger({\n    ref: triggerRef,\n    onClick: toggleMenu\n  }), isMenuVisible && React__default.createElement(MenuItems, {\n    id: getObservingId(message.messageId),\n    parentRef: triggerRef,\n    parentContainRef: containerRef,\n    closeDropdown: hideMenu,\n    openLeft: isByMe\n  }, (_b = renderMenuItems === null || renderMenuItems === void 0 ? void 0 : renderMenuItems({\n    items: {\n      CopyMenuItem: CopyMenuItem,\n      ReplyMenuItem: ReplyMenuItem,\n      ThreadMenuItem: ThreadMenuItem,\n      OpenInChannelMenuItem: OpenInChannelMenuItem,\n      EditMenuItem: EditMenuItem,\n      ResendMenuItem: ResendMenuItem,\n      DeleteMenuItem: DeleteMenuItem\n    }\n  })) !== null && _b !== void 0 ? _b : React__default.createElement(React__default.Fragment, null, showMenuItemCopy(params) && React__default.createElement(CopyMenuItem, null), showMenuItemReply(params) && React__default.createElement(ReplyMenuItem, null), showMenuItemThread(params) && React__default.createElement(ThreadMenuItem, null), showMenuItemOpenInChannel(params) && React__default.createElement(OpenInChannelMenuItem, null), showMenuItemEdit(params) && React__default.createElement(EditMenuItem, null), showMenuItemResend(params) && React__default.createElement(ResendMenuItem, null), showMenuItemDelete(params) && React__default.createElement(DeleteMenuItem, null)))));\n};\nexport { MessageMenu as M };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { useRef, useState } from 'react';\nimport { n as noop, c as classnames } from './bundle-BgwzpLeQ.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { u as useMessageMenuContext, a as MenuItem, M as MessageMenuProvider, b as MenuItems, g as getObservingId } from './bundle-CwKZj-B6.js';\nimport { _ as __assign } from './bundle-BQi9-O76.js';\nimport IconButton from '../ui/IconButton.js';\nimport Icon, { IconTypes, IconColors } from '../ui/Icon.js';\nimport { l as isUserMessage, A as copyToClipboard, v as isFailedMessage, q as isSentMessage, u as isPendingMessage } from './bundle-DxTN4_0p.js';\nimport { u as useLocalization } from './bundle-cQZ3UZoG.js';\nimport { Role } from '@sendbird/chat';\n\nvar TriggerIcon = function (_a) {\n    var ref = _a.ref, _b = _a.onClick, onClick = _b === void 0 ? noop : _b, _c = _a.onBlur, onBlur = _c === void 0 ? noop : _c, _d = _a.renderIcon, renderIcon = _d === void 0 ? function (props) { return React__default.createElement(Icon, __assign({}, props)); } : _d;\n    return (React__default.createElement(IconButton, { ref: ref, width: \"32px\", height: \"32px\", onClick: onClick, onBlur: onBlur }, renderIcon({\n        type: IconTypes.MORE,\n        fillColor: IconColors.CONTENT_INVERSE,\n        width: '24px',\n        height: '24px',\n    })));\n};\nvar CopyMenuItem = function (props) {\n    var _a;\n    var stringSet = useLocalization().stringSet;\n    var _b = useMessageMenuContext(), message = _b.message, hideMenu = _b.hideMenu;\n    return (React__default.createElement(MenuItem, __assign({}, props, { onClick: function (e) {\n            var _a;\n            if (isUserMessage(message))\n                copyToClipboard(message.message);\n            hideMenu();\n            (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n        } }), (_a = props.children) !== null && _a !== void 0 ? _a : stringSet.MESSAGE_MENU__COPY));\n};\nvar ReplyMenuItem = function (props) {\n    var _a;\n    var stringSet = useLocalization().stringSet;\n    var _b = useMessageMenuContext(), message = _b.message, hideMenu = _b.hideMenu, setQuoteMessage = _b.setQuoteMessage;\n    return (React__default.createElement(MenuItem, __assign({}, props, { disabled: message.parentMessageId > 0, onClick: function (e) {\n            var _a;\n            setQuoteMessage(message);\n            hideMenu();\n            (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n        } }), (_a = props.children) !== null && _a !== void 0 ? _a : stringSet.MESSAGE_MENU__REPLY));\n};\nvar ThreadMenuItem = function (props) {\n    var _a;\n    var stringSet = useLocalization().stringSet;\n    var _b = useMessageMenuContext(), message = _b.message, hideMenu = _b.hideMenu, onReplyInThread = _b.onReplyInThread;\n    return (React__default.createElement(MenuItem, __assign({}, props, { onClick: function (e) {\n            var _a;\n            onReplyInThread({ message: message });\n            hideMenu();\n            (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n        } }), (_a = props.children) !== null && _a !== void 0 ? _a : stringSet.MESSAGE_MENU__THREAD));\n};\nvar OpenInChannelMenuItem = function (props) {\n    var _a;\n    var stringSet = useLocalization().stringSet;\n    var _b = useMessageMenuContext(), hideMenu = _b.hideMenu, onMoveToParentMessage = _b.onMoveToParentMessage;\n    return (React__default.createElement(MenuItem, __assign({}, props, { onClick: function (e) {\n            var _a;\n            onMoveToParentMessage();\n            hideMenu();\n            (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n        } }), (_a = props.children) !== null && _a !== void 0 ? _a : stringSet.MESSAGE_MENU__OPEN_IN_CHANNEL));\n};\nvar EditMenuItem = function (props) {\n    var _a;\n    var stringSet = useLocalization().stringSet;\n    var _b = useMessageMenuContext(), hideMenu = _b.hideMenu, showEdit = _b.showEdit, isOnline = _b.isOnline;\n    return (React__default.createElement(MenuItem, __assign({}, props, { onClick: function (e) {\n            var _a;\n            if (isOnline) {\n                showEdit(true);\n                hideMenu();\n                (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n            }\n        } }), (_a = props.children) !== null && _a !== void 0 ? _a : stringSet.MESSAGE_MENU__EDIT));\n};\nvar ResendMenuItem = function (props) {\n    var _a;\n    var stringSet = useLocalization().stringSet;\n    var _b = useMessageMenuContext(), message = _b.message, hideMenu = _b.hideMenu, resendMessage = _b.resendMessage, isOnline = _b.isOnline;\n    return (React__default.createElement(MenuItem, __assign({}, props, { onClick: function (e) {\n            var _a;\n            if (isOnline) {\n                resendMessage(message);\n                hideMenu();\n                (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n            }\n        } }), (_a = props.children) !== null && _a !== void 0 ? _a : stringSet.MESSAGE_MENU__RESEND));\n};\nvar DeleteMenuItem = function (props) {\n    var _a, _b, _c;\n    var stringSet = useLocalization().stringSet;\n    var _d = useMessageMenuContext(), message = _d.message, hideMenu = _d.hideMenu, deleteMessage = _d.deleteMessage, showRemove = _d.showRemove, isOnline = _d.isOnline, disableDeleteMessage = _d.disableDeleteMessage;\n    return (React__default.createElement(MenuItem, __assign({}, props, { disabled: typeof disableDeleteMessage === 'boolean'\n            ? disableDeleteMessage\n            : ((_b = (_a = message.threadInfo) === null || _a === void 0 ? void 0 : _a.replyCount) !== null && _b !== void 0 ? _b : 0) > 0, onClick: function (e) {\n            var _a;\n            if (isFailedMessage(message)) {\n                deleteMessage(message);\n            }\n            else if (isOnline) {\n                showRemove(true);\n                hideMenu();\n                (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n            }\n        } }), (_c = props.children) !== null && _c !== void 0 ? _c : stringSet.MESSAGE_MENU__DELETE));\n};\n\nvar isReplyTypeMessageEnabled = function (_a) {\n    var _b;\n    var channel = _a.channel, message = _a.message;\n    if (isFailedMessage(message) || isPendingMessage(message)) {\n        return false;\n    }\n    if (!((_b = channel === null || channel === void 0 ? void 0 : channel.isGroupChannel) === null || _b === void 0 ? void 0 : _b.call(channel)) || (channel === null || channel === void 0 ? void 0 : channel.isEphemeral)) {\n        return false;\n    }\n    var isBroadcast = channel === null || channel === void 0 ? void 0 : channel.isBroadcast;\n    var isOperator = (channel === null || channel === void 0 ? void 0 : channel.myRole) === Role.OPERATOR;\n    if (isBroadcast)\n        return isOperator;\n    return true;\n};\nvar showMenuItemCopy = function (_a) {\n    var message = _a.message;\n    return isUserMessage(message);\n};\nvar showMenuItemEdit = function (_a) {\n    var message = _a.message, channel = _a.channel, isByMe = _a.isByMe;\n    return (!(channel === null || channel === void 0 ? void 0 : channel.isEphemeral) && isUserMessage(message) && isSentMessage(message) && isByMe);\n};\nvar showMenuItemResend = function (_a) {\n    var message = _a.message, isByMe = _a.isByMe;\n    return (isFailedMessage(message) && (message === null || message === void 0 ? void 0 : message.isResendable) && isByMe);\n};\nvar showMenuItemDelete = function (_a) {\n    var message = _a.message, channel = _a.channel, isByMe = _a.isByMe;\n    return !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral) && !isPendingMessage(message) && isByMe;\n};\nvar showMenuItemOpenInChannel = function (_a) {\n    var _b = _a.onMoveToParentMessage, onMoveToParentMessage = _b === void 0 ? undefined : _b;\n    return !!onMoveToParentMessage;\n};\nvar showMenuItemReply = function (_a) {\n    var channel = _a.channel, message = _a.message, replyType = _a.replyType;\n    return isReplyTypeMessageEnabled({ channel: channel, message: message }) && replyType === 'QUOTE_REPLY';\n};\nvar showMenuItemThread = function (_a) {\n    var channel = _a.channel, message = _a.message, replyType = _a.replyType, onReplyInThread = _a.onReplyInThread;\n    return isReplyTypeMessageEnabled({ channel: channel, message: message }) && replyType === 'THREAD' && !(message === null || message === void 0 ? void 0 : message.parentMessageId) && typeof onReplyInThread === 'function';\n};\n\nvar MessageMenu = function (_a) {\n    var _b;\n    var className = _a.className, message = _a.message, channel = _a.channel, isByMe = _a.isByMe, replyType = _a.replyType, _c = _a.renderTrigger, renderTrigger = _c === void 0 ? TriggerIcon : _c, renderMenuItems = _a.renderMenuItems, _d = _a.disableDeleteMessage, disableDeleteMessage = _d === void 0 ? null : _d, _e = _a.showEdit, showEdit = _e === void 0 ? noop : _e, _f = _a.showRemove, showRemove = _f === void 0 ? noop : _f, deleteMessage = _a.deleteMessage, resendMessage = _a.resendMessage, setQuoteMessage = _a.setQuoteMessage, onReplyInThread = _a.onReplyInThread, onMoveToParentMessage = _a.onMoveToParentMessage;\n    var config = useSendbirdStateContext().config;\n    var isOnline = config.isOnline;\n    var triggerRef = useRef(null);\n    var containerRef = useRef(null);\n    var _g = useState(false), isMenuVisible = _g[0], setMenuVisibility = _g[1];\n    var hideMenu = function () { return setMenuVisibility(false); };\n    var showMenu = function () { return setMenuVisibility(true); };\n    var toggleMenu = function () { return setMenuVisibility(function (visible) { return !visible; }); };\n    var params = {\n        message: message,\n        channel: channel,\n        isByMe: isByMe,\n        replyType: replyType,\n        onReplyInThread: onReplyInThread,\n        onMoveToParentMessage: onMoveToParentMessage,\n    };\n    return (React__default.createElement(\"div\", { className: classnames('sendbird-message-menu', className), ref: containerRef },\n        React__default.createElement(MessageMenuProvider, { value: {\n                message: message,\n                hideMenu: hideMenu,\n                showMenu: showMenu,\n                toggleMenu: toggleMenu,\n                setQuoteMessage: setQuoteMessage,\n                onReplyInThread: onReplyInThread,\n                onMoveToParentMessage: onMoveToParentMessage,\n                showEdit: showEdit,\n                showRemove: showRemove,\n                deleteMessage: deleteMessage,\n                resendMessage: resendMessage,\n                isOnline: isOnline,\n                disableDeleteMessage: disableDeleteMessage,\n                triggerRef: triggerRef,\n                containerRef: containerRef,\n            } },\n            (renderTrigger({ ref: triggerRef, onClick: toggleMenu })),\n            isMenuVisible && (React__default.createElement(MenuItems, { id: getObservingId(message.messageId), parentRef: triggerRef, parentContainRef: containerRef, closeDropdown: hideMenu, openLeft: isByMe }, (_b = renderMenuItems === null || renderMenuItems === void 0 ? void 0 : renderMenuItems({\n                items: {\n                    CopyMenuItem: CopyMenuItem,\n                    ReplyMenuItem: ReplyMenuItem,\n                    ThreadMenuItem: ThreadMenuItem,\n                    OpenInChannelMenuItem: OpenInChannelMenuItem,\n                    EditMenuItem: EditMenuItem,\n                    ResendMenuItem: ResendMenuItem,\n                    DeleteMenuItem: DeleteMenuItem,\n                },\n            })) !== null && _b !== void 0 ? _b : (React__default.createElement(React__default.Fragment, null,\n                showMenuItemCopy(params) && React__default.createElement(CopyMenuItem, null),\n                showMenuItemReply(params) && React__default.createElement(ReplyMenuItem, null),\n                showMenuItemThread(params) && React__default.createElement(ThreadMenuItem, null),\n                showMenuItemOpenInChannel(params) && React__default.createElement(OpenInChannelMenuItem, null),\n                showMenuItemEdit(params) && React__default.createElement(EditMenuItem, null),\n                showMenuItemResend(params) && React__default.createElement(ResendMenuItem, null),\n                showMenuItemDelete(params) && React__default.createElement(DeleteMenuItem, null))))))));\n};\n\nexport { MessageMenu as M };\n//# sourceMappingURL=bundle-DkBecO3w.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}