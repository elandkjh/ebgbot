{"ast":null,"code":"import { _ as __assign, a as __awaiter, b as __generator } from '../../chunks/bundle-BQi9-O76.js';\nimport React__default from 'react';\nimport ChannelPreview from './ChannelPreview.js';\nimport { GroupChannelPreviewAction } from '../../GroupChannelList/components/GroupChannelPreviewAction.js';\nimport { u as useChannelListContext, S as SET_CURRENT_CHANNEL, L as LEAVE_CHANNEL_SUCCESS } from '../../chunks/bundle-BeheAFz4.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport { G as GroupChannelListUIView } from '../../chunks/bundle-CRcPMrRq.js';\nimport { AddChannel } from './AddChannel.js';\nimport { n as noop } from '../../chunks/bundle-BgwzpLeQ.js';\nimport '../../chunks/bundle-cQZ3UZoG.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../chunks/bundle-vuBlPTsL.js';\nimport '../../chunks/bundle-CAdqcqOm.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../ui/Icon.js';\nimport '../../chunks/bundle-DhKQeIfP.js';\nimport '../../ui/Loader.js';\nimport '../../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-BHK1eF5R.js';\nimport '../../chunks/bundle-F5koPk19.js';\nimport '../../chunks/bundle-C3GXmMjX.js';\nimport '../../chunks/bundle-AfQS5DGf.js';\nimport '../../chunks/bundle-f-SpnOx2.js';\nimport '../../GroupChannel/components/TypingIndicator.js';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '../../ui/Badge.js';\nimport '../../ui/ChannelAvatar.js';\nimport '../../chunks/bundle-CFosTNce.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../chunks/bundle-GMlM2rlV.js';\nimport '../../ui/MentionUserLabel.js';\nimport '../../chunks/bundle-0nQK2G2O.js';\nimport '../../chunks/bundle-CXdo2kR_.js';\nimport 'react-dom';\nimport '../../ui/IconButton.js';\nimport '../../ui/Button.js';\nimport '@sendbird/uikit-tools';\nimport '../../withSendbird.js';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport '../../ui/SortByRow.js';\nimport '../../ui/TextButton.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nimport '../../chunks/bundle-b6TpX_JP.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '../../chunks/bundle-H8J7tAed.js';\nimport '../../GroupChannelList/components/GroupChannelListHeader.js';\nimport '../../ui/Header.js';\nimport '../../EditUserProfile.js';\nimport '../../EditUserProfile/context.js';\nimport '../../EditUserProfile/components/EditUserProfileUI.js';\nimport '../../chunks/bundle-B7BfObV1.js';\nimport '../../ui/Input.js';\nimport '../../ui/PlaceHolder.js';\nimport '../../chunks/bundle-DvsVgg5f.js';\nimport '../../chunks/bundle-CMLImr6T.js';\nimport '@sendbird/chat/message';\nimport '../../chunks/bundle-DSn10d8F.js';\nimport '../../chunks/bundle-Ba2Z_B16.js';\nimport '../../CreateChannel.js';\nimport '../../CreateChannel/components/CreateChannelUI.js';\nimport '../../chunks/bundle-CBUfFuFR.js';\nimport '../../sendbirdSelectors.js';\nimport '../../CreateChannel/components/InviteUsers.js';\nimport '../../ui/UserListItem.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/Checkbox.js';\nimport '../../ui/UserProfile.js';\nimport '../../CreateChannel/components/SelectChannelType.js';\nvar ChannelListUI = function (props) {\n  var renderHeader = props.renderHeader,\n    renderChannelPreview = props.renderChannelPreview,\n    renderPlaceHolderError = props.renderPlaceHolderError,\n    renderPlaceHolderLoading = props.renderPlaceHolderLoading,\n    renderPlaceHolderEmptyList = props.renderPlaceHolderEmptyList;\n  var _a = useChannelListContext(),\n    onThemeChange = _a.onThemeChange,\n    allowProfileEdit = _a.allowProfileEdit,\n    allChannels = _a.allChannels,\n    currentChannel = _a.currentChannel,\n    channelListDispatcher = _a.channelListDispatcher,\n    typingChannels = _a.typingChannels,\n    initialized = _a.initialized,\n    fetchChannelList = _a.fetchChannelList,\n    onProfileEditSuccess = _a.onProfileEditSuccess;\n  var _b = useSendbirdStateContext(),\n    stores = _b.stores,\n    config = _b.config;\n  var logger = config.logger,\n    _c = config.isOnline,\n    isOnline = _c === void 0 ? false : _c;\n  var sdk = stores.sdkStore.sdk;\n  var renderListItem = function (props) {\n    var channel = props.item,\n      index = props.index;\n    var previewProps = {\n      channel: channel,\n      tabIndex: index,\n      isSelected: (channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url),\n      isTyping: typingChannels === null || typingChannels === void 0 ? void 0 : typingChannels.some(function (_a) {\n        var url = _a.url;\n        return url === (channel === null || channel === void 0 ? void 0 : channel.url);\n      }),\n      renderChannelAction: function (props) {\n        return React__default.createElement(GroupChannelPreviewAction, __assign({}, props));\n      },\n      onClick: function () {\n        if (!isOnline && !(sdk === null || sdk === void 0 ? void 0 : sdk.isCacheEnabled)) {\n          logger.warning('ChannelList: Inactivated clicking channel item during offline.');\n          return;\n        }\n        logger.info('ChannelList: Clicked on channel:', channel);\n        channelListDispatcher({\n          type: SET_CURRENT_CHANNEL,\n          payload: channel\n        });\n      },\n      onLeaveChannel: function (channel, cb) {\n        return __awaiter(this, void 0, void 0, function () {\n          var response, err_1;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                logger.info('ChannelList: Leaving channel', channel);\n                if (!channel) return [3 /*break*/, 4];\n                _a.label = 1;\n              case 1:\n                _a.trys.push([1, 3,, 4]);\n                return [4 /*yield*/, channel.leave()];\n              case 2:\n                response = _a.sent();\n                logger.info('ChannelList: Leaving channel success', response);\n                if (cb && typeof cb === 'function') cb(channel, null);\n                channelListDispatcher({\n                  type: LEAVE_CHANNEL_SUCCESS,\n                  payload: channel.url\n                });\n                return [3 /*break*/, 4];\n              case 3:\n                err_1 = _a.sent();\n                logger.error('ChannelList: Leaving channel failed', err_1);\n                if (cb && typeof cb === 'function') cb(channel, err_1);\n                return [3 /*break*/, 4];\n              case 4:\n                return [2 /*return*/];\n            }\n          });\n        });\n      }\n    };\n    if (renderChannelPreview) {\n      return React__default.createElement(\"div\", {\n        key: channel === null || channel === void 0 ? void 0 : channel.url,\n        onClick: previewProps.onClick\n      }, renderChannelPreview(previewProps));\n    }\n    return React__default.createElement(ChannelPreview, __assign({\n      key: channel === null || channel === void 0 ? void 0 : channel.url\n    }, previewProps));\n  };\n  return React__default.createElement(GroupChannelListUIView, {\n    renderHeader: renderHeader,\n    renderChannel: renderListItem,\n    renderPlaceHolderError: renderPlaceHolderError,\n    renderPlaceHolderLoading: renderPlaceHolderLoading,\n    renderPlaceHolderEmptyList: renderPlaceHolderEmptyList,\n    onChangeTheme: onThemeChange !== null && onThemeChange !== void 0 ? onThemeChange : noop,\n    allowProfileEdit: allowProfileEdit,\n    onUserProfileUpdated: onProfileEditSuccess !== null && onProfileEditSuccess !== void 0 ? onProfileEditSuccess : noop,\n    channels: allChannels,\n    onLoadMore: fetchChannelList,\n    initialized: initialized,\n    renderAddChannel: function () {\n      return React__default.createElement(AddChannel, null);\n    }\n  });\n};\nexport { ChannelListUI as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { _ as __assign, a as __awaiter, b as __generator } from '../../chunks/bundle-BQi9-O76.js';\nimport React__default from 'react';\nimport ChannelPreview from './ChannelPreview.js';\nimport { GroupChannelPreviewAction } from '../../GroupChannelList/components/GroupChannelPreviewAction.js';\nimport { u as useChannelListContext, S as SET_CURRENT_CHANNEL, L as LEAVE_CHANNEL_SUCCESS } from '../../chunks/bundle-BeheAFz4.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport { G as GroupChannelListUIView } from '../../chunks/bundle-CRcPMrRq.js';\nimport { AddChannel } from './AddChannel.js';\nimport { n as noop } from '../../chunks/bundle-BgwzpLeQ.js';\nimport '../../chunks/bundle-cQZ3UZoG.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../chunks/bundle-vuBlPTsL.js';\nimport '../../chunks/bundle-CAdqcqOm.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../ui/Icon.js';\nimport '../../chunks/bundle-DhKQeIfP.js';\nimport '../../ui/Loader.js';\nimport '../../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-BHK1eF5R.js';\nimport '../../chunks/bundle-F5koPk19.js';\nimport '../../chunks/bundle-C3GXmMjX.js';\nimport '../../chunks/bundle-AfQS5DGf.js';\nimport '../../chunks/bundle-f-SpnOx2.js';\nimport '../../GroupChannel/components/TypingIndicator.js';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '../../ui/Badge.js';\nimport '../../ui/ChannelAvatar.js';\nimport '../../chunks/bundle-CFosTNce.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../chunks/bundle-GMlM2rlV.js';\nimport '../../ui/MentionUserLabel.js';\nimport '../../chunks/bundle-0nQK2G2O.js';\nimport '../../chunks/bundle-CXdo2kR_.js';\nimport 'react-dom';\nimport '../../ui/IconButton.js';\nimport '../../ui/Button.js';\nimport '@sendbird/uikit-tools';\nimport '../../withSendbird.js';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport '../../ui/SortByRow.js';\nimport '../../ui/TextButton.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nimport '../../chunks/bundle-b6TpX_JP.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '../../chunks/bundle-H8J7tAed.js';\nimport '../../GroupChannelList/components/GroupChannelListHeader.js';\nimport '../../ui/Header.js';\nimport '../../EditUserProfile.js';\nimport '../../EditUserProfile/context.js';\nimport '../../EditUserProfile/components/EditUserProfileUI.js';\nimport '../../chunks/bundle-B7BfObV1.js';\nimport '../../ui/Input.js';\nimport '../../ui/PlaceHolder.js';\nimport '../../chunks/bundle-DvsVgg5f.js';\nimport '../../chunks/bundle-CMLImr6T.js';\nimport '@sendbird/chat/message';\nimport '../../chunks/bundle-DSn10d8F.js';\nimport '../../chunks/bundle-Ba2Z_B16.js';\nimport '../../CreateChannel.js';\nimport '../../CreateChannel/components/CreateChannelUI.js';\nimport '../../chunks/bundle-CBUfFuFR.js';\nimport '../../sendbirdSelectors.js';\nimport '../../CreateChannel/components/InviteUsers.js';\nimport '../../ui/UserListItem.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/Checkbox.js';\nimport '../../ui/UserProfile.js';\nimport '../../CreateChannel/components/SelectChannelType.js';\n\nvar ChannelListUI = function (props) {\n    var renderHeader = props.renderHeader, renderChannelPreview = props.renderChannelPreview, renderPlaceHolderError = props.renderPlaceHolderError, renderPlaceHolderLoading = props.renderPlaceHolderLoading, renderPlaceHolderEmptyList = props.renderPlaceHolderEmptyList;\n    var _a = useChannelListContext(), onThemeChange = _a.onThemeChange, allowProfileEdit = _a.allowProfileEdit, allChannels = _a.allChannels, currentChannel = _a.currentChannel, channelListDispatcher = _a.channelListDispatcher, typingChannels = _a.typingChannels, initialized = _a.initialized, fetchChannelList = _a.fetchChannelList, onProfileEditSuccess = _a.onProfileEditSuccess;\n    var _b = useSendbirdStateContext(), stores = _b.stores, config = _b.config;\n    var logger = config.logger, _c = config.isOnline, isOnline = _c === void 0 ? false : _c;\n    var sdk = stores.sdkStore.sdk;\n    var renderListItem = function (props) {\n        var channel = props.item, index = props.index;\n        var previewProps = {\n            channel: channel,\n            tabIndex: index,\n            isSelected: (channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url),\n            isTyping: typingChannels === null || typingChannels === void 0 ? void 0 : typingChannels.some(function (_a) {\n                var url = _a.url;\n                return url === (channel === null || channel === void 0 ? void 0 : channel.url);\n            }),\n            renderChannelAction: function (props) { return React__default.createElement(GroupChannelPreviewAction, __assign({}, props)); },\n            onClick: function () {\n                if (!isOnline && !(sdk === null || sdk === void 0 ? void 0 : sdk.isCacheEnabled)) {\n                    logger.warning('ChannelList: Inactivated clicking channel item during offline.');\n                    return;\n                }\n                logger.info('ChannelList: Clicked on channel:', channel);\n                channelListDispatcher({\n                    type: SET_CURRENT_CHANNEL,\n                    payload: channel,\n                });\n            },\n            onLeaveChannel: function (channel, cb) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var response, err_1;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                logger.info('ChannelList: Leaving channel', channel);\n                                if (!channel) return [3 /*break*/, 4];\n                                _a.label = 1;\n                            case 1:\n                                _a.trys.push([1, 3, , 4]);\n                                return [4 /*yield*/, channel.leave()];\n                            case 2:\n                                response = _a.sent();\n                                logger.info('ChannelList: Leaving channel success', response);\n                                if (cb && typeof cb === 'function')\n                                    cb(channel, null);\n                                channelListDispatcher({\n                                    type: LEAVE_CHANNEL_SUCCESS,\n                                    payload: channel.url,\n                                });\n                                return [3 /*break*/, 4];\n                            case 3:\n                                err_1 = _a.sent();\n                                logger.error('ChannelList: Leaving channel failed', err_1);\n                                if (cb && typeof cb === 'function')\n                                    cb(channel, err_1);\n                                return [3 /*break*/, 4];\n                            case 4: return [2 /*return*/];\n                        }\n                    });\n                });\n            },\n        };\n        if (renderChannelPreview) {\n            return (React__default.createElement(\"div\", { key: channel === null || channel === void 0 ? void 0 : channel.url, onClick: previewProps.onClick }, renderChannelPreview(previewProps)));\n        }\n        return React__default.createElement(ChannelPreview, __assign({ key: channel === null || channel === void 0 ? void 0 : channel.url }, previewProps));\n    };\n    return (React__default.createElement(GroupChannelListUIView, { renderHeader: renderHeader, renderChannel: renderListItem, renderPlaceHolderError: renderPlaceHolderError, renderPlaceHolderLoading: renderPlaceHolderLoading, renderPlaceHolderEmptyList: renderPlaceHolderEmptyList, onChangeTheme: onThemeChange !== null && onThemeChange !== void 0 ? onThemeChange : noop, allowProfileEdit: allowProfileEdit, onUserProfileUpdated: onProfileEditSuccess !== null && onProfileEditSuccess !== void 0 ? onProfileEditSuccess : noop, channels: allChannels, onLoadMore: fetchChannelList, initialized: initialized, renderAddChannel: function () { return React__default.createElement(AddChannel, null); } }));\n};\n\nexport { ChannelListUI as default };\n//# sourceMappingURL=ChannelListUI.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}