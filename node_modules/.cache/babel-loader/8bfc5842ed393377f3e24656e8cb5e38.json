{"ast":null,"code":"import React__default from 'react';\nimport { K } from './bundle-DxTN4_0p.js';\nimport { T as TOKEN_TYPES, a as tokenizeMarkdown, U as USER_MENTION_PREFIX, g as getWhiteSpacePreservedText } from './bundle-GUbI4JcD.js';\nimport { useMessageContext } from '../Message/context.js';\nimport MentionLabel from '../ui/MentionLabel.js';\nimport LinkLabel from '../ui/LinkLabel.js';\nimport { a as LabelTypography, b as LabelColors } from './bundle-DhKQeIfP.js';\n\n// this function is used to generate a unique key for token in message\n// it changes with updated time and index\n// messageUpdatedAt is the key part of this key generator\nfunction keyGenerator(createdAt, messageUpdatedAt, index) {\n  return \"sb-msg_\".concat(createdAt, \"_\").concat(messageUpdatedAt, \"_\").concat(index);\n}\nfunction asSafeURL(url) {\n  var safeURL = decodeURIComponent(url);\n  try {\n    var protocol_1 = new URL(safeURL).protocol;\n    if (['https:', 'http:'].some(function (it) {\n      return it === protocol_1.toLowerCase();\n    })) {\n      return safeURL;\n    } else {\n      return '#';\n    }\n  } catch (error) {\n    if (!safeURL.startsWith('http://') && !safeURL.startsWith('https://')) {\n      safeURL = 'https://' + safeURL;\n    }\n  }\n  return safeURL;\n}\nfunction TextFragment(_a) {\n  var tokens = _a.tokens;\n  var messageStore = useMessageContext();\n  var message = messageStore === null || messageStore === void 0 ? void 0 : messageStore.message;\n  var isByMe = messageStore === null || messageStore === void 0 ? void 0 : messageStore.isByMe;\n  var updatedAt = message.updatedAt,\n    createdAt = message.createdAt;\n  return React__default.createElement(React__default.Fragment, null, tokens === null || tokens === void 0 ? void 0 : tokens.map(function (token, idx) {\n    var key = keyGenerator(createdAt, updatedAt, idx);\n    return K(token.type).with(TOKEN_TYPES.markdown, function () {\n      var markdownToken = token;\n      var groups = markdownToken.groups;\n      return React__default.createElement(\"span\", {\n        className: \"sendbird-word\",\n        key: key,\n        \"data-testid\": \"sendbird-ui-word\"\n      }, K(markdownToken.markdownType).with('bold', function () {\n        return React__default.createElement(\"span\", {\n          style: {\n            fontWeight: 'bold'\n          }\n        }, React__default.createElement(TextFragment, {\n          tokens: tokenizeMarkdown({\n            messageText: groups[1]\n          })\n        }));\n      }).with('url', function () {\n        return React__default.createElement(\"a\", {\n          className: isByMe ? 'sendbird-label--color-oncontent-1' : 'sendbird-label--color-onbackground-1',\n          href: asSafeURL(groups[2])\n        }, React__default.createElement(TextFragment, {\n          tokens: tokenizeMarkdown({\n            messageText: groups[1]\n          })\n        }));\n      }).otherwise(function () {\n        return React__default.createElement(React__default.Fragment, null);\n      }));\n    }).with(TOKEN_TYPES.mention, function () {\n      return React__default.createElement(\"span\", {\n        className: \"sendbird-word\",\n        key: key,\n        \"data-testid\": \"sendbird-ui-word\"\n      }, React__default.createElement(MentionLabel, {\n        mentionTemplate: USER_MENTION_PREFIX,\n        // @ts-ignore\n        mentionedUserId: token.userId,\n        mentionedUserNickname: token.value,\n        isByMe: isByMe\n      }));\n    }).with(TOKEN_TYPES.url, function () {\n      return React__default.createElement(\"span\", {\n        className: \"sendbird-word\",\n        key: key,\n        \"data-testid\": \"sendbird-ui-word\"\n      }, React__default.createElement(LinkLabel, {\n        src: token.value,\n        type: LabelTypography.BODY_1,\n        color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1\n      }, token.value));\n    }).otherwise(function () {\n      return React__default.createElement(React__default.Fragment, {\n        key: key\n      }, getWhiteSpacePreservedText(token.value));\n    });\n  }));\n}\nexport { TextFragment as T };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default from 'react';\nimport { K } from './bundle-DxTN4_0p.js';\nimport { T as TOKEN_TYPES, a as tokenizeMarkdown, U as USER_MENTION_PREFIX, g as getWhiteSpacePreservedText } from './bundle-GUbI4JcD.js';\nimport { useMessageContext } from '../Message/context.js';\nimport MentionLabel from '../ui/MentionLabel.js';\nimport LinkLabel from '../ui/LinkLabel.js';\nimport { a as LabelTypography, b as LabelColors } from './bundle-DhKQeIfP.js';\n\n// this function is used to generate a unique key for token in message\n// it changes with updated time and index\n// messageUpdatedAt is the key part of this key generator\nfunction keyGenerator(createdAt, messageUpdatedAt, index) {\n    return \"sb-msg_\".concat(createdAt, \"_\").concat(messageUpdatedAt, \"_\").concat(index);\n}\n\nfunction asSafeURL(url) {\n    var safeURL = decodeURIComponent(url);\n    try {\n        var protocol_1 = new URL(safeURL).protocol;\n        if (['https:', 'http:'].some(function (it) { return it === protocol_1.toLowerCase(); })) {\n            return safeURL;\n        }\n        else {\n            return '#';\n        }\n    }\n    catch (error) {\n        if (!safeURL.startsWith('http://') && !safeURL.startsWith('https://')) {\n            safeURL = 'https://' + safeURL;\n        }\n    }\n    return safeURL;\n}\n\nfunction TextFragment(_a) {\n    var tokens = _a.tokens;\n    var messageStore = useMessageContext();\n    var message = messageStore === null || messageStore === void 0 ? void 0 : messageStore.message;\n    var isByMe = messageStore === null || messageStore === void 0 ? void 0 : messageStore.isByMe;\n    var updatedAt = message.updatedAt, createdAt = message.createdAt;\n    return (React__default.createElement(React__default.Fragment, null, tokens === null || tokens === void 0 ? void 0 : tokens.map(function (token, idx) {\n        var key = keyGenerator(createdAt, updatedAt, idx);\n        return K(token.type)\n            .with(TOKEN_TYPES.markdown, function () {\n            var markdownToken = token;\n            var groups = markdownToken.groups;\n            return React__default.createElement(\"span\", { className: \"sendbird-word\", key: key, \"data-testid\": \"sendbird-ui-word\" }, K(markdownToken.markdownType)\n                .with('bold', function () { return (React__default.createElement(\"span\", { style: { fontWeight: 'bold' } },\n                React__default.createElement(TextFragment, { tokens: tokenizeMarkdown({ messageText: groups[1] }) }))); })\n                .with('url', function () {\n                return (React__default.createElement(\"a\", { className: isByMe\n                        ? 'sendbird-label--color-oncontent-1'\n                        : 'sendbird-label--color-onbackground-1', href: asSafeURL(groups[2]) },\n                    React__default.createElement(TextFragment, { tokens: tokenizeMarkdown({ messageText: groups[1] }) })));\n            })\n                .otherwise(function () { return React__default.createElement(React__default.Fragment, null); }));\n        })\n            .with(TOKEN_TYPES.mention, function () { return (React__default.createElement(\"span\", { className: \"sendbird-word\", key: key, \"data-testid\": \"sendbird-ui-word\" },\n            React__default.createElement(MentionLabel, { mentionTemplate: USER_MENTION_PREFIX, \n                // @ts-ignore\n                mentionedUserId: token.userId, mentionedUserNickname: token.value, isByMe: isByMe }))); })\n            .with(TOKEN_TYPES.url, function () { return (React__default.createElement(\"span\", { className: \"sendbird-word\", key: key, \"data-testid\": \"sendbird-ui-word\" },\n            React__default.createElement(LinkLabel, { src: token.value, type: LabelTypography.BODY_1, color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1 }, token.value))); })\n            .otherwise(function () { return React__default.createElement(React__default.Fragment, { key: key }, getWhiteSpacePreservedText(token.value)); });\n    })));\n}\n\nexport { TextFragment as T };\n//# sourceMappingURL=bundle-DofK8ySe.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}