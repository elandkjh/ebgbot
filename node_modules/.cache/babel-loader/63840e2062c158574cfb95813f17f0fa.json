{"ast":null,"code":"import { _ as __assign } from '../chunks/bundle-BQi9-O76.js';\nimport React__default, { useState } from 'react';\nimport { l as isUserMessage, A as copyToClipboard, v as isFailedMessage, q as isSentMessage, u as isPendingMessage, b as isFileMessage, i as isVoiceMessage, R as isThreadMessage, x as getEmojiListAll } from '../chunks/bundle-DxTN4_0p.js';\nimport { n as noop, c as classnames } from '../chunks/bundle-BgwzpLeQ.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { u as useMessageMenuContext, a as MenuItem, M as MessageMenuProvider, b as MenuItems, B as BottomSheetMenuItem } from '../chunks/bundle-CwKZj-B6.js';\nimport './IconButton.js';\nimport { u as useLocalization } from '../chunks/bundle-cQZ3UZoG.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../chunks/bundle-DhKQeIfP.js';\nimport '@sendbird/chat';\nimport Icon, { IconTypes, IconColors } from './Icon.js';\nimport BottomSheet from './BottomSheet.js';\nimport ImageRenderer from './ImageRenderer.js';\nimport ReactionButton from './ReactionButton.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CNWAfTVw.js';\nimport '../chunks/bundle-CA85nVxp.js';\nimport '../withSendbird.js';\nimport 'react-dom';\nimport '@sendbird/chat/openChannel';\nimport './SortByRow.js';\nimport '../chunks/bundle-etuaqevl.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport '../chunks/bundle-CXdo2kR_.js';\nimport '../chunks/bundle-f-SpnOx2.js';\nimport './Button.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '../chunks/bundle-DDeWOERD.js';\nimport '../chunks/bundle-DCMGp6rH.js';\nimport '../chunks/bundle-AfQS5DGf.js';\nvar CopyMenuItem$1 = function (props) {\n  var _a;\n  var stringSet = useLocalization().stringSet;\n  var _b = useMessageMenuContext(),\n    message = _b.message,\n    hideMenu = _b.hideMenu;\n  return React__default.createElement(MenuItem, __assign({}, props, {\n    onClick: function (e) {\n      var _a;\n      if (isUserMessage(message)) copyToClipboard(message.message);\n      hideMenu();\n      (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    }\n  }), (_a = props.children) !== null && _a !== void 0 ? _a : React__default.createElement(React__default.Fragment, null, React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MESSAGE_MENU__COPY), React__default.createElement(Icon, {\n    type: IconTypes.COPY,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  })));\n};\nvar ReplyMenuItem$1 = function (props) {\n  var _a, _b, _c;\n  var stringSet = useLocalization().stringSet;\n  var _d = useMessageMenuContext(),\n    message = _d.message,\n    hideMenu = _d.hideMenu,\n    setQuoteMessage = _d.setQuoteMessage;\n  return React__default.createElement(MenuItem, __assign({}, props, {\n    disabled: message.parentMessageId > 0,\n    onClick: function (e) {\n      var _a;\n      setQuoteMessage(message);\n      hideMenu();\n      (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    }\n  }), (_a = props.children) !== null && _a !== void 0 ? _a : React__default.createElement(React__default.Fragment, null, React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: ((_b = message.parentMessageId) !== null && _b !== void 0 ? _b : 0) > 0 ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1\n  }, stringSet.MESSAGE_MENU__REPLY), React__default.createElement(Icon, {\n    type: IconTypes.REPLY,\n    fillColor: ((_c = message.parentMessageId) !== null && _c !== void 0 ? _c : 0) > 0 ? IconColors.ON_BACKGROUND_4 : IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  })));\n};\nvar ThreadMenuItem$1 = function (props) {\n  var _a;\n  var stringSet = useLocalization().stringSet;\n  var _b = useMessageMenuContext(),\n    message = _b.message,\n    hideMenu = _b.hideMenu,\n    onReplyInThread = _b.onReplyInThread;\n  return React__default.createElement(MenuItem, __assign({}, props, {\n    onClick: function (e) {\n      var _a;\n      onReplyInThread({\n        message: message\n      });\n      hideMenu();\n      (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    }\n  }), (_a = props.children) !== null && _a !== void 0 ? _a : React__default.createElement(React__default.Fragment, null, React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MESSAGE_MENU__THREAD), React__default.createElement(Icon, {\n    type: IconTypes.THREAD,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  })));\n};\nvar EditMenuItem$1 = function (props) {\n  var _a;\n  var stringSet = useLocalization().stringSet;\n  var _b = useMessageMenuContext(),\n    hideMenu = _b.hideMenu,\n    showEdit = _b.showEdit,\n    isOnline = _b.isOnline;\n  return React__default.createElement(MenuItem, __assign({}, props, {\n    onClick: function (e) {\n      var _a;\n      if (isOnline) {\n        showEdit(true);\n        hideMenu();\n        (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n      }\n    }\n  }), (_a = props.children) !== null && _a !== void 0 ? _a : React__default.createElement(React__default.Fragment, null, React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MESSAGE_MENU__EDIT), React__default.createElement(Icon, {\n    type: IconTypes.EDIT,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  })));\n};\nvar ResendMenuItem$1 = function (props) {\n  var _a;\n  var stringSet = useLocalization().stringSet;\n  var _b = useMessageMenuContext(),\n    message = _b.message,\n    hideMenu = _b.hideMenu,\n    resendMessage = _b.resendMessage,\n    isOnline = _b.isOnline;\n  return React__default.createElement(MenuItem, __assign({}, props, {\n    onClick: function (e) {\n      var _a;\n      if (isOnline) {\n        resendMessage(message);\n        hideMenu();\n        (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n      }\n    }\n  }), (_a = props.children) !== null && _a !== void 0 ? _a : React__default.createElement(React__default.Fragment, null, React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MESSAGE_MENU__RESEND), React__default.createElement(Icon, {\n    type: IconTypes.REFRESH,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  })));\n};\nvar DeleteMenuItem$1 = function (props) {\n  var _a, _b, _c;\n  var stringSet = useLocalization().stringSet;\n  var _d = useMessageMenuContext(),\n    message = _d.message,\n    hideMenu = _d.hideMenu,\n    deleteMessage = _d.deleteMessage,\n    showRemove = _d.showRemove,\n    isOnline = _d.isOnline,\n    disableDeleteMessage = _d.disableDeleteMessage;\n  return React__default.createElement(MenuItem, __assign({}, props, {\n    disabled: typeof disableDeleteMessage === 'boolean' ? disableDeleteMessage : ((_b = (_a = message.threadInfo) === null || _a === void 0 ? void 0 : _a.replyCount) !== null && _b !== void 0 ? _b : 0) > 0,\n    onClick: function (e) {\n      var _a;\n      if (isFailedMessage(message)) {\n        deleteMessage(message);\n      } else if (isOnline) {\n        showRemove(true);\n        hideMenu();\n        (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n      }\n    }\n  }), (_c = props.children) !== null && _c !== void 0 ? _c : React__default.createElement(React__default.Fragment, null, React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: disableDeleteMessage ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1\n  }, stringSet.MESSAGE_MENU__DELETE), React__default.createElement(Icon, {\n    type: IconTypes.DELETE,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  })));\n};\nvar DownloadMenuItem$1 = function (props) {\n  var _a;\n  var stringSet = useLocalization().stringSet;\n  var _b = useMessageMenuContext(),\n    hideMenu = _b.hideMenu,\n    message = _b.message,\n    onDownloadClick = _b.onDownloadClick;\n  var url = message.url;\n  return React__default.createElement(MenuItem, __assign({}, props, {\n    onClick: function () {\n      hideMenu();\n    }\n  }), (_a = props.children) !== null && _a !== void 0 ? _a : React__default.createElement(\"a\", {\n    className: \"sendbird-message__contextmenu--hyperlink\",\n    rel: \"noopener noreferrer\",\n    href: url,\n    target: \"_blank\",\n    onClick: onDownloadClick\n  }, React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MESSAGE_MENU__SAVE), React__default.createElement(Icon, {\n    type: IconTypes.DOWNLOAD,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  })));\n};\nvar MobileContextMenu = function (props) {\n  var _a, _b, _c, _d;\n  var channel = props.channel,\n    message = props.message,\n    replyType = props.replyType,\n    userId = props.userId,\n    resendMessage = props.resendMessage,\n    showEdit = props.showEdit,\n    showRemove = props.showRemove,\n    deleteMenuState = props.deleteMenuState,\n    deleteMessage = props.deleteMessage,\n    setQuoteMessage = props.setQuoteMessage,\n    parentRef = props.parentRef,\n    onReplyInThread = props.onReplyInThread,\n    _e = props.isOpenedFromThread,\n    isOpenedFromThread = _e === void 0 ? false : _e,\n    _f = props.onDownloadClick,\n    onDownloadClick = _f === void 0 ? null : _f,\n    renderMenuItems = props.renderMenuItems,\n    hideMobileMenu = props.hideMenu;\n  var isByMe = ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId) === userId;\n  var config = useSendbirdStateContext().config;\n  var isOnline = config.isOnline;\n  // Menu Items condition\n  var showMenuItemCopy = isUserMessage(message);\n  var showMenuItemEdit = isUserMessage(message) && isSentMessage(message) && isByMe;\n  var showMenuItemResend = isFailedMessage(message) && (message === null || message === void 0 ? void 0 : message.isResendable) && isByMe;\n  var showMenuItemDelete = !isPendingMessage(message) && isByMe;\n  var showMenuItemDeleteByState = isByMe && (deleteMenuState === undefined || deleteMenuState !== 'HIDE');\n  var showMenuItemDeleteFinal = showMenuItemDeleteByState && showMenuItemDelete;\n  var showMenuItemDownload = !isPendingMessage(message) && isFileMessage(message) && !(isVoiceMessage(message) && (channel === null || channel === void 0 ? void 0 : channel.isSuper) || (channel === null || channel === void 0 ? void 0 : channel.isBroadcast));\n  var showMenuItemReply = replyType === 'QUOTE_REPLY' && !isFailedMessage(message) && !isPendingMessage(message) && (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel());\n  var showMenuItemThread = replyType === 'THREAD' && !isOpenedFromThread && !isFailedMessage(message) && !isPendingMessage(message) && !isThreadMessage(message) && (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel());\n  var disableDeleteMessage = deleteMenuState !== undefined && deleteMenuState === 'DISABLE' || ((_c = (_b = message === null || message === void 0 ? void 0 : message.threadInfo) === null || _b === void 0 ? void 0 : _b.replyCount) !== null && _c !== void 0 ? _c : 0) > 0;\n  var contextValue = {\n    message: message,\n    hideMenu: hideMobileMenu,\n    setQuoteMessage: setQuoteMessage,\n    onReplyInThread: onReplyInThread,\n    onMoveToParentMessage: noop,\n    showEdit: showEdit,\n    showRemove: showRemove,\n    deleteMessage: deleteMessage,\n    resendMessage: resendMessage,\n    isOnline: isOnline,\n    disableDeleteMessage: disableDeleteMessage,\n    triggerRef: parentRef,\n    containerRef: parentRef,\n    onDownloadClick: onDownloadClick\n  };\n  return React__default.createElement(MessageMenuProvider, {\n    value: contextValue\n  }, React__default.createElement(MenuItems, {\n    className: \"sendbird-message__mobile-context-menu\",\n    parentRef: parentRef,\n    parentContainRef: parentRef,\n    closeDropdown: hideMobileMenu\n  }, (_d = renderMenuItems === null || renderMenuItems === void 0 ? void 0 : renderMenuItems({\n    items: {\n      CopyMenuItem: CopyMenuItem$1,\n      ReplyMenuItem: ReplyMenuItem$1,\n      ThreadMenuItem: ThreadMenuItem$1,\n      EditMenuItem: EditMenuItem$1,\n      ResendMenuItem: ResendMenuItem$1,\n      DeleteMenuItem: DeleteMenuItem$1\n    }\n  })) !== null && _d !== void 0 ? _d : React__default.createElement(React__default.Fragment, null, showMenuItemCopy && React__default.createElement(CopyMenuItem$1, null), showMenuItemReply && React__default.createElement(ReplyMenuItem$1, null), showMenuItemThread && React__default.createElement(ThreadMenuItem$1, null), showMenuItemEdit && React__default.createElement(EditMenuItem$1, null), showMenuItemResend && React__default.createElement(ResendMenuItem$1, null), showMenuItemDeleteFinal && React__default.createElement(DeleteMenuItem$1, null), showMenuItemDownload && React__default.createElement(DownloadMenuItem$1, null))));\n};\nvar CopyMenuItem = function (props) {\n  var _a;\n  var stringSet = useLocalization().stringSet;\n  var _b = useMessageMenuContext(),\n    message = _b.message,\n    hideMenu = _b.hideMenu;\n  return React__default.createElement(BottomSheetMenuItem, __assign({}, props, {\n    onClick: function (e) {\n      var _a;\n      if (isUserMessage(message)) copyToClipboard(message.message);\n      hideMenu();\n      (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    }\n  }), (_a = props.children) !== null && _a !== void 0 ? _a : React__default.createElement(React__default.Fragment, null, React__default.createElement(Icon, {\n    type: IconTypes.COPY,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  }), React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MESSAGE_MENU__COPY)));\n};\nvar EditMenuItem = function (props) {\n  var _a;\n  var stringSet = useLocalization().stringSet;\n  var _b = useMessageMenuContext(),\n    hideMenu = _b.hideMenu,\n    showEdit = _b.showEdit,\n    isOnline = _b.isOnline;\n  return React__default.createElement(BottomSheetMenuItem, __assign({}, props, {\n    onClick: function (e) {\n      var _a;\n      if (isOnline) {\n        showEdit(true);\n        hideMenu();\n        (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n      }\n    }\n  }), (_a = props.children) !== null && _a !== void 0 ? _a : React__default.createElement(React__default.Fragment, null, React__default.createElement(Icon, {\n    type: IconTypes.EDIT,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  }), React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MESSAGE_MENU__EDIT)));\n};\nvar ResendMenuItem = function (props) {\n  var _a;\n  var stringSet = useLocalization().stringSet;\n  var _b = useMessageMenuContext(),\n    message = _b.message,\n    hideMenu = _b.hideMenu,\n    resendMessage = _b.resendMessage,\n    isOnline = _b.isOnline;\n  return React__default.createElement(BottomSheetMenuItem, __assign({}, props, {\n    onClick: function (e) {\n      var _a;\n      if (isOnline) {\n        resendMessage(message);\n        hideMenu();\n        (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n      }\n    }\n  }), (_a = props.children) !== null && _a !== void 0 ? _a : React__default.createElement(React__default.Fragment, null, React__default.createElement(Icon, {\n    type: IconTypes.REFRESH,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  }), React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MESSAGE_MENU__RESEND)));\n};\nvar ReplyMenuItem = function (props) {\n  var _a, _b, _c;\n  var stringSet = useLocalization().stringSet;\n  var _d = useMessageMenuContext(),\n    message = _d.message,\n    hideMenu = _d.hideMenu,\n    setQuoteMessage = _d.setQuoteMessage;\n  return React__default.createElement(BottomSheetMenuItem, __assign({}, props, {\n    disabled: message.parentMessageId > 0,\n    onClick: function (e) {\n      var _a;\n      setQuoteMessage(message);\n      hideMenu();\n      (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    }\n  }), (_a = props.children) !== null && _a !== void 0 ? _a : React__default.createElement(React__default.Fragment, null, React__default.createElement(Icon, {\n    type: IconTypes.REPLY,\n    fillColor: ((_b = message.parentMessageId) !== null && _b !== void 0 ? _b : 0) > 0 ? IconColors.ON_BACKGROUND_3 : IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  }), React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: ((_c = message.parentMessageId) !== null && _c !== void 0 ? _c : 0) > 0 ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1\n  }, stringSet.MESSAGE_MENU__REPLY)));\n};\nvar ThreadMenuItem = function (props) {\n  var _a;\n  var stringSet = useLocalization().stringSet;\n  var _b = useMessageMenuContext(),\n    message = _b.message,\n    hideMenu = _b.hideMenu,\n    onReplyInThread = _b.onReplyInThread;\n  return React__default.createElement(BottomSheetMenuItem, __assign({}, props, {\n    onClick: function (e) {\n      var _a;\n      onReplyInThread({\n        message: message\n      });\n      hideMenu();\n      (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    }\n  }), (_a = props.children) !== null && _a !== void 0 ? _a : React__default.createElement(React__default.Fragment, null, React__default.createElement(Icon, {\n    type: IconTypes.THREAD,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  }), React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MESSAGE_MENU__THREAD)));\n};\nvar DeleteMenuItem = function (props) {\n  var _a, _b, _c;\n  var stringSet = useLocalization().stringSet;\n  var _d = useMessageMenuContext(),\n    message = _d.message,\n    hideMenu = _d.hideMenu,\n    deleteMessage = _d.deleteMessage,\n    showRemove = _d.showRemove,\n    isOnline = _d.isOnline,\n    disableDeleteMessage = _d.disableDeleteMessage;\n  return React__default.createElement(BottomSheetMenuItem, __assign({}, props, {\n    disabled: typeof disableDeleteMessage === 'boolean' ? disableDeleteMessage : ((_b = (_a = message.threadInfo) === null || _a === void 0 ? void 0 : _a.replyCount) !== null && _b !== void 0 ? _b : 0) > 0,\n    onClick: function (e) {\n      var _a;\n      if (isFailedMessage(message)) {\n        deleteMessage(message);\n      } else if (isOnline) {\n        showRemove(true);\n        hideMenu();\n        (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n      }\n    }\n  }), (_c = props.children) !== null && _c !== void 0 ? _c : React__default.createElement(React__default.Fragment, null, React__default.createElement(Icon, {\n    type: IconTypes.DELETE,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  }), React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: disableDeleteMessage ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1\n  }, stringSet.MESSAGE_MENU__DELETE)));\n};\nvar DownloadMenuItem = function (props) {\n  var _a;\n  var stringSet = useLocalization().stringSet;\n  var _b = useMessageMenuContext(),\n    hideMenu = _b.hideMenu,\n    message = _b.message,\n    onDownloadClick = _b.onDownloadClick;\n  var url = message.url;\n  return React__default.createElement(BottomSheetMenuItem, {\n    onClick: function () {\n      return hideMenu();\n    }\n  }, (_a = props.children) !== null && _a !== void 0 ? _a : React__default.createElement(\"a\", {\n    className: \"sendbird-message__bottomsheet--hyperlink\",\n    rel: \"noopener noreferrer\",\n    href: url,\n    target: \"_blank\",\n    onClick: onDownloadClick\n  }, React__default.createElement(Icon, {\n    type: IconTypes.DOWNLOAD,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  }), React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MESSAGE_MENU__SAVE)));\n};\nvar EMOJI_SIZE = 38;\nvar MobileBottomSheet = function (props) {\n  var _a, _b, _c, _d;\n  var hideMenu = props.hideMenu,\n    channel = props.channel,\n    emojiContainer = props.emojiContainer,\n    message = props.message,\n    replyType = props.replyType,\n    userId = props.userId,\n    resendMessage = props.resendMessage,\n    deleteMessage = props.deleteMessage,\n    toggleReaction = props.toggleReaction,\n    _e = props.isReactionEnabled,\n    isReactionEnabled = _e === void 0 ? false : _e,\n    showEdit = props.showEdit,\n    showRemove = props.showRemove,\n    deleteMenuState = props.deleteMenuState,\n    setQuoteMessage = props.setQuoteMessage,\n    onReplyInThread = props.onReplyInThread,\n    _f = props.isOpenedFromThread,\n    isOpenedFromThread = _f === void 0 ? false : _f,\n    onDownloadClick = props.onDownloadClick,\n    renderMenuItems = props.renderMenuItems;\n  var isByMe = ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId) === userId;\n  var config = useSendbirdStateContext().config;\n  var isOnline = config.isOnline;\n  var showMenuItemCopy = isUserMessage(message);\n  var showMenuItemEdit = isUserMessage(message) && isSentMessage(message) && isByMe;\n  var showMenuItemResend = isOnline && isFailedMessage(message) && (message === null || message === void 0 ? void 0 : message.isResendable) && isByMe;\n  var showMenuItemDelete = !isPendingMessage(message) && isByMe;\n  var showMenuItemDeleteByState = isByMe && (deleteMenuState === undefined || deleteMenuState !== 'HIDE');\n  var showMenuItemDeleteFinal = showMenuItemDeleteByState && showMenuItemDelete;\n  var disableDelete = deleteMenuState !== undefined && deleteMenuState === 'DISABLE' || ((_c = (_b = message === null || message === void 0 ? void 0 : message.threadInfo) === null || _b === void 0 ? void 0 : _b.replyCount) !== null && _c !== void 0 ? _c : 0) > 0;\n  var showMenuItemDownload = isSentMessage(message) && isFileMessage(message) && !isVoiceMessage(message);\n  var showReaction = !isFailedMessage(message) && !isPendingMessage(message) && isReactionEnabled;\n  var showMenuItemReply = replyType === 'QUOTE_REPLY' && !isFailedMessage(message) && !isPendingMessage(message) && (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && !(channel === null || channel === void 0 ? void 0 : channel.isBroadcast);\n  var showMenuItemThread = replyType === 'THREAD' && !isOpenedFromThread && !isFailedMessage(message) && !isPendingMessage(message) && !isThreadMessage(message) && (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && !(channel === null || channel === void 0 ? void 0 : channel.isBroadcast);\n  var maxEmojisPerRow = Math.floor(window.innerWidth / EMOJI_SIZE) - 1;\n  var _g = useState(false),\n    showEmojisOnly = _g[0],\n    setShowEmojisOnly = _g[1];\n  var emojis = emojiContainer && getEmojiListAll(emojiContainer);\n  var visibleEmojis = showEmojisOnly ? emojis : emojis === null || emojis === void 0 ? void 0 : emojis.slice(0, maxEmojisPerRow);\n  var canShowMoreEmojis = emojis && emojis.length > maxEmojisPerRow;\n  var contextValue = {\n    message: message,\n    hideMenu: hideMenu,\n    setQuoteMessage: setQuoteMessage,\n    onReplyInThread: onReplyInThread,\n    onMoveToParentMessage: function () {},\n    showEdit: showEdit,\n    showRemove: showRemove,\n    deleteMessage: deleteMessage,\n    resendMessage: resendMessage,\n    isOnline: isOnline,\n    disableDeleteMessage: disableDelete,\n    triggerRef: null,\n    containerRef: null,\n    onDownloadClick: onDownloadClick\n  };\n  return React__default.createElement(MessageMenuProvider, {\n    value: contextValue\n  }, React__default.createElement(BottomSheet, {\n    onBackdropClick: hideMenu\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-message__bottomsheet\"\n  }, showReaction && React__default.createElement(\"div\", {\n    className: \"sendbird-message__bottomsheet-reactions\"\n  }, React__default.createElement(\"ul\", {\n    className: \"sendbird-message__bottomsheet-reaction-bar\"\n  }, React__default.createElement(\"div\", {\n    className: classnames('sendbird-message__bottomsheet-reaction-bar__row', showEmojisOnly && 'sendbird-message__bottomsheet-reaction-bar__all')\n  }, visibleEmojis.map(function (emoji) {\n    var _a, _b, _c;\n    var isReacted = (_c = (_b = (_a = message === null || message === void 0 ? void 0 : message.reactions) === null || _a === void 0 ? void 0 : _a.filter(function (reaction) {\n      return reaction.key === emoji.key;\n    })[0]) === null || _b === void 0 ? void 0 : _b.userIds) === null || _c === void 0 ? void 0 : _c.some(function (reactorId) {\n      return reactorId === userId;\n    });\n    return React__default.createElement(ReactionButton, {\n      key: emoji.key,\n      width: \"\".concat(EMOJI_SIZE, \"px\"),\n      height: \"\".concat(EMOJI_SIZE, \"px\"),\n      selected: isReacted,\n      onClick: function () {\n        hideMenu();\n        toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message, emoji.key, isReacted);\n      },\n      testID: \"ui_mobile_emoji_reactions_menu_\".concat(emoji.key)\n    }, React__default.createElement(ImageRenderer, {\n      url: (emoji === null || emoji === void 0 ? void 0 : emoji.url) || '',\n      width: \"28px\",\n      height: \"28px\",\n      placeHolder: function (_a) {\n        var style = _a.style;\n        return React__default.createElement(\"div\", {\n          style: style\n        }, React__default.createElement(Icon, {\n          type: IconTypes.QUESTION,\n          fillColor: IconColors.ON_BACKGROUND_3,\n          width: \"28px\",\n          height: \"28px\"\n        }));\n      }\n    }));\n  }), canShowMoreEmojis && !showEmojisOnly && React__default.createElement(ReactionButton, {\n    key: \"emoji_more\",\n    width: \"38px\",\n    height: \"38px\",\n    onClick: function () {\n      return setShowEmojisOnly(true);\n    },\n    testID: \"ui_mobile_emoji_reactions_menu_emojiadd\"\n  }, React__default.createElement(ImageRenderer, {\n    url: '',\n    width: \"28px\",\n    height: \"28px\",\n    placeHolder: function (_a) {\n      var style = _a.style;\n      return React__default.createElement(\"div\", {\n        style: style\n      }, React__default.createElement(Icon, {\n        type: IconTypes.EMOJI_MORE,\n        fillColor: IconColors.ON_BACKGROUND_3,\n        width: \"28px\",\n        height: \"28px\"\n      }));\n    }\n  }))))), !showEmojisOnly && React__default.createElement(\"div\", {\n    className: \"sendbird-message__bottomsheet--actions\"\n  }, (_d = renderMenuItems === null || renderMenuItems === void 0 ? void 0 : renderMenuItems({\n    items: {\n      CopyMenuItem: CopyMenuItem,\n      EditMenuItem: EditMenuItem,\n      ResendMenuItem: ResendMenuItem,\n      ReplyMenuItem: ReplyMenuItem,\n      ThreadMenuItem: ThreadMenuItem,\n      DeleteMenuItem: DeleteMenuItem\n    }\n  })) !== null && _d !== void 0 ? _d : React__default.createElement(React__default.Fragment, null, showMenuItemCopy && React__default.createElement(CopyMenuItem, null), showMenuItemEdit && React__default.createElement(EditMenuItem, null), showMenuItemResend && React__default.createElement(ResendMenuItem, null), showMenuItemReply && React__default.createElement(ReplyMenuItem, null), showMenuItemThread && React__default.createElement(ThreadMenuItem, null), showMenuItemDeleteFinal && React__default.createElement(DeleteMenuItem, null), showMenuItemDownload && React__default.createElement(DownloadMenuItem, null))))));\n};\nvar MobileMenu = function (props) {\n  return React__default.createElement(React__default.Fragment, null, (props === null || props === void 0 ? void 0 : props.isReactionEnabled) ? React__default.createElement(MobileBottomSheet, __assign({}, props)) : React__default.createElement(MobileContextMenu, __assign({}, props)));\n};\nexport { MobileBottomSheet, MobileContextMenu, MobileMenu, MobileMenu as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { _ as __assign } from '../chunks/bundle-BQi9-O76.js';\nimport React__default, { useState } from 'react';\nimport { l as isUserMessage, A as copyToClipboard, v as isFailedMessage, q as isSentMessage, u as isPendingMessage, b as isFileMessage, i as isVoiceMessage, R as isThreadMessage, x as getEmojiListAll } from '../chunks/bundle-DxTN4_0p.js';\nimport { n as noop, c as classnames } from '../chunks/bundle-BgwzpLeQ.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { u as useMessageMenuContext, a as MenuItem, M as MessageMenuProvider, b as MenuItems, B as BottomSheetMenuItem } from '../chunks/bundle-CwKZj-B6.js';\nimport './IconButton.js';\nimport { u as useLocalization } from '../chunks/bundle-cQZ3UZoG.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../chunks/bundle-DhKQeIfP.js';\nimport '@sendbird/chat';\nimport Icon, { IconTypes, IconColors } from './Icon.js';\nimport BottomSheet from './BottomSheet.js';\nimport ImageRenderer from './ImageRenderer.js';\nimport ReactionButton from './ReactionButton.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CNWAfTVw.js';\nimport '../chunks/bundle-CA85nVxp.js';\nimport '../withSendbird.js';\nimport 'react-dom';\nimport '@sendbird/chat/openChannel';\nimport './SortByRow.js';\nimport '../chunks/bundle-etuaqevl.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport '../chunks/bundle-CXdo2kR_.js';\nimport '../chunks/bundle-f-SpnOx2.js';\nimport './Button.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '../chunks/bundle-DDeWOERD.js';\nimport '../chunks/bundle-DCMGp6rH.js';\nimport '../chunks/bundle-AfQS5DGf.js';\n\nvar CopyMenuItem$1 = function (props) {\n    var _a;\n    var stringSet = useLocalization().stringSet;\n    var _b = useMessageMenuContext(), message = _b.message, hideMenu = _b.hideMenu;\n    return (React__default.createElement(MenuItem, __assign({}, props, { onClick: function (e) {\n            var _a;\n            if (isUserMessage(message))\n                copyToClipboard(message.message);\n            hideMenu();\n            (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n        } }), (_a = props.children) !== null && _a !== void 0 ? _a : (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__COPY),\n        React__default.createElement(Icon, { type: IconTypes.COPY, fillColor: IconColors.PRIMARY, width: \"24px\", height: \"24px\" })))));\n};\nvar ReplyMenuItem$1 = function (props) {\n    var _a, _b, _c;\n    var stringSet = useLocalization().stringSet;\n    var _d = useMessageMenuContext(), message = _d.message, hideMenu = _d.hideMenu, setQuoteMessage = _d.setQuoteMessage;\n    return (React__default.createElement(MenuItem, __assign({}, props, { disabled: message.parentMessageId > 0, onClick: function (e) {\n            var _a;\n            setQuoteMessage(message);\n            hideMenu();\n            (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n        } }), (_a = props.children) !== null && _a !== void 0 ? _a : (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: ((_b = message.parentMessageId) !== null && _b !== void 0 ? _b : 0) > 0 ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__REPLY),\n        React__default.createElement(Icon, { type: IconTypes.REPLY, fillColor: ((_c = message.parentMessageId) !== null && _c !== void 0 ? _c : 0) > 0 ? IconColors.ON_BACKGROUND_4 : IconColors.PRIMARY, width: \"24px\", height: \"24px\" })))));\n};\nvar ThreadMenuItem$1 = function (props) {\n    var _a;\n    var stringSet = useLocalization().stringSet;\n    var _b = useMessageMenuContext(), message = _b.message, hideMenu = _b.hideMenu, onReplyInThread = _b.onReplyInThread;\n    return (React__default.createElement(MenuItem, __assign({}, props, { onClick: function (e) {\n            var _a;\n            onReplyInThread({ message: message });\n            hideMenu();\n            (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n        } }), (_a = props.children) !== null && _a !== void 0 ? _a : (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__THREAD),\n        React__default.createElement(Icon, { type: IconTypes.THREAD, fillColor: IconColors.PRIMARY, width: \"24px\", height: \"24px\" })))));\n};\nvar EditMenuItem$1 = function (props) {\n    var _a;\n    var stringSet = useLocalization().stringSet;\n    var _b = useMessageMenuContext(), hideMenu = _b.hideMenu, showEdit = _b.showEdit, isOnline = _b.isOnline;\n    return (React__default.createElement(MenuItem, __assign({}, props, { onClick: function (e) {\n            var _a;\n            if (isOnline) {\n                showEdit(true);\n                hideMenu();\n                (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n            }\n        } }), (_a = props.children) !== null && _a !== void 0 ? _a : (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__EDIT),\n        React__default.createElement(Icon, { type: IconTypes.EDIT, fillColor: IconColors.PRIMARY, width: \"24px\", height: \"24px\" })))));\n};\nvar ResendMenuItem$1 = function (props) {\n    var _a;\n    var stringSet = useLocalization().stringSet;\n    var _b = useMessageMenuContext(), message = _b.message, hideMenu = _b.hideMenu, resendMessage = _b.resendMessage, isOnline = _b.isOnline;\n    return (React__default.createElement(MenuItem, __assign({}, props, { onClick: function (e) {\n            var _a;\n            if (isOnline) {\n                resendMessage(message);\n                hideMenu();\n                (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n            }\n        } }), (_a = props.children) !== null && _a !== void 0 ? _a : (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__RESEND),\n        React__default.createElement(Icon, { type: IconTypes.REFRESH, fillColor: IconColors.PRIMARY, width: \"24px\", height: \"24px\" })))));\n};\nvar DeleteMenuItem$1 = function (props) {\n    var _a, _b, _c;\n    var stringSet = useLocalization().stringSet;\n    var _d = useMessageMenuContext(), message = _d.message, hideMenu = _d.hideMenu, deleteMessage = _d.deleteMessage, showRemove = _d.showRemove, isOnline = _d.isOnline, disableDeleteMessage = _d.disableDeleteMessage;\n    return (React__default.createElement(MenuItem, __assign({}, props, { disabled: typeof disableDeleteMessage === 'boolean'\n            ? disableDeleteMessage\n            : ((_b = (_a = message.threadInfo) === null || _a === void 0 ? void 0 : _a.replyCount) !== null && _b !== void 0 ? _b : 0) > 0, onClick: function (e) {\n            var _a;\n            if (isFailedMessage(message)) {\n                deleteMessage(message);\n            }\n            else if (isOnline) {\n                showRemove(true);\n                hideMenu();\n                (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n            }\n        } }), (_c = props.children) !== null && _c !== void 0 ? _c : (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: disableDeleteMessage ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__DELETE),\n        React__default.createElement(Icon, { type: IconTypes.DELETE, fillColor: IconColors.PRIMARY, width: \"24px\", height: \"24px\" })))));\n};\nvar DownloadMenuItem$1 = function (props) {\n    var _a;\n    var stringSet = useLocalization().stringSet;\n    var _b = useMessageMenuContext(), hideMenu = _b.hideMenu, message = _b.message, onDownloadClick = _b.onDownloadClick;\n    var url = message.url;\n    return (React__default.createElement(MenuItem, __assign({}, props, { onClick: function () {\n            hideMenu();\n        } }), (_a = props.children) !== null && _a !== void 0 ? _a : (React__default.createElement(\"a\", { className: \"sendbird-message__contextmenu--hyperlink\", rel: \"noopener noreferrer\", href: url, target: \"_blank\", onClick: onDownloadClick },\n        React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__SAVE),\n        React__default.createElement(Icon, { type: IconTypes.DOWNLOAD, fillColor: IconColors.PRIMARY, width: \"24px\", height: \"24px\" })))));\n};\n\nvar MobileContextMenu = function (props) {\n    var _a, _b, _c, _d;\n    var channel = props.channel, message = props.message, replyType = props.replyType, userId = props.userId, resendMessage = props.resendMessage, showEdit = props.showEdit, showRemove = props.showRemove, deleteMenuState = props.deleteMenuState, deleteMessage = props.deleteMessage, setQuoteMessage = props.setQuoteMessage, parentRef = props.parentRef, onReplyInThread = props.onReplyInThread, _e = props.isOpenedFromThread, isOpenedFromThread = _e === void 0 ? false : _e, _f = props.onDownloadClick, onDownloadClick = _f === void 0 ? null : _f, renderMenuItems = props.renderMenuItems, hideMobileMenu = props.hideMenu;\n    var isByMe = ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId) === userId;\n    var config = useSendbirdStateContext().config;\n    var isOnline = config.isOnline;\n    // Menu Items condition\n    var showMenuItemCopy = isUserMessage(message);\n    var showMenuItemEdit = isUserMessage(message) && isSentMessage(message) && isByMe;\n    var showMenuItemResend = isFailedMessage(message) && (message === null || message === void 0 ? void 0 : message.isResendable) && isByMe;\n    var showMenuItemDelete = !isPendingMessage(message) && isByMe;\n    var showMenuItemDeleteByState = isByMe && (deleteMenuState === undefined || deleteMenuState !== 'HIDE');\n    var showMenuItemDeleteFinal = showMenuItemDeleteByState && showMenuItemDelete;\n    var showMenuItemDownload = !isPendingMessage(message) && isFileMessage(message) && !(isVoiceMessage(message) && (channel === null || channel === void 0 ? void 0 : channel.isSuper) || (channel === null || channel === void 0 ? void 0 : channel.isBroadcast));\n    var showMenuItemReply = replyType === 'QUOTE_REPLY' && !isFailedMessage(message) && !isPendingMessage(message) && (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel());\n    var showMenuItemThread = replyType === 'THREAD' && !isOpenedFromThread && !isFailedMessage(message) && !isPendingMessage(message) && !isThreadMessage(message) && (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel());\n    var disableDeleteMessage = (deleteMenuState !== undefined && deleteMenuState === 'DISABLE') || ((_c = (_b = message === null || message === void 0 ? void 0 : message.threadInfo) === null || _b === void 0 ? void 0 : _b.replyCount) !== null && _c !== void 0 ? _c : 0) > 0;\n    var contextValue = {\n        message: message,\n        hideMenu: hideMobileMenu,\n        setQuoteMessage: setQuoteMessage,\n        onReplyInThread: onReplyInThread,\n        onMoveToParentMessage: noop,\n        showEdit: showEdit,\n        showRemove: showRemove,\n        deleteMessage: deleteMessage,\n        resendMessage: resendMessage,\n        isOnline: isOnline,\n        disableDeleteMessage: disableDeleteMessage,\n        triggerRef: parentRef,\n        containerRef: parentRef,\n        onDownloadClick: onDownloadClick,\n    };\n    return (React__default.createElement(MessageMenuProvider, { value: contextValue },\n        React__default.createElement(MenuItems, { className: \"sendbird-message__mobile-context-menu\", parentRef: parentRef, parentContainRef: parentRef, closeDropdown: hideMobileMenu }, (_d = renderMenuItems === null || renderMenuItems === void 0 ? void 0 : renderMenuItems({\n            items: {\n                CopyMenuItem: CopyMenuItem$1,\n                ReplyMenuItem: ReplyMenuItem$1,\n                ThreadMenuItem: ThreadMenuItem$1,\n                EditMenuItem: EditMenuItem$1,\n                ResendMenuItem: ResendMenuItem$1,\n                DeleteMenuItem: DeleteMenuItem$1,\n            },\n        })) !== null && _d !== void 0 ? _d : (React__default.createElement(React__default.Fragment, null,\n            showMenuItemCopy && React__default.createElement(CopyMenuItem$1, null),\n            showMenuItemReply && React__default.createElement(ReplyMenuItem$1, null),\n            showMenuItemThread && React__default.createElement(ThreadMenuItem$1, null),\n            showMenuItemEdit && React__default.createElement(EditMenuItem$1, null),\n            showMenuItemResend && React__default.createElement(ResendMenuItem$1, null),\n            showMenuItemDeleteFinal && React__default.createElement(DeleteMenuItem$1, null),\n            showMenuItemDownload && React__default.createElement(DownloadMenuItem$1, null))))));\n};\n\nvar CopyMenuItem = function (props) {\n    var _a;\n    var stringSet = useLocalization().stringSet;\n    var _b = useMessageMenuContext(), message = _b.message, hideMenu = _b.hideMenu;\n    return (React__default.createElement(BottomSheetMenuItem, __assign({}, props, { onClick: function (e) {\n            var _a;\n            if (isUserMessage(message))\n                copyToClipboard(message.message);\n            hideMenu();\n            (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n        } }), (_a = props.children) !== null && _a !== void 0 ? _a : (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(Icon, { type: IconTypes.COPY, fillColor: IconColors.PRIMARY, width: \"24px\", height: \"24px\" }),\n        React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__COPY)))));\n};\nvar EditMenuItem = function (props) {\n    var _a;\n    var stringSet = useLocalization().stringSet;\n    var _b = useMessageMenuContext(), hideMenu = _b.hideMenu, showEdit = _b.showEdit, isOnline = _b.isOnline;\n    return (React__default.createElement(BottomSheetMenuItem, __assign({}, props, { onClick: function (e) {\n            var _a;\n            if (isOnline) {\n                showEdit(true);\n                hideMenu();\n                (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n            }\n        } }), (_a = props.children) !== null && _a !== void 0 ? _a : (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(Icon, { type: IconTypes.EDIT, fillColor: IconColors.PRIMARY, width: \"24px\", height: \"24px\" }),\n        React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__EDIT)))));\n};\nvar ResendMenuItem = function (props) {\n    var _a;\n    var stringSet = useLocalization().stringSet;\n    var _b = useMessageMenuContext(), message = _b.message, hideMenu = _b.hideMenu, resendMessage = _b.resendMessage, isOnline = _b.isOnline;\n    return (React__default.createElement(BottomSheetMenuItem, __assign({}, props, { onClick: function (e) {\n            var _a;\n            if (isOnline) {\n                resendMessage(message);\n                hideMenu();\n                (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n            }\n        } }), (_a = props.children) !== null && _a !== void 0 ? _a : (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(Icon, { type: IconTypes.REFRESH, fillColor: IconColors.PRIMARY, width: \"24px\", height: \"24px\" }),\n        React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__RESEND)))));\n};\nvar ReplyMenuItem = function (props) {\n    var _a, _b, _c;\n    var stringSet = useLocalization().stringSet;\n    var _d = useMessageMenuContext(), message = _d.message, hideMenu = _d.hideMenu, setQuoteMessage = _d.setQuoteMessage;\n    return (React__default.createElement(BottomSheetMenuItem, __assign({}, props, { disabled: message.parentMessageId > 0, onClick: function (e) {\n            var _a;\n            setQuoteMessage(message);\n            hideMenu();\n            (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n        } }), (_a = props.children) !== null && _a !== void 0 ? _a : (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(Icon, { type: IconTypes.REPLY, fillColor: ((_b = message.parentMessageId) !== null && _b !== void 0 ? _b : 0) > 0 ? IconColors.ON_BACKGROUND_3 : IconColors.PRIMARY, width: \"24px\", height: \"24px\" }),\n        React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: ((_c = message.parentMessageId) !== null && _c !== void 0 ? _c : 0) > 0 ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__REPLY)))));\n};\nvar ThreadMenuItem = function (props) {\n    var _a;\n    var stringSet = useLocalization().stringSet;\n    var _b = useMessageMenuContext(), message = _b.message, hideMenu = _b.hideMenu, onReplyInThread = _b.onReplyInThread;\n    return (React__default.createElement(BottomSheetMenuItem, __assign({}, props, { onClick: function (e) {\n            var _a;\n            onReplyInThread({ message: message });\n            hideMenu();\n            (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n        } }), (_a = props.children) !== null && _a !== void 0 ? _a : (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(Icon, { type: IconTypes.THREAD, fillColor: IconColors.PRIMARY, width: \"24px\", height: \"24px\" }),\n        React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__THREAD)))));\n};\nvar DeleteMenuItem = function (props) {\n    var _a, _b, _c;\n    var stringSet = useLocalization().stringSet;\n    var _d = useMessageMenuContext(), message = _d.message, hideMenu = _d.hideMenu, deleteMessage = _d.deleteMessage, showRemove = _d.showRemove, isOnline = _d.isOnline, disableDeleteMessage = _d.disableDeleteMessage;\n    return (React__default.createElement(BottomSheetMenuItem, __assign({}, props, { disabled: typeof disableDeleteMessage === 'boolean'\n            ? disableDeleteMessage\n            : ((_b = (_a = message.threadInfo) === null || _a === void 0 ? void 0 : _a.replyCount) !== null && _b !== void 0 ? _b : 0) > 0, onClick: function (e) {\n            var _a;\n            if (isFailedMessage(message)) {\n                deleteMessage(message);\n            }\n            else if (isOnline) {\n                showRemove(true);\n                hideMenu();\n                (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n            }\n        } }), (_c = props.children) !== null && _c !== void 0 ? _c : (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(Icon, { type: IconTypes.DELETE, fillColor: IconColors.PRIMARY, width: \"24px\", height: \"24px\" }),\n        React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: disableDeleteMessage ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__DELETE)))));\n};\nvar DownloadMenuItem = function (props) {\n    var _a;\n    var stringSet = useLocalization().stringSet;\n    var _b = useMessageMenuContext(), hideMenu = _b.hideMenu, message = _b.message, onDownloadClick = _b.onDownloadClick;\n    var url = message.url;\n    return (React__default.createElement(BottomSheetMenuItem, { onClick: function () { return hideMenu(); } }, (_a = props.children) !== null && _a !== void 0 ? _a : (React__default.createElement(\"a\", { className: \"sendbird-message__bottomsheet--hyperlink\", rel: \"noopener noreferrer\", href: url, target: \"_blank\", onClick: onDownloadClick },\n        React__default.createElement(Icon, { type: IconTypes.DOWNLOAD, fillColor: IconColors.PRIMARY, width: \"24px\", height: \"24px\" }),\n        React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__SAVE)))));\n};\n\nvar EMOJI_SIZE = 38;\nvar MobileBottomSheet = function (props) {\n    var _a, _b, _c, _d;\n    var hideMenu = props.hideMenu, channel = props.channel, emojiContainer = props.emojiContainer, message = props.message, replyType = props.replyType, userId = props.userId, resendMessage = props.resendMessage, deleteMessage = props.deleteMessage, toggleReaction = props.toggleReaction, _e = props.isReactionEnabled, isReactionEnabled = _e === void 0 ? false : _e, showEdit = props.showEdit, showRemove = props.showRemove, deleteMenuState = props.deleteMenuState, setQuoteMessage = props.setQuoteMessage, onReplyInThread = props.onReplyInThread, _f = props.isOpenedFromThread, isOpenedFromThread = _f === void 0 ? false : _f, onDownloadClick = props.onDownloadClick, renderMenuItems = props.renderMenuItems;\n    var isByMe = ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId) === userId;\n    var config = useSendbirdStateContext().config;\n    var isOnline = config.isOnline;\n    var showMenuItemCopy = isUserMessage(message);\n    var showMenuItemEdit = (isUserMessage(message) && isSentMessage(message) && isByMe);\n    var showMenuItemResend = (isOnline && isFailedMessage(message) && (message === null || message === void 0 ? void 0 : message.isResendable) && isByMe);\n    var showMenuItemDelete = !isPendingMessage(message) && isByMe;\n    var showMenuItemDeleteByState = isByMe && (deleteMenuState === undefined || deleteMenuState !== 'HIDE');\n    var showMenuItemDeleteFinal = showMenuItemDeleteByState && showMenuItemDelete;\n    var disableDelete = ((deleteMenuState !== undefined && deleteMenuState === 'DISABLE')\n        || ((_c = (_b = message === null || message === void 0 ? void 0 : message.threadInfo) === null || _b === void 0 ? void 0 : _b.replyCount) !== null && _c !== void 0 ? _c : 0) > 0);\n    var showMenuItemDownload = isSentMessage(message) && isFileMessage(message) && !isVoiceMessage(message);\n    var showReaction = !isFailedMessage(message) && !isPendingMessage(message) && isReactionEnabled;\n    var showMenuItemReply = (replyType === 'QUOTE_REPLY')\n        && !isFailedMessage(message)\n        && !isPendingMessage(message)\n        && ((channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && !(channel === null || channel === void 0 ? void 0 : channel.isBroadcast));\n    var showMenuItemThread = (replyType === 'THREAD') && !isOpenedFromThread\n        && !isFailedMessage(message)\n        && !isPendingMessage(message)\n        && !isThreadMessage(message)\n        && ((channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && !(channel === null || channel === void 0 ? void 0 : channel.isBroadcast));\n    var maxEmojisPerRow = Math.floor(window.innerWidth / EMOJI_SIZE) - 1;\n    var _g = useState(false), showEmojisOnly = _g[0], setShowEmojisOnly = _g[1];\n    var emojis = emojiContainer && getEmojiListAll(emojiContainer);\n    var visibleEmojis = showEmojisOnly ? emojis : emojis === null || emojis === void 0 ? void 0 : emojis.slice(0, maxEmojisPerRow);\n    var canShowMoreEmojis = emojis && emojis.length > maxEmojisPerRow;\n    var contextValue = {\n        message: message,\n        hideMenu: hideMenu,\n        setQuoteMessage: setQuoteMessage,\n        onReplyInThread: onReplyInThread,\n        onMoveToParentMessage: function () { },\n        showEdit: showEdit,\n        showRemove: showRemove,\n        deleteMessage: deleteMessage,\n        resendMessage: resendMessage,\n        isOnline: isOnline,\n        disableDeleteMessage: disableDelete,\n        triggerRef: null,\n        containerRef: null,\n        onDownloadClick: onDownloadClick,\n    };\n    return (React__default.createElement(MessageMenuProvider, { value: contextValue },\n        React__default.createElement(BottomSheet, { onBackdropClick: hideMenu },\n            React__default.createElement(\"div\", { className: \"sendbird-message__bottomsheet\" },\n                showReaction && (React__default.createElement(\"div\", { className: \"sendbird-message__bottomsheet-reactions\" },\n                    React__default.createElement(\"ul\", { className: \"sendbird-message__bottomsheet-reaction-bar\" },\n                        React__default.createElement(\"div\", { className: classnames('sendbird-message__bottomsheet-reaction-bar__row', showEmojisOnly && 'sendbird-message__bottomsheet-reaction-bar__all') },\n                            visibleEmojis.map(function (emoji) {\n                                var _a, _b, _c;\n                                var isReacted = (_c = (_b = (_a = message === null || message === void 0 ? void 0 : message.reactions) === null || _a === void 0 ? void 0 : _a.filter(function (reaction) { return reaction.key === emoji.key; })[0]) === null || _b === void 0 ? void 0 : _b.userIds) === null || _c === void 0 ? void 0 : _c.some(function (reactorId) { return reactorId === userId; });\n                                return (React__default.createElement(ReactionButton, { key: emoji.key, width: \"\".concat(EMOJI_SIZE, \"px\"), height: \"\".concat(EMOJI_SIZE, \"px\"), selected: isReacted, onClick: function () {\n                                        hideMenu();\n                                        toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message, emoji.key, isReacted);\n                                    }, testID: \"ui_mobile_emoji_reactions_menu_\".concat(emoji.key) },\n                                    React__default.createElement(ImageRenderer, { url: (emoji === null || emoji === void 0 ? void 0 : emoji.url) || '', width: \"28px\", height: \"28px\", placeHolder: function (_a) {\n                                            var style = _a.style;\n                                            return (React__default.createElement(\"div\", { style: style },\n                                                React__default.createElement(Icon, { type: IconTypes.QUESTION, fillColor: IconColors.ON_BACKGROUND_3, width: \"28px\", height: \"28px\" })));\n                                        } })));\n                            }),\n                            canShowMoreEmojis && !showEmojisOnly && (React__default.createElement(ReactionButton, { key: \"emoji_more\", width: \"38px\", height: \"38px\", onClick: function () { return setShowEmojisOnly(true); }, testID: \"ui_mobile_emoji_reactions_menu_emojiadd\" },\n                                React__default.createElement(ImageRenderer, { url: '', width: \"28px\", height: \"28px\", placeHolder: function (_a) {\n                                        var style = _a.style;\n                                        return (React__default.createElement(\"div\", { style: style },\n                                            React__default.createElement(Icon, { type: IconTypes.EMOJI_MORE, fillColor: IconColors.ON_BACKGROUND_3, width: \"28px\", height: \"28px\" })));\n                                    } }))))))),\n                !showEmojisOnly && (React__default.createElement(\"div\", { className: \"sendbird-message__bottomsheet--actions\" }, (_d = renderMenuItems === null || renderMenuItems === void 0 ? void 0 : renderMenuItems({\n                    items: {\n                        CopyMenuItem: CopyMenuItem,\n                        EditMenuItem: EditMenuItem,\n                        ResendMenuItem: ResendMenuItem,\n                        ReplyMenuItem: ReplyMenuItem,\n                        ThreadMenuItem: ThreadMenuItem,\n                        DeleteMenuItem: DeleteMenuItem,\n                    },\n                })) !== null && _d !== void 0 ? _d : (React__default.createElement(React__default.Fragment, null,\n                    showMenuItemCopy && React__default.createElement(CopyMenuItem, null),\n                    showMenuItemEdit && React__default.createElement(EditMenuItem, null),\n                    showMenuItemResend && React__default.createElement(ResendMenuItem, null),\n                    showMenuItemReply && React__default.createElement(ReplyMenuItem, null),\n                    showMenuItemThread && React__default.createElement(ThreadMenuItem, null),\n                    showMenuItemDeleteFinal && React__default.createElement(DeleteMenuItem, null),\n                    showMenuItemDownload && React__default.createElement(DownloadMenuItem, null)))))))));\n};\n\nvar MobileMenu = function (props) {\n    return (React__default.createElement(React__default.Fragment, null, (props === null || props === void 0 ? void 0 : props.isReactionEnabled) ? React__default.createElement(MobileBottomSheet, __assign({}, props)) : React__default.createElement(MobileContextMenu, __assign({}, props))));\n};\n\nexport { MobileBottomSheet, MobileContextMenu, MobileMenu, MobileMenu as default };\n//# sourceMappingURL=MobileMenu.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}