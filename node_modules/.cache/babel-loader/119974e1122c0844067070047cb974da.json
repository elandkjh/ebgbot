{"ast":null,"code":"import { useState, useLayoutEffect, useEffect } from 'react';\nfunction getMentionNodes(root) {\n  if (root) {\n    var mentions = root.querySelectorAll('[data-sb-mention=\\'true\\']');\n    var mentionsArray = Array.from(mentions);\n    return mentionsArray;\n  }\n  return [];\n}\n\n/**\n * exported, should be backwords compatible\n * This is a dirty way to get the mentions given DOM node\n */\nfunction useDirtyGetMentions(_a, _b) {\n  var ref = _a.ref;\n  var logger = _b.logger;\n  // Select the node that will be observed for mutations\n  var targetNode = ref.current;\n  var _c = useState([]),\n    mentionNodes = _c[0],\n    setMentionNodes = _c[1];\n  // to get the initial mentions\n  useLayoutEffect(function () {\n    if (targetNode) {\n      var mentions = getMentionNodes(targetNode);\n      setMentionNodes(mentions);\n    }\n  }, [targetNode]);\n  useEffect(function () {\n    // Options for the observer (which mutations to observe)\n    var config = {\n      childList: true,\n      subtree: true\n    };\n    // Callback function to execute when mutations are observed\n    var callback = function (mutationList) {\n      var hasMutation = mutationList.length > 0;\n      if (hasMutation) {\n        setMentionNodes(getMentionNodes(targetNode));\n      }\n    };\n    // Create an observer instance linked to the callback function\n    var observer = new MutationObserver(callback);\n    if (targetNode) {\n      // Start observing the target node for configured mutations\n      observer.observe(targetNode, config);\n      // logger.info('useDirtyGetMentions: observer started', { observer, config });\n    }\n    return function () {\n      try {\n        observer.disconnect();\n        // logger.info('useDirtyGetMentions: observer disconnected', { observer });\n      } catch (error) {\n        logger.error('useDirtyGetMentions: observer disconnect failed', {\n          observer: observer\n        });\n      }\n    };\n  }, [targetNode]);\n  return mentionNodes;\n}\nexport { useDirtyGetMentions };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { useState, useLayoutEffect, useEffect } from 'react';\n\nfunction getMentionNodes(root) {\n    if (root) {\n        var mentions = root.querySelectorAll('[data-sb-mention=\\'true\\']');\n        var mentionsArray = Array.from(mentions);\n        return mentionsArray;\n    }\n    return [];\n}\n\n/**\n * exported, should be backwords compatible\n * This is a dirty way to get the mentions given DOM node\n */\nfunction useDirtyGetMentions(_a, _b) {\n    var ref = _a.ref;\n    var logger = _b.logger;\n    // Select the node that will be observed for mutations\n    var targetNode = ref.current;\n    var _c = useState([]), mentionNodes = _c[0], setMentionNodes = _c[1];\n    // to get the initial mentions\n    useLayoutEffect(function () {\n        if (targetNode) {\n            var mentions = getMentionNodes(targetNode);\n            setMentionNodes(mentions);\n        }\n    }, [targetNode]);\n    useEffect(function () {\n        // Options for the observer (which mutations to observe)\n        var config = { childList: true, subtree: true };\n        // Callback function to execute when mutations are observed\n        var callback = function (mutationList) {\n            var hasMutation = mutationList.length > 0;\n            if (hasMutation) {\n                setMentionNodes(getMentionNodes(targetNode));\n            }\n        };\n        // Create an observer instance linked to the callback function\n        var observer = new MutationObserver(callback);\n        if (targetNode) {\n            // Start observing the target node for configured mutations\n            observer.observe(targetNode, config);\n            // logger.info('useDirtyGetMentions: observer started', { observer, config });\n        }\n        return function () {\n            try {\n                observer.disconnect();\n                // logger.info('useDirtyGetMentions: observer disconnected', { observer });\n            }\n            catch (error) {\n                logger.error('useDirtyGetMentions: observer disconnect failed', { observer: observer });\n            }\n        };\n    }, [targetNode]);\n    return mentionNodes;\n}\n\nexport { useDirtyGetMentions };\n//# sourceMappingURL=useDirtyGetMentions.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}