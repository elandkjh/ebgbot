{"ast":null,"code":"import { c as __spreadArray } from './bundle-BQi9-O76.js';\nimport React__default from 'react';\nimport { f as format } from './bundle-CAdqcqOm.js';\nimport Icon, { IconTypes, IconColors } from '../ui/Icon.js';\nimport { c as LabelStringSet, L as Label, a as LabelTypography, b as LabelColors } from './bundle-DhKQeIfP.js';\nimport Loader from '../ui/Loader.js';\nimport { C as isTemplateMessage, j as isImage, z as isGif, h as isVideo, D as isAudio, E as isVoiceMessageMimeType, F as isSentStatus } from './bundle-DxTN4_0p.js';\nimport { OutgoingMessageStates, getOutgoingMessageState } from '../utils/message/getOutgoingMessageState.js';\nimport { i as isToday, a as isYesterday, b as isThisYear } from './bundle-BHK1eF5R.js';\nimport { u as useLocalization } from './bundle-cQZ3UZoG.js';\nimport { c as classnames } from './bundle-BgwzpLeQ.js';\nvar getChannelTitle = function (channel, currentUserId, stringSet) {\n  var _a;\n  if (stringSet === void 0) {\n    stringSet = LabelStringSet;\n  }\n  if (!(channel === null || channel === void 0 ? void 0 : channel.name) && !(channel === null || channel === void 0 ? void 0 : channel.members)) {\n    return stringSet.NO_TITLE;\n  }\n  if ((channel === null || channel === void 0 ? void 0 : channel.name) && channel.name !== 'Group Channel') {\n    return channel.name;\n  }\n  if (((_a = channel === null || channel === void 0 ? void 0 : channel.members) === null || _a === void 0 ? void 0 : _a.length) === 1) {\n    return stringSet.NO_MEMBERS;\n  }\n  return ((channel === null || channel === void 0 ? void 0 : channel.members) || []).filter(function (_a) {\n    var userId = _a.userId;\n    return userId !== currentUserId;\n  }).map(function (_a) {\n    var nickname = _a.nickname;\n    return nickname || stringSet.NO_NAME;\n  }).join(', ');\n};\nvar getLastMessageCreatedAt = function (_a) {\n  var _b;\n  var channel = _a.channel,\n    locale = _a.locale,\n    _c = _a.stringSet,\n    stringSet = _c === void 0 ? LabelStringSet : _c;\n  var createdAt = (_b = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _b === void 0 ? void 0 : _b.createdAt;\n  var optionalParam = locale ? {\n    locale: locale\n  } : null;\n  if (!createdAt) {\n    return '';\n  }\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p', optionalParam);\n  }\n  if (isYesterday(createdAt)) {\n    return stringSet.MESSAGE_STATUS__YESTERDAY || 'Yesterday';\n  }\n  if (isThisYear(createdAt)) {\n    return format(createdAt, 'MMM d', optionalParam);\n  }\n  return format(createdAt, 'yyyy/M/d', optionalParam);\n};\nvar getTotalMembers = function (channel) {\n  return (channel === null || channel === void 0 ? void 0 : channel.memberCount) ? channel.memberCount : 0;\n};\nvar getChannelPreviewFileDisplayString = function (mimeType, stringSet) {\n  var _a, _b, _c, _d, _e, _f;\n  if (stringSet === void 0) {\n    stringSet = LabelStringSet;\n  }\n  if (isGif(mimeType)) {\n    return (_a = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_GIF) !== null && _a !== void 0 ? _a : '';\n  }\n  if (isImage(mimeType)) {\n    return (_b = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_PHOTO) !== null && _b !== void 0 ? _b : '';\n  }\n  if (isVideo(mimeType)) {\n    return (_c = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_VIDEO) !== null && _c !== void 0 ? _c : '';\n  }\n  if (isAudio(mimeType)) {\n    return (_d = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_AUDIO) !== null && _d !== void 0 ? _d : '';\n  }\n  if (isVoiceMessageMimeType(mimeType)) {\n    return (_e = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_VOICE_MESSAGE) !== null && _e !== void 0 ? _e : '';\n  }\n  return (_f = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_GENERAL) !== null && _f !== void 0 ? _f : '';\n};\nvar getPrettyLastMessage = function (message, stringSet) {\n  var _a, _b, _c, _d;\n  if (message === void 0) {\n    message = null;\n  }\n  if (stringSet === void 0) {\n    stringSet = LabelStringSet;\n  }\n  if (!message) return '';\n  if (isTemplateMessage(message)) {\n    return stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_TEMPLATE_MESSAGE;\n  }\n  if (message.isFileMessage()) {\n    return getChannelPreviewFileDisplayString(message.type, stringSet);\n  }\n  if (message.isMultipleFilesMessage()) {\n    var mimeType = (_b = (_a = message.fileInfoList) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.mimeType;\n    if (isImage(mimeType) || isGif(mimeType)) {\n      return (_c = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_PHOTO) !== null && _c !== void 0 ? _c : '';\n    }\n    return getChannelPreviewFileDisplayString(mimeType, stringSet);\n  }\n  return (_d = message.message) !== null && _d !== void 0 ? _d : '';\n};\nvar getLastMessage = function (channel, stringSet) {\n  if (stringSet === void 0) {\n    stringSet = LabelStringSet;\n  }\n  return (channel === null || channel === void 0 ? void 0 : channel.lastMessage) ? getPrettyLastMessage(channel === null || channel === void 0 ? void 0 : channel.lastMessage, stringSet) : '';\n};\nvar getChannelUnreadMessageCount = function (channel) {\n  return (channel === null || channel === void 0 ? void 0 : channel.unreadMessageCount) ? channel.unreadMessageCount : 0;\n};\nvar _a, _b;\nvar MessageStatusTypes = OutgoingMessageStates;\nvar iconType = (_a = {}, _a[OutgoingMessageStates.SENT] = IconTypes.DONE, _a[OutgoingMessageStates.DELIVERED] = IconTypes.DONE_ALL, _a[OutgoingMessageStates.READ] = IconTypes.DONE_ALL, _a[OutgoingMessageStates.FAILED] = IconTypes.ERROR, _a[OutgoingMessageStates.PENDING] = undefined, _a[OutgoingMessageStates.NONE] = undefined, _a);\nvar iconColor = (_b = {}, _b[OutgoingMessageStates.SENT] = IconColors.SENT, _b[OutgoingMessageStates.DELIVERED] = IconColors.SENT, _b[OutgoingMessageStates.READ] = IconColors.READ, _b[OutgoingMessageStates.FAILED] = IconColors.ERROR, _b[OutgoingMessageStates.PENDING] = undefined, _b[OutgoingMessageStates.NONE] = undefined, _b);\nfunction MessageStatus(_a) {\n  var _b;\n  var className = _a.className,\n    message = _a.message,\n    channel = _a.channel,\n    _c = _a.isDateSeparatorConsidered,\n    isDateSeparatorConsidered = _c === void 0 ? true : _c;\n  var _d = useLocalization(),\n    stringSet = _d.stringSet,\n    dateLocale = _d.dateLocale;\n  var status = getOutgoingMessageState(channel, message);\n  var hideMessageStatusIcon = ((_b = channel === null || channel === void 0 ? void 0 : channel.isGroupChannel) === null || _b === void 0 ? void 0 : _b.call(channel)) && (channel.isSuper || channel.isPublic || channel.isBroadcast) && !(status === OutgoingMessageStates.PENDING || status === OutgoingMessageStates.FAILED);\n  return React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-message-status'], false).join(' ')\n  }, status === OutgoingMessageStates.PENDING ? React__default.createElement(Loader, {\n    className: \"sendbird-message-status__icon\",\n    testID: \"sendbird-message-status-icon\",\n    width: \"16px\",\n    height: \"16px\"\n  }, React__default.createElement(Icon, {\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })) : React__default.createElement(Icon, {\n    className: classnames('sendbird-message-status__icon', hideMessageStatusIcon && 'hide-icon', status !== OutgoingMessageStates.FAILED && 'sendbird-message-status--sent'),\n    testID: \"sendbird-message-status-icon\",\n    type: iconType[status] || IconTypes.ERROR,\n    fillColor: iconColor[status],\n    width: \"16px\",\n    height: \"16px\"\n  }), isSentStatus(status) && React__default.createElement(Label, {\n    className: \"sendbird-message-status__text\",\n    testID: \"sendbird-message-status-text\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, isDateSeparatorConsidered ? format((message === null || message === void 0 ? void 0 : message.createdAt) || 0, 'p', {\n    locale: dateLocale\n  }) : getLastMessageCreatedAt({\n    channel: channel,\n    locale: dateLocale,\n    stringSet: stringSet\n  })));\n}\nexport { MessageStatus as M, getTotalMembers as a, getLastMessageCreatedAt as b, getLastMessage as c, getChannelUnreadMessageCount as d, MessageStatusTypes as e, getChannelTitle as g };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { c as __spreadArray } from './bundle-BQi9-O76.js';\nimport React__default from 'react';\nimport { f as format } from './bundle-CAdqcqOm.js';\nimport Icon, { IconTypes, IconColors } from '../ui/Icon.js';\nimport { c as LabelStringSet, L as Label, a as LabelTypography, b as LabelColors } from './bundle-DhKQeIfP.js';\nimport Loader from '../ui/Loader.js';\nimport { C as isTemplateMessage, j as isImage, z as isGif, h as isVideo, D as isAudio, E as isVoiceMessageMimeType, F as isSentStatus } from './bundle-DxTN4_0p.js';\nimport { OutgoingMessageStates, getOutgoingMessageState } from '../utils/message/getOutgoingMessageState.js';\nimport { i as isToday, a as isYesterday, b as isThisYear } from './bundle-BHK1eF5R.js';\nimport { u as useLocalization } from './bundle-cQZ3UZoG.js';\nimport { c as classnames } from './bundle-BgwzpLeQ.js';\n\nvar getChannelTitle = function (channel, currentUserId, stringSet) {\n    var _a;\n    if (stringSet === void 0) { stringSet = LabelStringSet; }\n    if (!(channel === null || channel === void 0 ? void 0 : channel.name) && !(channel === null || channel === void 0 ? void 0 : channel.members)) {\n        return stringSet.NO_TITLE;\n    }\n    if ((channel === null || channel === void 0 ? void 0 : channel.name) && channel.name !== 'Group Channel') {\n        return channel.name;\n    }\n    if (((_a = channel === null || channel === void 0 ? void 0 : channel.members) === null || _a === void 0 ? void 0 : _a.length) === 1) {\n        return stringSet.NO_MEMBERS;\n    }\n    return ((channel === null || channel === void 0 ? void 0 : channel.members) || [])\n        .filter(function (_a) {\n        var userId = _a.userId;\n        return userId !== currentUserId;\n    })\n        .map(function (_a) {\n        var nickname = _a.nickname;\n        return nickname || stringSet.NO_NAME;\n    })\n        .join(', ');\n};\nvar getLastMessageCreatedAt = function (_a) {\n    var _b;\n    var channel = _a.channel, locale = _a.locale, _c = _a.stringSet, stringSet = _c === void 0 ? LabelStringSet : _c;\n    var createdAt = (_b = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _b === void 0 ? void 0 : _b.createdAt;\n    var optionalParam = locale ? { locale: locale } : null;\n    if (!createdAt) {\n        return '';\n    }\n    if (isToday(createdAt)) {\n        return format(createdAt, 'p', optionalParam);\n    }\n    if (isYesterday(createdAt)) {\n        return stringSet.MESSAGE_STATUS__YESTERDAY || 'Yesterday';\n    }\n    if (isThisYear(createdAt)) {\n        return format(createdAt, 'MMM d', optionalParam);\n    }\n    return format(createdAt, 'yyyy/M/d', optionalParam);\n};\nvar getTotalMembers = function (channel) { return ((channel === null || channel === void 0 ? void 0 : channel.memberCount) ? channel.memberCount : 0); };\nvar getChannelPreviewFileDisplayString = function (mimeType, stringSet) {\n    var _a, _b, _c, _d, _e, _f;\n    if (stringSet === void 0) { stringSet = LabelStringSet; }\n    if (isGif(mimeType)) {\n        return (_a = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_GIF) !== null && _a !== void 0 ? _a : '';\n    }\n    if (isImage(mimeType)) {\n        return (_b = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_PHOTO) !== null && _b !== void 0 ? _b : '';\n    }\n    if (isVideo(mimeType)) {\n        return (_c = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_VIDEO) !== null && _c !== void 0 ? _c : '';\n    }\n    if (isAudio(mimeType)) {\n        return (_d = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_AUDIO) !== null && _d !== void 0 ? _d : '';\n    }\n    if (isVoiceMessageMimeType(mimeType)) {\n        return (_e = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_VOICE_MESSAGE) !== null && _e !== void 0 ? _e : '';\n    }\n    return (_f = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_GENERAL) !== null && _f !== void 0 ? _f : '';\n};\nvar getPrettyLastMessage = function (message, stringSet) {\n    var _a, _b, _c, _d;\n    if (message === void 0) { message = null; }\n    if (stringSet === void 0) { stringSet = LabelStringSet; }\n    if (!message)\n        return '';\n    if (isTemplateMessage(message)) {\n        return stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_TEMPLATE_MESSAGE;\n    }\n    if (message.isFileMessage()) {\n        return getChannelPreviewFileDisplayString(message.type, stringSet);\n    }\n    if (message.isMultipleFilesMessage()) {\n        var mimeType = (_b = (_a = message.fileInfoList) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.mimeType;\n        if (isImage(mimeType) || isGif(mimeType)) {\n            return (_c = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_PHOTO) !== null && _c !== void 0 ? _c : '';\n        }\n        return getChannelPreviewFileDisplayString(mimeType, stringSet);\n    }\n    return (_d = message.message) !== null && _d !== void 0 ? _d : '';\n};\nvar getLastMessage = function (channel, stringSet) {\n    if (stringSet === void 0) { stringSet = LabelStringSet; }\n    return (channel === null || channel === void 0 ? void 0 : channel.lastMessage) ? getPrettyLastMessage(channel === null || channel === void 0 ? void 0 : channel.lastMessage, stringSet) : '';\n};\nvar getChannelUnreadMessageCount = function (channel) { return (channel === null || channel === void 0 ? void 0 : channel.unreadMessageCount) ? channel.unreadMessageCount : 0; };\n\nvar _a, _b;\nvar MessageStatusTypes = OutgoingMessageStates;\nvar iconType = (_a = {},\n    _a[OutgoingMessageStates.SENT] = IconTypes.DONE,\n    _a[OutgoingMessageStates.DELIVERED] = IconTypes.DONE_ALL,\n    _a[OutgoingMessageStates.READ] = IconTypes.DONE_ALL,\n    _a[OutgoingMessageStates.FAILED] = IconTypes.ERROR,\n    _a[OutgoingMessageStates.PENDING] = undefined,\n    _a[OutgoingMessageStates.NONE] = undefined,\n    _a);\nvar iconColor = (_b = {},\n    _b[OutgoingMessageStates.SENT] = IconColors.SENT,\n    _b[OutgoingMessageStates.DELIVERED] = IconColors.SENT,\n    _b[OutgoingMessageStates.READ] = IconColors.READ,\n    _b[OutgoingMessageStates.FAILED] = IconColors.ERROR,\n    _b[OutgoingMessageStates.PENDING] = undefined,\n    _b[OutgoingMessageStates.NONE] = undefined,\n    _b);\nfunction MessageStatus(_a) {\n    var _b;\n    var className = _a.className, message = _a.message, channel = _a.channel, _c = _a.isDateSeparatorConsidered, isDateSeparatorConsidered = _c === void 0 ? true : _c;\n    var _d = useLocalization(), stringSet = _d.stringSet, dateLocale = _d.dateLocale;\n    var status = getOutgoingMessageState(channel, message);\n    var hideMessageStatusIcon = ((_b = channel === null || channel === void 0 ? void 0 : channel.isGroupChannel) === null || _b === void 0 ? void 0 : _b.call(channel)) && ((channel.isSuper || channel.isPublic || channel.isBroadcast)\n        && !(status === OutgoingMessageStates.PENDING || status === OutgoingMessageStates.FAILED));\n    return (React__default.createElement(\"div\", { className: __spreadArray(__spreadArray([], (Array.isArray(className) ? className : [className]), true), [\n            'sendbird-message-status',\n        ], false).join(' ') },\n        (status === OutgoingMessageStates.PENDING) ? (React__default.createElement(Loader, { className: \"sendbird-message-status__icon\", testID: \"sendbird-message-status-icon\", width: \"16px\", height: \"16px\" },\n            React__default.createElement(Icon, { type: IconTypes.SPINNER, fillColor: IconColors.PRIMARY, width: \"16px\", height: \"16px\" }))) : (React__default.createElement(Icon, { className: classnames('sendbird-message-status__icon', hideMessageStatusIcon && 'hide-icon', status !== OutgoingMessageStates.FAILED && 'sendbird-message-status--sent'), testID: \"sendbird-message-status-icon\", type: iconType[status] || IconTypes.ERROR, fillColor: iconColor[status], width: \"16px\", height: \"16px\" })),\n        isSentStatus(status) && (React__default.createElement(Label, { className: \"sendbird-message-status__text\", testID: \"sendbird-message-status-text\", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_2 }, isDateSeparatorConsidered\n            ? format((message === null || message === void 0 ? void 0 : message.createdAt) || 0, 'p', { locale: dateLocale })\n            : getLastMessageCreatedAt({ channel: channel, locale: dateLocale, stringSet: stringSet })))));\n}\n\nexport { MessageStatus as M, getTotalMembers as a, getLastMessageCreatedAt as b, getLastMessage as c, getChannelUnreadMessageCount as d, MessageStatusTypes as e, getChannelTitle as g };\n//# sourceMappingURL=bundle-vuBlPTsL.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}