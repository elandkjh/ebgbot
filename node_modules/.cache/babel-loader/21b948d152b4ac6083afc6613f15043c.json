{"ast":null,"code":"import { _ as __assign, a as __awaiter, b as __generator, c as __spreadArray } from '../../chunks/bundle-BQi9-O76.js';\nimport React__default, { useContext, useRef, useState, useLayoutEffect, useEffect, useMemo } from 'react';\nimport { f as format } from '../../chunks/bundle-CAdqcqOm.js';\nimport { u as useLocalization } from '../../chunks/bundle-cQZ3UZoG.js';\nimport DateSeparator from '../../ui/DateSeparator.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../chunks/bundle-DhKQeIfP.js';\nimport { R as RemoveMessage } from '../../chunks/bundle-D6ZpcPbH.js';\nimport FileViewer from '../../ui/FileViewer.js';\nimport { useThreadContext } from '../context.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport { S as SuggestedMentionList } from '../../chunks/bundle-BsAIw_77.js';\nimport MessageInput from '../../ui/MessageInput.js';\nimport { ThreadListStateTypes } from '../context/types.js';\nimport { M as MessageInputKeys } from '../../chunks/bundle-0qSTzMXb.js';\nimport { d as MENU_ROOT_ID, E as EMOJI_MENU_ROOT_ID, g as getObservingId, e as MENU_OBSERVING_CLASS_NAME, C as ContextMenu, b as MenuItems } from '../../chunks/bundle-CwKZj-B6.js';\nimport { A as Avatar } from '../../chunks/bundle-CFosTNce.js';\nimport { a as UserProfileContext } from '../../chunks/bundle-BrTJ5Zbd.js';\nimport UserProfile from '../../ui/UserProfile.js';\nimport { MessageEmojiMenu } from '../../ui/MessageItemReactionMenu.js';\nimport { n as getUIKitMessageTypes, e as getSenderName, w as getClassName, M as isOGMessage, N as isTextMessage, i as isVoiceMessage, m as getUIKitMessageType, c as isMultipleFilesMessage, p as isThumbnailMessage } from '../../chunks/bundle-DxTN4_0p.js';\nimport { M as MessageStatus } from '../../chunks/bundle-vuBlPTsL.js';\nimport EmojiReactions from '../../ui/EmojiReactions.js';\nimport TextMessageItemBody from '../../ui/TextMessageItemBody.js';\nimport OGMessageItemBody from '../../ui/OGMessageItemBody.js';\nimport FileMessageItemBody from '../../ui/FileMessageItemBody.js';\nimport ThumbnailMessageItemBody from '../../ui/ThumbnailMessageItemBody.js';\nimport UnknownMessageItemBody from '../../ui/UnknownMessageItemBody.js';\nimport { VoiceMessageItemBody } from '../../ui/VoiceMessageItemBody.js';\nimport { u as useMediaQueryContext } from '../../chunks/bundle-f-SpnOx2.js';\nimport { u as useLongPress } from '../../chunks/bundle-AfQS5DGf.js';\nimport { MobileMenu } from '../../ui/MobileMenu.js';\nimport { u as useThreadMessageKindKeySelector, a as useFileInfoListWithUploaded, M as MultipleFilesMessageItemBody, T as ThreadMessageKind } from '../../chunks/bundle-ZVq6xGXk.js';\nimport { c as classnames } from '../../chunks/bundle-BgwzpLeQ.js';\nimport { M as MessageMenu } from '../../chunks/bundle-DkBecO3w.js';\nimport { u as useElementObserver } from '../../chunks/bundle-Cf0UgZwi.js';\nimport { R as Role } from '../../chunks/bundle-C3Ty1Yuy.js';\nimport { useDirtyGetMentions } from '../../Message/hooks/useDirtyGetMentions.js';\nimport { g as getIsReactionEnabled } from '../../chunks/bundle-BNDaXsLn.js';\nimport { g as getCaseResolvedReplyType } from '../../chunks/bundle-fHeMHhND.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nimport '../../chunks/bundle-CXdo2kR_.js';\nimport 'react-dom';\nimport '../../ui/IconButton.js';\nimport '../../ui/Button.js';\nimport '../../ui/Icon.js';\nimport '@sendbird/uikit-tools';\nimport '../../withSendbird.js';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '@sendbird/chat/openChannel';\nimport '@sendbird/chat/groupChannel';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-Zvm5CMGT.js';\nimport '../../chunks/bundle-Gdl-rzQC.js';\nimport '../../chunks/bundle-T6fVCCb7.js';\nimport '../../chunks/bundle-b6TpX_JP.js';\nimport '../../chunks/bundle-CMLImr6T.js';\nimport '@sendbird/chat/message';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CpjASiz4.js';\nimport '../../chunks/bundle-CZUYMubi.js';\nimport '../../chunks/bundle-Due9yzp6.js';\nimport '../../chunks/bundle-CveCFQYP.js';\nimport '../../chunks/bundle-TZQ6dJCG.js';\nimport 'dompurify';\nimport '../../chunks/bundle-0nQK2G2O.js';\nimport '../../chunks/bundle-B6edg1g0.js';\nimport '../../chunks/bundle-DhGZA5UP.js';\nimport '../../chunks/bundle-GUbI4JcD.js';\nimport '../../ui/SortByRow.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../sendbirdSelectors.js';\nimport '../../ui/ReactionButton.js';\nimport '../../ui/Loader.js';\nimport '../../chunks/bundle-BHK1eF5R.js';\nimport '../../chunks/bundle-F5koPk19.js';\nimport '../../ui/ReactionBadge.js';\nimport '../../ui/BottomSheet.js';\nimport '../../ui/UserListItem.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/Checkbox.js';\nimport '../../ui/Tooltip.js';\nimport '../../ui/TooltipWrapper.js';\nimport '../../Message/context.js';\nimport '../../chunks/bundle-DofK8ySe.js';\nimport '../../ui/MentionLabel.js';\nimport '../../ui/LinkLabel.js';\nimport '../../ui/TextButton.js';\nimport '../../chunks/bundle-BqMHiKkl.js';\nimport '../../ui/ProgressBar.js';\nimport '../../VoicePlayer/useVoicePlayer.js';\nimport '../../ui/PlaybackTime.js';\nfunction ThreadListItemContent(_a) {\n  var _this = this;\n  var _b, _c, _d, _e, _f;\n  var className = _a.className,\n    userId = _a.userId,\n    channel = _a.channel,\n    message = _a.message,\n    _g = _a.chainTop,\n    chainTop = _g === void 0 ? false : _g,\n    _h = _a.chainBottom,\n    chainBottom = _h === void 0 ? false : _h,\n    _j = _a.isMentionEnabled,\n    isMentionEnabled = _j === void 0 ? false : _j,\n    _k = _a.isReactionEnabled,\n    isReactionEnabled = _k === void 0 ? false : _k,\n    _l = _a.disableQuoteMessage,\n    disableQuoteMessage = _l === void 0 ? false : _l,\n    replyType = _a.replyType,\n    nicknamesMap = _a.nicknamesMap,\n    emojiContainer = _a.emojiContainer,\n    showEdit = _a.showEdit,\n    showRemove = _a.showRemove,\n    showFileViewer = _a.showFileViewer,\n    resendMessage = _a.resendMessage,\n    toggleReaction = _a.toggleReaction,\n    onReplyInThread = _a.onReplyInThread,\n    _m = _a.renderEmojiMenu,\n    renderEmojiMenu = _m === void 0 ? function (props) {\n      return React__default.createElement(MessageEmojiMenu, __assign({}, props));\n    } : _m,\n    _o = _a.renderMessageMenu,\n    renderMessageMenu = _o === void 0 ? function (props) {\n      return React__default.createElement(MessageMenu, __assign({}, props));\n    } : _o;\n  var messageTypes = getUIKitMessageTypes();\n  var isMobile = useMediaQueryContext().isMobile;\n  var dateLocale = useLocalization().dateLocale;\n  var _p = (useSendbirdStateContext === null || useSendbirdStateContext === void 0 ? void 0 : useSendbirdStateContext()) || {},\n    config = _p.config,\n    eventHandlers = _p.eventHandlers;\n  var logger = config.logger;\n  var onPressUserProfileHandler = (_b = eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.reaction) === null || _b === void 0 ? void 0 : _b.onPressUserProfile;\n  var isMenuMounted = useElementObserver(\"#\".concat(getObservingId(message.messageId), \".\").concat(MENU_OBSERVING_CLASS_NAME), [document.getElementById(MENU_ROOT_ID), document.getElementById(EMOJI_MENU_ROOT_ID)]);\n  var _q = useContext(UserProfileContext),\n    disableUserProfile = _q.disableUserProfile,\n    renderUserProfile = _q.renderUserProfile;\n  var _r = useThreadContext(),\n    deleteMessage = _r.deleteMessage,\n    onBeforeDownloadFileMessage = _r.onBeforeDownloadFileMessage;\n  var avatarRef = useRef(null);\n  var isByMe = userId === ((_c = message === null || message === void 0 ? void 0 : message.sender) === null || _c === void 0 ? void 0 : _c.userId) || (message === null || message === void 0 ? void 0 : message.sendingStatus) === 'pending' || (message === null || message === void 0 ? void 0 : message.sendingStatus) === 'failed';\n  var useReplying = !!((replyType === 'QUOTE_REPLY' || replyType === 'THREAD') && (message === null || message === void 0 ? void 0 : message.parentMessageId) && (message === null || message === void 0 ? void 0 : message.parentMessage) && !disableQuoteMessage);\n  var supposedHoverClassName = isMenuMounted ? 'sendbird-mouse-hover' : '';\n  var isReactionEnabledInChannel = isReactionEnabled && !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral);\n  var isOgMessageEnabledInGroupChannel = channel.isGroupChannel() && config.groupChannel.enableOgtag;\n  // Mobile\n  var mobileMenuRef = useRef(null);\n  var _s = useState(false),\n    showMobileMenu = _s[0],\n    setShowMobileMenu = _s[1];\n  var longPress = useLongPress({\n    onLongPress: function () {\n      if (isMobile) {\n        setShowMobileMenu(true);\n      }\n    }\n  }, {\n    shouldPreventDefault: false\n  });\n  var threadMessageKindKey = useThreadMessageKindKeySelector({\n    threadMessageKind: ThreadMessageKind.CHILD,\n    isMobile: isMobile\n  });\n  // For MultipleFilesMessage only.\n  var statefulFileInfoList = useFileInfoListWithUploaded(message);\n  return React__default.createElement(\"div\", {\n    className: classnames('sendbird-thread-list-item-content', className, isByMe ? 'outgoing' : 'incoming'),\n    ref: mobileMenuRef\n  }, React__default.createElement(\"div\", {\n    className: classnames('sendbird-thread-list-item-content__left', isReactionEnabledInChannel && 'use-reaction', isByMe ? 'outgoing' : 'incoming')\n  }, !isByMe && !chainBottom && React__default.createElement(ContextMenu, {\n    menuTrigger: function (toggleDropdown) {\n      var _a, _b, _c;\n      return React__default.createElement(Avatar, {\n        className: \"sendbird-thread-list-item-content__left__avatar\",\n        src: ((_b = (_a = channel === null || channel === void 0 ? void 0 : channel.members) === null || _a === void 0 ? void 0 : _a.find(function (member) {\n          var _a;\n          return (member === null || member === void 0 ? void 0 : member.userId) === ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId);\n        })) === null || _b === void 0 ? void 0 : _b.profileUrl) || ((_c = message === null || message === void 0 ? void 0 : message.sender) === null || _c === void 0 ? void 0 : _c.profileUrl) || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function () {\n          if (!disableUserProfile) {\n            toggleDropdown === null || toggleDropdown === void 0 ? void 0 : toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function (closeDropdown) {\n      return renderUserProfile ? renderUserProfile({\n        user: message === null || message === void 0 ? void 0 : message.sender,\n        close: closeDropdown,\n        currentUserId: userId,\n        avatarRef: avatarRef\n      }) : React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: '0px',\n          paddingBottom: '0px'\n        }\n      }, React__default.createElement(UserProfile, {\n        user: message === null || message === void 0 ? void 0 : message.sender,\n        onSuccess: closeDropdown\n      }));\n    }\n  }), isByMe && !isMobile && React__default.createElement(\"div\", {\n    className: classnames('sendbird-thread-list-item-content-menu', isReactionEnabledInChannel && 'use-reaction', isByMe ? 'outgoing' : 'incoming', supposedHoverClassName)\n  }, renderMessageMenu({\n    className: 'sendbird-thread-list-item-content-menu__normal-menu',\n    channel: channel,\n    message: message,\n    isByMe: isByMe,\n    replyType: replyType,\n    showEdit: showEdit,\n    showRemove: showRemove,\n    resendMessage: resendMessage,\n    onReplyInThread: onReplyInThread,\n    deleteMessage: deleteMessage\n  }), isReactionEnabledInChannel && React__default.createElement(React__default.Fragment, null, renderEmojiMenu({\n    className: 'sendbird-thread-list-item-content-menu__reaction-menu',\n    message: message,\n    userId: userId,\n    emojiContainer: emojiContainer,\n    toggleReaction: toggleReaction\n  })))), React__default.createElement(\"div\", __assign({\n    className: \"sendbird-thread-list-item-content__middle\"\n  }, isMobile ? __assign({}, longPress) : {}), !isByMe && !chainTop && !useReplying && React__default.createElement(Label, {\n    className: \"sendbird-thread-list-item-content__middle__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, ((_e = (_d = channel === null || channel === void 0 ? void 0 : channel.members) === null || _d === void 0 ? void 0 : _d.find(function (member) {\n    var _a;\n    return (member === null || member === void 0 ? void 0 : member.userId) === ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId);\n  })) === null || _e === void 0 ? void 0 : _e.nickname) || getSenderName(message)\n  // TODO: Divide getting profileUrl logic to utils\n  ), React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-thread-list-item-content__middle__body-container'])\n  }, isByMe && !chainBottom && React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-thread-list-item-content__middle__body-container__created-at', 'left', supposedHoverClassName])\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-thread-list-item-content__middle__body-container__created-at__component-container\"\n  }, React__default.createElement(MessageStatus, {\n    message: message,\n    channel: channel\n  }))), isOgMessageEnabledInGroupChannel && isOGMessage(message) ? React__default.createElement(OGMessageItemBody, {\n    className: \"sendbird-thread-list-item-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    isMentionEnabled: isMentionEnabled,\n    isReactionEnabled: isReactionEnabledInChannel,\n    isMarkdownEnabled: config.groupChannel.enableMarkdownForUserMessage\n  }) : isTextMessage(message) && React__default.createElement(TextMessageItemBody, {\n    className: \"sendbird-thread-list-item-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    isMentionEnabled: isMentionEnabled,\n    isReactionEnabled: isReactionEnabledInChannel,\n    isMarkdownEnabled: config.groupChannel.enableMarkdownForUserMessage\n  }), isVoiceMessage(message) && React__default.createElement(VoiceMessageItemBody, {\n    className: \"sendbird-thread-list-item-content__middle__message-item-body\",\n    message: message,\n    channelUrl: channel === null || channel === void 0 ? void 0 : channel.url,\n    isByMe: isByMe,\n    isReactionEnabled: isReactionEnabledInChannel\n  }), getUIKitMessageType(message) === messageTypes.FILE && React__default.createElement(FileMessageItemBody, {\n    className: \"sendbird-thread-list-item-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    isReactionEnabled: isReactionEnabledInChannel,\n    truncateLimit: isByMe ? 18 : 14,\n    onBeforeDownloadFileMessage: onBeforeDownloadFileMessage\n  }), isMultipleFilesMessage(message) && React__default.createElement(MultipleFilesMessageItemBody, {\n    className: \"sendbird-thread-list-item-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    isReactionEnabled: isReactionEnabled,\n    threadMessageKindKey: threadMessageKindKey,\n    statefulFileInfoList: statefulFileInfoList\n  }), isThumbnailMessage(message) && React__default.createElement(ThumbnailMessageItemBody, {\n    className: \"sendbird-thread-list-item-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    isReactionEnabled: isReactionEnabledInChannel,\n    showFileViewer: showFileViewer,\n    style: {\n      width: isMobile ? '100%' : '200px',\n      height: '148px'\n    }\n  }), getUIKitMessageType(message) === messageTypes.UNKNOWN && React__default.createElement(UnknownMessageItemBody, {\n    className: \"sendbird-thread-list-item-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    isReactionEnabled: isReactionEnabledInChannel\n  }), isReactionEnabledInChannel && ((_f = message === null || message === void 0 ? void 0 : message.reactions) === null || _f === void 0 ? void 0 : _f.length) > 0 && React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-thread-list-item-content-reactions', !isByMe || isThumbnailMessage(message) || isOgMessageEnabledInGroupChannel && isOGMessage(message) || isMultipleFilesMessage(message) ? '' : 'primary'])\n  }, React__default.createElement(EmojiReactions, {\n    userId: userId,\n    message: message,\n    channel: channel,\n    isByMe: isByMe,\n    emojiContainer: emojiContainer,\n    memberNicknamesMap: nicknamesMap,\n    toggleReaction: toggleReaction,\n    onPressUserProfile: onPressUserProfileHandler\n  })), !isByMe && !chainBottom && React__default.createElement(Label, {\n    className: getClassName(['sendbird-thread-list-item-content__middle__body-container__created-at', 'right', supposedHoverClassName]),\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, format((message === null || message === void 0 ? void 0 : message.createdAt) || 0, 'p', {\n    locale: dateLocale\n  })))), React__default.createElement(\"div\", {\n    className: classnames('sendbird-thread-list-item-content__right', chainTop && 'chain-top', isByMe ? 'outgoing' : 'incoming')\n  }, !isByMe && !isMobile && React__default.createElement(\"div\", {\n    className: \"sendbird-thread-list-item-content-menu \".concat(supposedHoverClassName)\n  }, isReactionEnabledInChannel && renderEmojiMenu({\n    className: 'sendbird-thread-list-item-content-menu__reaction-menu',\n    message: message,\n    userId: userId,\n    emojiContainer: emojiContainer,\n    toggleReaction: toggleReaction\n  }), renderMessageMenu({\n    className: 'sendbird-thread-list-item-content-menu__normal-menu',\n    channel: channel,\n    message: message,\n    isByMe: isByMe,\n    replyType: replyType,\n    showRemove: showRemove,\n    resendMessage: resendMessage,\n    onReplyInThread: onReplyInThread,\n    deleteMessage: deleteMessage\n  }))), showMobileMenu && React__default.createElement(MobileMenu, {\n    parentRef: mobileMenuRef,\n    channel: channel,\n    message: message,\n    userId: userId,\n    replyType: replyType,\n    hideMenu: function () {\n      setShowMobileMenu(false);\n    },\n    isReactionEnabled: isReactionEnabled,\n    isByMe: isByMe,\n    emojiContainer: emojiContainer,\n    showEdit: showEdit,\n    showRemove: showRemove,\n    toggleReaction: toggleReaction,\n    isOpenedFromThread: true,\n    deleteMessage: deleteMessage,\n    onDownloadClick: function (e) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var allowDownload, err_1;\n        var _a, _b;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              if (!onBeforeDownloadFileMessage) return [2 /*return*/];\n              _c.label = 1;\n            case 1:\n              _c.trys.push([1, 3,, 4]);\n              return [4 /*yield*/, onBeforeDownloadFileMessage({\n                message: message\n              })];\n            case 2:\n              allowDownload = _c.sent();\n              if (!allowDownload) {\n                e.preventDefault();\n                (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, 'ThreadListItemContent: Not allowed to download.');\n              }\n              return [3 /*break*/, 4];\n            case 3:\n              err_1 = _c.sent();\n              (_b = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b === void 0 ? void 0 : _b.call(logger, 'ThreadListItemContent: Error occurred while determining download continuation:', err_1);\n              return [3 /*break*/, 4];\n            case 4:\n              return [2 /*return*/];\n          }\n        });\n      });\n    }\n  }));\n}\nfunction ThreadListItem(_a) {\n  var _this = this;\n  var _b, _c, _d, _e;\n  var className = _a.className,\n    message = _a.message,\n    chainTop = _a.chainTop,\n    chainBottom = _a.chainBottom,\n    hasSeparator = _a.hasSeparator,\n    renderCustomSeparator = _a.renderCustomSeparator,\n    handleScroll = _a.handleScroll,\n    renderEmojiMenu = _a.renderEmojiMenu,\n    renderMessageMenu = _a.renderMessageMenu;\n  var _f = useSendbirdStateContext(),\n    stores = _f.stores,\n    config = _f.config;\n  var isOnline = config.isOnline,\n    userMention = config.userMention,\n    logger = config.logger,\n    groupChannel = config.groupChannel;\n  var userId = (_c = (_b = stores === null || stores === void 0 ? void 0 : stores.userStore) === null || _b === void 0 ? void 0 : _b.user) === null || _c === void 0 ? void 0 : _c.userId;\n  var _g = useLocalization(),\n    dateLocale = _g.dateLocale,\n    stringSet = _g.stringSet;\n  var threadContext = useThreadContext === null || useThreadContext === void 0 ? void 0 : useThreadContext();\n  var currentChannel = threadContext.currentChannel,\n    nicknamesMap = threadContext.nicknamesMap,\n    emojiContainer = threadContext.emojiContainer,\n    toggleReaction = threadContext.toggleReaction,\n    threadListState = threadContext.threadListState,\n    updateMessage = threadContext.updateMessage,\n    resendMessage = threadContext.resendMessage,\n    deleteMessage = threadContext.deleteMessage,\n    isMuted = threadContext.isMuted,\n    isChannelFrozen = threadContext.isChannelFrozen,\n    onBeforeDownloadFileMessage = threadContext.onBeforeDownloadFileMessage;\n  var openingMessage = threadContext === null || threadContext === void 0 ? void 0 : threadContext.message;\n  var _h = useState(false),\n    showEdit = _h[0],\n    setShowEdit = _h[1];\n  var _j = useState(false),\n    showRemove = _j[0],\n    setShowRemove = _j[1];\n  var _k = useState(false),\n    showFileViewer = _k[0],\n    setShowFileViewer = _k[1];\n  var isReactionEnabled = getIsReactionEnabled({\n    channel: currentChannel,\n    config: config\n  });\n  var isMentionEnabled = groupChannel.enableMention;\n  var replyType = getCaseResolvedReplyType(groupChannel.replyType).upperCase;\n  // Move to message\n  var messageScrollRef = useRef(null);\n  useLayoutEffect(function () {\n    var _a;\n    if ((openingMessage === null || openingMessage === void 0 ? void 0 : openingMessage.messageId) === (message === null || message === void 0 ? void 0 : message.messageId) && (messageScrollRef === null || messageScrollRef === void 0 ? void 0 : messageScrollRef.current)) {\n      (_a = messageScrollRef.current) === null || _a === void 0 ? void 0 : _a.scrollIntoView({\n        block: 'center',\n        inline: 'center'\n      });\n    }\n  }, [openingMessage, messageScrollRef === null || messageScrollRef === void 0 ? void 0 : messageScrollRef.current]);\n  // reactions\n  useLayoutEffect(function () {\n    handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll();\n  }, [showEdit, (_d = message === null || message === void 0 ? void 0 : message.reactions) === null || _d === void 0 ? void 0 : _d.length]);\n  // mention\n  var editMessageInputRef = useRef(null);\n  var _l = useState(''),\n    mentionNickname = _l[0],\n    setMentionNickname = _l[1];\n  var _m = useState([]),\n    mentionedUsers = _m[0],\n    setMentionedUsers = _m[1];\n  var _o = useState([]),\n    mentionedUserIds = _o[0],\n    setMentionedUserIds = _o[1];\n  var _p = useState(null),\n    messageInputEvent = _p[0],\n    setMessageInputEvent = _p[1];\n  var _q = useState(null),\n    selectedUser = _q[0],\n    setSelectedUser = _q[1];\n  var _r = useState([]),\n    mentionSuggestedUsers = _r[0],\n    setMentionSuggestedUsers = _r[1];\n  var displaySuggestedMentionList = isOnline && isMentionEnabled && mentionNickname.length > 0 && !isMuted && !(isChannelFrozen && !(currentChannel.myRole === Role.OPERATOR));\n  var mentionNodes = useDirtyGetMentions({\n    ref: editMessageInputRef\n  }, {\n    logger: logger\n  });\n  var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount);\n  useEffect(function () {\n    setMentionedUsers(mentionedUsers.filter(function (_a) {\n      var userId = _a.userId;\n      var i = mentionedUserIds.indexOf(userId);\n      if (i < 0) {\n        return false;\n      } else {\n        mentionedUserIds.splice(i, 1);\n        return true;\n      }\n    }));\n  }, [mentionedUserIds]);\n  // edit input\n  var disabled = !(threadListState === ThreadListStateTypes.INITIALIZED) || !isOnline || isMuted || isChannelFrozen;\n  // memorize\n  var MemorizedSeparator = useMemo(function () {\n    if (typeof renderCustomSeparator === 'function') {\n      return renderCustomSeparator === null || renderCustomSeparator === void 0 ? void 0 : renderCustomSeparator({\n        message: message\n      });\n    }\n  }, [message, renderCustomSeparator]);\n  // Edit message\n  if (showEdit && message.isUserMessage()) {\n    return React__default.createElement(React__default.Fragment, null, displaySuggestedMentionList && React__default.createElement(SuggestedMentionList, {\n      targetNickname: mentionNickname,\n      inputEvent: messageInputEvent !== null && messageInputEvent !== void 0 ? messageInputEvent : undefined,\n      // renderUserMentionItem={renderUserMentionItem}\n      onUserItemClick: function (user) {\n        if (user) {\n          setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));\n        }\n        setMentionNickname('');\n        setSelectedUser(user);\n        setMessageInputEvent(null);\n      },\n      onFocusItemChange: function () {\n        setMessageInputEvent(null);\n      },\n      onFetchUsers: function (users) {\n        setMentionSuggestedUsers(users);\n      },\n      ableAddMention: ableMention,\n      maxMentionCount: userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount,\n      maxSuggestionCount: userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount\n    }), React__default.createElement(MessageInput, {\n      isEdit: true,\n      channel: currentChannel,\n      disabled: disabled,\n      ref: editMessageInputRef,\n      mentionSelectedUser: selectedUser,\n      isMentionEnabled: isMentionEnabled,\n      message: message,\n      onStartTyping: function () {\n        var _a;\n        (_a = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.startTyping) === null || _a === void 0 ? void 0 : _a.call(currentChannel);\n      },\n      onUpdateMessage: function (_a) {\n        var _b;\n        var messageId = _a.messageId,\n          message = _a.message,\n          mentionTemplate = _a.mentionTemplate;\n        updateMessage({\n          messageId: messageId,\n          message: message,\n          mentionedUsers: mentionedUsers,\n          mentionTemplate: mentionTemplate\n        });\n        setShowEdit(false);\n        (_b = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.endTyping) === null || _b === void 0 ? void 0 : _b.call(currentChannel);\n      },\n      onCancelEdit: function () {\n        var _a;\n        setMentionNickname('');\n        setMentionedUsers([]);\n        setMentionedUserIds([]);\n        setMentionSuggestedUsers([]);\n        setShowEdit(false);\n        (_a = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.endTyping) === null || _a === void 0 ? void 0 : _a.call(currentChannel);\n      },\n      onUserMentioned: function (user) {\n        if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {\n          setSelectedUser(null);\n          setMentionNickname('');\n        }\n      },\n      onMentionStringChange: function (mentionText) {\n        setMentionNickname(mentionText);\n      },\n      onMentionedUserIdsUpdated: function (userIds) {\n        setMentionedUserIds(userIds);\n      },\n      onKeyDown: function (e) {\n        if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0 && (e.key === MessageInputKeys.Enter && ableMention || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)) {\n          setMessageInputEvent(e);\n          return true;\n        }\n        return false;\n      }\n    }));\n  }\n  return React__default.createElement(\"div\", {\n    ref: messageScrollRef,\n    className: classnames('sendbird-thread-list-item', className),\n    \"data-testid\": \"sendbird-thread-list-item\"\n  }, hasSeparator && (message === null || message === void 0 ? void 0 : message.createdAt) && (MemorizedSeparator || React__default.createElement(DateSeparator, null, React__default.createElement(Label, {\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, format(message === null || message === void 0 ? void 0 : message.createdAt, stringSet.DATE_FORMAT__THREAD_LIST__DATE_SEPARATOR, {\n    locale: dateLocale\n  })))), React__default.createElement(ThreadListItemContent, {\n    userId: userId,\n    channel: currentChannel,\n    message: message,\n    chainTop: chainTop,\n    chainBottom: chainBottom,\n    isReactionEnabled: isReactionEnabled,\n    isMentionEnabled: isMentionEnabled,\n    disableQuoteMessage: true,\n    replyType: replyType,\n    nicknamesMap: nicknamesMap,\n    emojiContainer: emojiContainer,\n    resendMessage: resendMessage,\n    showRemove: setShowRemove,\n    showFileViewer: setShowFileViewer,\n    toggleReaction: toggleReaction,\n    showEdit: setShowEdit,\n    renderEmojiMenu: renderEmojiMenu,\n    renderMessageMenu: renderMessageMenu\n  }), showRemove && React__default.createElement(RemoveMessage, {\n    message: message,\n    onCancel: function () {\n      return setShowRemove(false);\n    }\n  }), showFileViewer && React__default.createElement(FileViewer, {\n    message: message,\n    isByMe: ((_e = message === null || message === void 0 ? void 0 : message.sender) === null || _e === void 0 ? void 0 : _e.userId) === userId,\n    onClose: function () {\n      return setShowFileViewer(false);\n    },\n    onDelete: function () {\n      deleteMessage(message);\n      setShowFileViewer(false);\n    },\n    onDownloadClick: function (e) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var allowDownload, err_1;\n        var _a, _b;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              if (!onBeforeDownloadFileMessage) return [2 /*return*/];\n              _c.label = 1;\n            case 1:\n              _c.trys.push([1, 3,, 4]);\n              return [4 /*yield*/, onBeforeDownloadFileMessage({\n                message: message\n              })];\n            case 2:\n              allowDownload = _c.sent();\n              if (!allowDownload) {\n                e.preventDefault();\n                (_a = logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, 'ThreadListItem: Not allowed to download.');\n              }\n              return [3 /*break*/, 4];\n            case 3:\n              err_1 = _c.sent();\n              (_b = logger.error) === null || _b === void 0 ? void 0 : _b.call(logger, 'ThreadListItem: Error occurred while determining download continuation:', err_1);\n              return [3 /*break*/, 4];\n            case 4:\n              return [2 /*return*/];\n          }\n        });\n      });\n    }\n  }));\n}\nexport { ThreadListItem as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { _ as __assign, a as __awaiter, b as __generator, c as __spreadArray } from '../../chunks/bundle-BQi9-O76.js';\nimport React__default, { useContext, useRef, useState, useLayoutEffect, useEffect, useMemo } from 'react';\nimport { f as format } from '../../chunks/bundle-CAdqcqOm.js';\nimport { u as useLocalization } from '../../chunks/bundle-cQZ3UZoG.js';\nimport DateSeparator from '../../ui/DateSeparator.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../chunks/bundle-DhKQeIfP.js';\nimport { R as RemoveMessage } from '../../chunks/bundle-D6ZpcPbH.js';\nimport FileViewer from '../../ui/FileViewer.js';\nimport { useThreadContext } from '../context.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport { S as SuggestedMentionList } from '../../chunks/bundle-BsAIw_77.js';\nimport MessageInput from '../../ui/MessageInput.js';\nimport { ThreadListStateTypes } from '../context/types.js';\nimport { M as MessageInputKeys } from '../../chunks/bundle-0qSTzMXb.js';\nimport { d as MENU_ROOT_ID, E as EMOJI_MENU_ROOT_ID, g as getObservingId, e as MENU_OBSERVING_CLASS_NAME, C as ContextMenu, b as MenuItems } from '../../chunks/bundle-CwKZj-B6.js';\nimport { A as Avatar } from '../../chunks/bundle-CFosTNce.js';\nimport { a as UserProfileContext } from '../../chunks/bundle-BrTJ5Zbd.js';\nimport UserProfile from '../../ui/UserProfile.js';\nimport { MessageEmojiMenu } from '../../ui/MessageItemReactionMenu.js';\nimport { n as getUIKitMessageTypes, e as getSenderName, w as getClassName, M as isOGMessage, N as isTextMessage, i as isVoiceMessage, m as getUIKitMessageType, c as isMultipleFilesMessage, p as isThumbnailMessage } from '../../chunks/bundle-DxTN4_0p.js';\nimport { M as MessageStatus } from '../../chunks/bundle-vuBlPTsL.js';\nimport EmojiReactions from '../../ui/EmojiReactions.js';\nimport TextMessageItemBody from '../../ui/TextMessageItemBody.js';\nimport OGMessageItemBody from '../../ui/OGMessageItemBody.js';\nimport FileMessageItemBody from '../../ui/FileMessageItemBody.js';\nimport ThumbnailMessageItemBody from '../../ui/ThumbnailMessageItemBody.js';\nimport UnknownMessageItemBody from '../../ui/UnknownMessageItemBody.js';\nimport { VoiceMessageItemBody } from '../../ui/VoiceMessageItemBody.js';\nimport { u as useMediaQueryContext } from '../../chunks/bundle-f-SpnOx2.js';\nimport { u as useLongPress } from '../../chunks/bundle-AfQS5DGf.js';\nimport { MobileMenu } from '../../ui/MobileMenu.js';\nimport { u as useThreadMessageKindKeySelector, a as useFileInfoListWithUploaded, M as MultipleFilesMessageItemBody, T as ThreadMessageKind } from '../../chunks/bundle-ZVq6xGXk.js';\nimport { c as classnames } from '../../chunks/bundle-BgwzpLeQ.js';\nimport { M as MessageMenu } from '../../chunks/bundle-DkBecO3w.js';\nimport { u as useElementObserver } from '../../chunks/bundle-Cf0UgZwi.js';\nimport { R as Role } from '../../chunks/bundle-C3Ty1Yuy.js';\nimport { useDirtyGetMentions } from '../../Message/hooks/useDirtyGetMentions.js';\nimport { g as getIsReactionEnabled } from '../../chunks/bundle-BNDaXsLn.js';\nimport { g as getCaseResolvedReplyType } from '../../chunks/bundle-fHeMHhND.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nimport '../../chunks/bundle-CXdo2kR_.js';\nimport 'react-dom';\nimport '../../ui/IconButton.js';\nimport '../../ui/Button.js';\nimport '../../ui/Icon.js';\nimport '@sendbird/uikit-tools';\nimport '../../withSendbird.js';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '@sendbird/chat/openChannel';\nimport '@sendbird/chat/groupChannel';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-Zvm5CMGT.js';\nimport '../../chunks/bundle-Gdl-rzQC.js';\nimport '../../chunks/bundle-T6fVCCb7.js';\nimport '../../chunks/bundle-b6TpX_JP.js';\nimport '../../chunks/bundle-CMLImr6T.js';\nimport '@sendbird/chat/message';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CpjASiz4.js';\nimport '../../chunks/bundle-CZUYMubi.js';\nimport '../../chunks/bundle-Due9yzp6.js';\nimport '../../chunks/bundle-CveCFQYP.js';\nimport '../../chunks/bundle-TZQ6dJCG.js';\nimport 'dompurify';\nimport '../../chunks/bundle-0nQK2G2O.js';\nimport '../../chunks/bundle-B6edg1g0.js';\nimport '../../chunks/bundle-DhGZA5UP.js';\nimport '../../chunks/bundle-GUbI4JcD.js';\nimport '../../ui/SortByRow.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../sendbirdSelectors.js';\nimport '../../ui/ReactionButton.js';\nimport '../../ui/Loader.js';\nimport '../../chunks/bundle-BHK1eF5R.js';\nimport '../../chunks/bundle-F5koPk19.js';\nimport '../../ui/ReactionBadge.js';\nimport '../../ui/BottomSheet.js';\nimport '../../ui/UserListItem.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/Checkbox.js';\nimport '../../ui/Tooltip.js';\nimport '../../ui/TooltipWrapper.js';\nimport '../../Message/context.js';\nimport '../../chunks/bundle-DofK8ySe.js';\nimport '../../ui/MentionLabel.js';\nimport '../../ui/LinkLabel.js';\nimport '../../ui/TextButton.js';\nimport '../../chunks/bundle-BqMHiKkl.js';\nimport '../../ui/ProgressBar.js';\nimport '../../VoicePlayer/useVoicePlayer.js';\nimport '../../ui/PlaybackTime.js';\n\nfunction ThreadListItemContent(_a) {\n    var _this = this;\n    var _b, _c, _d, _e, _f;\n    var className = _a.className, userId = _a.userId, channel = _a.channel, message = _a.message, _g = _a.chainTop, chainTop = _g === void 0 ? false : _g, _h = _a.chainBottom, chainBottom = _h === void 0 ? false : _h, _j = _a.isMentionEnabled, isMentionEnabled = _j === void 0 ? false : _j, _k = _a.isReactionEnabled, isReactionEnabled = _k === void 0 ? false : _k, _l = _a.disableQuoteMessage, disableQuoteMessage = _l === void 0 ? false : _l, replyType = _a.replyType, nicknamesMap = _a.nicknamesMap, emojiContainer = _a.emojiContainer, showEdit = _a.showEdit, showRemove = _a.showRemove, showFileViewer = _a.showFileViewer, resendMessage = _a.resendMessage, toggleReaction = _a.toggleReaction, onReplyInThread = _a.onReplyInThread, _m = _a.renderEmojiMenu, renderEmojiMenu = _m === void 0 ? function (props) { return React__default.createElement(MessageEmojiMenu, __assign({}, props)); } : _m, _o = _a.renderMessageMenu, renderMessageMenu = _o === void 0 ? function (props) { return React__default.createElement(MessageMenu, __assign({}, props)); } : _o;\n    var messageTypes = getUIKitMessageTypes();\n    var isMobile = useMediaQueryContext().isMobile;\n    var dateLocale = useLocalization().dateLocale;\n    var _p = (useSendbirdStateContext === null || useSendbirdStateContext === void 0 ? void 0 : useSendbirdStateContext()) || {}, config = _p.config, eventHandlers = _p.eventHandlers;\n    var logger = config.logger;\n    var onPressUserProfileHandler = (_b = eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.reaction) === null || _b === void 0 ? void 0 : _b.onPressUserProfile;\n    var isMenuMounted = useElementObserver(\"#\".concat(getObservingId(message.messageId), \".\").concat(MENU_OBSERVING_CLASS_NAME), [\n        document.getElementById(MENU_ROOT_ID),\n        document.getElementById(EMOJI_MENU_ROOT_ID),\n    ]);\n    var _q = useContext(UserProfileContext), disableUserProfile = _q.disableUserProfile, renderUserProfile = _q.renderUserProfile;\n    var _r = useThreadContext(), deleteMessage = _r.deleteMessage, onBeforeDownloadFileMessage = _r.onBeforeDownloadFileMessage;\n    var avatarRef = useRef(null);\n    var isByMe = (userId === ((_c = message === null || message === void 0 ? void 0 : message.sender) === null || _c === void 0 ? void 0 : _c.userId))\n        || ((message === null || message === void 0 ? void 0 : message.sendingStatus) === 'pending')\n        || ((message === null || message === void 0 ? void 0 : message.sendingStatus) === 'failed');\n    var useReplying = !!((replyType === 'QUOTE_REPLY' || replyType === 'THREAD')\n        && (message === null || message === void 0 ? void 0 : message.parentMessageId) && (message === null || message === void 0 ? void 0 : message.parentMessage)\n        && !disableQuoteMessage);\n    var supposedHoverClassName = isMenuMounted ? 'sendbird-mouse-hover' : '';\n    var isReactionEnabledInChannel = isReactionEnabled && !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral);\n    var isOgMessageEnabledInGroupChannel = channel.isGroupChannel() && config.groupChannel.enableOgtag;\n    // Mobile\n    var mobileMenuRef = useRef(null);\n    var _s = useState(false), showMobileMenu = _s[0], setShowMobileMenu = _s[1];\n    var longPress = useLongPress({\n        onLongPress: function () {\n            if (isMobile) {\n                setShowMobileMenu(true);\n            }\n        },\n    }, {\n        shouldPreventDefault: false,\n    });\n    var threadMessageKindKey = useThreadMessageKindKeySelector({\n        threadMessageKind: ThreadMessageKind.CHILD,\n        isMobile: isMobile,\n    });\n    // For MultipleFilesMessage only.\n    var statefulFileInfoList = useFileInfoListWithUploaded(message);\n    return (React__default.createElement(\"div\", { className: classnames('sendbird-thread-list-item-content', className, isByMe ? 'outgoing' : 'incoming'), ref: mobileMenuRef },\n        React__default.createElement(\"div\", { className: classnames('sendbird-thread-list-item-content__left', isReactionEnabledInChannel && 'use-reaction', isByMe ? 'outgoing' : 'incoming') },\n            (!isByMe && !chainBottom) && (React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) {\n                    var _a, _b, _c;\n                    return (React__default.createElement(Avatar, { className: \"sendbird-thread-list-item-content__left__avatar\", src: ((_b = (_a = channel === null || channel === void 0 ? void 0 : channel.members) === null || _a === void 0 ? void 0 : _a.find(function (member) { var _a; return (member === null || member === void 0 ? void 0 : member.userId) === ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId); })) === null || _b === void 0 ? void 0 : _b.profileUrl) || ((_c = message === null || message === void 0 ? void 0 : message.sender) === null || _c === void 0 ? void 0 : _c.profileUrl) || '', ref: avatarRef, width: \"28px\", height: \"28px\", onClick: function () {\n                            if (!disableUserProfile) {\n                                toggleDropdown === null || toggleDropdown === void 0 ? void 0 : toggleDropdown();\n                            }\n                        } }));\n                }, menuItems: function (closeDropdown) { return (renderUserProfile\n                    ? renderUserProfile({\n                        user: message === null || message === void 0 ? void 0 : message.sender,\n                        close: closeDropdown,\n                        currentUserId: userId,\n                        avatarRef: avatarRef,\n                    })\n                    : (React__default.createElement(MenuItems, { parentRef: avatarRef, parentContainRef: avatarRef, closeDropdown: closeDropdown, style: { paddingTop: '0px', paddingBottom: '0px' } },\n                        React__default.createElement(UserProfile, { user: message === null || message === void 0 ? void 0 : message.sender, onSuccess: closeDropdown })))); } })),\n            (isByMe && !isMobile) && (React__default.createElement(\"div\", { className: classnames('sendbird-thread-list-item-content-menu', isReactionEnabledInChannel && 'use-reaction', isByMe ? 'outgoing' : 'incoming', supposedHoverClassName) },\n                renderMessageMenu({\n                    className: 'sendbird-thread-list-item-content-menu__normal-menu',\n                    channel: channel,\n                    message: message,\n                    isByMe: isByMe,\n                    replyType: replyType,\n                    showEdit: showEdit,\n                    showRemove: showRemove,\n                    resendMessage: resendMessage,\n                    onReplyInThread: onReplyInThread,\n                    deleteMessage: deleteMessage,\n                }),\n                isReactionEnabledInChannel && (React__default.createElement(React__default.Fragment, null, renderEmojiMenu({\n                    className: 'sendbird-thread-list-item-content-menu__reaction-menu',\n                    message: message,\n                    userId: userId,\n                    emojiContainer: emojiContainer,\n                    toggleReaction: toggleReaction,\n                })))))),\n        React__default.createElement(\"div\", __assign({ className: \"sendbird-thread-list-item-content__middle\" }, (isMobile) ? __assign({}, longPress) : {}),\n            (!isByMe && !chainTop && !useReplying) && (React__default.createElement(Label, { className: \"sendbird-thread-list-item-content__middle__sender-name\", type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, ((_e = (_d = channel === null || channel === void 0 ? void 0 : channel.members) === null || _d === void 0 ? void 0 : _d.find(function (member) { var _a; return (member === null || member === void 0 ? void 0 : member.userId) === ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId); })) === null || _e === void 0 ? void 0 : _e.nickname)\n                || getSenderName(message)\n            // TODO: Divide getting profileUrl logic to utils\n            )),\n            React__default.createElement(\"div\", { className: getClassName(['sendbird-thread-list-item-content__middle__body-container']) },\n                (isByMe && !chainBottom) && (React__default.createElement(\"div\", { className: getClassName(['sendbird-thread-list-item-content__middle__body-container__created-at', 'left', supposedHoverClassName]) },\n                    React__default.createElement(\"div\", { className: \"sendbird-thread-list-item-content__middle__body-container__created-at__component-container\" },\n                        React__default.createElement(MessageStatus, { message: message, channel: channel })))),\n                isOgMessageEnabledInGroupChannel && isOGMessage(message)\n                    ? (React__default.createElement(OGMessageItemBody, { className: \"sendbird-thread-list-item-content__middle__message-item-body\", message: message, isByMe: isByMe, isMentionEnabled: isMentionEnabled, isReactionEnabled: isReactionEnabledInChannel, isMarkdownEnabled: config.groupChannel.enableMarkdownForUserMessage })) : isTextMessage(message) && (React__default.createElement(TextMessageItemBody, { className: \"sendbird-thread-list-item-content__middle__message-item-body\", message: message, isByMe: isByMe, isMentionEnabled: isMentionEnabled, isReactionEnabled: isReactionEnabledInChannel, isMarkdownEnabled: config.groupChannel.enableMarkdownForUserMessage })),\n                isVoiceMessage(message) && (React__default.createElement(VoiceMessageItemBody, { className: \"sendbird-thread-list-item-content__middle__message-item-body\", message: message, channelUrl: channel === null || channel === void 0 ? void 0 : channel.url, isByMe: isByMe, isReactionEnabled: isReactionEnabledInChannel })),\n                (getUIKitMessageType(message) === messageTypes.FILE) && (React__default.createElement(FileMessageItemBody, { className: \"sendbird-thread-list-item-content__middle__message-item-body\", message: message, isByMe: isByMe, isReactionEnabled: isReactionEnabledInChannel, truncateLimit: isByMe ? 18 : 14, onBeforeDownloadFileMessage: onBeforeDownloadFileMessage })),\n                isMultipleFilesMessage(message) && (React__default.createElement(MultipleFilesMessageItemBody, { className: \"sendbird-thread-list-item-content__middle__message-item-body\", message: message, isByMe: isByMe, isReactionEnabled: isReactionEnabled, threadMessageKindKey: threadMessageKindKey, statefulFileInfoList: statefulFileInfoList })),\n                (isThumbnailMessage(message)) && (React__default.createElement(ThumbnailMessageItemBody, { className: \"sendbird-thread-list-item-content__middle__message-item-body\", message: message, isByMe: isByMe, isReactionEnabled: isReactionEnabledInChannel, showFileViewer: showFileViewer, style: {\n                        width: isMobile ? '100%' : '200px',\n                        height: '148px',\n                    } })),\n                (getUIKitMessageType(message) === messageTypes.UNKNOWN) && (React__default.createElement(UnknownMessageItemBody, { className: \"sendbird-thread-list-item-content__middle__message-item-body\", message: message, isByMe: isByMe, isReactionEnabled: isReactionEnabledInChannel })),\n                (isReactionEnabledInChannel && ((_f = message === null || message === void 0 ? void 0 : message.reactions) === null || _f === void 0 ? void 0 : _f.length) > 0) && (React__default.createElement(\"div\", { className: getClassName([\n                        'sendbird-thread-list-item-content-reactions',\n                        (!isByMe\n                            || isThumbnailMessage(message)\n                            || (isOgMessageEnabledInGroupChannel && isOGMessage(message))\n                            || isMultipleFilesMessage(message)) ? '' : 'primary',\n                    ]) },\n                    React__default.createElement(EmojiReactions, { userId: userId, message: message, channel: channel, isByMe: isByMe, emojiContainer: emojiContainer, memberNicknamesMap: nicknamesMap, toggleReaction: toggleReaction, onPressUserProfile: onPressUserProfileHandler }))),\n                (!isByMe && !chainBottom) && (React__default.createElement(Label, { className: getClassName(['sendbird-thread-list-item-content__middle__body-container__created-at', 'right', supposedHoverClassName]), type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_2 }, format((message === null || message === void 0 ? void 0 : message.createdAt) || 0, 'p', {\n                    locale: dateLocale,\n                }))))),\n        React__default.createElement(\"div\", { className: classnames('sendbird-thread-list-item-content__right', chainTop && 'chain-top', isByMe ? 'outgoing' : 'incoming') }, (!isByMe && !isMobile) && (React__default.createElement(\"div\", { className: \"sendbird-thread-list-item-content-menu \".concat(supposedHoverClassName) },\n            isReactionEnabledInChannel && (renderEmojiMenu({\n                className: 'sendbird-thread-list-item-content-menu__reaction-menu',\n                message: message,\n                userId: userId,\n                emojiContainer: emojiContainer,\n                toggleReaction: toggleReaction,\n            })),\n            renderMessageMenu({\n                className: 'sendbird-thread-list-item-content-menu__normal-menu',\n                channel: channel,\n                message: message,\n                isByMe: isByMe,\n                replyType: replyType,\n                showRemove: showRemove,\n                resendMessage: resendMessage,\n                onReplyInThread: onReplyInThread,\n                deleteMessage: deleteMessage,\n            })))),\n        showMobileMenu && (React__default.createElement(MobileMenu, { parentRef: mobileMenuRef, channel: channel, message: message, userId: userId, replyType: replyType, hideMenu: function () {\n                setShowMobileMenu(false);\n            }, isReactionEnabled: isReactionEnabled, isByMe: isByMe, emojiContainer: emojiContainer, showEdit: showEdit, showRemove: showRemove, toggleReaction: toggleReaction, isOpenedFromThread: true, deleteMessage: deleteMessage, onDownloadClick: function (e) { return __awaiter(_this, void 0, void 0, function () {\n                var allowDownload, err_1;\n                var _a, _b;\n                return __generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0:\n                            if (!onBeforeDownloadFileMessage)\n                                return [2 /*return*/];\n                            _c.label = 1;\n                        case 1:\n                            _c.trys.push([1, 3, , 4]);\n                            return [4 /*yield*/, onBeforeDownloadFileMessage({ message: message })];\n                        case 2:\n                            allowDownload = _c.sent();\n                            if (!allowDownload) {\n                                e.preventDefault();\n                                (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, 'ThreadListItemContent: Not allowed to download.');\n                            }\n                            return [3 /*break*/, 4];\n                        case 3:\n                            err_1 = _c.sent();\n                            (_b = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b === void 0 ? void 0 : _b.call(logger, 'ThreadListItemContent: Error occurred while determining download continuation:', err_1);\n                            return [3 /*break*/, 4];\n                        case 4: return [2 /*return*/];\n                    }\n                });\n            }); } }))));\n}\n\nfunction ThreadListItem(_a) {\n    var _this = this;\n    var _b, _c, _d, _e;\n    var className = _a.className, message = _a.message, chainTop = _a.chainTop, chainBottom = _a.chainBottom, hasSeparator = _a.hasSeparator, renderCustomSeparator = _a.renderCustomSeparator, handleScroll = _a.handleScroll, renderEmojiMenu = _a.renderEmojiMenu, renderMessageMenu = _a.renderMessageMenu;\n    var _f = useSendbirdStateContext(), stores = _f.stores, config = _f.config;\n    var isOnline = config.isOnline, userMention = config.userMention, logger = config.logger, groupChannel = config.groupChannel;\n    var userId = (_c = (_b = stores === null || stores === void 0 ? void 0 : stores.userStore) === null || _b === void 0 ? void 0 : _b.user) === null || _c === void 0 ? void 0 : _c.userId;\n    var _g = useLocalization(), dateLocale = _g.dateLocale, stringSet = _g.stringSet;\n    var threadContext = useThreadContext === null || useThreadContext === void 0 ? void 0 : useThreadContext();\n    var currentChannel = threadContext.currentChannel, nicknamesMap = threadContext.nicknamesMap, emojiContainer = threadContext.emojiContainer, toggleReaction = threadContext.toggleReaction, threadListState = threadContext.threadListState, updateMessage = threadContext.updateMessage, resendMessage = threadContext.resendMessage, deleteMessage = threadContext.deleteMessage, isMuted = threadContext.isMuted, isChannelFrozen = threadContext.isChannelFrozen, onBeforeDownloadFileMessage = threadContext.onBeforeDownloadFileMessage;\n    var openingMessage = threadContext === null || threadContext === void 0 ? void 0 : threadContext.message;\n    var _h = useState(false), showEdit = _h[0], setShowEdit = _h[1];\n    var _j = useState(false), showRemove = _j[0], setShowRemove = _j[1];\n    var _k = useState(false), showFileViewer = _k[0], setShowFileViewer = _k[1];\n    var isReactionEnabled = getIsReactionEnabled({\n        channel: currentChannel,\n        config: config,\n    });\n    var isMentionEnabled = groupChannel.enableMention;\n    var replyType = getCaseResolvedReplyType(groupChannel.replyType).upperCase;\n    // Move to message\n    var messageScrollRef = useRef(null);\n    useLayoutEffect(function () {\n        var _a;\n        if ((openingMessage === null || openingMessage === void 0 ? void 0 : openingMessage.messageId) === (message === null || message === void 0 ? void 0 : message.messageId) && (messageScrollRef === null || messageScrollRef === void 0 ? void 0 : messageScrollRef.current)) {\n            (_a = messageScrollRef.current) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ block: 'center', inline: 'center' });\n        }\n    }, [openingMessage, messageScrollRef === null || messageScrollRef === void 0 ? void 0 : messageScrollRef.current]);\n    // reactions\n    useLayoutEffect(function () {\n        handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll();\n    }, [showEdit, (_d = message === null || message === void 0 ? void 0 : message.reactions) === null || _d === void 0 ? void 0 : _d.length]);\n    // mention\n    var editMessageInputRef = useRef(null);\n    var _l = useState(''), mentionNickname = _l[0], setMentionNickname = _l[1];\n    var _m = useState([]), mentionedUsers = _m[0], setMentionedUsers = _m[1];\n    var _o = useState([]), mentionedUserIds = _o[0], setMentionedUserIds = _o[1];\n    var _p = useState(null), messageInputEvent = _p[0], setMessageInputEvent = _p[1];\n    var _q = useState(null), selectedUser = _q[0], setSelectedUser = _q[1];\n    var _r = useState([]), mentionSuggestedUsers = _r[0], setMentionSuggestedUsers = _r[1];\n    var displaySuggestedMentionList = isOnline\n        && isMentionEnabled\n        && mentionNickname.length > 0\n        && !isMuted\n        && !(isChannelFrozen && !(currentChannel.myRole === Role.OPERATOR));\n    var mentionNodes = useDirtyGetMentions({ ref: editMessageInputRef }, { logger: logger });\n    var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount);\n    useEffect(function () {\n        setMentionedUsers(mentionedUsers.filter(function (_a) {\n            var userId = _a.userId;\n            var i = mentionedUserIds.indexOf(userId);\n            if (i < 0) {\n                return false;\n            }\n            else {\n                mentionedUserIds.splice(i, 1);\n                return true;\n            }\n        }));\n    }, [mentionedUserIds]);\n    // edit input\n    var disabled = !(threadListState === ThreadListStateTypes.INITIALIZED)\n        || !isOnline\n        || isMuted\n        || isChannelFrozen;\n    // memorize\n    var MemorizedSeparator = useMemo(function () {\n        if (typeof renderCustomSeparator === 'function') {\n            return renderCustomSeparator === null || renderCustomSeparator === void 0 ? void 0 : renderCustomSeparator({ message: message });\n        }\n    }, [message, renderCustomSeparator]);\n    // Edit message\n    if (showEdit && message.isUserMessage()) {\n        return (React__default.createElement(React__default.Fragment, null,\n            displaySuggestedMentionList && (React__default.createElement(SuggestedMentionList, { targetNickname: mentionNickname, inputEvent: messageInputEvent !== null && messageInputEvent !== void 0 ? messageInputEvent : undefined, \n                // renderUserMentionItem={renderUserMentionItem}\n                onUserItemClick: function (user) {\n                    if (user) {\n                        setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));\n                    }\n                    setMentionNickname('');\n                    setSelectedUser(user);\n                    setMessageInputEvent(null);\n                }, onFocusItemChange: function () {\n                    setMessageInputEvent(null);\n                }, onFetchUsers: function (users) {\n                    setMentionSuggestedUsers(users);\n                }, ableAddMention: ableMention, maxMentionCount: userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount, maxSuggestionCount: userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount })),\n            React__default.createElement(MessageInput, { isEdit: true, channel: currentChannel, disabled: disabled, ref: editMessageInputRef, mentionSelectedUser: selectedUser, isMentionEnabled: isMentionEnabled, message: message, onStartTyping: function () {\n                    var _a;\n                    (_a = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.startTyping) === null || _a === void 0 ? void 0 : _a.call(currentChannel);\n                }, onUpdateMessage: function (_a) {\n                    var _b;\n                    var messageId = _a.messageId, message = _a.message, mentionTemplate = _a.mentionTemplate;\n                    updateMessage({\n                        messageId: messageId,\n                        message: message,\n                        mentionedUsers: mentionedUsers,\n                        mentionTemplate: mentionTemplate,\n                    });\n                    setShowEdit(false);\n                    (_b = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.endTyping) === null || _b === void 0 ? void 0 : _b.call(currentChannel);\n                }, onCancelEdit: function () {\n                    var _a;\n                    setMentionNickname('');\n                    setMentionedUsers([]);\n                    setMentionedUserIds([]);\n                    setMentionSuggestedUsers([]);\n                    setShowEdit(false);\n                    (_a = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.endTyping) === null || _a === void 0 ? void 0 : _a.call(currentChannel);\n                }, onUserMentioned: function (user) {\n                    if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {\n                        setSelectedUser(null);\n                        setMentionNickname('');\n                    }\n                }, onMentionStringChange: function (mentionText) {\n                    setMentionNickname(mentionText);\n                }, onMentionedUserIdsUpdated: function (userIds) {\n                    setMentionedUserIds(userIds);\n                }, onKeyDown: function (e) {\n                    if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0\n                        && ((e.key === MessageInputKeys.Enter && ableMention) || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)) {\n                        setMessageInputEvent(e);\n                        return true;\n                    }\n                    return false;\n                } })));\n    }\n    return (React__default.createElement(\"div\", { ref: messageScrollRef, className: classnames('sendbird-thread-list-item', className), \"data-testid\": \"sendbird-thread-list-item\" },\n        hasSeparator && (message === null || message === void 0 ? void 0 : message.createdAt) && (MemorizedSeparator || (React__default.createElement(DateSeparator, null,\n            React__default.createElement(Label, { type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, format(message === null || message === void 0 ? void 0 : message.createdAt, stringSet.DATE_FORMAT__THREAD_LIST__DATE_SEPARATOR, { locale: dateLocale }))))),\n        React__default.createElement(ThreadListItemContent, { userId: userId, channel: currentChannel, message: message, chainTop: chainTop, chainBottom: chainBottom, isReactionEnabled: isReactionEnabled, isMentionEnabled: isMentionEnabled, disableQuoteMessage: true, replyType: replyType, nicknamesMap: nicknamesMap, emojiContainer: emojiContainer, resendMessage: resendMessage, showRemove: setShowRemove, showFileViewer: setShowFileViewer, toggleReaction: toggleReaction, showEdit: setShowEdit, renderEmojiMenu: renderEmojiMenu, renderMessageMenu: renderMessageMenu }),\n        showRemove && (React__default.createElement(RemoveMessage, { message: message, onCancel: function () { return setShowRemove(false); } })),\n        showFileViewer && (React__default.createElement(FileViewer, { message: message, isByMe: ((_e = message === null || message === void 0 ? void 0 : message.sender) === null || _e === void 0 ? void 0 : _e.userId) === userId, onClose: function () { return setShowFileViewer(false); }, onDelete: function () {\n                deleteMessage(message);\n                setShowFileViewer(false);\n            }, onDownloadClick: function (e) { return __awaiter(_this, void 0, void 0, function () {\n                var allowDownload, err_1;\n                var _a, _b;\n                return __generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0:\n                            if (!onBeforeDownloadFileMessage)\n                                return [2 /*return*/];\n                            _c.label = 1;\n                        case 1:\n                            _c.trys.push([1, 3, , 4]);\n                            return [4 /*yield*/, onBeforeDownloadFileMessage({ message: message })];\n                        case 2:\n                            allowDownload = _c.sent();\n                            if (!allowDownload) {\n                                e.preventDefault();\n                                (_a = logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, 'ThreadListItem: Not allowed to download.');\n                            }\n                            return [3 /*break*/, 4];\n                        case 3:\n                            err_1 = _c.sent();\n                            (_b = logger.error) === null || _b === void 0 ? void 0 : _b.call(logger, 'ThreadListItem: Error occurred while determining download continuation:', err_1);\n                            return [3 /*break*/, 4];\n                        case 4: return [2 /*return*/];\n                    }\n                });\n            }); } }))));\n}\n\nexport { ThreadListItem as default };\n//# sourceMappingURL=ThreadListItem.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}