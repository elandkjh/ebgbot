{"ast":null,"code":"import { useState, useEffect } from 'react';\n\n/* global MutationCallback */\n/* global MutationObserverInit */\n// To prevent Undefined lint errors: https://github.com/standard/standard/issues/1159#issuecomment-403003627\nfunction useElementObserver(selector, targetElement) {\n  var _a = useState(false),\n    isElementMounted = _a[0],\n    setIsElementMounted = _a[1];\n  useEffect(function () {\n    var targetElements = Array.isArray(targetElement) ? targetElement : [targetElement];\n    var updateElementState = function () {\n      var _a;\n      var elements = targetElements === null || targetElements === void 0 ? void 0 : targetElements.map(function (target) {\n        return target === null || target === void 0 ? void 0 : target.querySelector(selector);\n      });\n      setIsElementMounted((_a = elements === null || elements === void 0 ? void 0 : elements.some(function (element) {\n        return !!element;\n      })) !== null && _a !== void 0 ? _a : false);\n    };\n    updateElementState();\n    var observerCallback = function (mutations) {\n      mutations.forEach(function (mutation) {\n        if (mutation.addedNodes.length || mutation.removedNodes.length) {\n          Array.from(mutation.addedNodes).forEach(function (node) {\n            if (node.nodeType === Node.ELEMENT_NODE && node.matches(selector)) {\n              setIsElementMounted(true);\n            }\n          });\n          Array.from(mutation.removedNodes).forEach(function (node) {\n            if (node.nodeType === Node.ELEMENT_NODE && node.matches(selector)) {\n              setIsElementMounted(false);\n            }\n          });\n        }\n      });\n    };\n    var observer = new MutationObserver(observerCallback);\n    var observerOptions = {\n      childList: true,\n      // Observe addition and removal of child nodes\n      subtree: true // Observe the entire subtree\n    };\n    targetElements === null || targetElements === void 0 ? void 0 : targetElements.forEach(function (target) {\n      if (target) observer.observe(target, observerOptions);\n    });\n    return function () {\n      observer.disconnect();\n    };\n  }, [selector, targetElement]);\n  return isElementMounted;\n}\nexport { useElementObserver as u };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { useState, useEffect } from 'react';\n\n/* global MutationCallback */\n/* global MutationObserverInit */\n// To prevent Undefined lint errors: https://github.com/standard/standard/issues/1159#issuecomment-403003627\nfunction useElementObserver(selector, targetElement) {\n    var _a = useState(false), isElementMounted = _a[0], setIsElementMounted = _a[1];\n    useEffect(function () {\n        var targetElements = Array.isArray(targetElement) ? targetElement : [targetElement];\n        var updateElementState = function () {\n            var _a;\n            var elements = targetElements === null || targetElements === void 0 ? void 0 : targetElements.map(function (target) { return target === null || target === void 0 ? void 0 : target.querySelector(selector); });\n            setIsElementMounted((_a = elements === null || elements === void 0 ? void 0 : elements.some(function (element) { return !!element; })) !== null && _a !== void 0 ? _a : false);\n        };\n        updateElementState();\n        var observerCallback = function (mutations) {\n            mutations.forEach(function (mutation) {\n                if (mutation.addedNodes.length || mutation.removedNodes.length) {\n                    Array.from(mutation.addedNodes).forEach(function (node) {\n                        if (node.nodeType === Node.ELEMENT_NODE && node.matches(selector)) {\n                            setIsElementMounted(true);\n                        }\n                    });\n                    Array.from(mutation.removedNodes).forEach(function (node) {\n                        if (node.nodeType === Node.ELEMENT_NODE && node.matches(selector)) {\n                            setIsElementMounted(false);\n                        }\n                    });\n                }\n            });\n        };\n        var observer = new MutationObserver(observerCallback);\n        var observerOptions = {\n            childList: true, // Observe addition and removal of child nodes\n            subtree: true, // Observe the entire subtree\n        };\n        targetElements === null || targetElements === void 0 ? void 0 : targetElements.forEach(function (target) {\n            if (target)\n                observer.observe(target, observerOptions);\n        });\n        return function () {\n            observer.disconnect();\n        };\n    }, [selector, targetElement]);\n    return isElementMounted;\n}\n\nexport { useElementObserver as u };\n//# sourceMappingURL=bundle-Cf0UgZwi.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}