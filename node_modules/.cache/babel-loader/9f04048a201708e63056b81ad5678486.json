{"ast":null,"code":"import React__default, { useState } from 'react';\nimport { GroupChannelListHeader } from '../GroupChannelList/components/GroupChannelListHeader.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport EditUserProfile from '../EditUserProfile.js';\nimport PlaceHolder, { PlaceHolderTypes } from '../ui/PlaceHolder.js';\nimport { u as useOnScrollPositionChangeDetector } from './bundle-DvsVgg5f.js';\nvar GroupChannelListUIView = function (_a) {\n  var renderHeader = _a.renderHeader,\n    renderPlaceHolderError = _a.renderPlaceHolderError,\n    renderPlaceHolderLoading = _a.renderPlaceHolderLoading,\n    renderPlaceHolderEmptyList = _a.renderPlaceHolderEmptyList,\n    onChangeTheme = _a.onChangeTheme,\n    onUserProfileUpdated = _a.onUserProfileUpdated,\n    allowProfileEdit = _a.allowProfileEdit,\n    channels = _a.channels,\n    onLoadMore = _a.onLoadMore,\n    initialized = _a.initialized,\n    renderChannel = _a.renderChannel,\n    renderAddChannel = _a.renderAddChannel;\n  var _b = useState(false),\n    showProfileEdit = _b[0],\n    setShowProfileEdit = _b[1];\n  var stores = useSendbirdStateContext().stores;\n  var renderer = {\n    addChannel: renderAddChannel,\n    channel: renderChannel,\n    placeholder: {\n      loading: function () {\n        if (initialized) return null;\n        if (renderPlaceHolderLoading) return renderPlaceHolderLoading();\n        return React__default.createElement(PlaceHolder, {\n          type: PlaceHolderTypes.LOADING\n        });\n      },\n      empty: function () {\n        if (!initialized) return null;\n        if (renderPlaceHolderEmptyList) return renderPlaceHolderEmptyList();\n        return React__default.createElement(PlaceHolder, {\n          type: PlaceHolderTypes.NO_CHANNELS\n        });\n      },\n      error: function () {\n        if (!initialized || !stores.sdkStore.error) return null;\n        if (renderPlaceHolderError) return renderPlaceHolderError();\n        return React__default.createElement(PlaceHolder, {\n          type: PlaceHolderTypes.WRONG\n        });\n      }\n    }\n  };\n  return React__default.createElement(React__default.Fragment, null, React__default.createElement(\"div\", {\n    className: \"sendbird-channel-list__header\"\n  }, (renderHeader === null || renderHeader === void 0 ? void 0 : renderHeader()) || React__default.createElement(GroupChannelListHeader, {\n    onEdit: function () {\n      return allowProfileEdit && setShowProfileEdit(true);\n    },\n    allowProfileEdit: allowProfileEdit,\n    renderIconButton: function () {\n      return renderer.addChannel();\n    }\n  })), showProfileEdit && React__default.createElement(EditUserProfile, {\n    onThemeChange: onChangeTheme,\n    onCancel: function () {\n      return setShowProfileEdit(false);\n    },\n    onEditProfile: function (user) {\n      setShowProfileEdit(false);\n      onUserProfileUpdated(user);\n    }\n  }), React__default.createElement(ChannelListComponent, {\n    data: channels,\n    renderItem: renderer.channel,\n    onLoadMore: onLoadMore,\n    placeholderLoading: renderer.placeholder.loading(),\n    placeholderEmpty: renderer.placeholder.empty(),\n    placeholderError: renderer.placeholder.error()\n  }));\n};\n/**\n * To do: Implement windowing\n * Implement windowing if you are dealing with large number of messages/channels\n * https://github.com/bvaughn/react-window -> recommendation\n * We hesitate to bring one more dependency to our library,\n * we are planning to implement it inside the library\n * */\nvar ChannelListComponent = function (props) {\n  var data = props.data,\n    renderItem = props.renderItem,\n    onLoadMore = props.onLoadMore,\n    placeholderLoading = props.placeholderLoading,\n    placeholderError = props.placeholderError,\n    placeholderEmpty = props.placeholderEmpty;\n  var onScroll = useOnScrollPositionChangeDetector({\n    onReachedBottom: function () {\n      return onLoadMore === null || onLoadMore === void 0 ? void 0 : onLoadMore();\n    }\n  });\n  return React__default.createElement(\"div\", {\n    className: 'sendbird-channel-list__body',\n    onScroll: onScroll\n  }, placeholderError, React__default.createElement(\"div\", null, data.map(function (item, index) {\n    return renderItem({\n      item: item,\n      index: index\n    });\n  })), placeholderLoading, data.length === 0 && placeholderEmpty);\n};\nexport { GroupChannelListUIView as G };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { useState } from 'react';\nimport { GroupChannelListHeader } from '../GroupChannelList/components/GroupChannelListHeader.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport EditUserProfile from '../EditUserProfile.js';\nimport PlaceHolder, { PlaceHolderTypes } from '../ui/PlaceHolder.js';\nimport { u as useOnScrollPositionChangeDetector } from './bundle-DvsVgg5f.js';\n\nvar GroupChannelListUIView = function (_a) {\n    var renderHeader = _a.renderHeader, renderPlaceHolderError = _a.renderPlaceHolderError, renderPlaceHolderLoading = _a.renderPlaceHolderLoading, renderPlaceHolderEmptyList = _a.renderPlaceHolderEmptyList, onChangeTheme = _a.onChangeTheme, onUserProfileUpdated = _a.onUserProfileUpdated, allowProfileEdit = _a.allowProfileEdit, channels = _a.channels, onLoadMore = _a.onLoadMore, initialized = _a.initialized, renderChannel = _a.renderChannel, renderAddChannel = _a.renderAddChannel;\n    var _b = useState(false), showProfileEdit = _b[0], setShowProfileEdit = _b[1];\n    var stores = useSendbirdStateContext().stores;\n    var renderer = {\n        addChannel: renderAddChannel,\n        channel: renderChannel,\n        placeholder: {\n            loading: function () {\n                if (initialized)\n                    return null;\n                if (renderPlaceHolderLoading)\n                    return renderPlaceHolderLoading();\n                return React__default.createElement(PlaceHolder, { type: PlaceHolderTypes.LOADING });\n            },\n            empty: function () {\n                if (!initialized)\n                    return null;\n                if (renderPlaceHolderEmptyList)\n                    return renderPlaceHolderEmptyList();\n                return React__default.createElement(PlaceHolder, { type: PlaceHolderTypes.NO_CHANNELS });\n            },\n            error: function () {\n                if (!initialized || !stores.sdkStore.error)\n                    return null;\n                if (renderPlaceHolderError)\n                    return renderPlaceHolderError();\n                return React__default.createElement(PlaceHolder, { type: PlaceHolderTypes.WRONG });\n            },\n        },\n    };\n    return (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(\"div\", { className: \"sendbird-channel-list__header\" }, (renderHeader === null || renderHeader === void 0 ? void 0 : renderHeader()) || (React__default.createElement(GroupChannelListHeader, { onEdit: function () { return allowProfileEdit && setShowProfileEdit(true); }, allowProfileEdit: allowProfileEdit, renderIconButton: function () { return renderer.addChannel(); } }))),\n        showProfileEdit && (React__default.createElement(EditUserProfile, { onThemeChange: onChangeTheme, onCancel: function () { return setShowProfileEdit(false); }, onEditProfile: function (user) {\n                setShowProfileEdit(false);\n                onUserProfileUpdated(user);\n            } })),\n        React__default.createElement(ChannelListComponent, { data: channels, renderItem: renderer.channel, onLoadMore: onLoadMore, placeholderLoading: renderer.placeholder.loading(), placeholderEmpty: renderer.placeholder.empty(), placeholderError: renderer.placeholder.error() })));\n};\n/**\n * To do: Implement windowing\n * Implement windowing if you are dealing with large number of messages/channels\n * https://github.com/bvaughn/react-window -> recommendation\n * We hesitate to bring one more dependency to our library,\n * we are planning to implement it inside the library\n * */\nvar ChannelListComponent = function (props) {\n    var data = props.data, renderItem = props.renderItem, onLoadMore = props.onLoadMore, placeholderLoading = props.placeholderLoading, placeholderError = props.placeholderError, placeholderEmpty = props.placeholderEmpty;\n    var onScroll = useOnScrollPositionChangeDetector({\n        onReachedBottom: function () { return onLoadMore === null || onLoadMore === void 0 ? void 0 : onLoadMore(); },\n    });\n    return (React__default.createElement(\"div\", { className: 'sendbird-channel-list__body', onScroll: onScroll },\n        placeholderError,\n        React__default.createElement(\"div\", null, data.map(function (item, index) { return renderItem({ item: item, index: index }); })),\n        placeholderLoading,\n        data.length === 0 && placeholderEmpty));\n};\n\nexport { GroupChannelListUIView as G };\n//# sourceMappingURL=bundle-CRcPMrRq.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}