{"ast":null,"code":"import React__default, { useContext, useState, useRef } from 'react';\nimport { f as format } from '../../chunks/bundle-CAdqcqOm.js';\nimport OpenchannelUserMessage from '../../ui/OpenchannelUserMessage.js';\nimport OpenChannelAdminMessage from '../../ui/OpenChannelAdminMessage.js';\nimport OpenChannelOGMessage from '../../ui/OpenchannelOGMessage.js';\nimport OpenchannelThumbnailMessage from '../../ui/OpenchannelThumbnailMessage.js';\nimport OpenChannelFileMessage from '../../ui/OpenchannelFileMessage.js';\nimport DateSeparator from '../../ui/DateSeparator.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../chunks/bundle-DhKQeIfP.js';\nimport MessageInput from '../../ui/MessageInput.js';\nimport FileViewer from '../../ui/FileViewer.js';\nimport { M as Modal } from '../../chunks/bundle-CXdo2kR_.js';\nimport { L as LocalizationContext, u as useLocalization } from '../../chunks/bundle-cQZ3UZoG.js';\nimport { g as getModalDeleteMessageTitle } from '../../chunks/bundle-Zvm5CMGT.js';\nimport { j as isImage, h as isVideo } from '../../chunks/bundle-DxTN4_0p.js';\nimport { u as useOpenChannelContext } from '../../chunks/bundle-CoPuVBn-.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../chunks/bundle-BQi9-O76.js';\nimport '../../chunks/bundle-CFosTNce.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../chunks/bundle-BgwzpLeQ.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../ui/Icon.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport 'react-dom';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport '../../ui/SortByRow.js';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '../../withSendbird.js';\nimport '../../ui/IconButton.js';\nimport '../../ui/Loader.js';\nimport '../../ui/UserProfile.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '../../sendbirdSelectors.js';\nimport '../../chunks/bundle-b6TpX_JP.js';\nimport '../../ui/Button.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-6BuULgEc.js';\nimport '../../chunks/bundle-BdZytjCG.js';\nimport '../../chunks/bundle-f-SpnOx2.js';\nimport '../../chunks/bundle-AfQS5DGf.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../ui/LinkLabel.js';\nimport '../../chunks/bundle-DofK8ySe.js';\nimport '../../chunks/bundle-GUbI4JcD.js';\nimport '../../Message/context.js';\nimport '../../ui/MentionLabel.js';\nimport '../../ui/TextButton.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nimport '../../chunks/bundle-0qSTzMXb.js';\nimport '../../chunks/bundle-CveCFQYP.js';\nimport '../../chunks/bundle-TZQ6dJCG.js';\nimport 'dompurify';\nimport '../../chunks/bundle-0nQK2G2O.js';\nimport '../../chunks/bundle-B6edg1g0.js';\nimport '../../chunks/bundle-DhGZA5UP.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../chunks/bundle-Gdl-rzQC.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-CZUYMubi.js';\nimport '../../chunks/bundle-DAz5E5O_.js';\nfunction RemoveMessageModal(_a) {\n  var message = _a.message,\n    onCloseModal = _a.onCloseModal,\n    onDeleteMessage = _a.onDeleteMessage;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return React__default.createElement(Modal, {\n    onCancel: onCloseModal,\n    onSubmit: onDeleteMessage,\n    submitText: stringSet.MESSAGE_MENU__DELETE,\n    titleText: getModalDeleteMessageTitle(stringSet, message)\n  });\n}\nvar MessageTypes = {\n  ADMIN: 'ADMIN',\n  USER: 'USER',\n  FILE: 'FILE',\n  THUMBNAIL: 'THUMBNAIL',\n  OG: 'OG',\n  UNKNOWN: 'UNKNOWN'\n};\nvar SendingMessageStatus = {\n  NONE: 'none',\n  SUCCEEDED: 'succeeded',\n  FAILED: 'failed',\n  PENDING: 'pending'\n};\nvar getMessageType = function (message, options) {\n  var _a, _b;\n  var isOgMessageEnabledInOpenChannel = options === null || options === void 0 ? void 0 : options.isOgMessageEnabledInOpenChannel;\n  if (((_a = message === null || message === void 0 ? void 0 : message.isUserMessage) === null || _a === void 0 ? void 0 : _a.call(message)) || (message === null || message === void 0 ? void 0 : message.messageType) === 'user') {\n    return (message === null || message === void 0 ? void 0 : message.ogMetaData) && isOgMessageEnabledInOpenChannel ? MessageTypes.OG : MessageTypes.USER;\n  }\n  if ((_b = message === null || message === void 0 ? void 0 : message.isAdminMessage) === null || _b === void 0 ? void 0 : _b.call(message)) {\n    return MessageTypes.ADMIN;\n  }\n  if ((message === null || message === void 0 ? void 0 : message.messageType) === 'file') {\n    return isImage(message.type) || isVideo(message.type) ? MessageTypes.THUMBNAIL : MessageTypes.FILE;\n  }\n  return MessageTypes.UNKNOWN;\n};\nfunction OpenChannelMessage(props) {\n  var _a;\n  var _b;\n  var message = props.message,\n    chainTop = props.chainTop,\n    chainBottom = props.chainBottom,\n    hasSeparator = props.hasSeparator,\n    renderMessage = props.renderMessage;\n  var _c = useOpenChannelContext(),\n    currentOpenChannel = _c.currentOpenChannel,\n    deleteMessage = _c.deleteMessage,\n    updateMessage = _c.updateMessage,\n    resendMessage = _c.resendMessage;\n  var _d = useLocalization(),\n    dateLocale = _d.dateLocale,\n    stringSet = _d.stringSet;\n  var editDisabled = currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isFrozen;\n  var globalState = useSendbirdStateContext();\n  var currentUserId = (_b = globalState === null || globalState === void 0 ? void 0 : globalState.config) === null || _b === void 0 ? void 0 : _b.userId;\n  var isOgMessageEnabledInOpenChannel = globalState.config.openChannel.enableOgtag;\n  var sender;\n  if ((message === null || message === void 0 ? void 0 : message.messageType) !== 'admin') {\n    sender = message === null || message === void 0 ? void 0 : message.sender;\n  }\n  var _e = useState(false),\n    showEdit = _e[0],\n    setShowEdit = _e[1];\n  var _f = useState(false),\n    showRemove = _f[0],\n    setShowRemove = _f[1];\n  var _g = useState(false),\n    showFileViewer = _g[0],\n    setShowFileViewer = _g[1];\n  var editMessageInputRef = useRef(null);\n  var isByMe = false;\n  if (sender && (message === null || message === void 0 ? void 0 : message.messageType) !== 'admin') {\n    // pending and failed messages are by me\n    isByMe = currentUserId === sender.userId || (message === null || message === void 0 ? void 0 : message.sendingStatus) === SendingMessageStatus.PENDING || (message === null || message === void 0 ? void 0 : message.sendingStatus) === SendingMessageStatus.FAILED;\n  }\n  if (renderMessage) {\n    return React__default.createElement(\"div\", {\n      className: \"sendbird-msg-hoc sendbird-msg--scroll-ref\",\n      \"data-testid\": \"sendbird-message-hoc\"\n    }, renderMessage({\n      message: message,\n      chainTop: chainTop,\n      chainBottom: chainBottom\n    }));\n  }\n  if ((message === null || message === void 0 ? void 0 : message.messageType) === 'user' && showEdit) {\n    return React__default.createElement(MessageInput, {\n      isEdit: true,\n      channel: currentOpenChannel,\n      disabled: editDisabled,\n      ref: editMessageInputRef,\n      message: message,\n      onUpdateMessage: function (_a) {\n        var messageId = _a.messageId,\n          message = _a.message;\n        updateMessage(messageId, message);\n        setShowEdit(false);\n      },\n      onCancelEdit: function () {\n        setShowEdit(false);\n      }\n    });\n  }\n  return React__default.createElement(\"div\", {\n    className: \"sendbird-msg-hoc sendbird-msg--scroll-ref\",\n    \"data-testid\": \"sendbird-message-hoc\"\n  }, React__default.createElement(React__default.Fragment, null, hasSeparator && (message === null || message === void 0 ? void 0 : message.createdAt) && React__default.createElement(DateSeparator, null, React__default.createElement(Label, {\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, format(message === null || message === void 0 ? void 0 : message.createdAt, stringSet.DATE_FORMAT__MESSAGE_LIST__DATE_SEPARATOR, {\n    locale: dateLocale\n  }))), (_a = {}, _a[MessageTypes.ADMIN] = function () {\n    if ((message === null || message === void 0 ? void 0 : message.messageType) === 'admin') {\n      return React__default.createElement(OpenChannelAdminMessage, {\n        message: message\n      });\n    }\n  }(), _a[MessageTypes.FILE] = function () {\n    var _a;\n    if ((message === null || message === void 0 ? void 0 : message.messageType) === 'file') {\n      return React__default.createElement(OpenChannelFileMessage, {\n        message: message,\n        isOperator: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isOperator((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId),\n        isEphemeral: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isEphemeral,\n        disabled: editDisabled,\n        userId: currentUserId,\n        showRemove: setShowRemove,\n        resendMessage: resendMessage,\n        chainTop: chainTop,\n        chainBottom: chainBottom\n      });\n    }\n  }(), _a[MessageTypes.OG] = function () {\n    var _a;\n    if ((message === null || message === void 0 ? void 0 : message.messageType) === 'user' && isOgMessageEnabledInOpenChannel) {\n      return React__default.createElement(OpenChannelOGMessage, {\n        message: message,\n        isOperator: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isOperator((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId),\n        isEphemeral: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isEphemeral,\n        userId: currentUserId,\n        showEdit: setShowEdit,\n        disabled: editDisabled,\n        showRemove: setShowRemove,\n        resendMessage: resendMessage,\n        chainTop: chainTop,\n        chainBottom: chainBottom\n      });\n    }\n  }(), _a[MessageTypes.THUMBNAIL] = function () {\n    var _a;\n    if ((message === null || message === void 0 ? void 0 : message.messageType) === 'file') {\n      return React__default.createElement(OpenchannelThumbnailMessage, {\n        message: message,\n        isOperator: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isOperator((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId),\n        isEphemeral: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isEphemeral,\n        disabled: editDisabled,\n        userId: currentUserId,\n        showRemove: setShowRemove,\n        resendMessage: resendMessage,\n        onClick: setShowFileViewer,\n        chainTop: chainTop,\n        chainBottom: chainBottom\n      });\n    }\n  }(), _a[MessageTypes.USER] = function () {\n    var _a;\n    if ((message === null || message === void 0 ? void 0 : message.messageType) === 'user') {\n      return React__default.createElement(OpenchannelUserMessage, {\n        message: message,\n        isOperator: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isOperator((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId),\n        isEphemeral: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isEphemeral,\n        userId: currentUserId,\n        disabled: editDisabled,\n        showEdit: setShowEdit,\n        showRemove: setShowRemove,\n        resendMessage: resendMessage,\n        chainTop: chainTop,\n        chainBottom: chainBottom\n      });\n    }\n  }(), _a[MessageTypes.UNKNOWN] = function () {\n    // return (\n    //   <OpenChannelUnknownMessage message={message} />\n    // );\n  }(), _a)[getMessageType(message, {\n    isOgMessageEnabledInOpenChannel: isOgMessageEnabledInOpenChannel\n  })], showRemove && React__default.createElement(RemoveMessageModal, {\n    message: message,\n    onCloseModal: function () {\n      return setShowRemove(false);\n    },\n    onDeleteMessage: function () {\n      if ((message === null || message === void 0 ? void 0 : message.messageType) !== 'admin') {\n        deleteMessage(message);\n      }\n    }\n  }), showFileViewer && (message === null || message === void 0 ? void 0 : message.messageType) === 'file' && React__default.createElement(FileViewer, {\n    onClose: function () {\n      return setShowFileViewer(false);\n    },\n    message: message,\n    onDelete: function () {\n      return deleteMessage(message);\n    },\n    isByMe: isByMe\n  })));\n}\nexport { OpenChannelMessage as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { useContext, useState, useRef } from 'react';\nimport { f as format } from '../../chunks/bundle-CAdqcqOm.js';\nimport OpenchannelUserMessage from '../../ui/OpenchannelUserMessage.js';\nimport OpenChannelAdminMessage from '../../ui/OpenChannelAdminMessage.js';\nimport OpenChannelOGMessage from '../../ui/OpenchannelOGMessage.js';\nimport OpenchannelThumbnailMessage from '../../ui/OpenchannelThumbnailMessage.js';\nimport OpenChannelFileMessage from '../../ui/OpenchannelFileMessage.js';\nimport DateSeparator from '../../ui/DateSeparator.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../chunks/bundle-DhKQeIfP.js';\nimport MessageInput from '../../ui/MessageInput.js';\nimport FileViewer from '../../ui/FileViewer.js';\nimport { M as Modal } from '../../chunks/bundle-CXdo2kR_.js';\nimport { L as LocalizationContext, u as useLocalization } from '../../chunks/bundle-cQZ3UZoG.js';\nimport { g as getModalDeleteMessageTitle } from '../../chunks/bundle-Zvm5CMGT.js';\nimport { j as isImage, h as isVideo } from '../../chunks/bundle-DxTN4_0p.js';\nimport { u as useOpenChannelContext } from '../../chunks/bundle-CoPuVBn-.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../chunks/bundle-BQi9-O76.js';\nimport '../../chunks/bundle-CFosTNce.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../chunks/bundle-BgwzpLeQ.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../ui/Icon.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport 'react-dom';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport '../../ui/SortByRow.js';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '../../withSendbird.js';\nimport '../../ui/IconButton.js';\nimport '../../ui/Loader.js';\nimport '../../ui/UserProfile.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '../../sendbirdSelectors.js';\nimport '../../chunks/bundle-b6TpX_JP.js';\nimport '../../ui/Button.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-6BuULgEc.js';\nimport '../../chunks/bundle-BdZytjCG.js';\nimport '../../chunks/bundle-f-SpnOx2.js';\nimport '../../chunks/bundle-AfQS5DGf.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../ui/LinkLabel.js';\nimport '../../chunks/bundle-DofK8ySe.js';\nimport '../../chunks/bundle-GUbI4JcD.js';\nimport '../../Message/context.js';\nimport '../../ui/MentionLabel.js';\nimport '../../ui/TextButton.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nimport '../../chunks/bundle-0qSTzMXb.js';\nimport '../../chunks/bundle-CveCFQYP.js';\nimport '../../chunks/bundle-TZQ6dJCG.js';\nimport 'dompurify';\nimport '../../chunks/bundle-0nQK2G2O.js';\nimport '../../chunks/bundle-B6edg1g0.js';\nimport '../../chunks/bundle-DhGZA5UP.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../chunks/bundle-Gdl-rzQC.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-CZUYMubi.js';\nimport '../../chunks/bundle-DAz5E5O_.js';\n\nfunction RemoveMessageModal(_a) {\n    var message = _a.message, onCloseModal = _a.onCloseModal, onDeleteMessage = _a.onDeleteMessage;\n    var stringSet = useContext(LocalizationContext).stringSet;\n    return (React__default.createElement(Modal, { onCancel: onCloseModal, onSubmit: onDeleteMessage, submitText: stringSet.MESSAGE_MENU__DELETE, titleText: getModalDeleteMessageTitle(stringSet, message) }));\n}\n\nvar MessageTypes = {\n    ADMIN: 'ADMIN',\n    USER: 'USER',\n    FILE: 'FILE',\n    THUMBNAIL: 'THUMBNAIL',\n    OG: 'OG',\n    UNKNOWN: 'UNKNOWN',\n};\nvar SendingMessageStatus = {\n    NONE: 'none',\n    SUCCEEDED: 'succeeded',\n    FAILED: 'failed',\n    PENDING: 'pending',\n};\nvar getMessageType = function (message, options) {\n    var _a, _b;\n    var isOgMessageEnabledInOpenChannel = options === null || options === void 0 ? void 0 : options.isOgMessageEnabledInOpenChannel;\n    if (((_a = message === null || message === void 0 ? void 0 : message.isUserMessage) === null || _a === void 0 ? void 0 : _a.call(message)) || (message === null || message === void 0 ? void 0 : message.messageType) === 'user') {\n        return ((message === null || message === void 0 ? void 0 : message.ogMetaData) && isOgMessageEnabledInOpenChannel)\n            ? MessageTypes.OG\n            : MessageTypes.USER;\n    }\n    if ((_b = message === null || message === void 0 ? void 0 : message.isAdminMessage) === null || _b === void 0 ? void 0 : _b.call(message)) {\n        return MessageTypes.ADMIN;\n    }\n    if ((message === null || message === void 0 ? void 0 : message.messageType) === 'file') {\n        return (isImage(message.type) || isVideo(message.type))\n            ? MessageTypes.THUMBNAIL\n            : MessageTypes.FILE;\n    }\n    return MessageTypes.UNKNOWN;\n};\n\nfunction OpenChannelMessage(props) {\n    var _a;\n    var _b;\n    var message = props.message, chainTop = props.chainTop, chainBottom = props.chainBottom, hasSeparator = props.hasSeparator, renderMessage = props.renderMessage;\n    var _c = useOpenChannelContext(), currentOpenChannel = _c.currentOpenChannel, deleteMessage = _c.deleteMessage, updateMessage = _c.updateMessage, resendMessage = _c.resendMessage;\n    var _d = useLocalization(), dateLocale = _d.dateLocale, stringSet = _d.stringSet;\n    var editDisabled = currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isFrozen;\n    var globalState = useSendbirdStateContext();\n    var currentUserId = (_b = globalState === null || globalState === void 0 ? void 0 : globalState.config) === null || _b === void 0 ? void 0 : _b.userId;\n    var isOgMessageEnabledInOpenChannel = globalState.config.openChannel.enableOgtag;\n    var sender;\n    if ((message === null || message === void 0 ? void 0 : message.messageType) !== 'admin') {\n        sender = message === null || message === void 0 ? void 0 : message.sender;\n    }\n    var _e = useState(false), showEdit = _e[0], setShowEdit = _e[1];\n    var _f = useState(false), showRemove = _f[0], setShowRemove = _f[1];\n    var _g = useState(false), showFileViewer = _g[0], setShowFileViewer = _g[1];\n    var editMessageInputRef = useRef(null);\n    var isByMe = false;\n    if (sender && (message === null || message === void 0 ? void 0 : message.messageType) !== 'admin') {\n        // pending and failed messages are by me\n        isByMe = currentUserId === sender.userId\n            || (message === null || message === void 0 ? void 0 : message.sendingStatus)\n                === SendingMessageStatus.PENDING\n            || (message === null || message === void 0 ? void 0 : message.sendingStatus)\n                === SendingMessageStatus.FAILED;\n    }\n    if (renderMessage) {\n        return (React__default.createElement(\"div\", { className: \"sendbird-msg-hoc sendbird-msg--scroll-ref\", \"data-testid\": \"sendbird-message-hoc\" }, renderMessage({ message: message, chainTop: chainTop, chainBottom: chainBottom })));\n    }\n    if ((message === null || message === void 0 ? void 0 : message.messageType) === 'user' && showEdit) {\n        return (React__default.createElement(MessageInput, { isEdit: true, channel: currentOpenChannel, disabled: editDisabled, ref: editMessageInputRef, message: message, onUpdateMessage: function (_a) {\n                var messageId = _a.messageId, message = _a.message;\n                updateMessage(messageId, message);\n                setShowEdit(false);\n            }, onCancelEdit: function () {\n                setShowEdit(false);\n            } }));\n    }\n    return (React__default.createElement(\"div\", { className: \"sendbird-msg-hoc sendbird-msg--scroll-ref\", \"data-testid\": \"sendbird-message-hoc\" },\n        React__default.createElement(React__default.Fragment, null,\n            hasSeparator && (message === null || message === void 0 ? void 0 : message.createdAt) && (React__default.createElement(DateSeparator, null,\n                React__default.createElement(Label, { type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, format(message === null || message === void 0 ? void 0 : message.createdAt, stringSet.DATE_FORMAT__MESSAGE_LIST__DATE_SEPARATOR, { locale: dateLocale })))),\n            (_a = {},\n                _a[MessageTypes.ADMIN] = (function () {\n                    if ((message === null || message === void 0 ? void 0 : message.messageType) === 'admin') {\n                        return (React__default.createElement(OpenChannelAdminMessage, { message: message }));\n                    }\n                })(),\n                _a[MessageTypes.FILE] = (function () {\n                    var _a;\n                    if ((message === null || message === void 0 ? void 0 : message.messageType) === 'file') {\n                        return (React__default.createElement(OpenChannelFileMessage, { message: message, isOperator: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isOperator((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId), isEphemeral: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isEphemeral, disabled: editDisabled, userId: currentUserId, showRemove: setShowRemove, resendMessage: resendMessage, chainTop: chainTop, chainBottom: chainBottom }));\n                    }\n                })(),\n                _a[MessageTypes.OG] = (function () {\n                    var _a;\n                    if ((message === null || message === void 0 ? void 0 : message.messageType) === 'user'\n                        && isOgMessageEnabledInOpenChannel) {\n                        return (React__default.createElement(OpenChannelOGMessage, { message: message, isOperator: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isOperator((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId), isEphemeral: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isEphemeral, userId: currentUserId, showEdit: setShowEdit, disabled: editDisabled, showRemove: setShowRemove, resendMessage: resendMessage, chainTop: chainTop, chainBottom: chainBottom }));\n                    }\n                })(),\n                _a[MessageTypes.THUMBNAIL] = (function () {\n                    var _a;\n                    if ((message === null || message === void 0 ? void 0 : message.messageType) === 'file') {\n                        return (React__default.createElement(OpenchannelThumbnailMessage, { message: message, isOperator: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isOperator((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId), isEphemeral: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isEphemeral, disabled: editDisabled, userId: currentUserId, showRemove: setShowRemove, resendMessage: resendMessage, onClick: setShowFileViewer, chainTop: chainTop, chainBottom: chainBottom }));\n                    }\n                })(),\n                _a[MessageTypes.USER] = (function () {\n                    var _a;\n                    if ((message === null || message === void 0 ? void 0 : message.messageType) === 'user') {\n                        return (React__default.createElement(OpenchannelUserMessage, { message: message, isOperator: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isOperator((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId), isEphemeral: currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isEphemeral, userId: currentUserId, disabled: editDisabled, showEdit: setShowEdit, showRemove: setShowRemove, resendMessage: resendMessage, chainTop: chainTop, chainBottom: chainBottom }));\n                    }\n                })(),\n                _a[MessageTypes.UNKNOWN] = (function () {\n                    // return (\n                    //   <OpenChannelUnknownMessage message={message} />\n                    // );\n                })(),\n                _a)[getMessageType(message, { isOgMessageEnabledInOpenChannel: isOgMessageEnabledInOpenChannel })],\n            showRemove && (React__default.createElement(RemoveMessageModal, { message: message, onCloseModal: function () { return setShowRemove(false); }, onDeleteMessage: function () {\n                    if ((message === null || message === void 0 ? void 0 : message.messageType) !== 'admin') {\n                        deleteMessage(message);\n                    }\n                } })),\n            showFileViewer && (message === null || message === void 0 ? void 0 : message.messageType) === 'file' && (React__default.createElement(FileViewer, { onClose: function () { return setShowFileViewer(false); }, message: message, onDelete: function () { return deleteMessage(message); }, isByMe: isByMe })))));\n}\n\nexport { OpenChannelMessage as default };\n//# sourceMappingURL=OpenChannelMessage.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}