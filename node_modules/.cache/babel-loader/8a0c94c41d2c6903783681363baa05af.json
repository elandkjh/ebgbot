{"ast":null,"code":"import React__default, { useRef, useState, useContext } from 'react';\nimport { u as useLocalization, L as LocalizationContext } from '../../chunks/bundle-cQZ3UZoG.js';\nimport { C as ContextMenu, b as MenuItems, c as MenuItem } from '../../chunks/bundle-CwKZj-B6.js';\nimport IconButton from '../../ui/IconButton.js';\nimport Icon, { IconTypes, IconColors } from '../../ui/Icon.js';\nimport { M as Modal } from '../../chunks/bundle-CXdo2kR_.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport '../../chunks/bundle-BQi9-O76.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport 'react-dom';\nimport '../../chunks/bundle-BgwzpLeQ.js';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport '../../ui/SortByRow.js';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '../../withSendbird.js';\nimport '../../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-DhKQeIfP.js';\nimport '../../chunks/bundle-f-SpnOx2.js';\nimport '../../ui/Button.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nvar LeaveGroupChannel = function (_a) {\n  var channel = _a.channel,\n    onSubmit = _a.onSubmit,\n    onCancel = _a.onCancel;\n  var config = useSendbirdStateContext().config;\n  var logger = config.logger,\n    isOnline = config.isOnline;\n  var stringSet = useLocalization().stringSet;\n  if (channel) {\n    return React__default.createElement(Modal, {\n      disabled: !isOnline,\n      onCancel: onCancel,\n      onSubmit: function () {\n        logger.info('LeaveGroupChannel: Leaving channel', channel);\n        channel.leave().then(function () {\n          logger.info('LeaveGroupChannel: Leaving channel successful!', channel);\n          onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit();\n        });\n      },\n      submitText: stringSet.MODAL__LEAVE_CHANNEL__FOOTER,\n      titleText: stringSet.MODAL__LEAVE_CHANNEL__TITLE\n    });\n  }\n};\nfunction GroupChannelPreviewAction(_a) {\n  var channel = _a.channel,\n    _b = _a.disabled,\n    disabled = _b === void 0 ? false : _b,\n    onLeaveChannel = _a.onLeaveChannel;\n  var parentRef = useRef(null);\n  var parentContainerRef = useRef(null);\n  var _c = useState(false),\n    showModal = _c[0],\n    setShowModal = _c[1];\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return React__default.createElement(\"div\", {\n    ref: parentContainerRef,\n    tabIndex: 0,\n    role: \"button\",\n    style: {\n      display: 'inline-block'\n    },\n    onKeyDown: function (e) {\n      return e.stopPropagation();\n    },\n    onClick: function (e) {\n      return e.stopPropagation();\n    }\n  }, React__default.createElement(ContextMenu, {\n    menuTrigger: function (toggleDropdown) {\n      return React__default.createElement(IconButton, {\n        ref: parentRef,\n        onClick: toggleDropdown,\n        height: \"32px\",\n        width: \"32px\"\n      }, React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.PRIMARY,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function (closeDropdown) {\n      return React__default.createElement(MenuItems, {\n        parentRef: parentRef,\n        parentContainRef: parentContainerRef,\n        closeDropdown: closeDropdown\n      }, React__default.createElement(MenuItem, {\n        onClick: function () {\n          if (disabled) return;\n          setShowModal(true);\n          closeDropdown();\n        },\n        testID: \"channel_list_item_context_menu_leave_channel\"\n      }, stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE));\n    }\n  }), showModal && React__default.createElement(LeaveGroupChannel, {\n    channel: channel,\n    onSubmit: function () {\n      setShowModal(false);\n      onLeaveChannel === null || onLeaveChannel === void 0 ? void 0 : onLeaveChannel();\n    },\n    onCancel: function () {\n      return setShowModal(false);\n    }\n  }));\n}\nexport { GroupChannelPreviewAction, GroupChannelPreviewAction as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { useRef, useState, useContext } from 'react';\nimport { u as useLocalization, L as LocalizationContext } from '../../chunks/bundle-cQZ3UZoG.js';\nimport { C as ContextMenu, b as MenuItems, c as MenuItem } from '../../chunks/bundle-CwKZj-B6.js';\nimport IconButton from '../../ui/IconButton.js';\nimport Icon, { IconTypes, IconColors } from '../../ui/Icon.js';\nimport { M as Modal } from '../../chunks/bundle-CXdo2kR_.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport '../../chunks/bundle-BQi9-O76.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport 'react-dom';\nimport '../../chunks/bundle-BgwzpLeQ.js';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport '../../ui/SortByRow.js';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '../../withSendbird.js';\nimport '../../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-DhKQeIfP.js';\nimport '../../chunks/bundle-f-SpnOx2.js';\nimport '../../ui/Button.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\n\nvar LeaveGroupChannel = function (_a) {\n    var channel = _a.channel, onSubmit = _a.onSubmit, onCancel = _a.onCancel;\n    var config = useSendbirdStateContext().config;\n    var logger = config.logger, isOnline = config.isOnline;\n    var stringSet = useLocalization().stringSet;\n    if (channel) {\n        return (React__default.createElement(Modal, { disabled: !isOnline, onCancel: onCancel, onSubmit: function () {\n                logger.info('LeaveGroupChannel: Leaving channel', channel);\n                channel.leave().then(function () {\n                    logger.info('LeaveGroupChannel: Leaving channel successful!', channel);\n                    onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit();\n                });\n            }, submitText: stringSet.MODAL__LEAVE_CHANNEL__FOOTER, titleText: stringSet.MODAL__LEAVE_CHANNEL__TITLE }));\n    }\n};\n\nfunction GroupChannelPreviewAction(_a) {\n    var channel = _a.channel, _b = _a.disabled, disabled = _b === void 0 ? false : _b, onLeaveChannel = _a.onLeaveChannel;\n    var parentRef = useRef(null);\n    var parentContainerRef = useRef(null);\n    var _c = useState(false), showModal = _c[0], setShowModal = _c[1];\n    var stringSet = useContext(LocalizationContext).stringSet;\n    return (React__default.createElement(\"div\", { ref: parentContainerRef, tabIndex: 0, role: \"button\", style: { display: 'inline-block' }, onKeyDown: function (e) { return e.stopPropagation(); }, onClick: function (e) { return e.stopPropagation(); } },\n        React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) { return (React__default.createElement(IconButton, { ref: parentRef, onClick: toggleDropdown, height: \"32px\", width: \"32px\" },\n                React__default.createElement(Icon, { type: IconTypes.MORE, fillColor: IconColors.PRIMARY, width: \"24px\", height: \"24px\" }))); }, menuItems: function (closeDropdown) { return (React__default.createElement(MenuItems, { parentRef: parentRef, parentContainRef: parentContainerRef, closeDropdown: closeDropdown },\n                React__default.createElement(MenuItem, { onClick: function () {\n                        if (disabled)\n                            return;\n                        setShowModal(true);\n                        closeDropdown();\n                    }, testID: \"channel_list_item_context_menu_leave_channel\" }, stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE))); } }),\n        showModal && (React__default.createElement(LeaveGroupChannel, { channel: channel, onSubmit: function () {\n                setShowModal(false);\n                onLeaveChannel === null || onLeaveChannel === void 0 ? void 0 : onLeaveChannel();\n            }, onCancel: function () { return setShowModal(false); } }))));\n}\n\nexport { GroupChannelPreviewAction, GroupChannelPreviewAction as default };\n//# sourceMappingURL=GroupChannelPreviewAction.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}