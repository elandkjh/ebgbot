{"ast":null,"code":"import { c as __spreadArray } from '../../chunks/bundle-BQi9-O76.js';\nimport React__default, { useRef, useState, useEffect } from 'react';\nimport { MutedState } from '@sendbird/chat/groupChannel';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport { u as useMediaQueryContext } from '../../chunks/bundle-f-SpnOx2.js';\nimport { useThreadContext } from '../context.js';\nimport { u as useLocalization } from '../../chunks/bundle-cQZ3UZoG.js';\nimport MessageInput from '../../ui/MessageInput.js';\nimport { M as MessageInputKeys } from '../../chunks/bundle-0qSTzMXb.js';\nimport { S as SuggestedMentionList } from '../../chunks/bundle-BsAIw_77.js';\nimport { V as VoiceMessageInputWrapper } from '../../chunks/bundle-DX5U-zhB.js';\nimport '../../GroupChannel/context.js';\nimport { R as Role } from '../../chunks/bundle-C3Ty1Yuy.js';\nimport { useDirtyGetMentions } from '../../Message/hooks/useDirtyGetMentions.js';\nimport { useHandleUploadFiles } from '../../Channel/hooks/useHandleUploadFiles.js';\nimport { b as isDisabledBecauseFrozen, c as isDisabledBecauseMuted } from '../../chunks/bundle-CMLImr6T.js';\nimport { c as classnames } from '../../chunks/bundle-BgwzpLeQ.js';\nimport '../../withSendbird.js';\nimport '../../chunks/bundle-T6fVCCb7.js';\nimport '../../chunks/bundle-b6TpX_JP.js';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '../context/types.js';\nimport '@sendbird/chat';\nimport '../../chunks/bundle-CpjASiz4.js';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '../../chunks/bundle-CZUYMubi.js';\nimport '@sendbird/chat/message';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../chunks/bundle-CveCFQYP.js';\nimport '../../ui/IconButton.js';\nimport '../../ui/Button.js';\nimport '../../chunks/bundle-DhKQeIfP.js';\nimport '../../chunks/bundle-TZQ6dJCG.js';\nimport 'dompurify';\nimport '../../chunks/bundle-0nQK2G2O.js';\nimport '../../chunks/bundle-B6edg1g0.js';\nimport '../../chunks/bundle-DhGZA5UP.js';\nimport '../../ui/Icon.js';\nimport '../../chunks/bundle-DxTN4_0p.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-GUbI4JcD.js';\nimport '../../chunks/bundle-Due9yzp6.js';\nimport '../../chunks/bundle-CFosTNce.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../chunks/bundle-C3ktHDOc.js';\nimport '../../GroupChannel/components/SuggestedMentionList.js';\nimport '../../ui/QuoteMessageInput.js';\nimport '../../chunks/bundle-BqMHiKkl.js';\nimport '../../VoicePlayer/useVoicePlayer.js';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-CXdo2kR_.js';\nimport 'react-dom';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat/openChannel';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport '../../ui/SortByRow.js';\nimport '../../VoiceRecorder/useVoiceRecorder.js';\nimport '../../chunks/bundle-B2SAqHzx.js';\nimport '../../ui/PlaybackTime.js';\nimport '../../ui/ProgressBar.js';\nimport '../../ui/TextButton.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nimport '../../chunks/bundle-DAz5E5O_.js';\nimport '../../chunks/bundle-y29vL7zu.js';\nimport '../../chunks/bundle-fHeMHhND.js';\nimport '../../chunks/bundle-Df65wuUZ.js';\nimport '../../chunks/bundle-BNDaXsLn.js';\nvar ThreadMessageInput = function (props, ref) {\n  var _a;\n  var className = props.className,\n    renderFileUploadIcon = props.renderFileUploadIcon,\n    renderVoiceMessageIcon = props.renderVoiceMessageIcon,\n    renderSendMessageIcon = props.renderSendMessageIcon,\n    acceptableMimeTypes = props.acceptableMimeTypes;\n  var config = useSendbirdStateContext().config;\n  var isMobile = useMediaQueryContext().isMobile;\n  var stringSet = useLocalization().stringSet;\n  var isOnline = config.isOnline,\n    userMention = config.userMention,\n    logger = config.logger,\n    groupChannel = config.groupChannel;\n  var threadContext = useThreadContext();\n  var currentChannel = threadContext.currentChannel,\n    parentMessage = threadContext.parentMessage,\n    sendMessage = threadContext.sendMessage,\n    sendFileMessage = threadContext.sendFileMessage,\n    sendVoiceMessage = threadContext.sendVoiceMessage,\n    sendMultipleFilesMessage = threadContext.sendMultipleFilesMessage,\n    isMuted = threadContext.isMuted,\n    isChannelFrozen = threadContext.isChannelFrozen,\n    allThreadMessages = threadContext.allThreadMessages;\n  var messageInputRef = useRef();\n  var isMentionEnabled = groupChannel.enableMention;\n  var isVoiceMessageEnabled = groupChannel.enableVoiceMessage;\n  var isMultipleFilesMessageEnabled = (_a = threadContext.isMultipleFilesMessageEnabled) !== null && _a !== void 0 ? _a : config.isMultipleFilesMessageEnabled;\n  var threadInputDisabled = props.disabled || !isOnline || isMuted || !((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) === Role.OPERATOR) && isChannelFrozen || parentMessage === null;\n  // MFM\n  var handleUploadFiles = useHandleUploadFiles({\n    sendFileMessage: sendFileMessage,\n    sendMultipleFilesMessage: sendMultipleFilesMessage,\n    quoteMessage: parentMessage\n  }, {\n    logger: logger\n  });\n  // mention\n  var _b = useState(''),\n    mentionNickname = _b[0],\n    setMentionNickname = _b[1];\n  var _c = useState([]),\n    mentionedUsers = _c[0],\n    setMentionedUsers = _c[1];\n  var _d = useState([]),\n    mentionedUserIds = _d[0],\n    setMentionedUserIds = _d[1];\n  var _e = useState(null),\n    selectedUser = _e[0],\n    setSelectedUser = _e[1];\n  var _f = useState([]),\n    mentionSuggestedUsers = _f[0],\n    setMentionSuggestedUsers = _f[1];\n  var _g = useState(null),\n    messageInputEvent = _g[0],\n    setMessageInputEvent = _g[1];\n  var _h = useState(false),\n    showVoiceMessageInput = _h[0],\n    setShowVoiceMessageInput = _h[1];\n  var displaySuggestedMentionList = isOnline && isMentionEnabled && mentionNickname.length > 0 && !isDisabledBecauseFrozen(currentChannel) && !isDisabledBecauseMuted(currentChannel) && !(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isBroadcast);\n  // Reset when changing channel\n  useEffect(function () {\n    setShowVoiceMessageInput(false);\n  }, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]);\n  var mentionNodes = useDirtyGetMentions({\n    ref: ref || messageInputRef\n  }, {\n    logger: logger\n  });\n  var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount);\n  useEffect(function () {\n    setMentionedUsers(mentionedUsers.filter(function (_a) {\n      var userId = _a.userId;\n      var i = mentionedUserIds.indexOf(userId);\n      if (i < 0) {\n        return false;\n      } else {\n        mentionedUserIds.splice(i, 1);\n        return true;\n      }\n    }));\n  }, [mentionedUserIds]);\n  if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isBroadcast) && (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) !== Role.OPERATOR) {\n    return React__default.createElement(React__default.Fragment, null);\n  }\n  return React__default.createElement(\"div\", {\n    className: classnames(showVoiceMessageInput ? 'sendbird-thread-message-input--voice-message' : 'sendbird-thread-message-input', className)\n  }, displaySuggestedMentionList && React__default.createElement(SuggestedMentionList, {\n    targetNickname: mentionNickname,\n    inputEvent: messageInputEvent !== null && messageInputEvent !== void 0 ? messageInputEvent : undefined,\n    // renderUserMentionItem={renderUserMentionItem}\n    onUserItemClick: function (user) {\n      if (user) {\n        setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));\n      }\n      setMentionNickname('');\n      setSelectedUser(user);\n      setMessageInputEvent(null);\n    },\n    onFocusItemChange: function () {\n      setMessageInputEvent(null);\n    },\n    onFetchUsers: function (users) {\n      setMentionSuggestedUsers(users);\n    },\n    ableAddMention: ableMention,\n    maxMentionCount: userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount,\n    maxSuggestionCount: userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount\n  }), showVoiceMessageInput ? React__default.createElement(VoiceMessageInputWrapper, {\n    channel: currentChannel,\n    onSubmitClick: function (recordedFile, duration) {\n      sendVoiceMessage(recordedFile, duration, parentMessage);\n      setShowVoiceMessageInput(false);\n    },\n    onCancelClick: function () {\n      setShowVoiceMessageInput(false);\n    }\n  }) : React__default.createElement(MessageInput, {\n    className: \"sendbird-thread-message-input__message-input\",\n    messageFieldId: \"sendbird-message-input-text-field--thread\",\n    channel: currentChannel,\n    channelUrl: currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url,\n    isMobile: isMobile,\n    disabled: threadInputDisabled,\n    acceptableMimeTypes: acceptableMimeTypes,\n    setMentionedUsers: setMentionedUsers,\n    mentionSelectedUser: selectedUser,\n    isMentionEnabled: isMentionEnabled,\n    isVoiceMessageEnabled: isVoiceMessageEnabled,\n    isSelectingMultipleFilesEnabled: isMultipleFilesMessageEnabled,\n    onVoiceMessageIconClick: function () {\n      setShowVoiceMessageInput(true);\n    },\n    renderFileUploadIcon: renderFileUploadIcon,\n    renderVoiceMessageIcon: renderVoiceMessageIcon,\n    renderSendMessageIcon: renderSendMessageIcon,\n    ref: ref || messageInputRef,\n    placeholder: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isFrozen) && !((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) === Role.OPERATOR) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED || (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myMutedState) === MutedState.MUTED && stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED_SHORT || (allThreadMessages.length > 0 ? stringSet.THREAD__INPUT__REPLY_TO_THREAD : stringSet.THREAD__INPUT__REPLY_IN_THREAD),\n    onStartTyping: function () {\n      var _a;\n      (_a = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.startTyping) === null || _a === void 0 ? void 0 : _a.call(currentChannel);\n    },\n    onSendMessage: function (_a) {\n      var _b;\n      var message = _a.message,\n        mentionTemplate = _a.mentionTemplate;\n      sendMessage({\n        message: message,\n        mentionedUsers: mentionedUsers,\n        mentionTemplate: mentionTemplate,\n        quoteMessage: parentMessage\n      });\n      setMentionNickname('');\n      setMentionedUsers([]);\n      (_b = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.endTyping) === null || _b === void 0 ? void 0 : _b.call(currentChannel);\n    },\n    onFileUpload: handleUploadFiles,\n    onUserMentioned: function (user) {\n      if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {\n        setSelectedUser(null);\n        setMentionNickname('');\n      }\n    },\n    onMentionStringChange: function (mentionText) {\n      setMentionNickname(mentionText);\n    },\n    onMentionedUserIdsUpdated: function (userIds) {\n      setMentionedUserIds(userIds);\n    },\n    onKeyDown: function (e) {\n      if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0 && (e.key === MessageInputKeys.Enter && ableMention || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)) {\n        setMessageInputEvent(e);\n        return true;\n      }\n      return false;\n    }\n  }));\n};\nvar ThreadMessageInput$1 = React__default.forwardRef(ThreadMessageInput);\nexport { ThreadMessageInput$1 as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { c as __spreadArray } from '../../chunks/bundle-BQi9-O76.js';\nimport React__default, { useRef, useState, useEffect } from 'react';\nimport { MutedState } from '@sendbird/chat/groupChannel';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport { u as useMediaQueryContext } from '../../chunks/bundle-f-SpnOx2.js';\nimport { useThreadContext } from '../context.js';\nimport { u as useLocalization } from '../../chunks/bundle-cQZ3UZoG.js';\nimport MessageInput from '../../ui/MessageInput.js';\nimport { M as MessageInputKeys } from '../../chunks/bundle-0qSTzMXb.js';\nimport { S as SuggestedMentionList } from '../../chunks/bundle-BsAIw_77.js';\nimport { V as VoiceMessageInputWrapper } from '../../chunks/bundle-DX5U-zhB.js';\nimport '../../GroupChannel/context.js';\nimport { R as Role } from '../../chunks/bundle-C3Ty1Yuy.js';\nimport { useDirtyGetMentions } from '../../Message/hooks/useDirtyGetMentions.js';\nimport { useHandleUploadFiles } from '../../Channel/hooks/useHandleUploadFiles.js';\nimport { b as isDisabledBecauseFrozen, c as isDisabledBecauseMuted } from '../../chunks/bundle-CMLImr6T.js';\nimport { c as classnames } from '../../chunks/bundle-BgwzpLeQ.js';\nimport '../../withSendbird.js';\nimport '../../chunks/bundle-T6fVCCb7.js';\nimport '../../chunks/bundle-b6TpX_JP.js';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '../context/types.js';\nimport '@sendbird/chat';\nimport '../../chunks/bundle-CpjASiz4.js';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '../../chunks/bundle-CZUYMubi.js';\nimport '@sendbird/chat/message';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../chunks/bundle-CveCFQYP.js';\nimport '../../ui/IconButton.js';\nimport '../../ui/Button.js';\nimport '../../chunks/bundle-DhKQeIfP.js';\nimport '../../chunks/bundle-TZQ6dJCG.js';\nimport 'dompurify';\nimport '../../chunks/bundle-0nQK2G2O.js';\nimport '../../chunks/bundle-B6edg1g0.js';\nimport '../../chunks/bundle-DhGZA5UP.js';\nimport '../../ui/Icon.js';\nimport '../../chunks/bundle-DxTN4_0p.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-GUbI4JcD.js';\nimport '../../chunks/bundle-Due9yzp6.js';\nimport '../../chunks/bundle-CFosTNce.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../chunks/bundle-C3ktHDOc.js';\nimport '../../GroupChannel/components/SuggestedMentionList.js';\nimport '../../ui/QuoteMessageInput.js';\nimport '../../chunks/bundle-BqMHiKkl.js';\nimport '../../VoicePlayer/useVoicePlayer.js';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-CXdo2kR_.js';\nimport 'react-dom';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat/openChannel';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport '../../ui/SortByRow.js';\nimport '../../VoiceRecorder/useVoiceRecorder.js';\nimport '../../chunks/bundle-B2SAqHzx.js';\nimport '../../ui/PlaybackTime.js';\nimport '../../ui/ProgressBar.js';\nimport '../../ui/TextButton.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nimport '../../chunks/bundle-DAz5E5O_.js';\nimport '../../chunks/bundle-y29vL7zu.js';\nimport '../../chunks/bundle-fHeMHhND.js';\nimport '../../chunks/bundle-Df65wuUZ.js';\nimport '../../chunks/bundle-BNDaXsLn.js';\n\nvar ThreadMessageInput = function (props, ref) {\n    var _a;\n    var className = props.className, renderFileUploadIcon = props.renderFileUploadIcon, renderVoiceMessageIcon = props.renderVoiceMessageIcon, renderSendMessageIcon = props.renderSendMessageIcon, acceptableMimeTypes = props.acceptableMimeTypes;\n    var config = useSendbirdStateContext().config;\n    var isMobile = useMediaQueryContext().isMobile;\n    var stringSet = useLocalization().stringSet;\n    var isOnline = config.isOnline, userMention = config.userMention, logger = config.logger, groupChannel = config.groupChannel;\n    var threadContext = useThreadContext();\n    var currentChannel = threadContext.currentChannel, parentMessage = threadContext.parentMessage, sendMessage = threadContext.sendMessage, sendFileMessage = threadContext.sendFileMessage, sendVoiceMessage = threadContext.sendVoiceMessage, sendMultipleFilesMessage = threadContext.sendMultipleFilesMessage, isMuted = threadContext.isMuted, isChannelFrozen = threadContext.isChannelFrozen, allThreadMessages = threadContext.allThreadMessages;\n    var messageInputRef = useRef();\n    var isMentionEnabled = groupChannel.enableMention;\n    var isVoiceMessageEnabled = groupChannel.enableVoiceMessage;\n    var isMultipleFilesMessageEnabled = (_a = threadContext.isMultipleFilesMessageEnabled) !== null && _a !== void 0 ? _a : config.isMultipleFilesMessageEnabled;\n    var threadInputDisabled = props.disabled\n        || !isOnline\n        || isMuted\n        || (!((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) === Role.OPERATOR) && isChannelFrozen) || parentMessage === null;\n    // MFM\n    var handleUploadFiles = useHandleUploadFiles({\n        sendFileMessage: sendFileMessage,\n        sendMultipleFilesMessage: sendMultipleFilesMessage,\n        quoteMessage: parentMessage,\n    }, {\n        logger: logger,\n    });\n    // mention\n    var _b = useState(''), mentionNickname = _b[0], setMentionNickname = _b[1];\n    var _c = useState([]), mentionedUsers = _c[0], setMentionedUsers = _c[1];\n    var _d = useState([]), mentionedUserIds = _d[0], setMentionedUserIds = _d[1];\n    var _e = useState(null), selectedUser = _e[0], setSelectedUser = _e[1];\n    var _f = useState([]), mentionSuggestedUsers = _f[0], setMentionSuggestedUsers = _f[1];\n    var _g = useState(null), messageInputEvent = _g[0], setMessageInputEvent = _g[1];\n    var _h = useState(false), showVoiceMessageInput = _h[0], setShowVoiceMessageInput = _h[1];\n    var displaySuggestedMentionList = isOnline\n        && isMentionEnabled\n        && mentionNickname.length > 0\n        && !isDisabledBecauseFrozen(currentChannel)\n        && !isDisabledBecauseMuted(currentChannel)\n        && !(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isBroadcast);\n    // Reset when changing channel\n    useEffect(function () {\n        setShowVoiceMessageInput(false);\n    }, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]);\n    var mentionNodes = useDirtyGetMentions({ ref: ref || messageInputRef }, { logger: logger });\n    var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount);\n    useEffect(function () {\n        setMentionedUsers(mentionedUsers.filter(function (_a) {\n            var userId = _a.userId;\n            var i = mentionedUserIds.indexOf(userId);\n            if (i < 0) {\n                return false;\n            }\n            else {\n                mentionedUserIds.splice(i, 1);\n                return true;\n            }\n        }));\n    }, [mentionedUserIds]);\n    if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isBroadcast) && (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) !== Role.OPERATOR) {\n        return React__default.createElement(React__default.Fragment, null);\n    }\n    return (React__default.createElement(\"div\", { className: classnames(showVoiceMessageInput ? 'sendbird-thread-message-input--voice-message' : 'sendbird-thread-message-input', className) },\n        displaySuggestedMentionList && (React__default.createElement(SuggestedMentionList, { targetNickname: mentionNickname, inputEvent: messageInputEvent !== null && messageInputEvent !== void 0 ? messageInputEvent : undefined, \n            // renderUserMentionItem={renderUserMentionItem}\n            onUserItemClick: function (user) {\n                if (user) {\n                    setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));\n                }\n                setMentionNickname('');\n                setSelectedUser(user);\n                setMessageInputEvent(null);\n            }, onFocusItemChange: function () {\n                setMessageInputEvent(null);\n            }, onFetchUsers: function (users) {\n                setMentionSuggestedUsers(users);\n            }, ableAddMention: ableMention, maxMentionCount: userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount, maxSuggestionCount: userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount })),\n        showVoiceMessageInput\n            ? (React__default.createElement(VoiceMessageInputWrapper, { channel: currentChannel, onSubmitClick: function (recordedFile, duration) {\n                    sendVoiceMessage(recordedFile, duration, parentMessage);\n                    setShowVoiceMessageInput(false);\n                }, onCancelClick: function () {\n                    setShowVoiceMessageInput(false);\n                } }))\n            : (React__default.createElement(MessageInput, { className: \"sendbird-thread-message-input__message-input\", messageFieldId: \"sendbird-message-input-text-field--thread\", channel: currentChannel, channelUrl: currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url, isMobile: isMobile, disabled: threadInputDisabled, acceptableMimeTypes: acceptableMimeTypes, setMentionedUsers: setMentionedUsers, mentionSelectedUser: selectedUser, isMentionEnabled: isMentionEnabled, isVoiceMessageEnabled: isVoiceMessageEnabled, isSelectingMultipleFilesEnabled: isMultipleFilesMessageEnabled, onVoiceMessageIconClick: function () {\n                    setShowVoiceMessageInput(true);\n                }, renderFileUploadIcon: renderFileUploadIcon, renderVoiceMessageIcon: renderVoiceMessageIcon, renderSendMessageIcon: renderSendMessageIcon, ref: ref || messageInputRef, placeholder: ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isFrozen) && !((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) === Role.OPERATOR) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED)\n                    || ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myMutedState) === MutedState.MUTED && stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED_SHORT)\n                    || (allThreadMessages.length > 0\n                        ? stringSet.THREAD__INPUT__REPLY_TO_THREAD\n                        : stringSet.THREAD__INPUT__REPLY_IN_THREAD), onStartTyping: function () {\n                    var _a;\n                    (_a = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.startTyping) === null || _a === void 0 ? void 0 : _a.call(currentChannel);\n                }, onSendMessage: function (_a) {\n                    var _b;\n                    var message = _a.message, mentionTemplate = _a.mentionTemplate;\n                    sendMessage({\n                        message: message,\n                        mentionedUsers: mentionedUsers,\n                        mentionTemplate: mentionTemplate,\n                        quoteMessage: parentMessage,\n                    });\n                    setMentionNickname('');\n                    setMentionedUsers([]);\n                    (_b = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.endTyping) === null || _b === void 0 ? void 0 : _b.call(currentChannel);\n                }, onFileUpload: handleUploadFiles, onUserMentioned: function (user) {\n                    if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {\n                        setSelectedUser(null);\n                        setMentionNickname('');\n                    }\n                }, onMentionStringChange: function (mentionText) {\n                    setMentionNickname(mentionText);\n                }, onMentionedUserIdsUpdated: function (userIds) {\n                    setMentionedUserIds(userIds);\n                }, onKeyDown: function (e) {\n                    if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0\n                        && ((e.key === MessageInputKeys.Enter && ableMention) || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)) {\n                        setMessageInputEvent(e);\n                        return true;\n                    }\n                    return false;\n                } }))));\n};\nvar ThreadMessageInput$1 = React__default.forwardRef(ThreadMessageInput);\n\nexport { ThreadMessageInput$1 as default };\n//# sourceMappingURL=ThreadMessageInput.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}