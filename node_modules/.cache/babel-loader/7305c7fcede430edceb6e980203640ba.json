{"ast":null,"code":"import React__default, { useState, useEffect } from 'react';\nimport { useChannelContext } from '../context.js';\nimport PlaceHolder, { PlaceHolderTypes } from '../../ui/PlaceHolder.js';\nimport Icon, { IconTypes, IconColors } from '../../ui/Icon.js';\nimport Message from './Message.js';\nimport { T as TypingIndicatorType } from '../../chunks/bundle-DxTN4_0p.js';\nimport { a as isAboutSame } from '../../chunks/bundle-CMLImr6T.js';\nimport { UnreadCount } from '../../GroupChannel/components/UnreadCount.js';\nimport { FrozenNotification } from '../../GroupChannel/components/FrozenNotification.js';\nimport { S as SCROLL_BUFFER } from '../../chunks/bundle-DCMGp6rH.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport { MessageProvider } from '../../Message/context.js';\nimport { u as useHandleOnScrollCallback } from '../../chunks/bundle-ClMRT1R_.js';\nimport { u as useThrottleCallback } from '../../chunks/bundle-DSn10d8F.js';\nimport TypingIndicatorBubble from '../../ui/TypingIndicatorBubble.js';\nimport { u as useOnScrollPositionChangeDetector } from '../../chunks/bundle-DvsVgg5f.js';\nimport { getMessagePartsInfo } from '../utils/getMessagePartsInfo.js';\nimport { d as deleteNullish } from '../../chunks/bundle-BgwzpLeQ.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '../../chunks/bundle-CveCFQYP.js';\nimport '../../chunks/bundle-BNDaXsLn.js';\nimport '../../chunks/bundle-BQi9-O76.js';\nimport '../../chunks/bundle-CAdqcqOm.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '@sendbird/chat/message';\nimport '../../chunks/bundle-CpjASiz4.js';\nimport '../../chunks/bundle-CZUYMubi.js';\nimport '../../chunks/bundle-chiYJ8F8.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '../../chunks/bundle-H8J7tAed.js';\nimport '../../chunks/bundle-b6TpX_JP.js';\nimport '../../chunks/bundle-y29vL7zu.js';\nimport '../../chunks/bundle-fHeMHhND.js';\nimport '../../chunks/bundle-T6fVCCb7.js';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-cQZ3UZoG.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-DhKQeIfP.js';\nimport '../../ui/Loader.js';\nimport '../../chunks/bundle-Dnj0fmAf.js';\nimport '../../chunks/bundle-C3ktHDOc.js';\nimport '../../Message/hooks/useDirtyGetMentions.js';\nimport '../../ui/DateSeparator.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nimport '../../ui/MessageInput.js';\nimport '../../chunks/bundle-0qSTzMXb.js';\nimport '../../ui/IconButton.js';\nimport '../../ui/Button.js';\nimport '../../chunks/bundle-TZQ6dJCG.js';\nimport 'dompurify';\nimport '../../chunks/bundle-0nQK2G2O.js';\nimport '../../chunks/bundle-B6edg1g0.js';\nimport '../../chunks/bundle-DhGZA5UP.js';\nimport '../../chunks/bundle-GUbI4JcD.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../withSendbird.js';\nimport '../../ui/MessageContent.js';\nimport '../../chunks/bundle-vuBlPTsL.js';\nimport '../../chunks/bundle-BHK1eF5R.js';\nimport '../../chunks/bundle-F5koPk19.js';\nimport '../../chunks/bundle-DkBecO3w.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport 'react-dom';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport '../../ui/SortByRow.js';\nimport '../../ui/MessageItemReactionMenu.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../ui/ReactionButton.js';\nimport '../../chunks/bundle-AfQS5DGf.js';\nimport '../../chunks/bundle-f-SpnOx2.js';\nimport '../../ui/EmojiReactions.js';\nimport '../../ui/ReactionBadge.js';\nimport '../../ui/BottomSheet.js';\nimport '../../chunks/bundle-CXdo2kR_.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../ui/UserListItem.js';\nimport '../../chunks/bundle-CFosTNce.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/Checkbox.js';\nimport '../../ui/UserProfile.js';\nimport '../../sendbirdSelectors.js';\nimport '../../ui/Tooltip.js';\nimport '../../ui/TooltipWrapper.js';\nimport '../../ui/AdminMessage.js';\nimport '../../ui/QuoteMessage.js';\nimport '../../chunks/bundle-BqMHiKkl.js';\nimport '../../ui/MobileMenu.js';\nimport '../../ui/ThreadReplies.js';\nimport '../../ui/OGMessageItemBody.js';\nimport '../../chunks/bundle-DofK8ySe.js';\nimport '../../ui/MentionLabel.js';\nimport '../../ui/LinkLabel.js';\nimport '../../ui/TextMessageItemBody.js';\nimport '../../ui/FileMessageItemBody.js';\nimport '../../ui/TextButton.js';\nimport '../../chunks/bundle-ZVq6xGXk.js';\nimport '../../ui/FileViewer.js';\nimport '../../chunks/bundle-Gdl-rzQC.js';\nimport '../../ui/VoiceMessageItemBody.js';\nimport '../../ui/ProgressBar.js';\nimport '../../VoicePlayer/useVoicePlayer.js';\nimport '../../ui/PlaybackTime.js';\nimport '../../ui/ThumbnailMessageItemBody.js';\nimport '../../ui/UnknownMessageItemBody.js';\nimport '../../ui/TemplateMessageItemBody.js';\nimport '../../chunks/bundle-uLjwqZrR.js';\nimport '../../ui/FallbackTemplateMessageItemBody.tsx.js';\nimport '../../ui/LoadingTemplateMessageItemBody.tsx.js';\nimport '../../ui/FeedbackIconButton.js';\nimport '../../ui/MobileFeedbackMenu.js';\nimport '../../ui/MessageFeedbackModal.js';\nimport '../../ui/Input.js';\nimport '../../ui/MessageFeedbackFailedModal.js';\nimport '../../chunks/bundle-Cf0UgZwi.js';\nimport '../../GroupChannel/components/SuggestedReplies.js';\nimport '../../chunks/bundle-Due9yzp6.js';\nimport './FileViewer.js';\nimport '../../chunks/bundle-CqpGyIDR.js';\nimport './RemoveMessageModal.js';\nimport '../../chunks/bundle-D0TYbkjN.js';\nimport '../../chunks/bundle-Zvm5CMGT.js';\nimport '../utils/compareMessagesForGrouping.js';\nvar DELAY = 100;\nfunction useSetScrollToBottom(_a) {\n  var loading = _a.loading;\n  var _b = useState(0),\n    scrollBottom = _b[0],\n    setScrollBottom = _b[1];\n  useEffect(function () {\n    if (loading) {\n      setScrollBottom(0);\n    }\n  }, [loading]);\n  var scrollCb = function (e) {\n    var element = e.target;\n    try {\n      setScrollBottom(element.scrollHeight - element.scrollTop - element.offsetHeight);\n    } catch (_a) {\n      //\n    }\n  };\n  return {\n    scrollBottom: scrollBottom,\n    scrollToBottomHandler: useThrottleCallback(scrollCb, DELAY, {\n      trailing: true\n    })\n  };\n}\nfunction useScrollBehavior() {\n  var _a = useChannelContext(),\n    scrollRef = _a.scrollRef,\n    _b = _a.scrollBehavior,\n    scrollBehavior = _b === void 0 ? 'auto' : _b;\n  useEffect(function () {\n    if (scrollRef.current) {\n      scrollRef.current.style.scrollBehavior = scrollBehavior;\n    }\n  }, [scrollRef.current]);\n  return null;\n}\n\n/* We operate the CSS files for Channel&GroupChannel modules in the GroupChannel */\nvar SCROLL_BOTTOM_PADDING = 50;\nvar MessageList = function (props) {\n  var _a, _b, _c, _d, _e;\n  var _f = props.className,\n    className = _f === void 0 ? '' : _f;\n  var _g = deleteNullish(props),\n    renderMessage = _g.renderMessage,\n    renderMessageContent = _g.renderMessageContent,\n    renderSuggestedReplies = _g.renderSuggestedReplies,\n    renderCustomSeparator = _g.renderCustomSeparator,\n    _h = _g.renderPlaceholderLoader,\n    renderPlaceholderLoader = _h === void 0 ? function () {\n      return React__default.createElement(PlaceHolder, {\n        type: PlaceHolderTypes.LOADING\n      });\n    } : _h,\n    _j = _g.renderPlaceholderEmpty,\n    renderPlaceholderEmpty = _j === void 0 ? function () {\n      return React__default.createElement(PlaceHolder, {\n        className: \"sendbird-conversation__no-messages\",\n        type: PlaceHolderTypes.NO_MESSAGES\n      });\n    } : _j,\n    _k = _g.renderFrozenNotification,\n    renderFrozenNotification = _k === void 0 ? function () {\n      return React__default.createElement(FrozenNotification, {\n        className: \"sendbird-conversation__messages__notification\"\n      });\n    } : _k;\n  var _l = useChannelContext(),\n    allMessages = _l.allMessages,\n    localMessages = _l.localMessages,\n    hasMorePrev = _l.hasMorePrev,\n    hasMoreNext = _l.hasMoreNext,\n    setInitialTimeStamp = _l.setInitialTimeStamp,\n    setAnimatedMessageId = _l.setAnimatedMessageId,\n    setHighLightedMessageId = _l.setHighLightedMessageId,\n    isMessageGroupingEnabled = _l.isMessageGroupingEnabled,\n    scrollRef = _l.scrollRef,\n    onScrollCallback = _l.onScrollCallback,\n    onScrollDownCallback = _l.onScrollDownCallback,\n    messagesDispatcher = _l.messagesDispatcher,\n    messageActionTypes = _l.messageActionTypes,\n    currentGroupChannel = _l.currentGroupChannel,\n    disableMarkAsRead = _l.disableMarkAsRead,\n    filterMessageList = _l.filterMessageList,\n    replyType = _l.replyType,\n    loading = _l.loading,\n    isScrolled = _l.isScrolled,\n    unreadSince = _l.unreadSince,\n    unreadSinceDate = _l.unreadSinceDate,\n    typingMembers = _l.typingMembers;\n  var store = useSendbirdStateContext();\n  var allMessagesFiltered = typeof filterMessageList === 'function' ? allMessages.filter(filterMessageList) : allMessages;\n  var markAsReadScheduler = store.config.markAsReadScheduler;\n  var _m = useState(false),\n    isScrollBottom = _m[0],\n    setIsScrollBottom = _m[1];\n  useScrollBehavior();\n  /**\n   * @param {function} callback callback from useHandleOnScrollCallback, it adjusts scroll position\n   * */\n  var onScroll = function (callback) {\n    var element = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;\n    if (element == null) {\n      return;\n    }\n    var scrollTop = element.scrollTop,\n      clientHeight = element.clientHeight,\n      scrollHeight = element.scrollHeight;\n    if (hasMorePrev && isAboutSame(scrollTop, 0, SCROLL_BUFFER)) {\n      onScrollCallback(callback);\n    }\n    if (hasMoreNext && isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER)) {\n      onScrollDownCallback(callback);\n    }\n    if (!disableMarkAsRead && isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER) && !!currentGroupChannel) {\n      messagesDispatcher({\n        type: messageActionTypes.MARK_AS_READ,\n        payload: {\n          channel: currentGroupChannel\n        }\n      });\n      markAsReadScheduler.push(currentGroupChannel);\n    }\n  };\n  var onClickScrollBot = function () {\n    var _a, _b;\n    setInitialTimeStamp === null || setInitialTimeStamp === void 0 ? void 0 : setInitialTimeStamp(null);\n    setAnimatedMessageId === null || setAnimatedMessageId === void 0 ? void 0 : setAnimatedMessageId(null);\n    setHighLightedMessageId === null || setHighLightedMessageId === void 0 ? void 0 : setHighLightedMessageId(null);\n    if (scrollRef.current && scrollRef.current.scrollTop > -1) {\n      scrollRef.current.scrollTop = ((_a = scrollRef.current.scrollHeight) !== null && _a !== void 0 ? _a : 0) - ((_b = scrollRef.current.offsetHeight) !== null && _b !== void 0 ? _b : 0);\n    }\n  };\n  /**\n   * 1. Move the messsage list scroll\n   *    when each message's height is changed by `reactions` OR `showEdit`\n   * 2. Keep the scrollBottom value after fetching new message list\n   */\n  var moveScroll = function (isBottomMessageAffected) {\n    if (isBottomMessageAffected === void 0) {\n      isBottomMessageAffected = false;\n    }\n    var current = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;\n    if (current) {\n      var bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;\n      if (scrollBottom < bottom && (!isBottomMessageAffected || scrollBottom < SCROLL_BUFFER)) {\n        // Move the scroll as much as the height of the message has changed\n        current.scrollTop += bottom - scrollBottom;\n      }\n    }\n  };\n  var handleOnScroll = useHandleOnScrollCallback({\n    hasMore: hasMorePrev,\n    hasNext: hasMoreNext,\n    onScroll: onScroll,\n    scrollRef: scrollRef\n  });\n  var onScrollReachedEndDetector = useOnScrollPositionChangeDetector({\n    onReachedBottom: function () {\n      /**\n       * Note that this event is already being called in onScroll() above. However, it is only being called when\n       * hasMoreNext is true but it needs to be called when hasNext is false when reached bottom as well.\n       */\n      if (!hasMoreNext && !disableMarkAsRead && !!currentGroupChannel) {\n        messagesDispatcher({\n          type: messageActionTypes.MARK_AS_READ,\n          payload: {\n            channel: currentGroupChannel\n          }\n        });\n        markAsReadScheduler.push(currentGroupChannel);\n      }\n      setIsScrollBottom(true);\n    },\n    onReachedTop: function () {\n      setIsScrollBottom(false);\n    },\n    onInBetween: function () {\n      setIsScrollBottom(false);\n    }\n  });\n  var _o = useSetScrollToBottom({\n      loading: loading\n    }),\n    scrollToBottomHandler = _o.scrollToBottomHandler,\n    scrollBottom = _o.scrollBottom;\n  if (loading) {\n    return renderPlaceholderLoader();\n  }\n  if (allMessagesFiltered.length < 1) {\n    return renderPlaceholderEmpty();\n  }\n  return React__default.createElement(React__default.Fragment, null, !isScrolled && React__default.createElement(PlaceHolder, {\n    type: PlaceHolderTypes.LOADING\n  }), React__default.createElement(\"div\", {\n    className: \"sendbird-conversation__messages \".concat(className)\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-conversation__scroll-container\"\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-conversation__padding\"\n  }), React__default.createElement(\"div\", {\n    className: \"sendbird-conversation__messages-padding\",\n    \"data-testid\": \"sendbird-message-list-container\",\n    ref: scrollRef,\n    onScroll: function (e) {\n      handleOnScroll();\n      scrollToBottomHandler(e);\n      onScrollReachedEndDetector(e);\n    }\n  }, allMessagesFiltered.map(function (m, idx) {\n    var _a, _b;\n    var _c = getMessagePartsInfo({\n        allMessages: allMessagesFiltered,\n        replyType: replyType,\n        isMessageGroupingEnabled: isMessageGroupingEnabled,\n        currentIndex: idx,\n        currentMessage: m,\n        currentChannel: currentGroupChannel\n      }),\n      chainTop = _c.chainTop,\n      chainBottom = _c.chainBottom,\n      hasSeparator = _c.hasSeparator;\n    var isByMe = ((_a = m === null || m === void 0 ? void 0 : m.sender) === null || _a === void 0 ? void 0 : _a.userId) === ((_b = store === null || store === void 0 ? void 0 : store.config) === null || _b === void 0 ? void 0 : _b.userId);\n    return React__default.createElement(MessageProvider, {\n      message: m,\n      key: m === null || m === void 0 ? void 0 : m.messageId,\n      isByMe: isByMe\n    }, React__default.createElement(Message, {\n      handleScroll: moveScroll,\n      message: m,\n      hasSeparator: hasSeparator,\n      chainTop: chainTop,\n      chainBottom: chainBottom,\n      renderMessageContent: renderMessageContent,\n      renderSuggestedReplies: renderSuggestedReplies,\n      renderCustomSeparator: renderCustomSeparator,\n      // backward compatibility\n      renderMessage: renderMessage\n    }));\n  }), localMessages.map(function (m, idx) {\n    var _a, _b;\n    var _c = getMessagePartsInfo({\n        allMessages: allMessagesFiltered,\n        replyType: replyType,\n        isMessageGroupingEnabled: isMessageGroupingEnabled,\n        currentIndex: idx,\n        currentMessage: m,\n        currentChannel: currentGroupChannel\n      }),\n      chainTop = _c.chainTop,\n      chainBottom = _c.chainBottom;\n    var isByMe = ((_a = m === null || m === void 0 ? void 0 : m.sender) === null || _a === void 0 ? void 0 : _a.userId) === ((_b = store === null || store === void 0 ? void 0 : store.config) === null || _b === void 0 ? void 0 : _b.userId);\n    return React__default.createElement(MessageProvider, {\n      message: m,\n      key: m === null || m === void 0 ? void 0 : m.messageId,\n      isByMe: isByMe\n    }, React__default.createElement(Message, {\n      handleScroll: moveScroll,\n      message: m,\n      chainTop: chainTop,\n      chainBottom: chainBottom,\n      renderMessageContent: renderMessageContent,\n      renderSuggestedReplies: renderSuggestedReplies,\n      renderCustomSeparator: renderCustomSeparator,\n      // backward compatibility\n      renderMessage: renderMessage\n    }));\n  }), !hasMoreNext && ((_b = (_a = store === null || store === void 0 ? void 0 : store.config) === null || _a === void 0 ? void 0 : _a.groupChannel) === null || _b === void 0 ? void 0 : _b.enableTypingIndicator) && ((_e = (_d = (_c = store === null || store === void 0 ? void 0 : store.config) === null || _c === void 0 ? void 0 : _c.groupChannel) === null || _d === void 0 ? void 0 : _d.typingIndicatorTypes) === null || _e === void 0 ? void 0 : _e.has(TypingIndicatorType.Bubble)) && React__default.createElement(TypingIndicatorBubble, {\n    typingMembers: typingMembers,\n    handleScroll: moveScroll\n  }))), (currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.isFrozen) && renderFrozenNotification(),\n  /**\n   * Show unread count IFF scroll is not bottom or is bottom but hasNext is true.\n   */\n  (!isScrollBottom || hasMoreNext) && (unreadSince || unreadSinceDate) && React__default.createElement(UnreadCount, {\n    className: \"sendbird-conversation__messages__notification\",\n    count: currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.unreadMessageCount,\n    time: unreadSince,\n    lastReadAt: unreadSinceDate,\n    onClick: function () {\n      if (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n      if (!disableMarkAsRead && !!currentGroupChannel) {\n        markAsReadScheduler.push(currentGroupChannel);\n        messagesDispatcher({\n          type: messageActionTypes.MARK_AS_READ,\n          payload: {\n            channel: currentGroupChannel\n          }\n        });\n      }\n      setInitialTimeStamp(null);\n      setAnimatedMessageId(null);\n      setHighLightedMessageId(null);\n    }\n  }),\n  // This flag is an unmatched variable\n  scrollBottom > SCROLL_BOTTOM_PADDING && React__default.createElement(\"div\", {\n    className: \"sendbird-conversation__scroll-bottom-button\",\n    onClick: onClickScrollBot,\n    onKeyDown: onClickScrollBot,\n    tabIndex: 0,\n    role: \"button\"\n  }, React__default.createElement(Icon, {\n    width: \"24px\",\n    height: \"24px\",\n    type: IconTypes.CHEVRON_DOWN,\n    fillColor: IconColors.PRIMARY\n  }))));\n};\nexport { MessageList, MessageList as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { useState, useEffect } from 'react';\nimport { useChannelContext } from '../context.js';\nimport PlaceHolder, { PlaceHolderTypes } from '../../ui/PlaceHolder.js';\nimport Icon, { IconTypes, IconColors } from '../../ui/Icon.js';\nimport Message from './Message.js';\nimport { T as TypingIndicatorType } from '../../chunks/bundle-DxTN4_0p.js';\nimport { a as isAboutSame } from '../../chunks/bundle-CMLImr6T.js';\nimport { UnreadCount } from '../../GroupChannel/components/UnreadCount.js';\nimport { FrozenNotification } from '../../GroupChannel/components/FrozenNotification.js';\nimport { S as SCROLL_BUFFER } from '../../chunks/bundle-DCMGp6rH.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport { MessageProvider } from '../../Message/context.js';\nimport { u as useHandleOnScrollCallback } from '../../chunks/bundle-ClMRT1R_.js';\nimport { u as useThrottleCallback } from '../../chunks/bundle-DSn10d8F.js';\nimport TypingIndicatorBubble from '../../ui/TypingIndicatorBubble.js';\nimport { u as useOnScrollPositionChangeDetector } from '../../chunks/bundle-DvsVgg5f.js';\nimport { getMessagePartsInfo } from '../utils/getMessagePartsInfo.js';\nimport { d as deleteNullish } from '../../chunks/bundle-BgwzpLeQ.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '../../chunks/bundle-CveCFQYP.js';\nimport '../../chunks/bundle-BNDaXsLn.js';\nimport '../../chunks/bundle-BQi9-O76.js';\nimport '../../chunks/bundle-CAdqcqOm.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '@sendbird/chat/message';\nimport '../../chunks/bundle-CpjASiz4.js';\nimport '../../chunks/bundle-CZUYMubi.js';\nimport '../../chunks/bundle-chiYJ8F8.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '../../chunks/bundle-H8J7tAed.js';\nimport '../../chunks/bundle-b6TpX_JP.js';\nimport '../../chunks/bundle-y29vL7zu.js';\nimport '../../chunks/bundle-fHeMHhND.js';\nimport '../../chunks/bundle-T6fVCCb7.js';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-cQZ3UZoG.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-DhKQeIfP.js';\nimport '../../ui/Loader.js';\nimport '../../chunks/bundle-Dnj0fmAf.js';\nimport '../../chunks/bundle-C3ktHDOc.js';\nimport '../../Message/hooks/useDirtyGetMentions.js';\nimport '../../ui/DateSeparator.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nimport '../../ui/MessageInput.js';\nimport '../../chunks/bundle-0qSTzMXb.js';\nimport '../../ui/IconButton.js';\nimport '../../ui/Button.js';\nimport '../../chunks/bundle-TZQ6dJCG.js';\nimport 'dompurify';\nimport '../../chunks/bundle-0nQK2G2O.js';\nimport '../../chunks/bundle-B6edg1g0.js';\nimport '../../chunks/bundle-DhGZA5UP.js';\nimport '../../chunks/bundle-GUbI4JcD.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../withSendbird.js';\nimport '../../ui/MessageContent.js';\nimport '../../chunks/bundle-vuBlPTsL.js';\nimport '../../chunks/bundle-BHK1eF5R.js';\nimport '../../chunks/bundle-F5koPk19.js';\nimport '../../chunks/bundle-DkBecO3w.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport 'react-dom';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport '../../ui/SortByRow.js';\nimport '../../ui/MessageItemReactionMenu.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../ui/ReactionButton.js';\nimport '../../chunks/bundle-AfQS5DGf.js';\nimport '../../chunks/bundle-f-SpnOx2.js';\nimport '../../ui/EmojiReactions.js';\nimport '../../ui/ReactionBadge.js';\nimport '../../ui/BottomSheet.js';\nimport '../../chunks/bundle-CXdo2kR_.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../ui/UserListItem.js';\nimport '../../chunks/bundle-CFosTNce.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/Checkbox.js';\nimport '../../ui/UserProfile.js';\nimport '../../sendbirdSelectors.js';\nimport '../../ui/Tooltip.js';\nimport '../../ui/TooltipWrapper.js';\nimport '../../ui/AdminMessage.js';\nimport '../../ui/QuoteMessage.js';\nimport '../../chunks/bundle-BqMHiKkl.js';\nimport '../../ui/MobileMenu.js';\nimport '../../ui/ThreadReplies.js';\nimport '../../ui/OGMessageItemBody.js';\nimport '../../chunks/bundle-DofK8ySe.js';\nimport '../../ui/MentionLabel.js';\nimport '../../ui/LinkLabel.js';\nimport '../../ui/TextMessageItemBody.js';\nimport '../../ui/FileMessageItemBody.js';\nimport '../../ui/TextButton.js';\nimport '../../chunks/bundle-ZVq6xGXk.js';\nimport '../../ui/FileViewer.js';\nimport '../../chunks/bundle-Gdl-rzQC.js';\nimport '../../ui/VoiceMessageItemBody.js';\nimport '../../ui/ProgressBar.js';\nimport '../../VoicePlayer/useVoicePlayer.js';\nimport '../../ui/PlaybackTime.js';\nimport '../../ui/ThumbnailMessageItemBody.js';\nimport '../../ui/UnknownMessageItemBody.js';\nimport '../../ui/TemplateMessageItemBody.js';\nimport '../../chunks/bundle-uLjwqZrR.js';\nimport '../../ui/FallbackTemplateMessageItemBody.tsx.js';\nimport '../../ui/LoadingTemplateMessageItemBody.tsx.js';\nimport '../../ui/FeedbackIconButton.js';\nimport '../../ui/MobileFeedbackMenu.js';\nimport '../../ui/MessageFeedbackModal.js';\nimport '../../ui/Input.js';\nimport '../../ui/MessageFeedbackFailedModal.js';\nimport '../../chunks/bundle-Cf0UgZwi.js';\nimport '../../GroupChannel/components/SuggestedReplies.js';\nimport '../../chunks/bundle-Due9yzp6.js';\nimport './FileViewer.js';\nimport '../../chunks/bundle-CqpGyIDR.js';\nimport './RemoveMessageModal.js';\nimport '../../chunks/bundle-D0TYbkjN.js';\nimport '../../chunks/bundle-Zvm5CMGT.js';\nimport '../utils/compareMessagesForGrouping.js';\n\nvar DELAY = 100;\nfunction useSetScrollToBottom(_a) {\n    var loading = _a.loading;\n    var _b = useState(0), scrollBottom = _b[0], setScrollBottom = _b[1];\n    useEffect(function () {\n        if (loading) {\n            setScrollBottom(0);\n        }\n    }, [loading]);\n    var scrollCb = function (e) {\n        var element = e.target;\n        try {\n            setScrollBottom(element.scrollHeight - element.scrollTop - element.offsetHeight);\n        }\n        catch (_a) {\n            //\n        }\n    };\n    return {\n        scrollBottom: scrollBottom,\n        scrollToBottomHandler: useThrottleCallback(scrollCb, DELAY, { trailing: true }),\n    };\n}\n\nfunction useScrollBehavior() {\n    var _a = useChannelContext(), scrollRef = _a.scrollRef, _b = _a.scrollBehavior, scrollBehavior = _b === void 0 ? 'auto' : _b;\n    useEffect(function () {\n        if (scrollRef.current) {\n            scrollRef.current.style.scrollBehavior = scrollBehavior;\n        }\n    }, [scrollRef.current]);\n    return null;\n}\n\n/* We operate the CSS files for Channel&GroupChannel modules in the GroupChannel */\nvar SCROLL_BOTTOM_PADDING = 50;\nvar MessageList = function (props) {\n    var _a, _b, _c, _d, _e;\n    var _f = props.className, className = _f === void 0 ? '' : _f;\n    var _g = deleteNullish(props), renderMessage = _g.renderMessage, renderMessageContent = _g.renderMessageContent, renderSuggestedReplies = _g.renderSuggestedReplies, renderCustomSeparator = _g.renderCustomSeparator, _h = _g.renderPlaceholderLoader, renderPlaceholderLoader = _h === void 0 ? function () { return React__default.createElement(PlaceHolder, { type: PlaceHolderTypes.LOADING }); } : _h, _j = _g.renderPlaceholderEmpty, renderPlaceholderEmpty = _j === void 0 ? function () { return React__default.createElement(PlaceHolder, { className: \"sendbird-conversation__no-messages\", type: PlaceHolderTypes.NO_MESSAGES }); } : _j, _k = _g.renderFrozenNotification, renderFrozenNotification = _k === void 0 ? function () { return React__default.createElement(FrozenNotification, { className: \"sendbird-conversation__messages__notification\" }); } : _k;\n    var _l = useChannelContext(), allMessages = _l.allMessages, localMessages = _l.localMessages, hasMorePrev = _l.hasMorePrev, hasMoreNext = _l.hasMoreNext, setInitialTimeStamp = _l.setInitialTimeStamp, setAnimatedMessageId = _l.setAnimatedMessageId, setHighLightedMessageId = _l.setHighLightedMessageId, isMessageGroupingEnabled = _l.isMessageGroupingEnabled, scrollRef = _l.scrollRef, onScrollCallback = _l.onScrollCallback, onScrollDownCallback = _l.onScrollDownCallback, messagesDispatcher = _l.messagesDispatcher, messageActionTypes = _l.messageActionTypes, currentGroupChannel = _l.currentGroupChannel, disableMarkAsRead = _l.disableMarkAsRead, filterMessageList = _l.filterMessageList, replyType = _l.replyType, loading = _l.loading, isScrolled = _l.isScrolled, unreadSince = _l.unreadSince, unreadSinceDate = _l.unreadSinceDate, typingMembers = _l.typingMembers;\n    var store = useSendbirdStateContext();\n    var allMessagesFiltered = typeof filterMessageList === 'function' ? allMessages.filter(filterMessageList) : allMessages;\n    var markAsReadScheduler = store.config.markAsReadScheduler;\n    var _m = useState(false), isScrollBottom = _m[0], setIsScrollBottom = _m[1];\n    useScrollBehavior();\n    /**\n     * @param {function} callback callback from useHandleOnScrollCallback, it adjusts scroll position\n     * */\n    var onScroll = function (callback) {\n        var element = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;\n        if (element == null) {\n            return;\n        }\n        var scrollTop = element.scrollTop, clientHeight = element.clientHeight, scrollHeight = element.scrollHeight;\n        if (hasMorePrev && isAboutSame(scrollTop, 0, SCROLL_BUFFER)) {\n            onScrollCallback(callback);\n        }\n        if (hasMoreNext && isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER)) {\n            onScrollDownCallback(callback);\n        }\n        if (!disableMarkAsRead && isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER) && !!currentGroupChannel) {\n            messagesDispatcher({\n                type: messageActionTypes.MARK_AS_READ,\n                payload: { channel: currentGroupChannel },\n            });\n            markAsReadScheduler.push(currentGroupChannel);\n        }\n    };\n    var onClickScrollBot = function () {\n        var _a, _b;\n        setInitialTimeStamp === null || setInitialTimeStamp === void 0 ? void 0 : setInitialTimeStamp(null);\n        setAnimatedMessageId === null || setAnimatedMessageId === void 0 ? void 0 : setAnimatedMessageId(null);\n        setHighLightedMessageId === null || setHighLightedMessageId === void 0 ? void 0 : setHighLightedMessageId(null);\n        if (scrollRef.current && scrollRef.current.scrollTop > -1) {\n            scrollRef.current.scrollTop = ((_a = scrollRef.current.scrollHeight) !== null && _a !== void 0 ? _a : 0) - ((_b = scrollRef.current.offsetHeight) !== null && _b !== void 0 ? _b : 0);\n        }\n    };\n    /**\n     * 1. Move the messsage list scroll\n     *    when each message's height is changed by `reactions` OR `showEdit`\n     * 2. Keep the scrollBottom value after fetching new message list\n     */\n    var moveScroll = function (isBottomMessageAffected) {\n        if (isBottomMessageAffected === void 0) { isBottomMessageAffected = false; }\n        var current = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;\n        if (current) {\n            var bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;\n            if (scrollBottom < bottom && (!isBottomMessageAffected || scrollBottom < SCROLL_BUFFER)) {\n                // Move the scroll as much as the height of the message has changed\n                current.scrollTop += bottom - scrollBottom;\n            }\n        }\n    };\n    var handleOnScroll = useHandleOnScrollCallback({\n        hasMore: hasMorePrev,\n        hasNext: hasMoreNext,\n        onScroll: onScroll,\n        scrollRef: scrollRef,\n    });\n    var onScrollReachedEndDetector = useOnScrollPositionChangeDetector({\n        onReachedBottom: function () {\n            /**\n             * Note that this event is already being called in onScroll() above. However, it is only being called when\n             * hasMoreNext is true but it needs to be called when hasNext is false when reached bottom as well.\n             */\n            if (!hasMoreNext && !disableMarkAsRead && !!currentGroupChannel) {\n                messagesDispatcher({\n                    type: messageActionTypes.MARK_AS_READ,\n                    payload: { channel: currentGroupChannel },\n                });\n                markAsReadScheduler.push(currentGroupChannel);\n            }\n            setIsScrollBottom(true);\n        },\n        onReachedTop: function () {\n            setIsScrollBottom(false);\n        },\n        onInBetween: function () {\n            setIsScrollBottom(false);\n        },\n    });\n    var _o = useSetScrollToBottom({ loading: loading }), scrollToBottomHandler = _o.scrollToBottomHandler, scrollBottom = _o.scrollBottom;\n    if (loading) {\n        return renderPlaceholderLoader();\n    }\n    if (allMessagesFiltered.length < 1) {\n        return renderPlaceholderEmpty();\n    }\n    return (React__default.createElement(React__default.Fragment, null,\n        !isScrolled && React__default.createElement(PlaceHolder, { type: PlaceHolderTypes.LOADING }),\n        React__default.createElement(\"div\", { className: \"sendbird-conversation__messages \".concat(className) },\n            React__default.createElement(\"div\", { className: \"sendbird-conversation__scroll-container\" },\n                React__default.createElement(\"div\", { className: \"sendbird-conversation__padding\" }),\n                React__default.createElement(\"div\", { className: \"sendbird-conversation__messages-padding\", \"data-testid\": \"sendbird-message-list-container\", ref: scrollRef, onScroll: function (e) {\n                        handleOnScroll();\n                        scrollToBottomHandler(e);\n                        onScrollReachedEndDetector(e);\n                    } },\n                    allMessagesFiltered.map(function (m, idx) {\n                        var _a, _b;\n                        var _c = getMessagePartsInfo({\n                            allMessages: allMessagesFiltered,\n                            replyType: replyType,\n                            isMessageGroupingEnabled: isMessageGroupingEnabled,\n                            currentIndex: idx,\n                            currentMessage: m,\n                            currentChannel: currentGroupChannel,\n                        }), chainTop = _c.chainTop, chainBottom = _c.chainBottom, hasSeparator = _c.hasSeparator;\n                        var isByMe = ((_a = m === null || m === void 0 ? void 0 : m.sender) === null || _a === void 0 ? void 0 : _a.userId) === ((_b = store === null || store === void 0 ? void 0 : store.config) === null || _b === void 0 ? void 0 : _b.userId);\n                        return (React__default.createElement(MessageProvider, { message: m, key: m === null || m === void 0 ? void 0 : m.messageId, isByMe: isByMe },\n                            React__default.createElement(Message, { handleScroll: moveScroll, message: m, hasSeparator: hasSeparator, chainTop: chainTop, chainBottom: chainBottom, renderMessageContent: renderMessageContent, renderSuggestedReplies: renderSuggestedReplies, renderCustomSeparator: renderCustomSeparator, \n                                // backward compatibility\n                                renderMessage: renderMessage })));\n                    }),\n                    localMessages.map(function (m, idx) {\n                        var _a, _b;\n                        var _c = getMessagePartsInfo({\n                            allMessages: allMessagesFiltered,\n                            replyType: replyType,\n                            isMessageGroupingEnabled: isMessageGroupingEnabled,\n                            currentIndex: idx,\n                            currentMessage: m,\n                            currentChannel: currentGroupChannel,\n                        }), chainTop = _c.chainTop, chainBottom = _c.chainBottom;\n                        var isByMe = ((_a = m === null || m === void 0 ? void 0 : m.sender) === null || _a === void 0 ? void 0 : _a.userId) === ((_b = store === null || store === void 0 ? void 0 : store.config) === null || _b === void 0 ? void 0 : _b.userId);\n                        return (React__default.createElement(MessageProvider, { message: m, key: m === null || m === void 0 ? void 0 : m.messageId, isByMe: isByMe },\n                            React__default.createElement(Message, { handleScroll: moveScroll, message: m, chainTop: chainTop, chainBottom: chainBottom, renderMessageContent: renderMessageContent, renderSuggestedReplies: renderSuggestedReplies, renderCustomSeparator: renderCustomSeparator, \n                                // backward compatibility\n                                renderMessage: renderMessage })));\n                    }),\n                    !hasMoreNext\n                        && ((_b = (_a = store === null || store === void 0 ? void 0 : store.config) === null || _a === void 0 ? void 0 : _a.groupChannel) === null || _b === void 0 ? void 0 : _b.enableTypingIndicator)\n                        && ((_e = (_d = (_c = store === null || store === void 0 ? void 0 : store.config) === null || _c === void 0 ? void 0 : _c.groupChannel) === null || _d === void 0 ? void 0 : _d.typingIndicatorTypes) === null || _e === void 0 ? void 0 : _e.has(TypingIndicatorType.Bubble)) && (React__default.createElement(TypingIndicatorBubble, { typingMembers: typingMembers, handleScroll: moveScroll })))),\n            (currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.isFrozen) && renderFrozenNotification(),\n            /**\n             * Show unread count IFF scroll is not bottom or is bottom but hasNext is true.\n             */\n            (!isScrollBottom || hasMoreNext) && (unreadSince || unreadSinceDate) && (React__default.createElement(UnreadCount, { className: \"sendbird-conversation__messages__notification\", count: currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.unreadMessageCount, time: unreadSince, lastReadAt: unreadSinceDate, onClick: function () {\n                    if (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current)\n                        scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n                    if (!disableMarkAsRead && !!currentGroupChannel) {\n                        markAsReadScheduler.push(currentGroupChannel);\n                        messagesDispatcher({\n                            type: messageActionTypes.MARK_AS_READ,\n                            payload: { channel: currentGroupChannel },\n                        });\n                    }\n                    setInitialTimeStamp(null);\n                    setAnimatedMessageId(null);\n                    setHighLightedMessageId(null);\n                } })),\n            // This flag is an unmatched variable\n            scrollBottom > SCROLL_BOTTOM_PADDING && (React__default.createElement(\"div\", { className: \"sendbird-conversation__scroll-bottom-button\", onClick: onClickScrollBot, onKeyDown: onClickScrollBot, tabIndex: 0, role: \"button\" },\n                React__default.createElement(Icon, { width: \"24px\", height: \"24px\", type: IconTypes.CHEVRON_DOWN, fillColor: IconColors.PRIMARY }))))));\n};\n\nexport { MessageList, MessageList as default };\n//# sourceMappingURL=MessageList.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}