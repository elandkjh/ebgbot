{"ast":null,"code":"import { e as __extends, _ as __assign } from '../chunks/bundle-BQi9-O76.js';\nimport React__default, { Component, useState, useEffect } from 'react';\nimport { Z as startsWithAtAndEndsWithBraces, _ as removeAtAndBraces, w as getClassName } from '../chunks/bundle-DxTN4_0p.js';\nimport { M as MessageProvider, a as MessageTemplate, C as CompositeComponentType } from '../chunks/bundle-uLjwqZrR.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { FallbackTemplateMessageItemBody } from './FallbackTemplateMessageItemBody.tsx.js';\nimport { LoadingTemplateMessageItemBody } from './LoadingTemplateMessageItemBody.tsx.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CNWAfTVw.js';\nimport '../chunks/bundle-CA85nVxp.js';\nimport '../withSendbird.js';\nimport '../chunks/bundle-cQZ3UZoG.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport '../chunks/bundle-DhKQeIfP.js';\nimport './Loader.js';\nimport './Icon.js';\nimport '../chunks/bundle-BgwzpLeQ.js';\nvar MessageTemplateWrapper = function (_a) {\n  var message = _a.message,\n    templateVersion = _a.templateVersion,\n    templateItems = _a.templateItems;\n  return React__default.createElement(MessageProvider, {\n    message: message\n  }, React__default.createElement(MessageTemplate, {\n    templateVersion: templateVersion,\n    templateItems: templateItems\n  }));\n};\nvar NumberValueKeys = ['version', 'size', 'top', 'left', 'right', 'bottom', 'maxTextLines', 'value', 'pixelWidth', 'pixelHeight', 'radius'];\nfunction restoreNumbersFromMessageTemplateObject(value, key) {\n  if (Array.isArray(value)) {\n    return value.map(function (item) {\n      return restoreNumbersFromMessageTemplateObject(item);\n    });\n  }\n  if (value && typeof value === 'object') {\n    return Object.keys(value).reduce(function (acc, key) {\n      acc[key] = restoreNumbersFromMessageTemplateObject(value[key], key);\n      return acc;\n    }, {});\n  }\n  if (key != null && NumberValueKeys.includes(key)) {\n    var numberValue = Number(value);\n    return Number.isNaN(numberValue) ? value : numberValue;\n  }\n  return value;\n}\nvar flattenObjectHelper = function (currentObject, flattenObject, parentKeyPath) {\n  if (parentKeyPath === void 0) {\n    parentKeyPath = '';\n  }\n  for (var _i = 0, _a = Object.entries(currentObject); _i < _a.length; _i++) {\n    var _b = _a[_i],\n      key = _b[0],\n      value = _b[1];\n    var currentKeyPath = parentKeyPath ? \"\".concat(parentKeyPath, \".\").concat(key) : key;\n    if (value && typeof value === 'object') {\n      flattenObjectHelper(value, flattenObject, currentKeyPath);\n    } else {\n      flattenObject[currentKeyPath] = value;\n    }\n  }\n};\n/**\n * Returns flattened object.\n * ex.\n * given { key-1: { key-1.1: 'value-1.1' }, key-2: 'value-2' }\n * returns { key-1.key-1.1: 'value-1.1', key-2: 'value-2' }\n */\nfunction flattenObject(object) {\n  var result = {};\n  flattenObjectHelper(object, result);\n  return result;\n}\nfunction convertArgbToRgba(string) {\n  if (!string.startsWith('#')) {\n    return string;\n  }\n  if (string.length === 9) {\n    return \"#\".concat(string.slice(3)).concat(string[1]).concat(string[2]);\n  }\n  if (string.length === 5) {\n    return \"#\".concat(string.slice(2)).concat(string[1]);\n  }\n  return string;\n}\nvar splitColorVariables = function (colorVariables) {\n  var light = {};\n  var dark = {};\n  for (var key in colorVariables) {\n    if (Object.prototype.hasOwnProperty.call(colorVariables, key)) {\n      var value = colorVariables[key];\n      if (typeof value === 'object' && value !== null) {\n        var _a = splitColorVariables(value),\n          nestedLight = _a[0],\n          nestedDark = _a[1];\n        light[key] = nestedLight;\n        dark[key] = nestedDark;\n      } else if (typeof value === 'string') {\n        var _b = value.split(','),\n          lightColor = _b[0],\n          darkColor = _b[1];\n        light[key] = lightColor;\n        dark[key] = darkColor || lightColor; // when dark color is not provided, use light color\n      } else {\n        light[key] = value;\n        dark[key] = value;\n      }\n    }\n  }\n  return [light, dark];\n};\nfunction selectColorVariablesByTheme(_a) {\n  var colorVariables = _a.colorVariables,\n    theme = _a.theme;\n  var _b = splitColorVariables(colorVariables),\n    light = _b[0],\n    dark = _b[1];\n  return theme === 'light' ? light : dark;\n}\nvar COLOR_KEYS = {\n  color: true,\n  tintColor: true,\n  backgroundColor: true,\n  borderColor: true\n};\nfunction mapData(_a) {\n  var template = _a.template,\n    source = _a.source;\n  if (!['object', 'string'].includes(typeof template) || !template) return template;\n  var regex = /\\{([^}]+)\\}/g;\n  var flattenedSource = flattenObject(source);\n  function replaceVariablePlaceholder(value) {\n    return typeof value === 'string' ? value.replace(regex, function (_, placeholder) {\n      var value = flattenedSource[placeholder];\n      return value || \"{\".concat(placeholder, \"}\");\n    }) : mapData({\n      template: value,\n      source: source\n    });\n  }\n  if (typeof template === 'string') {\n    return replaceVariablePlaceholder(template);\n  }\n  if (Array.isArray(template)) {\n    return template.map(replaceVariablePlaceholder);\n  }\n  var result = {};\n  for (var key in template) {\n    if (Object.prototype.hasOwnProperty.call(template, key)) {\n      var value = template[key];\n      var replacedVal = replaceVariablePlaceholder(value);\n      if (COLOR_KEYS[key] && typeof replacedVal === 'string') {\n        replacedVal = convertArgbToRgba(replacedVal);\n      }\n      result[key] = replacedVal;\n    }\n  }\n  return result;\n}\nvar MessageTemplateErrorBoundary = /** @class */function (_super) {\n  __extends(MessageTemplateErrorBoundary, _super);\n  function MessageTemplateErrorBoundary(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      hasError: false\n    };\n    return _this;\n  }\n  MessageTemplateErrorBoundary.getDerivedStateFromError = function () {\n    return {\n      hasError: true\n    };\n  };\n  MessageTemplateErrorBoundary.prototype.componentDidCatch = function (error, errorInfo) {\n    var _a;\n    (_a = this.props.logger) === null || _a === void 0 ? void 0 : _a.error('Error caught by ErrorBoundary:', error, errorInfo);\n  };\n  MessageTemplateErrorBoundary.prototype.render = function () {\n    if (this.state.hasError) {\n      this.props.onTemplateMessageRenderedCallback('failed');\n      return this.props.fallbackMessage;\n    }\n    this.props.onTemplateMessageRenderedCallback(this.props.isComposite ? 'composite' : 'simple');\n    return this.props.children;\n  };\n  return MessageTemplateErrorBoundary;\n}(Component);\nvar TEMPLATE_FETCH_RETRY_BUFFER_TIME_IN_MILLIES = 500; // It takes about 450ms for isError update\n/**\n * Returns copied message template object filled with given template data and color variables.\n */\nvar getFilledMessageTemplateWithData = function (_a) {\n  var template = _a.template,\n    _b = _a.templateData,\n    templateData = _b === void 0 ? {} : _b,\n    colorVariables = _a.colorVariables,\n    theme = _a.theme;\n  var selectedThemeColorVariables = {};\n  if (colorVariables && theme) {\n    selectedThemeColorVariables = selectColorVariablesByTheme({\n      colorVariables: colorVariables,\n      theme: theme\n    });\n  }\n  var source = __assign(__assign({}, templateData), selectedThemeColorVariables);\n  var parsedTemplate = mapData({\n    template: restoreNumbersFromMessageTemplateObject(template),\n    source: source\n  });\n  return parsedTemplate;\n};\nfunction TemplateMessageItemBody(_a) {\n  var _b, _c;\n  var _d = _a.className,\n    className = _d === void 0 ? '' : _d,\n    message = _a.message,\n    _e = _a.isByMe,\n    isByMe = _e === void 0 ? false : _e,\n    _f = _a.theme,\n    theme = _f === void 0 ? 'light' : _f,\n    _g = _a.onTemplateMessageRenderedCallback,\n    onTemplateMessageRenderedCallback = _g === void 0 ? function () {} : _g;\n  var templateData = (_b = message.extendedMessagePayload) === null || _b === void 0 ? void 0 : _b['template'];\n  var getFailedBody = function () {\n    onTemplateMessageRenderedCallback('failed');\n    return React__default.createElement(FallbackTemplateMessageItemBody, {\n      className: className,\n      message: message,\n      isByMe: isByMe\n    });\n  };\n  if (!(templateData === null || templateData === void 0 ? void 0 : templateData.key)) {\n    return getFailedBody();\n  }\n  var templateKey = templateData.key;\n  var globalState = useSendbirdStateContext();\n  if (!globalState) {\n    return getFailedBody();\n  }\n  var _h = globalState.utils,\n    getCachedTemplate = _h.getCachedTemplate,\n    updateMessageTemplatesInfo = _h.updateMessageTemplatesInfo;\n  var logger = globalState.config.logger;\n  var waitingTemplateKeysMap = globalState.stores.appInfoStore.waitingTemplateKeysMap;\n  var waitingTemplateKeysMapString = Object.entries(waitingTemplateKeysMap).map(function (_a) {\n    var key = _a[0],\n      value = _a[1];\n    return [key, value.requestedAt, value.erroredMessageIds.join(',')].join('-');\n  }).join('_');\n  var _j = useState(getFilledMessageTemplateItems()),\n    renderData = _j[0],\n    setRenderData = _j[1];\n  function getFilledMessageTemplateItemsForCarouselTemplateByMessagePayload(simpleTemplateDataList) {\n    var cachedSimpleTemplates = [];\n    var simpleTemplatesVariables = [];\n    var maxVersion = 0;\n    simpleTemplateDataList.forEach(function (simpleTemplateData) {\n      var simpleTemplateKey = simpleTemplateData.key;\n      if (!simpleTemplateKey) {\n        logger.error('TemplateMessageItemBody | simple template keys are not found in view_variables: ', simpleTemplateDataList);\n        throw new Error('TemplateMessageItemBody | simple template keys are not found in view_variables.');\n      }\n      var simpleCachedTemplate = getCachedTemplate(simpleTemplateKey);\n      if (simpleCachedTemplate) {\n        cachedSimpleTemplates.push(simpleCachedTemplate);\n        simpleTemplatesVariables.push(simpleTemplateData.variables);\n        maxVersion = Math.max(maxVersion, simpleCachedTemplate.version);\n      }\n    });\n    var filledMessageTemplateItemsList = cachedSimpleTemplates.map(function (cachedSimpleTemplate, index) {\n      var templateItems = JSON.parse(cachedSimpleTemplate.uiTemplate);\n      var filledMessageTemplateItems = getFilledMessageTemplateWithData({\n        template: templateItems,\n        templateData: simpleTemplatesVariables[index],\n        colorVariables: cachedSimpleTemplate.colorVariables,\n        theme: theme\n      });\n      return filledMessageTemplateItems;\n    });\n    return {\n      maxVersion: maxVersion,\n      filledTemplates: filledMessageTemplateItemsList\n    };\n  }\n  function getFilledMessageTemplateItemsForCarouselTemplate(uiTemplates) {\n    var maxVersion = 0;\n    var filledTemplates = [];\n    uiTemplates.forEach(function (uiTemplate) {\n      maxVersion = Math.max(maxVersion, uiTemplate.version);\n      var filledMessageTemplateItems = getFilledMessageTemplateWithData({\n        template: uiTemplate.body.items\n      });\n      filledTemplates.push(filledMessageTemplateItems);\n    });\n    return {\n      maxVersion: maxVersion,\n      filledTemplates: filledTemplates\n    };\n  }\n  function getFilledMessageTemplateItemsForSimpleTemplate(templateItems, colorVariables) {\n    var _a;\n    var filledMessageTemplateItems = getFilledMessageTemplateWithData({\n      template: templateItems,\n      templateData: (_a = templateData === null || templateData === void 0 ? void 0 : templateData.variables) !== null && _a !== void 0 ? _a : {},\n      colorVariables: colorVariables,\n      theme: theme\n    });\n    return filledMessageTemplateItems;\n  }\n  function getFilledMessageTemplateItems() {\n    var result = {\n      filledMessageTemplateItemsList: [],\n      isErrored: false\n    };\n    var nonCachedTemplateKeys = [];\n    var cachedTemplate = getCachedTemplate(templateKey);\n    if (!cachedTemplate) {\n      nonCachedTemplateKeys.push(templateKey);\n    }\n    if (templateData === null || templateData === void 0 ? void 0 : templateData.view_variables) {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        Object.entries(templateData.view_variables).forEach(function (_a) {\n          var _ = _a[0],\n            simpleTemplateDataList = _a[1];\n          simpleTemplateDataList.forEach(function (simpleTemplateData) {\n            var simpleTemplateKey = simpleTemplateData === null || simpleTemplateData === void 0 ? void 0 : simpleTemplateData.key;\n            if (simpleTemplateKey && !getCachedTemplate(simpleTemplateKey) && !nonCachedTemplateKeys.includes(simpleTemplateKey)) {\n              nonCachedTemplateKeys.push(simpleTemplateKey);\n            }\n          });\n        });\n      } catch (e) {\n        logger.error('TemplateMessageItemBody | received view_variables is malformed: ', templateData);\n        result.isErrored = true;\n        return result;\n      }\n    }\n    try {\n      if (nonCachedTemplateKeys.length > 0) {\n        tryFetchTemplateByKey(nonCachedTemplateKeys);\n      } else if (cachedTemplate) {\n        var parsedUiTemplate = JSON.parse(cachedTemplate.uiTemplate);\n        if (!Array.isArray(parsedUiTemplate) || parsedUiTemplate.length === 0) {\n          logger.error('TemplateMessageItemBody | parsed template is missing ui_template: ', parsedUiTemplate);\n          throw new Error('TemplateMessageItemBody | parsed template is missing ui_template. See error log in console for details');\n        }\n        /**\n         * Composite template validation\n         */\n        if (parsedUiTemplate[0].type === CompositeComponentType.Carousel) {\n          var carouselItem = parsedUiTemplate[0];\n          if (parsedUiTemplate.length > 1) {\n            // TODO: in future, support multiple templates\n            logger.error('TemplateMessageItemBody | composite template currently does not support multiple items: ', parsedUiTemplate);\n            throw new Error('TemplateMessageItemBody | composite template currently does not support multiple items. See error log in console for details');\n          }\n          if (typeof carouselItem.items === 'string') {\n            if (!startsWithAtAndEndsWithBraces(carouselItem.items)) {\n              logger.error('TemplateMessageItemBody | composite template with reservation key must follow the following string format \"{@your-reservation-key}\": ', templateKey, carouselItem);\n              throw new Error('TemplateMessageItemBody | composite template with reservation key must follow the following string format \"{@your-reservation-key}\". See error log in console for details');\n            }\n            if (!(templateData === null || templateData === void 0 ? void 0 : templateData.view_variables)) {\n              logger.error('TemplateMessageItemBody | template key suggests composite template but template data is missing view_variables: ', templateKey, templateData);\n              throw new Error('TemplateMessageItemBody | template key suggests composite template but template data is missing view_variables. See error log in console for details');\n            }\n            var reservationKey = removeAtAndBraces(carouselItem.items);\n            var simpleTemplateDataList = templateData.view_variables[reservationKey];\n            if (!simpleTemplateDataList) {\n              logger.error('TemplateMessageItemBody | no reservation key found in view_variables: ', reservationKey, templateData.view_variables);\n              throw new Error('TemplateMessageItemBody | no reservation key found in view_variables. See error log in console for details');\n            }\n            if (simpleTemplateDataList.length > 10) {\n              logger.warning('TemplateMessageItemBody | composite template with more than 10 simple templates will only render the first 10 items: ', reservationKey, templateData.view_variables);\n              simpleTemplateDataList = simpleTemplateDataList.slice(0, 10);\n            }\n            var _a = getFilledMessageTemplateItemsForCarouselTemplateByMessagePayload(simpleTemplateDataList),\n              maxVersion = _a.maxVersion,\n              filledTemplates = _a.filledTemplates;\n            result.isComposite = true;\n            result.templateVersion = Math.max(cachedTemplate.version, maxVersion);\n            result.filledMessageTemplateItemsList = [{\n              type: carouselItem.type,\n              spacing: carouselItem.spacing,\n              items: filledTemplates\n            }];\n          } else if (Array.isArray(carouselItem.items)) {\n            var simpleTemplates = carouselItem.items;\n            if (carouselItem.items.length > 10) {\n              logger.warning('TemplateMessageItemBody | composite template with more than 10 simple templates will only render the first 10 items: ', carouselItem);\n              simpleTemplates = carouselItem.items.slice(0, 10);\n            }\n            var _b = getFilledMessageTemplateItemsForCarouselTemplate(simpleTemplates),\n              maxVersion = _b.maxVersion,\n              filledTemplates = _b.filledTemplates;\n            result.isComposite = true;\n            result.templateVersion = Math.max(cachedTemplate.version, maxVersion);\n            result.filledMessageTemplateItemsList = [{\n              type: carouselItem.type,\n              spacing: carouselItem.spacing,\n              items: filledTemplates\n            }];\n          } else {\n            logger.error('TemplateMessageItemBody | composite template is malformed: ', templateKey, carouselItem);\n            throw new Error('TemplateMessageItemBody | composite template is malformed. See error log in console for details');\n          }\n        } else {\n          result.templateVersion = cachedTemplate.version;\n          result.filledMessageTemplateItemsList = getFilledMessageTemplateItemsForSimpleTemplate(parsedUiTemplate, cachedTemplate.colorVariables);\n        }\n      }\n    } catch (e) {\n      result.isErrored = true;\n    }\n    return result;\n  }\n  useEffect(function () {\n    if (!renderData.isErrored && renderData.filledMessageTemplateItemsList.length === 0) {\n      var newRenderData = getFilledMessageTemplateItems();\n      setRenderData(newRenderData);\n    }\n  }, [templateData.key, waitingTemplateKeysMapString]);\n  /**\n   * Attempt GET template by key IFF one of below cases is met:\n   * 1. This is the first GET call for the template key.\n   * 2. Minimum buffer time has passed since the previous GET error.\n   */\n  function tryFetchTemplateByKey(templateKeys) {\n    if (templateKeys.length > 0) {\n      var waitingTemplateKeyDataList_1 = [];\n      templateKeys.forEach(function (templateKey) {\n        var waitingTemplateKeyData = waitingTemplateKeysMap[templateKey];\n        waitingTemplateKeyDataList_1.push([templateKey, waitingTemplateKeyData]);\n      });\n      var requestedAt_1 = Date.now();\n      var keysToUpdate_1 = [];\n      waitingTemplateKeyDataList_1.forEach(function (_a) {\n        var templateKey = _a[0],\n          waitingTemplateKeyData = _a[1];\n        if (!waitingTemplateKeyData || waitingTemplateKeyData.erroredMessageIds.indexOf(message.messageId) === -1 && requestedAt_1 > waitingTemplateKeyData.requestedAt + TEMPLATE_FETCH_RETRY_BUFFER_TIME_IN_MILLIES) {\n          keysToUpdate_1.push(templateKey);\n        } else if (waitingTemplateKeyData.erroredMessageIds.indexOf(message.messageId) > -1) {\n          throw new Error(\"TemplateMessageItemBody | fetching template key \".concat(templateKey, \" for messageId: \").concat(message.messageId, \" has failed.\"));\n        }\n      });\n      if (keysToUpdate_1.length > 0) {\n        updateMessageTemplatesInfo(keysToUpdate_1, message.messageId, requestedAt_1);\n      }\n    }\n  }\n  if (renderData.isErrored) {\n    return getFailedBody();\n  }\n  if (renderData.filledMessageTemplateItemsList.length === 0) {\n    return React__default.createElement(LoadingTemplateMessageItemBody, {\n      className: className,\n      isByMe: isByMe\n    });\n  }\n  return React__default.createElement(\"div\", {\n    className: getClassName([className, isByMe ? 'outgoing' : 'incoming', 'sendbird-template-message-item-body'])\n  }, React__default.createElement(MessageTemplateErrorBoundary, {\n    fallbackMessage: React__default.createElement(FallbackTemplateMessageItemBody, {\n      className: className,\n      message: message,\n      isByMe: isByMe\n    }),\n    onTemplateMessageRenderedCallback: onTemplateMessageRenderedCallback,\n    isComposite: renderData.isComposite,\n    logger: logger\n  }, React__default.createElement(MessageTemplateWrapper, {\n    message: message,\n    templateVersion: (_c = renderData.templateVersion) !== null && _c !== void 0 ? _c : 0,\n    templateItems: renderData.filledMessageTemplateItemsList\n  })));\n}\nexport { TemplateMessageItemBody, TemplateMessageItemBody as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { e as __extends, _ as __assign } from '../chunks/bundle-BQi9-O76.js';\nimport React__default, { Component, useState, useEffect } from 'react';\nimport { Z as startsWithAtAndEndsWithBraces, _ as removeAtAndBraces, w as getClassName } from '../chunks/bundle-DxTN4_0p.js';\nimport { M as MessageProvider, a as MessageTemplate, C as CompositeComponentType } from '../chunks/bundle-uLjwqZrR.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { FallbackTemplateMessageItemBody } from './FallbackTemplateMessageItemBody.tsx.js';\nimport { LoadingTemplateMessageItemBody } from './LoadingTemplateMessageItemBody.tsx.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CNWAfTVw.js';\nimport '../chunks/bundle-CA85nVxp.js';\nimport '../withSendbird.js';\nimport '../chunks/bundle-cQZ3UZoG.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport '../chunks/bundle-DhKQeIfP.js';\nimport './Loader.js';\nimport './Icon.js';\nimport '../chunks/bundle-BgwzpLeQ.js';\n\nvar MessageTemplateWrapper = function (_a) {\n    var message = _a.message, templateVersion = _a.templateVersion, templateItems = _a.templateItems;\n    return React__default.createElement(MessageProvider, { message: message },\n        React__default.createElement(MessageTemplate, { templateVersion: templateVersion, templateItems: templateItems }));\n};\n\nvar NumberValueKeys = [\n    'version',\n    'size',\n    'top',\n    'left',\n    'right',\n    'bottom',\n    'maxTextLines',\n    'value',\n    'pixelWidth',\n    'pixelHeight',\n    'radius',\n];\nfunction restoreNumbersFromMessageTemplateObject(value, key) {\n    if (Array.isArray(value)) {\n        return value.map(function (item) { return restoreNumbersFromMessageTemplateObject(item); });\n    }\n    if (value && typeof value === 'object') {\n        return Object.keys(value).reduce(function (acc, key) {\n            acc[key] = restoreNumbersFromMessageTemplateObject(value[key], key);\n            return acc;\n        }, {});\n    }\n    if (key != null && NumberValueKeys.includes(key)) {\n        var numberValue = Number(value);\n        return Number.isNaN(numberValue) ? value : numberValue;\n    }\n    return value;\n}\n\nvar flattenObjectHelper = function (currentObject, flattenObject, parentKeyPath) {\n    if (parentKeyPath === void 0) { parentKeyPath = ''; }\n    for (var _i = 0, _a = Object.entries(currentObject); _i < _a.length; _i++) {\n        var _b = _a[_i], key = _b[0], value = _b[1];\n        var currentKeyPath = parentKeyPath ? \"\".concat(parentKeyPath, \".\").concat(key) : key;\n        if (value && typeof value === 'object') {\n            flattenObjectHelper(value, flattenObject, currentKeyPath);\n        }\n        else {\n            flattenObject[currentKeyPath] = value;\n        }\n    }\n};\n/**\n * Returns flattened object.\n * ex.\n * given { key-1: { key-1.1: 'value-1.1' }, key-2: 'value-2' }\n * returns { key-1.key-1.1: 'value-1.1', key-2: 'value-2' }\n */\nfunction flattenObject(object) {\n    var result = {};\n    flattenObjectHelper(object, result);\n    return result;\n}\n\nfunction convertArgbToRgba(string) {\n    if (!string.startsWith('#')) {\n        return string;\n    }\n    if (string.length === 9) {\n        return \"#\".concat(string.slice(3)).concat(string[1]).concat(string[2]);\n    }\n    if (string.length === 5) {\n        return \"#\".concat(string.slice(2)).concat(string[1]);\n    }\n    return string;\n}\nvar splitColorVariables = function (colorVariables) {\n    var light = {};\n    var dark = {};\n    for (var key in colorVariables) {\n        if (Object.prototype.hasOwnProperty.call(colorVariables, key)) {\n            var value = colorVariables[key];\n            if (typeof value === 'object' && value !== null) {\n                var _a = splitColorVariables(value), nestedLight = _a[0], nestedDark = _a[1];\n                light[key] = nestedLight;\n                dark[key] = nestedDark;\n            }\n            else if (typeof value === 'string') {\n                var _b = value.split(','), lightColor = _b[0], darkColor = _b[1];\n                light[key] = lightColor;\n                dark[key] = darkColor || lightColor; // when dark color is not provided, use light color\n            }\n            else {\n                light[key] = value;\n                dark[key] = value;\n            }\n        }\n    }\n    return [light, dark];\n};\nfunction selectColorVariablesByTheme(_a) {\n    var colorVariables = _a.colorVariables, theme = _a.theme;\n    var _b = splitColorVariables(colorVariables), light = _b[0], dark = _b[1];\n    return theme === 'light' ? light : dark;\n}\n\nvar COLOR_KEYS = {\n    color: true,\n    tintColor: true,\n    backgroundColor: true,\n    borderColor: true,\n};\nfunction mapData(_a) {\n    var template = _a.template, source = _a.source;\n    if (!['object', 'string'].includes(typeof template) || !template)\n        return template;\n    var regex = /\\{([^}]+)\\}/g;\n    var flattenedSource = flattenObject(source);\n    function replaceVariablePlaceholder(value) {\n        return typeof value === 'string'\n            ? value.replace(regex, function (_, placeholder) {\n                var value = flattenedSource[placeholder];\n                return value || \"{\".concat(placeholder, \"}\");\n            })\n            : mapData({ template: value, source: source });\n    }\n    if (typeof template === 'string') {\n        return replaceVariablePlaceholder(template);\n    }\n    if (Array.isArray(template)) {\n        return template.map(replaceVariablePlaceholder);\n    }\n    var result = {};\n    for (var key in template) {\n        if (Object.prototype.hasOwnProperty.call(template, key)) {\n            var value = template[key];\n            var replacedVal = replaceVariablePlaceholder(value);\n            if (COLOR_KEYS[key] && typeof replacedVal === 'string') {\n                replacedVal = convertArgbToRgba(replacedVal);\n            }\n            result[key] = replacedVal;\n        }\n    }\n    return result;\n}\n\nvar MessageTemplateErrorBoundary = /** @class */ (function (_super) {\n    __extends(MessageTemplateErrorBoundary, _super);\n    function MessageTemplateErrorBoundary(props) {\n        var _this = _super.call(this, props) || this;\n        _this.state = { hasError: false };\n        return _this;\n    }\n    MessageTemplateErrorBoundary.getDerivedStateFromError = function () {\n        return { hasError: true };\n    };\n    MessageTemplateErrorBoundary.prototype.componentDidCatch = function (error, errorInfo) {\n        var _a;\n        (_a = this.props.logger) === null || _a === void 0 ? void 0 : _a.error('Error caught by ErrorBoundary:', error, errorInfo);\n    };\n    MessageTemplateErrorBoundary.prototype.render = function () {\n        if (this.state.hasError) {\n            this.props.onTemplateMessageRenderedCallback('failed');\n            return this.props.fallbackMessage;\n        }\n        this.props.onTemplateMessageRenderedCallback(this.props.isComposite ? 'composite' : 'simple');\n        return this.props.children;\n    };\n    return MessageTemplateErrorBoundary;\n}(Component));\n\nvar TEMPLATE_FETCH_RETRY_BUFFER_TIME_IN_MILLIES = 500; // It takes about 450ms for isError update\n/**\n * Returns copied message template object filled with given template data and color variables.\n */\nvar getFilledMessageTemplateWithData = function (_a) {\n    var template = _a.template, _b = _a.templateData, templateData = _b === void 0 ? {} : _b, colorVariables = _a.colorVariables, theme = _a.theme;\n    var selectedThemeColorVariables = {};\n    if (colorVariables && theme) {\n        selectedThemeColorVariables = selectColorVariablesByTheme({\n            colorVariables: colorVariables,\n            theme: theme,\n        });\n    }\n    var source = __assign(__assign({}, templateData), selectedThemeColorVariables);\n    var parsedTemplate = mapData({\n        template: restoreNumbersFromMessageTemplateObject(template),\n        source: source,\n    });\n    return parsedTemplate;\n};\nfunction TemplateMessageItemBody(_a) {\n    var _b, _c;\n    var _d = _a.className, className = _d === void 0 ? '' : _d, message = _a.message, _e = _a.isByMe, isByMe = _e === void 0 ? false : _e, _f = _a.theme, theme = _f === void 0 ? 'light' : _f, _g = _a.onTemplateMessageRenderedCallback, onTemplateMessageRenderedCallback = _g === void 0 ? function () { } : _g;\n    var templateData = (_b = message.extendedMessagePayload) === null || _b === void 0 ? void 0 : _b['template'];\n    var getFailedBody = function () {\n        onTemplateMessageRenderedCallback('failed');\n        return React__default.createElement(FallbackTemplateMessageItemBody, { className: className, message: message, isByMe: isByMe });\n    };\n    if (!(templateData === null || templateData === void 0 ? void 0 : templateData.key)) {\n        return getFailedBody();\n    }\n    var templateKey = templateData.key;\n    var globalState = useSendbirdStateContext();\n    if (!globalState) {\n        return getFailedBody();\n    }\n    var _h = globalState.utils, getCachedTemplate = _h.getCachedTemplate, updateMessageTemplatesInfo = _h.updateMessageTemplatesInfo;\n    var logger = globalState.config.logger;\n    var waitingTemplateKeysMap = globalState.stores.appInfoStore.waitingTemplateKeysMap;\n    var waitingTemplateKeysMapString = Object.entries(waitingTemplateKeysMap)\n        .map(function (_a) {\n        var key = _a[0], value = _a[1];\n        return [key, value.requestedAt, value.erroredMessageIds.join(',')].join('-');\n    }).join('_');\n    var _j = useState(getFilledMessageTemplateItems()), renderData = _j[0], setRenderData = _j[1];\n    function getFilledMessageTemplateItemsForCarouselTemplateByMessagePayload(simpleTemplateDataList) {\n        var cachedSimpleTemplates = [];\n        var simpleTemplatesVariables = [];\n        var maxVersion = 0;\n        simpleTemplateDataList.forEach(function (simpleTemplateData) {\n            var simpleTemplateKey = simpleTemplateData.key;\n            if (!simpleTemplateKey) {\n                logger.error('TemplateMessageItemBody | simple template keys are not found in view_variables: ', simpleTemplateDataList);\n                throw new Error('TemplateMessageItemBody | simple template keys are not found in view_variables.');\n            }\n            var simpleCachedTemplate = getCachedTemplate(simpleTemplateKey);\n            if (simpleCachedTemplate) {\n                cachedSimpleTemplates.push(simpleCachedTemplate);\n                simpleTemplatesVariables.push(simpleTemplateData.variables);\n                maxVersion = Math.max(maxVersion, simpleCachedTemplate.version);\n            }\n        });\n        var filledMessageTemplateItemsList = cachedSimpleTemplates\n            .map(function (cachedSimpleTemplate, index) {\n            var templateItems = JSON.parse(cachedSimpleTemplate.uiTemplate);\n            var filledMessageTemplateItems = getFilledMessageTemplateWithData({\n                template: templateItems,\n                templateData: simpleTemplatesVariables[index],\n                colorVariables: cachedSimpleTemplate.colorVariables,\n                theme: theme,\n            });\n            return filledMessageTemplateItems;\n        });\n        return {\n            maxVersion: maxVersion,\n            filledTemplates: filledMessageTemplateItemsList,\n        };\n    }\n    function getFilledMessageTemplateItemsForCarouselTemplate(uiTemplates) {\n        var maxVersion = 0;\n        var filledTemplates = [];\n        uiTemplates.forEach(function (uiTemplate) {\n            maxVersion = Math.max(maxVersion, uiTemplate.version);\n            var filledMessageTemplateItems = getFilledMessageTemplateWithData({\n                template: uiTemplate.body.items,\n            });\n            filledTemplates.push(filledMessageTemplateItems);\n        });\n        return {\n            maxVersion: maxVersion,\n            filledTemplates: filledTemplates,\n        };\n    }\n    function getFilledMessageTemplateItemsForSimpleTemplate(templateItems, colorVariables) {\n        var _a;\n        var filledMessageTemplateItems = getFilledMessageTemplateWithData({\n            template: templateItems,\n            templateData: (_a = templateData === null || templateData === void 0 ? void 0 : templateData.variables) !== null && _a !== void 0 ? _a : {},\n            colorVariables: colorVariables,\n            theme: theme,\n        });\n        return filledMessageTemplateItems;\n    }\n    function getFilledMessageTemplateItems() {\n        var result = {\n            filledMessageTemplateItemsList: [],\n            isErrored: false,\n        };\n        var nonCachedTemplateKeys = [];\n        var cachedTemplate = getCachedTemplate(templateKey);\n        if (!cachedTemplate) {\n            nonCachedTemplateKeys.push(templateKey);\n        }\n        if (templateData === null || templateData === void 0 ? void 0 : templateData.view_variables) {\n            try {\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                Object.entries(templateData.view_variables).forEach(function (_a) {\n                    var _ = _a[0], simpleTemplateDataList = _a[1];\n                    simpleTemplateDataList.forEach(function (simpleTemplateData) {\n                        var simpleTemplateKey = simpleTemplateData === null || simpleTemplateData === void 0 ? void 0 : simpleTemplateData.key;\n                        if (simpleTemplateKey\n                            && !getCachedTemplate(simpleTemplateKey)\n                            && !nonCachedTemplateKeys.includes(simpleTemplateKey)) {\n                            nonCachedTemplateKeys.push(simpleTemplateKey);\n                        }\n                    });\n                });\n            }\n            catch (e) {\n                logger.error('TemplateMessageItemBody | received view_variables is malformed: ', templateData);\n                result.isErrored = true;\n                return result;\n            }\n        }\n        try {\n            if (nonCachedTemplateKeys.length > 0) {\n                tryFetchTemplateByKey(nonCachedTemplateKeys);\n            }\n            else if (cachedTemplate) {\n                var parsedUiTemplate = JSON.parse(cachedTemplate.uiTemplate);\n                if (!Array.isArray(parsedUiTemplate) || parsedUiTemplate.length === 0) {\n                    logger.error('TemplateMessageItemBody | parsed template is missing ui_template: ', parsedUiTemplate);\n                    throw new Error('TemplateMessageItemBody | parsed template is missing ui_template. See error log in console for details');\n                }\n                /**\n                 * Composite template validation\n                 */\n                if (parsedUiTemplate[0].type === CompositeComponentType.Carousel) {\n                    var carouselItem = parsedUiTemplate[0];\n                    if (parsedUiTemplate.length > 1) { // TODO: in future, support multiple templates\n                        logger.error('TemplateMessageItemBody | composite template currently does not support multiple items: ', parsedUiTemplate);\n                        throw new Error('TemplateMessageItemBody | composite template currently does not support multiple items. See error log in console for details');\n                    }\n                    if (typeof carouselItem.items === 'string') {\n                        if (!startsWithAtAndEndsWithBraces(carouselItem.items)) {\n                            logger.error('TemplateMessageItemBody | composite template with reservation key must follow the following string format \"{@your-reservation-key}\": ', templateKey, carouselItem);\n                            throw new Error('TemplateMessageItemBody | composite template with reservation key must follow the following string format \"{@your-reservation-key}\". See error log in console for details');\n                        }\n                        if (!(templateData === null || templateData === void 0 ? void 0 : templateData.view_variables)) {\n                            logger.error('TemplateMessageItemBody | template key suggests composite template but template data is missing view_variables: ', templateKey, templateData);\n                            throw new Error('TemplateMessageItemBody | template key suggests composite template but template data is missing view_variables. See error log in console for details');\n                        }\n                        var reservationKey = removeAtAndBraces(carouselItem.items);\n                        var simpleTemplateDataList = templateData.view_variables[reservationKey];\n                        if (!simpleTemplateDataList) {\n                            logger.error('TemplateMessageItemBody | no reservation key found in view_variables: ', reservationKey, templateData.view_variables);\n                            throw new Error('TemplateMessageItemBody | no reservation key found in view_variables. See error log in console for details');\n                        }\n                        if (simpleTemplateDataList.length > 10) {\n                            logger.warning('TemplateMessageItemBody | composite template with more than 10 simple templates will only render the first 10 items: ', reservationKey, templateData.view_variables);\n                            simpleTemplateDataList = simpleTemplateDataList.slice(0, 10);\n                        }\n                        var _a = getFilledMessageTemplateItemsForCarouselTemplateByMessagePayload(simpleTemplateDataList), maxVersion = _a.maxVersion, filledTemplates = _a.filledTemplates;\n                        result.isComposite = true;\n                        result.templateVersion = Math.max(cachedTemplate.version, maxVersion);\n                        result.filledMessageTemplateItemsList = [{\n                                type: carouselItem.type,\n                                spacing: carouselItem.spacing,\n                                items: filledTemplates,\n                            }];\n                    }\n                    else if (Array.isArray(carouselItem.items)) {\n                        var simpleTemplates = carouselItem.items;\n                        if (carouselItem.items.length > 10) {\n                            logger.warning('TemplateMessageItemBody | composite template with more than 10 simple templates will only render the first 10 items: ', carouselItem);\n                            simpleTemplates = carouselItem.items.slice(0, 10);\n                        }\n                        var _b = getFilledMessageTemplateItemsForCarouselTemplate(simpleTemplates), maxVersion = _b.maxVersion, filledTemplates = _b.filledTemplates;\n                        result.isComposite = true;\n                        result.templateVersion = Math.max(cachedTemplate.version, maxVersion);\n                        result.filledMessageTemplateItemsList = [{\n                                type: carouselItem.type,\n                                spacing: carouselItem.spacing,\n                                items: filledTemplates,\n                            }];\n                    }\n                    else {\n                        logger.error('TemplateMessageItemBody | composite template is malformed: ', templateKey, carouselItem);\n                        throw new Error('TemplateMessageItemBody | composite template is malformed. See error log in console for details');\n                    }\n                }\n                else {\n                    result.templateVersion = cachedTemplate.version;\n                    result.filledMessageTemplateItemsList = getFilledMessageTemplateItemsForSimpleTemplate(parsedUiTemplate, cachedTemplate.colorVariables);\n                }\n            }\n        }\n        catch (e) {\n            result.isErrored = true;\n        }\n        return result;\n    }\n    useEffect(function () {\n        if (!renderData.isErrored && renderData.filledMessageTemplateItemsList.length === 0) {\n            var newRenderData = getFilledMessageTemplateItems();\n            setRenderData(newRenderData);\n        }\n    }, [templateData.key, waitingTemplateKeysMapString]);\n    /**\n     * Attempt GET template by key IFF one of below cases is met:\n     * 1. This is the first GET call for the template key.\n     * 2. Minimum buffer time has passed since the previous GET error.\n     */\n    function tryFetchTemplateByKey(templateKeys) {\n        if (templateKeys.length > 0) {\n            var waitingTemplateKeyDataList_1 = [];\n            templateKeys.forEach(function (templateKey) {\n                var waitingTemplateKeyData = waitingTemplateKeysMap[templateKey];\n                waitingTemplateKeyDataList_1.push([templateKey, waitingTemplateKeyData]);\n            });\n            var requestedAt_1 = Date.now();\n            var keysToUpdate_1 = [];\n            waitingTemplateKeyDataList_1.forEach(function (_a) {\n                var templateKey = _a[0], waitingTemplateKeyData = _a[1];\n                if (!waitingTemplateKeyData\n                    || (waitingTemplateKeyData.erroredMessageIds.indexOf(message.messageId) === -1\n                        && requestedAt_1 > waitingTemplateKeyData.requestedAt + TEMPLATE_FETCH_RETRY_BUFFER_TIME_IN_MILLIES)) {\n                    keysToUpdate_1.push(templateKey);\n                }\n                else if (waitingTemplateKeyData.erroredMessageIds.indexOf(message.messageId) > -1) {\n                    throw new Error(\"TemplateMessageItemBody | fetching template key \".concat(templateKey, \" for messageId: \").concat(message.messageId, \" has failed.\"));\n                }\n            });\n            if (keysToUpdate_1.length > 0) {\n                updateMessageTemplatesInfo(keysToUpdate_1, message.messageId, requestedAt_1);\n            }\n        }\n    }\n    if (renderData.isErrored) {\n        return getFailedBody();\n    }\n    if (renderData.filledMessageTemplateItemsList.length === 0) {\n        return React__default.createElement(LoadingTemplateMessageItemBody, { className: className, isByMe: isByMe });\n    }\n    return (React__default.createElement(\"div\", { className: getClassName([\n            className,\n            isByMe ? 'outgoing' : 'incoming',\n            'sendbird-template-message-item-body',\n        ]) },\n        React__default.createElement(MessageTemplateErrorBoundary, { fallbackMessage: React__default.createElement(FallbackTemplateMessageItemBody, { className: className, message: message, isByMe: isByMe }), onTemplateMessageRenderedCallback: onTemplateMessageRenderedCallback, isComposite: renderData.isComposite, logger: logger },\n            React__default.createElement(MessageTemplateWrapper, { message: message, templateVersion: (_c = renderData.templateVersion) !== null && _c !== void 0 ? _c : 0, templateItems: renderData.filledMessageTemplateItemsList }))));\n}\n\nexport { TemplateMessageItemBody, TemplateMessageItemBody as default };\n//# sourceMappingURL=TemplateMessageItemBody.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}