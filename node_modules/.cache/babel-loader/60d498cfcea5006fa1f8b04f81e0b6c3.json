{"ast":null,"code":"import React__default, { useState, useEffect, useMemo } from 'react';\nimport { ProgressBar, ProgressBarColorTypes } from './ProgressBar.js';\nimport { useVoicePlayer } from '../VoicePlayer/useVoicePlayer.js';\nimport { PlaybackTime } from './PlaybackTime.js';\nimport Loader from './Loader.js';\nimport Icon, { IconTypes, IconColors } from './Icon.js';\nimport { a as LabelTypography, b as LabelColors } from '../chunks/bundle-DhKQeIfP.js';\nimport { V as VOICE_PLAYER_STATUS } from '../chunks/bundle-DDeWOERD.js';\nimport { c as classnames } from '../chunks/bundle-BgwzpLeQ.js';\nimport '../chunks/bundle-DCMGp6rH.js';\nimport '../chunks/bundle-CXdo2kR_.js';\nimport '../chunks/bundle-BQi9-O76.js';\nimport '../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CNWAfTVw.js';\nimport '../chunks/bundle-CA85nVxp.js';\nimport 'react-dom';\nimport '../chunks/bundle-cQZ3UZoG.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport '../chunks/bundle-f-SpnOx2.js';\nimport './IconButton.js';\nimport './Button.js';\nimport '@sendbird/uikit-tools';\nimport '../withSendbird.js';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '../chunks/bundle-etuaqevl.js';\nimport '@sendbird/chat/openChannel';\nimport '../useSendbirdStateContext.js';\nimport '../chunks/bundle-CwKZj-B6.js';\nimport './SortByRow.js';\nvar VoiceMessageItemBody = function (_a) {\n  var _b;\n  var className = _a.className,\n    message = _a.message,\n    channelUrl = _a.channelUrl,\n    _c = _a.isByMe,\n    isByMe = _c === void 0 ? false : _c,\n    _d = _a.isReactionEnabled,\n    isReactionEnabled = _d === void 0 ? false : _d;\n  var _e = useState(false),\n    usingReaction = _e[0],\n    setUsingReaction = _e[1];\n  var _f = useVoicePlayer({\n      channelUrl: channelUrl,\n      key: \"\".concat(message === null || message === void 0 ? void 0 : message.messageId),\n      audioFileUrl: message === null || message === void 0 ? void 0 : message.url,\n      audioFileMimeType: message === null || message === void 0 ? void 0 : message.type\n    }),\n    play = _f.play,\n    // do not pause on unmount, because on desktop layout\n    // the component can be paused when it is played from\n    // channel and same message is unmounted from the thread\n    pause = _f.pause,\n    _g = _f.playbackTime,\n    playbackTime = _g === void 0 ? 0 : _g,\n    duration = _f.duration,\n    _h = _f.playingStatus,\n    playingStatus = _h === void 0 ? VOICE_PLAYER_STATUS.IDLE : _h;\n  useEffect(function () {\n    var _a;\n    if (isReactionEnabled && ((_a = message === null || message === void 0 ? void 0 : message.reactions) === null || _a === void 0 ? void 0 : _a.length) > 0) {\n      setUsingReaction(true);\n    } else {\n      setUsingReaction(false);\n    }\n  }, [isReactionEnabled, (_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length]);\n  var progressBarMaxSize = useMemo(function () {\n    var _a;\n    var DEFAULT_MAX_SIZE = 1;\n    if (message === null || message === void 0 ? void 0 : message.metaArrays) {\n      var duration_1 = (_a = message === null || message === void 0 ? void 0 : message.metaArrays.find(function (metaArray) {\n        return metaArray.key === 'KEY_VOICE_MESSAGE_DURATION';\n      })) === null || _a === void 0 ? void 0 : _a.value[0];\n      return duration_1 ? parseInt(duration_1) : DEFAULT_MAX_SIZE;\n    }\n    return DEFAULT_MAX_SIZE;\n  }, [message === null || message === void 0 ? void 0 : message.metaArrays]);\n  return React__default.createElement(\"div\", {\n    className: classnames('sendbird-voice-message-item-body', className, usingReaction && 'is-reactions-contained')\n  }, React__default.createElement(ProgressBar, {\n    className: \"sendbird-voice-message-item-body__progress-bar\",\n    maxSize: duration || progressBarMaxSize,\n    currentSize: playbackTime,\n    colorType: isByMe ? ProgressBarColorTypes.PRIMARY : ProgressBarColorTypes.GRAY\n  }), React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-item-body__status-button\"\n  }, (playingStatus === VOICE_PLAYER_STATUS.IDLE || playingStatus === VOICE_PLAYER_STATUS.PAUSED) && React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-item-body__status-button__button\",\n    onClick: play\n  }, React__default.createElement(Icon, {\n    width: \"18px\",\n    height: \"18px\",\n    type: IconTypes.PLAY,\n    fillColor: IconColors.PRIMARY\n  })), playingStatus === VOICE_PLAYER_STATUS.PREPARING && React__default.createElement(Loader, {\n    width: \"22.2px\",\n    height: \"22.2px\"\n  }, React__default.createElement(Icon, {\n    width: \"22.2px\",\n    height: \"22.2px\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY_2\n  })), playingStatus === VOICE_PLAYER_STATUS.PLAYING && React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-item-body__status-button__button\",\n    onClick: function () {\n      pause();\n    }\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-item-body__status-button__button__pause\"\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-item-body__status-button__button__pause__inner\"\n  }), React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-item-body__status-button__button__pause__inner\"\n  })))), React__default.createElement(PlaybackTime, {\n    className: \"sendbird-voice-message-item-body__playback-time\",\n    time: progressBarMaxSize - playbackTime,\n    labelType: LabelTypography.BODY_1,\n    labelColor: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1\n  }));\n};\nexport { VoiceMessageItemBody, VoiceMessageItemBody as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { useState, useEffect, useMemo } from 'react';\nimport { ProgressBar, ProgressBarColorTypes } from './ProgressBar.js';\nimport { useVoicePlayer } from '../VoicePlayer/useVoicePlayer.js';\nimport { PlaybackTime } from './PlaybackTime.js';\nimport Loader from './Loader.js';\nimport Icon, { IconTypes, IconColors } from './Icon.js';\nimport { a as LabelTypography, b as LabelColors } from '../chunks/bundle-DhKQeIfP.js';\nimport { V as VOICE_PLAYER_STATUS } from '../chunks/bundle-DDeWOERD.js';\nimport { c as classnames } from '../chunks/bundle-BgwzpLeQ.js';\nimport '../chunks/bundle-DCMGp6rH.js';\nimport '../chunks/bundle-CXdo2kR_.js';\nimport '../chunks/bundle-BQi9-O76.js';\nimport '../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CNWAfTVw.js';\nimport '../chunks/bundle-CA85nVxp.js';\nimport 'react-dom';\nimport '../chunks/bundle-cQZ3UZoG.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport '../chunks/bundle-f-SpnOx2.js';\nimport './IconButton.js';\nimport './Button.js';\nimport '@sendbird/uikit-tools';\nimport '../withSendbird.js';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '../chunks/bundle-etuaqevl.js';\nimport '@sendbird/chat/openChannel';\nimport '../useSendbirdStateContext.js';\nimport '../chunks/bundle-CwKZj-B6.js';\nimport './SortByRow.js';\n\nvar VoiceMessageItemBody = function (_a) {\n    var _b;\n    var className = _a.className, message = _a.message, channelUrl = _a.channelUrl, _c = _a.isByMe, isByMe = _c === void 0 ? false : _c, _d = _a.isReactionEnabled, isReactionEnabled = _d === void 0 ? false : _d;\n    var _e = useState(false), usingReaction = _e[0], setUsingReaction = _e[1];\n    var _f = useVoicePlayer({\n        channelUrl: channelUrl,\n        key: \"\".concat(message === null || message === void 0 ? void 0 : message.messageId),\n        audioFileUrl: message === null || message === void 0 ? void 0 : message.url,\n        audioFileMimeType: message === null || message === void 0 ? void 0 : message.type,\n    }), play = _f.play, \n    // do not pause on unmount, because on desktop layout\n    // the component can be paused when it is played from\n    // channel and same message is unmounted from the thread\n    pause = _f.pause, _g = _f.playbackTime, playbackTime = _g === void 0 ? 0 : _g, duration = _f.duration, _h = _f.playingStatus, playingStatus = _h === void 0 ? VOICE_PLAYER_STATUS.IDLE : _h;\n    useEffect(function () {\n        var _a;\n        if (isReactionEnabled && ((_a = message === null || message === void 0 ? void 0 : message.reactions) === null || _a === void 0 ? void 0 : _a.length) > 0) {\n            setUsingReaction(true);\n        }\n        else {\n            setUsingReaction(false);\n        }\n    }, [isReactionEnabled, (_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length]);\n    var progressBarMaxSize = useMemo(function () {\n        var _a;\n        var DEFAULT_MAX_SIZE = 1;\n        if (message === null || message === void 0 ? void 0 : message.metaArrays) {\n            var duration_1 = (_a = message === null || message === void 0 ? void 0 : message.metaArrays.find(function (metaArray) { return metaArray.key === 'KEY_VOICE_MESSAGE_DURATION'; })) === null || _a === void 0 ? void 0 : _a.value[0];\n            return duration_1 ? parseInt(duration_1) : DEFAULT_MAX_SIZE;\n        }\n        return DEFAULT_MAX_SIZE;\n    }, [message === null || message === void 0 ? void 0 : message.metaArrays]);\n    return (React__default.createElement(\"div\", { className: classnames('sendbird-voice-message-item-body', className, usingReaction && 'is-reactions-contained') },\n        React__default.createElement(ProgressBar, { className: \"sendbird-voice-message-item-body__progress-bar\", maxSize: duration || progressBarMaxSize, currentSize: playbackTime, colorType: isByMe ? ProgressBarColorTypes.PRIMARY : ProgressBarColorTypes.GRAY }),\n        React__default.createElement(\"div\", { className: \"sendbird-voice-message-item-body__status-button\" },\n            (playingStatus === VOICE_PLAYER_STATUS.IDLE || playingStatus === VOICE_PLAYER_STATUS.PAUSED) && (React__default.createElement(\"div\", { className: \"sendbird-voice-message-item-body__status-button__button\", onClick: play },\n                React__default.createElement(Icon, { width: \"18px\", height: \"18px\", type: IconTypes.PLAY, fillColor: IconColors.PRIMARY }))),\n            playingStatus === VOICE_PLAYER_STATUS.PREPARING && (React__default.createElement(Loader, { width: \"22.2px\", height: \"22.2px\" },\n                React__default.createElement(Icon, { width: \"22.2px\", height: \"22.2px\", type: IconTypes.SPINNER, fillColor: IconColors.PRIMARY_2 }))),\n            playingStatus === VOICE_PLAYER_STATUS.PLAYING && (React__default.createElement(\"div\", { className: \"sendbird-voice-message-item-body__status-button__button\", onClick: function () { pause(); } },\n                React__default.createElement(\"div\", { className: \"sendbird-voice-message-item-body__status-button__button__pause\" },\n                    React__default.createElement(\"div\", { className: \"sendbird-voice-message-item-body__status-button__button__pause__inner\" }),\n                    React__default.createElement(\"div\", { className: \"sendbird-voice-message-item-body__status-button__button__pause__inner\" }))))),\n        React__default.createElement(PlaybackTime, { className: \"sendbird-voice-message-item-body__playback-time\", time: progressBarMaxSize - playbackTime, labelType: LabelTypography.BODY_1, labelColor: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1 })));\n};\n\nexport { VoiceMessageItemBody, VoiceMessageItemBody as default };\n//# sourceMappingURL=VoiceMessageItemBody.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}