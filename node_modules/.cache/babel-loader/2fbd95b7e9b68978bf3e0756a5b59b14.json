{"ast":null,"code":"import React__default, { useState, useContext, useEffect, useCallback } from 'react';\nimport { L as LocalizationContext } from '../../chunks/bundle-cQZ3UZoG.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../chunks/bundle-DhKQeIfP.js';\nimport Icon, { IconTypes, IconColors } from '../../ui/Icon.js';\nimport { useOpenChannelSettingsContext } from '../context.js';\nimport ChannelProfile from './OpenChannelProfile.js';\nimport { M as Modal } from '../../chunks/bundle-CXdo2kR_.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport { U as UserListItem$1, P as ParticipantList } from '../../chunks/bundle-B4KMvElm.js';\nimport Accordion, { AccordionGroup } from '../../ui/Accordion.js';\nimport Button, { ButtonTypes, ButtonSizes } from '../../ui/Button.js';\nimport { C as ContextMenu, b as MenuItems, c as MenuItem, h as MuteMenuItem } from '../../chunks/bundle-CwKZj-B6.js';\nimport IconButton from '../../ui/IconButton.js';\nimport { c as __spreadArray, _ as __assign } from '../../chunks/bundle-BQi9-O76.js';\nimport { UserListItem } from '../../ui/UserListItem.js';\nimport { n as noop } from '../../chunks/bundle-BgwzpLeQ.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '@sendbird/chat/openChannel';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '../../withSendbird.js';\nimport '../../ui/TextButton.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nimport '../../ui/OpenChannelAvatar.js';\nimport '../../chunks/bundle-CFosTNce.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../chunks/bundle-GMlM2rlV.js';\nimport './EditDetailsModal.js';\nimport '../../chunks/bundle-b6TpX_JP.js';\nimport '../../ui/Input.js';\nimport '../../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport 'react-dom';\nimport '../../chunks/bundle-f-SpnOx2.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../ui/SortByRow.js';\nimport '../../ui/AccordionGroup.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/UserProfile.js';\nimport '../../sendbirdSelectors.js';\nimport '../../ui/Checkbox.js';\nfunction DeleteChannel() {\n  var _a, _b;\n  var _c = useState(false),\n    showDeleteChannelModal = _c[0],\n    setShowDeleteChannelModal = _c[1];\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var globalState = useSendbirdStateContext();\n  var isOnline = (_a = globalState === null || globalState === void 0 ? void 0 : globalState.config) === null || _a === void 0 ? void 0 : _a.isOnline;\n  var logger = (_b = globalState === null || globalState === void 0 ? void 0 : globalState.config) === null || _b === void 0 ? void 0 : _b.logger;\n  var _d = useOpenChannelSettingsContext(),\n    channel = _d.channel,\n    onDeleteChannel = _d.onDeleteChannel;\n  var deleteChannel = function () {\n    channel === null || channel === void 0 ? void 0 : channel.delete().then(function (response) {\n      logger.info('OpenChannelSettings: Delete channel success', response);\n      if (onDeleteChannel) {\n        onDeleteChannel(channel);\n      }\n    }).catch(function (error) {\n      logger.warning('OpenChannelSettings: Delete channel failed', error);\n    });\n  };\n  return React__default.createElement(React__default.Fragment, null, React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__panel-item\\n          sendbird-openchannel-settings__delete-channel\\n            \".concat(!isOnline ? 'sendbird-openchannel-settings__panel-item__disabled' : ''),\n    role: \"button\",\n    tabIndex: 0,\n    onKeyDown: function () {\n      if (!isOnline) {\n        return;\n      }\n      setShowDeleteChannelModal(true);\n    },\n    onClick: function () {\n      if (!isOnline) {\n        return;\n      }\n      setShowDeleteChannelModal(true);\n    }\n  }, React__default.createElement(Icon, {\n    type: IconTypes.DELETE,\n    fillColor: IconColors.ERROR,\n    className: ['sendbird-openchannel-settings__panel-icon-left', 'sendbird-openchannel-settings__panel-icon__delete'].join(' '),\n    height: \"24px\",\n    width: \"24px\"\n  }), React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_PANEL)), showDeleteChannelModal && React__default.createElement(Modal, {\n    isFullScreenOnMobile: true,\n    onCancel: function () {\n      setShowDeleteChannelModal(false);\n    },\n    onSubmit: function () {\n      deleteChannel();\n    },\n    titleText: stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_TITLE,\n    submitText: stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_SUBMIT\n  }, stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_CONTEXT));\n}\nfunction OperatorListModal(_a) {\n  var _b;\n  var onCancel = _a.onCancel;\n  var _c = useState([]),\n    users = _c[0],\n    setUsers = _c[1];\n  var _d = useState(null),\n    operatorQuery = _d[0],\n    setOperatorQuery = _d[1];\n  var channel = useOpenChannelSettingsContext().channel;\n  var state = useSendbirdStateContext();\n  var currentUserId = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.userId;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  useEffect(function () {\n    var operatorListQuery = channel === null || channel === void 0 ? void 0 : channel.createOperatorListQuery({\n      limit: 20\n    });\n    if (operatorListQuery) {\n      operatorListQuery.next().then(function (participants) {\n        setUsers(participants);\n      });\n      setOperatorQuery(operatorListQuery);\n    }\n  }, []);\n  return React__default.createElement(\"div\", null, React__default.createElement(Modal, {\n    hideFooter: true,\n    isFullScreenOnMobile: true,\n    titleText: stringSet.OPEN_CHANNEL_SETTINGS__OPERATORS__TITLE_ALL,\n    onCancel: onCancel\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-more-users__popup-scroll\",\n    onScroll: function (e) {\n      var hasNext = operatorQuery === null || operatorQuery === void 0 ? void 0 : operatorQuery.hasNext;\n      var target = e.target;\n      var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n      if (hasNext && fetchMore) {\n        operatorQuery.next().then(function (o) {\n          setUsers(__spreadArray(__spreadArray([], users, true), o, true));\n        });\n      }\n    }\n  }, users.map(function (operator) {\n    return React__default.createElement(UserListItem, {\n      currentUser: currentUserId,\n      user: operator,\n      key: operator.userId,\n      action: function (_a) {\n        var parentRef = _a.parentRef,\n          actionRef = _a.actionRef;\n        return currentUserId !== (operator === null || operator === void 0 ? void 0 : operator.userId) ? React__default.createElement(ContextMenu, {\n          menuTrigger: function (toggleDropdown) {\n            return React__default.createElement(IconButton, {\n              className: \"sendbird-user-message__more__menu\",\n              width: \"32px\",\n              height: \"32px\",\n              onClick: toggleDropdown\n            }, React__default.createElement(Icon, {\n              width: \"24px\",\n              height: \"24px\",\n              type: IconTypes.MORE,\n              fillColor: IconColors.CONTENT_INVERSE\n            }));\n          },\n          menuItems: function (closeDropdown) {\n            return React__default.createElement(MenuItems, {\n              parentContainRef: parentRef,\n              parentRef: actionRef,\n              closeDropdown: closeDropdown,\n              openLeft: true\n            }, React__default.createElement(MenuItem, {\n              onClick: function () {\n                channel === null || channel === void 0 ? void 0 : channel.removeOperators([operator.userId]).then(function () {\n                  setUsers(users.filter(function (_a) {\n                    var userId = _a.userId;\n                    return userId !== operator.userId;\n                  }));\n                });\n                closeDropdown();\n              },\n              testID: \"open_channel_setting_operator_context_menu_unregister_operator\"\n            }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR));\n          }\n        }) : React__default.createElement(React__default.Fragment, null);\n      }\n    });\n  }))));\n}\nfunction AddOperatorsModal(_a) {\n  var onCancel = _a.onCancel,\n    onSubmit = _a.onSubmit;\n  var _b = useState([]),\n    participants = _b[0],\n    setParticipants = _b[1];\n  var _c = useState({}),\n    selectedUsers = _c[0],\n    setSelectedUsers = _c[1];\n  var _d = useState(null),\n    participantQuery = _d[0],\n    setParticipantQuery = _d[1];\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var channel = useOpenChannelSettingsContext().channel;\n  useEffect(function () {\n    var participantListQuery = channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery({\n      limit: 20\n    });\n    if (participantListQuery) {\n      participantListQuery.next().then(function (users) {\n        setParticipants(users);\n      });\n      setParticipantQuery(participantListQuery);\n    }\n  }, []);\n  var selectedCount = Object.keys(selectedUsers).filter(function (m) {\n    return selectedUsers[m];\n  }).length;\n  return React__default.createElement(React__default.Fragment, null, React__default.createElement(Modal, {\n    isFullScreenOnMobile: true,\n    type: ButtonTypes.PRIMARY,\n    submitText: stringSet.CHANNEL_SETTING__OPERATORS__ADD_BUTTON,\n    onCancel: onCancel,\n    onSubmit: function () {\n      var users = Object.keys(selectedUsers).filter(function (m) {\n        return selectedUsers[m];\n      });\n      channel === null || channel === void 0 ? void 0 : channel.addOperators(users).then(function () {\n        onSubmit(users);\n      });\n    },\n    titleText: stringSet.OPEN_CHANNEL_CONVERSATION__SELECT_PARTICIPANTS\n  }, React__default.createElement(Label, {\n    color: selectedCount > 0 ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3,\n    type: LabelTypography.CAPTION_1\n  }, \"\".concat(selectedCount, \" \").concat(stringSet.MODAL__INVITE_MEMBER__SELECTED)), React__default.createElement(\"div\", {\n    className: \"sendbird-more-users__popup-scroll\",\n    onScroll: function (e) {\n      var hasNext = participantQuery ? participantQuery.hasNext : false;\n      var target = e.target;\n      var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n      if (hasNext && fetchMore && participantQuery) {\n        participantQuery.next().then(function (o) {\n          setParticipants(__spreadArray(__spreadArray([], participants, true), o, true));\n        });\n      }\n    }\n  }, participants.map(function (participant) {\n    var isOperator = (channel === null || channel === void 0 ? void 0 : channel.operators.find(function (operator) {\n      return (operator === null || operator === void 0 ? void 0 : operator.userId) === (participant === null || participant === void 0 ? void 0 : participant.userId);\n    })) ? true : false;\n    return React__default.createElement(UserListItem, {\n      user: participant,\n      key: participant.userId,\n      checkBox: true,\n      checked: selectedUsers[participant.userId] || isOperator,\n      disabled: isOperator,\n      isOperator: isOperator,\n      onChange: function (event) {\n        var _a;\n        var modifiedSelectedUsers = __assign(__assign({}, selectedUsers), (_a = {}, _a[event.target.id] = event.target.checked, _a));\n        if (!event.target.checked) {\n          delete modifiedSelectedUsers[event.target.id];\n        }\n        setSelectedUsers(modifiedSelectedUsers);\n      }\n    });\n  }))));\n}\nvar OperatorList = function () {\n  var _a, _b;\n  var _c = useState(false),\n    showAdd = _c[0],\n    setShowAdd = _c[1];\n  var _d = useState(false),\n    showMore = _d[0],\n    setShowMore = _d[1];\n  var state = useSendbirdStateContext();\n  var currentUserId = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.userId;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var channel = useOpenChannelSettingsContext().channel;\n  return React__default.createElement(\"div\", null, (_b = channel === null || channel === void 0 ? void 0 : channel.operators) === null || _b === void 0 ? void 0 : _b.slice(0, 10).map(function (operator) {\n    return React__default.createElement(UserListItem$1, {\n      key: operator.userId,\n      user: operator,\n      currentUser: currentUserId,\n      action: function (_a) {\n        var actionRef = _a.actionRef;\n        return currentUserId !== (operator === null || operator === void 0 ? void 0 : operator.userId) ? React__default.createElement(ContextMenu, {\n          menuTrigger: function (toggleDropdown) {\n            return React__default.createElement(IconButton, {\n              className: \"sendbird-openchannel-operator-list__menu\",\n              width: \"32px\",\n              height: \"32px\",\n              onClick: toggleDropdown\n            }, React__default.createElement(Icon, {\n              width: \"24px\",\n              height: \"24px\",\n              type: IconTypes.MORE,\n              fillColor: IconColors.CONTENT_INVERSE\n            }));\n          },\n          menuItems: function (closeDropdown) {\n            return React__default.createElement(MenuItems, {\n              parentRef: actionRef,\n              closeDropdown: closeDropdown,\n              openLeft: true\n            }, React__default.createElement(MenuItem, {\n              onClick: function () {\n                channel === null || channel === void 0 ? void 0 : channel.removeOperators([operator.userId]).then(function () {\n                  closeDropdown();\n                });\n              },\n              testID: \"open_channel_setting_operator_context_menu_unregister_operator\"\n            }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR), React__default.createElement(MuteMenuItem, {\n              channel: channel,\n              user: operator,\n              onChange: function () {\n                return closeDropdown();\n              },\n              onError: function () {\n                // FIXME: handle error later\n                closeDropdown();\n              },\n              testID: \"open_channel_setting_operator_context_menu_\".concat(operator.isMuted ? 'unmute' : 'mute')\n            }, operator.isMuted ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE : stringSet.OPEN_CHANNEL_SETTING__MODERATION__MUTE), React__default.createElement(MenuItem, {\n              onClick: function () {\n                channel === null || channel === void 0 ? void 0 : channel.banUser(operator).then(function () {\n                  closeDropdown();\n                });\n              },\n              testID: \"open_channel_setting_operator_context_menu_ban\"\n            }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__BAN));\n          }\n        }) : React__default.createElement(React__default.Fragment, null);\n      }\n    });\n  }), React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-operator-list__footer\"\n  }, React__default.createElement(Button, {\n    type: ButtonTypes.SECONDARY,\n    size: ButtonSizes.SMALL,\n    onClick: function () {\n      setShowAdd(true);\n    }\n  }, stringSet.OPEN_CHANNEL_SETTINGS__OPERATORS__TITLE_ADD), (channel === null || channel === void 0 ? void 0 : channel.operators) && channel.operators.length > 10 && React__default.createElement(Button, {\n    type: ButtonTypes.SECONDARY,\n    size: ButtonSizes.SMALL,\n    onClick: function () {\n      setShowMore(true);\n    }\n  }, stringSet.OPEN_CHANNEL_SETTINGS__OPERATORS__TITLE_ALL)), showMore && React__default.createElement(React__default.Fragment, null, React__default.createElement(OperatorListModal, {\n    onCancel: function () {\n      setShowMore(false);\n    }\n  })), showAdd && React__default.createElement(React__default.Fragment, null, React__default.createElement(AddOperatorsModal, {\n    onCancel: function () {\n      return setShowAdd(false);\n    },\n    onSubmit: function () {\n      setShowAdd(false);\n    }\n  })));\n};\nfunction MutedParticipantsModal(_a) {\n  var _b;\n  var onCancel = _a.onCancel;\n  var _c = useState([]),\n    mutedUsers = _c[0],\n    setMutedUsers = _c[1];\n  var _d = useState(null),\n    userListQuery = _d[0],\n    setUserListQuery = _d[1];\n  var channel = useOpenChannelSettingsContext().channel;\n  var state = useSendbirdStateContext();\n  var currentUserId = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.userId;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  useEffect(function () {\n    var mutedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMutedUserListQuery({\n      limit: 10\n    });\n    mutedUserListQuery === null || mutedUserListQuery === void 0 ? void 0 : mutedUserListQuery.next().then(function (users) {\n      setMutedUsers(users);\n    });\n    if (mutedUserListQuery) {\n      setUserListQuery(mutedUserListQuery);\n    }\n  }, []);\n  return React__default.createElement(\"div\", null, React__default.createElement(Modal, {\n    isFullScreenOnMobile: true,\n    hideFooter: true,\n    onCancel: function () {\n      return onCancel();\n    },\n    onSubmit: noop,\n    titleText: stringSet.OPEN_CHANNEL_SETTINGS__MUTED_MEMBERS__TITLE\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-more-members__popup-scroll\",\n    onScroll: function (e) {\n      var hasNext = userListQuery === null || userListQuery === void 0 ? void 0 : userListQuery.hasNext;\n      var target = e.target;\n      var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n      if (hasNext && fetchMore) {\n        userListQuery.next().then(function (o) {\n          setMutedUsers(__spreadArray(__spreadArray([], mutedUsers, true), o, true));\n        });\n      }\n    }\n  }, mutedUsers.map(function (mutedUser) {\n    return React__default.createElement(UserListItem, {\n      currentUser: currentUserId,\n      user: mutedUser,\n      key: mutedUser.userId,\n      action: function (_a) {\n        var actionRef = _a.actionRef;\n        return (mutedUser === null || mutedUser === void 0 ? void 0 : mutedUser.userId) !== currentUserId ? React__default.createElement(ContextMenu, {\n          menuTrigger: function (toggleDropdown) {\n            return React__default.createElement(IconButton, {\n              className: \"sendbird-user-message__more__menu\",\n              width: \"32px\",\n              height: \"32px\",\n              onClick: toggleDropdown\n            }, React__default.createElement(Icon, {\n              width: \"24px\",\n              height: \"24px\",\n              type: IconTypes.MORE,\n              fillColor: IconColors.CONTENT_INVERSE\n            }));\n          },\n          menuItems: function (closeDropdown) {\n            return React__default.createElement(MenuItems, {\n              parentRef: actionRef,\n              closeDropdown: closeDropdown,\n              openLeft: true\n            }, React__default.createElement(MenuItem, {\n              onClick: function () {\n                channel === null || channel === void 0 ? void 0 : channel.unmuteUser(mutedUser).then(function () {\n                  closeDropdown();\n                  setMutedUsers(mutedUsers.filter(function (u) {\n                    return u.userId !== mutedUser.userId;\n                  }));\n                });\n              },\n              testID: \"open_channel_setting_muted_member_context_menu_unmute\"\n            }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE));\n          }\n        }) : React__default.createElement(React__default.Fragment, null);\n      }\n    });\n  }))));\n}\nvar MutedParticipantList = function () {\n  var _a;\n  var _b = useState([]),\n    mutedUsers = _b[0],\n    setMutedUsers = _b[1];\n  var _c = useState(false),\n    hasNext = _c[0],\n    setHasNext = _c[1];\n  var _d = useState(false),\n    showModal = _d[0],\n    setShowModal = _d[1];\n  var channel = useOpenChannelSettingsContext().channel;\n  var state = useSendbirdStateContext();\n  var currentUserId = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.userId;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  useEffect(function () {\n    if (!channel) {\n      setMutedUsers([]);\n      return;\n    }\n    var mutedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMutedUserListQuery({\n      limit: 10\n    });\n    mutedUserListQuery.next().then(function (members) {\n      setMutedUsers(members);\n      setHasNext(mutedUserListQuery.hasNext);\n    });\n  }, [channel]);\n  var refreshList = useCallback(function () {\n    if (!channel) {\n      setMutedUsers([]);\n      return;\n    }\n    var mutedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMutedUserListQuery({\n      limit: 10\n    });\n    mutedUserListQuery.next().then(function (members) {\n      setMutedUsers(members);\n      setHasNext(mutedUserListQuery.hasNext);\n    });\n  }, [channel]);\n  return React__default.createElement(React__default.Fragment, null, mutedUsers.map(function (mutedUser) {\n    return React__default.createElement(UserListItem$1, {\n      key: mutedUser.userId,\n      user: mutedUser,\n      currentUser: currentUserId,\n      isOperator: channel === null || channel === void 0 ? void 0 : channel.isOperator(mutedUser.userId),\n      action: function (_a) {\n        var actionRef = _a.actionRef;\n        return (mutedUser === null || mutedUser === void 0 ? void 0 : mutedUser.userId) !== currentUserId ? React__default.createElement(ContextMenu, {\n          menuTrigger: function (toggleDropdown) {\n            return React__default.createElement(IconButton, {\n              className: \"sendbird-user-message__more__menu\",\n              width: \"32px\",\n              height: \"32px\",\n              onClick: toggleDropdown\n            }, React__default.createElement(Icon, {\n              width: \"24px\",\n              height: \"24px\",\n              type: IconTypes.MORE,\n              fillColor: IconColors.CONTENT_INVERSE\n            }));\n          },\n          menuItems: function (closeDropdown) {\n            return React__default.createElement(MenuItems, {\n              closeDropdown: closeDropdown,\n              openLeft: true,\n              parentRef: actionRef\n            }, React__default.createElement(MenuItem, {\n              onClick: function () {\n                channel === null || channel === void 0 ? void 0 : channel.unmuteUser(mutedUser).then(function () {\n                  refreshList();\n                  closeDropdown();\n                });\n              },\n              testID: \"open_channel_setting_muted_member_context_menu_unmute\"\n            }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE));\n          }\n        }) : React__default.createElement(React__default.Fragment, null);\n      }\n    });\n  }), mutedUsers && mutedUsers.length === 0 && React__default.createElement(Label, {\n    className: \"sendbird-channel-settings__empty-list\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, stringSet.OPEN_CHANNEL_SETTINGS__MUTED_MEMBERS__NO_ONE), hasNext && React__default.createElement(\"div\", {\n    className: \"sendbird-channel-settings-muted-participant-list__footer\"\n  }, React__default.createElement(Button, {\n    type: ButtonTypes.SECONDARY,\n    size: ButtonSizes.SMALL,\n    onClick: function () {\n      setShowModal(true);\n    }\n  }, stringSet.OPEN_CHANNEL_SETTINGS__MUTED_MEMBERS__TITLE_ALL)), showModal && React__default.createElement(MutedParticipantsModal, {\n    onCancel: function () {\n      setShowModal(false);\n      refreshList();\n    }\n  }));\n};\nfunction BannedUsersModal(_a) {\n  var _b;\n  var onCancel = _a.onCancel;\n  var _c = useState([]),\n    bannedUsers = _c[0],\n    setBannedUsers = _c[1];\n  var _d = useState(null),\n    userListQuery = _d[0],\n    setUserListQuery = _d[1];\n  var channel = useOpenChannelSettingsContext().channel;\n  var state = useSendbirdStateContext();\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var currentUserId = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.userId;\n  useEffect(function () {\n    var bannedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createBannedUserListQuery();\n    bannedUserListQuery === null || bannedUserListQuery === void 0 ? void 0 : bannedUserListQuery.next().then(function (users) {\n      setBannedUsers(users);\n    });\n    setUserListQuery(bannedUserListQuery !== null && bannedUserListQuery !== void 0 ? bannedUserListQuery : null);\n  }, []);\n  return React__default.createElement(\"div\", null, React__default.createElement(Modal, {\n    hideFooter: true,\n    isFullScreenOnMobile: true,\n    onCancel: function () {\n      return onCancel();\n    },\n    onSubmit: noop,\n    titleText: stringSet.OPEN_CHANNEL_SETTINGS__MUTED_MEMBERS__TITLE\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-more-members__popup-scroll\",\n    onScroll: function (e) {\n      var hasNext = userListQuery === null || userListQuery === void 0 ? void 0 : userListQuery.hasNext;\n      var target = e.target;\n      var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n      if (hasNext && fetchMore) {\n        userListQuery.next().then(function (o) {\n          setBannedUsers(__spreadArray(__spreadArray([], bannedUsers, true), o, true));\n        });\n      }\n    }\n  }, bannedUsers.map(function (bannedUser) {\n    return React__default.createElement(UserListItem, {\n      user: bannedUser,\n      key: bannedUser.userId,\n      action: function (_a) {\n        var actionRef = _a.actionRef;\n        return (bannedUser === null || bannedUser === void 0 ? void 0 : bannedUser.userId) !== currentUserId ? React__default.createElement(ContextMenu, {\n          menuTrigger: function (toggleDropdown) {\n            return React__default.createElement(IconButton, {\n              className: \"sendbird-user-message__more__menu\",\n              width: \"32px\",\n              height: \"32px\",\n              onClick: toggleDropdown\n            }, React__default.createElement(Icon, {\n              width: \"24px\",\n              height: \"24px\",\n              type: IconTypes.MORE,\n              fillColor: IconColors.CONTENT_INVERSE\n            }));\n          },\n          menuItems: function (closeDropdown) {\n            return React__default.createElement(MenuItems, {\n              parentRef: actionRef,\n              closeDropdown: closeDropdown,\n              openLeft: true\n            }, React__default.createElement(MenuItem, {\n              onClick: function () {\n                channel === null || channel === void 0 ? void 0 : channel.unbanUser(bannedUser).then(function () {\n                  closeDropdown();\n                  setBannedUsers(bannedUsers.filter(function (u) {\n                    return u.userId !== bannedUser.userId;\n                  }));\n                });\n              },\n              testID: \"open_channel_setting_banned_user_context_menu_unban\"\n            }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNBAN));\n          }\n        }) : React__default.createElement(React__default.Fragment, null);\n      }\n    });\n  }))));\n}\nvar BannedUserList = function () {\n  var _a;\n  var _b = useState([]),\n    bannedUsers = _b[0],\n    setBannedUsers = _b[1];\n  var _c = useState(false),\n    hasNext = _c[0],\n    setHasNext = _c[1];\n  var _d = useState(false),\n    showModal = _d[0],\n    setShowModal = _d[1];\n  var channel = useOpenChannelSettingsContext().channel;\n  var state = useSendbirdStateContext();\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var currentUserId = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.userId;\n  useEffect(function () {\n    if (!channel) {\n      setBannedUsers([]);\n      return;\n    }\n    var bannedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createBannedUserListQuery();\n    bannedUserListQuery.next().then(function (users) {\n      setBannedUsers(users);\n      setHasNext(bannedUserListQuery.hasNext);\n    });\n  }, [channel]);\n  var refreshList = useCallback(function () {\n    if (!channel) {\n      setBannedUsers([]);\n      return;\n    }\n    var bannedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createBannedUserListQuery();\n    bannedUserListQuery.next().then(function (users) {\n      setBannedUsers(users);\n      setHasNext(bannedUserListQuery.hasNext);\n    });\n  }, [channel]);\n  return React__default.createElement(React__default.Fragment, null, bannedUsers.map(function (bannedUser) {\n    return React__default.createElement(UserListItem$1, {\n      key: bannedUser.userId,\n      user: bannedUser,\n      isOperator: channel === null || channel === void 0 ? void 0 : channel.isOperator(bannedUser.userId),\n      action: function (_a) {\n        var actionRef = _a.actionRef;\n        return (bannedUser === null || bannedUser === void 0 ? void 0 : bannedUser.userId) !== currentUserId ? React__default.createElement(ContextMenu, {\n          menuTrigger: function (toggleDropdown) {\n            return React__default.createElement(IconButton, {\n              className: \"sendbird-user-message__more__menu\",\n              width: \"32px\",\n              height: \"32px\",\n              onClick: toggleDropdown\n            }, React__default.createElement(Icon, {\n              width: \"24px\",\n              height: \"24px\",\n              type: IconTypes.MORE,\n              fillColor: IconColors.CONTENT_INVERSE\n            }));\n          },\n          menuItems: function (closeDropdown) {\n            return React__default.createElement(MenuItems, {\n              parentRef: actionRef,\n              closeDropdown: closeDropdown,\n              openLeft: true\n            }, React__default.createElement(MenuItem, {\n              onClick: function () {\n                channel === null || channel === void 0 ? void 0 : channel.unbanUser(bannedUser).then(function () {\n                  closeDropdown();\n                  refreshList();\n                });\n              },\n              testID: \"open_channel_setting_banned_user_context_menu_unban\"\n            }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNBAN));\n          }\n        }) : React__default.createElement(React__default.Fragment, null);\n      }\n    });\n  }), bannedUsers && bannedUsers.length === 0 && React__default.createElement(Label, {\n    className: \"sendbird-channel-settings__empty-list\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, stringSet.OPEN_CHANNEL_SETTINGS__BANNED_MEMBERS__NO_ONE), hasNext && React__default.createElement(\"div\", {\n    className: \"sendbird-channel-settings-banned-user-list__footer\"\n  }, React__default.createElement(Button, {\n    type: ButtonTypes.SECONDARY,\n    size: ButtonSizes.SMALL,\n    onClick: function () {\n      setShowModal(true);\n    }\n  }, stringSet.OPEN_CHANNEL_SETTINGS__BANNED_MEMBERS__TITLE_ALL)), showModal && React__default.createElement(BannedUsersModal, {\n    onCancel: function () {\n      setShowModal(false);\n      refreshList();\n    }\n  }));\n};\nvar copyToClipboard = function (text) {\n  // @ts-ignore: Unreachable code error\n  if (window.clipboardData && window.clipboardData.setData) {\n    // Internet Explorer-specific code path to prevent textarea being shown while dialog is visible.\n    // @ts-ignore: Unreachable code error\n    return window.clipboardData.setData('Text', text);\n  }\n  if (document.queryCommandSupported && document.queryCommandSupported('copy')) {\n    var textarea = document.createElement('textarea');\n    textarea.textContent = text;\n    textarea.style.position = 'fixed'; // Prevent scrolling to bottom of page in Microsoft Edge.\n    document.body.appendChild(textarea);\n    textarea.select();\n    try {\n      return document.execCommand('copy'); // Security exception may be thrown by some browsers.\n    } catch (ex) {\n      return false;\n    } finally {\n      document.body.removeChild(textarea);\n    }\n  }\n  return false;\n};\nvar OperatorUI = function (_a) {\n  var renderChannelProfile = _a.renderChannelProfile;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var _b = useOpenChannelSettingsContext(),\n    onCloseClick = _b.onCloseClick,\n    channel = _b.channel;\n  return React__default.createElement(React__default.Fragment, null, React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__header\"\n  }, React__default.createElement(Label, {\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.CHANNEL_SETTING__HEADER__TITLE), React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-settings__close-icon\",\n    type: IconTypes.CLOSE,\n    height: \"24px\",\n    width: \"24px\",\n    onClick: function () {\n      onCloseClick === null || onCloseClick === void 0 ? void 0 : onCloseClick();\n    }\n  })), React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__profile\"\n  }, (renderChannelProfile === null || renderChannelProfile === void 0 ? void 0 : renderChannelProfile()) || React__default.createElement(ChannelProfile, null)), React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__url\"\n  }, React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-settings__copy-icon\",\n    type: IconTypes.COPY,\n    height: \"22px\",\n    width: \"22px\",\n    onClick: function () {\n      var _a;\n      copyToClipboard((_a = channel === null || channel === void 0 ? void 0 : channel.url) !== null && _a !== void 0 ? _a : '');\n    }\n  }), React__default.createElement(Label, {\n    className: \"sendbird-openchannel-settings__url-label\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, stringSet.OPEN_CHANNEL_SETTINGS__OPERATOR_URL), React__default.createElement(Label, {\n    className: \"sendbird-openchannel-settings__url-value\",\n    type: LabelTypography.SUBTITLE_2\n  }, channel === null || channel === void 0 ? void 0 : channel.url)), React__default.createElement(AccordionGroup, null, React__default.createElement(Accordion, {\n    className: \"sendbird-openchannel-settings__operators-list\",\n    id: \"operators\",\n    renderTitle: function () {\n      return React__default.createElement(React__default.Fragment, null, React__default.createElement(Icon, {\n        className: \"sendbird-openchannel-settings__operator-accordion-icon\",\n        type: IconTypes.OPERATOR,\n        fillColor: IconColors.PRIMARY,\n        width: \"24px\",\n        height: \"24px\"\n      }), React__default.createElement(Label, {\n        type: LabelTypography.SUBTITLE_1,\n        color: LabelColors.ONBACKGROUND_1\n      }, stringSet.OPEN_CHANNEL_SETTINGS__OPERATORS_TITLE));\n    },\n    renderContent: function () {\n      return React__default.createElement(React__default.Fragment, null, React__default.createElement(OperatorList, null));\n    }\n  }), React__default.createElement(Accordion, {\n    className: \"sendbird-channel-settings__operators-list\",\n    id: \"participants\",\n    renderTitle: function () {\n      return React__default.createElement(React__default.Fragment, null, React__default.createElement(Icon, {\n        type: IconTypes.MEMBERS,\n        fillColor: IconColors.PRIMARY,\n        width: 24,\n        height: 24,\n        className: \"sendbird-openchannel-settings__operator-accordion-icon\"\n      }), React__default.createElement(Label, {\n        type: LabelTypography.SUBTITLE_1,\n        color: LabelColors.ONBACKGROUND_1\n      }, stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_ACCORDION_TITLE));\n    },\n    renderContent: function () {\n      return React__default.createElement(React__default.Fragment, null, React__default.createElement(ParticipantList, {\n        isOperatorView: true\n      }));\n    }\n  }), React__default.createElement(Accordion, {\n    className: \"sendbird-channel-settings__operators-list\",\n    id: \"mutedMembers\",\n    renderTitle: function () {\n      return React__default.createElement(React__default.Fragment, null, React__default.createElement(Icon, {\n        className: \"sendbird-openchannel-settings__operator-accordion-icon\",\n        type: IconTypes.MUTE,\n        fillColor: IconColors.PRIMARY,\n        width: \"24px\",\n        height: \"24px\"\n      }), React__default.createElement(Label, {\n        type: LabelTypography.SUBTITLE_1,\n        color: LabelColors.ONBACKGROUND_1\n      }, stringSet.OPEN_CHANNEL_SETTINGS__MUTED_MEMBERS__TITLE));\n    },\n    renderContent: function () {\n      return React__default.createElement(React__default.Fragment, null, React__default.createElement(MutedParticipantList, null));\n    }\n  }), React__default.createElement(Accordion, {\n    className: \"sendbird-channel-settings__operators-list\",\n    id: \"bannedUsers\",\n    renderTitle: function () {\n      return React__default.createElement(React__default.Fragment, null, React__default.createElement(Icon, {\n        className: \"sendbird-openchannel-settings__operator-accordion-icon\",\n        type: IconTypes.BAN,\n        fillColor: IconColors.PRIMARY,\n        width: \"24px\",\n        height: \"24px\"\n      }), React__default.createElement(Label, {\n        type: LabelTypography.SUBTITLE_1,\n        color: LabelColors.ONBACKGROUND_1\n      }, stringSet.OPEN_CHANNEL_SETTINGS__BANNED_MEMBERS__TITLE));\n    },\n    renderContent: function () {\n      return React__default.createElement(React__default.Fragment, null, React__default.createElement(BannedUserList, null));\n    }\n  })), React__default.createElement(DeleteChannel, null));\n};\nexport { OperatorUI, copyToClipboard, OperatorUI as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { useState, useContext, useEffect, useCallback } from 'react';\nimport { L as LocalizationContext } from '../../chunks/bundle-cQZ3UZoG.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../chunks/bundle-DhKQeIfP.js';\nimport Icon, { IconTypes, IconColors } from '../../ui/Icon.js';\nimport { useOpenChannelSettingsContext } from '../context.js';\nimport ChannelProfile from './OpenChannelProfile.js';\nimport { M as Modal } from '../../chunks/bundle-CXdo2kR_.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport { U as UserListItem$1, P as ParticipantList } from '../../chunks/bundle-B4KMvElm.js';\nimport Accordion, { AccordionGroup } from '../../ui/Accordion.js';\nimport Button, { ButtonTypes, ButtonSizes } from '../../ui/Button.js';\nimport { C as ContextMenu, b as MenuItems, c as MenuItem, h as MuteMenuItem } from '../../chunks/bundle-CwKZj-B6.js';\nimport IconButton from '../../ui/IconButton.js';\nimport { c as __spreadArray, _ as __assign } from '../../chunks/bundle-BQi9-O76.js';\nimport { UserListItem } from '../../ui/UserListItem.js';\nimport { n as noop } from '../../chunks/bundle-BgwzpLeQ.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '@sendbird/chat/openChannel';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '../../withSendbird.js';\nimport '../../ui/TextButton.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nimport '../../ui/OpenChannelAvatar.js';\nimport '../../chunks/bundle-CFosTNce.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../chunks/bundle-GMlM2rlV.js';\nimport './EditDetailsModal.js';\nimport '../../chunks/bundle-b6TpX_JP.js';\nimport '../../ui/Input.js';\nimport '../../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport 'react-dom';\nimport '../../chunks/bundle-f-SpnOx2.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../ui/SortByRow.js';\nimport '../../ui/AccordionGroup.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/UserProfile.js';\nimport '../../sendbirdSelectors.js';\nimport '../../ui/Checkbox.js';\n\nfunction DeleteChannel() {\n    var _a, _b;\n    var _c = useState(false), showDeleteChannelModal = _c[0], setShowDeleteChannelModal = _c[1];\n    var stringSet = useContext(LocalizationContext).stringSet;\n    var globalState = useSendbirdStateContext();\n    var isOnline = (_a = globalState === null || globalState === void 0 ? void 0 : globalState.config) === null || _a === void 0 ? void 0 : _a.isOnline;\n    var logger = (_b = globalState === null || globalState === void 0 ? void 0 : globalState.config) === null || _b === void 0 ? void 0 : _b.logger;\n    var _d = useOpenChannelSettingsContext(), channel = _d.channel, onDeleteChannel = _d.onDeleteChannel;\n    var deleteChannel = function () {\n        channel === null || channel === void 0 ? void 0 : channel.delete().then(function (response) {\n            logger.info('OpenChannelSettings: Delete channel success', response);\n            if (onDeleteChannel) {\n                onDeleteChannel(channel);\n            }\n        }).catch(function (error) {\n            logger.warning('OpenChannelSettings: Delete channel failed', error);\n        });\n    };\n    return (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(\"div\", { className: \"sendbird-openchannel-settings__panel-item\\n          sendbird-openchannel-settings__delete-channel\\n            \".concat(!isOnline ? 'sendbird-openchannel-settings__panel-item__disabled' : ''), role: \"button\", tabIndex: 0, onKeyDown: function () {\n                if (!isOnline) {\n                    return;\n                }\n                setShowDeleteChannelModal(true);\n            }, onClick: function () {\n                if (!isOnline) {\n                    return;\n                }\n                setShowDeleteChannelModal(true);\n            } },\n            React__default.createElement(Icon, { type: IconTypes.DELETE, fillColor: IconColors.ERROR, className: [\n                    'sendbird-openchannel-settings__panel-icon-left',\n                    'sendbird-openchannel-settings__panel-icon__delete',\n                ].join(' '), height: \"24px\", width: \"24px\" }),\n            React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_PANEL)),\n        showDeleteChannelModal && (React__default.createElement(Modal, { isFullScreenOnMobile: true, onCancel: function () {\n                setShowDeleteChannelModal(false);\n            }, onSubmit: function () {\n                deleteChannel();\n            }, titleText: stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_TITLE, submitText: stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_SUBMIT }, stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_CONTEXT))));\n}\n\nfunction OperatorListModal(_a) {\n    var _b;\n    var onCancel = _a.onCancel;\n    var _c = useState([]), users = _c[0], setUsers = _c[1];\n    var _d = useState(null), operatorQuery = _d[0], setOperatorQuery = _d[1];\n    var channel = useOpenChannelSettingsContext().channel;\n    var state = useSendbirdStateContext();\n    var currentUserId = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.userId;\n    var stringSet = useContext(LocalizationContext).stringSet;\n    useEffect(function () {\n        var operatorListQuery = channel === null || channel === void 0 ? void 0 : channel.createOperatorListQuery({\n            limit: 20,\n        });\n        if (operatorListQuery) {\n            operatorListQuery.next().then(function (participants) {\n                setUsers(participants);\n            });\n            setOperatorQuery(operatorListQuery);\n        }\n    }, []);\n    return (React__default.createElement(\"div\", null,\n        React__default.createElement(Modal, { hideFooter: true, isFullScreenOnMobile: true, titleText: stringSet.OPEN_CHANNEL_SETTINGS__OPERATORS__TITLE_ALL, onCancel: onCancel },\n            React__default.createElement(\"div\", { className: \"sendbird-more-users__popup-scroll\", onScroll: function (e) {\n                    var hasNext = operatorQuery === null || operatorQuery === void 0 ? void 0 : operatorQuery.hasNext;\n                    var target = e.target;\n                    var fetchMore = (target.clientHeight + target.scrollTop === target.scrollHeight);\n                    if (hasNext && fetchMore) {\n                        operatorQuery.next().then(function (o) {\n                            setUsers(__spreadArray(__spreadArray([], users, true), o, true));\n                        });\n                    }\n                } }, users.map(function (operator) { return (React__default.createElement(UserListItem, { currentUser: currentUserId, user: operator, key: operator.userId, action: function (_a) {\n                    var parentRef = _a.parentRef, actionRef = _a.actionRef;\n                    return (currentUserId !== (operator === null || operator === void 0 ? void 0 : operator.userId)\n                        ? (React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) { return (React__default.createElement(IconButton, { className: \"sendbird-user-message__more__menu\", width: \"32px\", height: \"32px\", onClick: toggleDropdown },\n                                React__default.createElement(Icon, { width: \"24px\", height: \"24px\", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE }))); }, menuItems: function (closeDropdown) { return (React__default.createElement(MenuItems, { parentContainRef: parentRef, parentRef: actionRef, closeDropdown: closeDropdown, openLeft: true },\n                                React__default.createElement(MenuItem, { onClick: function () {\n                                        channel === null || channel === void 0 ? void 0 : channel.removeOperators([operator.userId]).then(function () {\n                                            setUsers(users.filter(function (_a) {\n                                                var userId = _a.userId;\n                                                return userId !== operator.userId;\n                                            }));\n                                        });\n                                        closeDropdown();\n                                    }, testID: \"open_channel_setting_operator_context_menu_unregister_operator\" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR))); } })) : React__default.createElement(React__default.Fragment, null));\n                } })); })))));\n}\n\nfunction AddOperatorsModal(_a) {\n    var onCancel = _a.onCancel, onSubmit = _a.onSubmit;\n    var _b = useState([]), participants = _b[0], setParticipants = _b[1];\n    var _c = useState({}), selectedUsers = _c[0], setSelectedUsers = _c[1];\n    var _d = useState(null), participantQuery = _d[0], setParticipantQuery = _d[1];\n    var stringSet = useContext(LocalizationContext).stringSet;\n    var channel = useOpenChannelSettingsContext().channel;\n    useEffect(function () {\n        var participantListQuery = channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery({\n            limit: 20,\n        });\n        if (participantListQuery) {\n            participantListQuery.next().then(function (users) {\n                setParticipants(users);\n            });\n            setParticipantQuery(participantListQuery);\n        }\n    }, []);\n    var selectedCount = Object.keys(selectedUsers).filter(function (m) { return selectedUsers[m]; }).length;\n    return (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(Modal, { isFullScreenOnMobile: true, type: ButtonTypes.PRIMARY, submitText: stringSet.CHANNEL_SETTING__OPERATORS__ADD_BUTTON, onCancel: onCancel, onSubmit: function () {\n                var users = Object.keys(selectedUsers).filter(function (m) { return selectedUsers[m]; });\n                channel === null || channel === void 0 ? void 0 : channel.addOperators(users).then(function () {\n                    onSubmit(users);\n                });\n            }, titleText: stringSet.OPEN_CHANNEL_CONVERSATION__SELECT_PARTICIPANTS },\n            React__default.createElement(Label, { color: (selectedCount > 0) ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3, type: LabelTypography.CAPTION_1 }, \"\".concat(selectedCount, \" \").concat(stringSet.MODAL__INVITE_MEMBER__SELECTED)),\n            React__default.createElement(\"div\", { className: \"sendbird-more-users__popup-scroll\", onScroll: function (e) {\n                    var hasNext = participantQuery ? participantQuery.hasNext : false;\n                    var target = e.target;\n                    var fetchMore = (target.clientHeight + target.scrollTop === target.scrollHeight);\n                    if (hasNext && fetchMore && participantQuery) {\n                        participantQuery.next().then(function (o) {\n                            setParticipants(__spreadArray(__spreadArray([], participants, true), o, true));\n                        });\n                    }\n                } }, participants.map(function (participant) {\n                var isOperator = (channel === null || channel === void 0 ? void 0 : channel.operators.find(function (operator) { return (operator === null || operator === void 0 ? void 0 : operator.userId) === (participant === null || participant === void 0 ? void 0 : participant.userId); })) ? true : false;\n                return (React__default.createElement(UserListItem, { user: participant, key: participant.userId, checkBox: true, checked: selectedUsers[participant.userId] || isOperator, disabled: isOperator, isOperator: isOperator, onChange: function (event) {\n                        var _a;\n                        var modifiedSelectedUsers = __assign(__assign({}, selectedUsers), (_a = {}, _a[event.target.id] = event.target.checked, _a));\n                        if (!event.target.checked) {\n                            delete modifiedSelectedUsers[event.target.id];\n                        }\n                        setSelectedUsers(modifiedSelectedUsers);\n                    } }));\n            })))));\n}\n\nvar OperatorList = function () {\n    var _a, _b;\n    var _c = useState(false), showAdd = _c[0], setShowAdd = _c[1];\n    var _d = useState(false), showMore = _d[0], setShowMore = _d[1];\n    var state = useSendbirdStateContext();\n    var currentUserId = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.userId;\n    var stringSet = useContext(LocalizationContext).stringSet;\n    var channel = useOpenChannelSettingsContext().channel;\n    return (React__default.createElement(\"div\", null, (_b = channel === null || channel === void 0 ? void 0 : channel.operators) === null || _b === void 0 ? void 0 :\n        _b.slice(0, 10).map(function (operator) { return (React__default.createElement(UserListItem$1, { key: operator.userId, user: operator, currentUser: currentUserId, action: function (_a) {\n                var actionRef = _a.actionRef;\n                return (currentUserId !== (operator === null || operator === void 0 ? void 0 : operator.userId)\n                    ? (React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) { return (React__default.createElement(IconButton, { className: \"sendbird-openchannel-operator-list__menu\", width: \"32px\", height: \"32px\", onClick: toggleDropdown },\n                            React__default.createElement(Icon, { width: \"24px\", height: \"24px\", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE }))); }, menuItems: function (closeDropdown) { return (React__default.createElement(MenuItems, { parentRef: actionRef, closeDropdown: closeDropdown, openLeft: true },\n                            React__default.createElement(MenuItem, { onClick: function () {\n                                    channel === null || channel === void 0 ? void 0 : channel.removeOperators([operator.userId]).then(function () {\n                                        closeDropdown();\n                                    });\n                                }, testID: \"open_channel_setting_operator_context_menu_unregister_operator\" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR),\n                            React__default.createElement(MuteMenuItem, { channel: channel, user: operator, onChange: function () { return closeDropdown(); }, onError: function () {\n                                    // FIXME: handle error later\n                                    closeDropdown();\n                                }, testID: \"open_channel_setting_operator_context_menu_\".concat(operator.isMuted ? 'unmute' : 'mute') }, operator.isMuted\n                                ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE\n                                : stringSet.OPEN_CHANNEL_SETTING__MODERATION__MUTE),\n                            React__default.createElement(MenuItem, { onClick: function () {\n                                    channel === null || channel === void 0 ? void 0 : channel.banUser(operator).then(function () {\n                                        closeDropdown();\n                                    });\n                                }, testID: \"open_channel_setting_operator_context_menu_ban\" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__BAN))); } })) : React__default.createElement(React__default.Fragment, null));\n            } })); }),\n        React__default.createElement(\"div\", { className: \"sendbird-openchannel-operator-list__footer\" },\n            React__default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function () {\n                    setShowAdd(true);\n                } }, stringSet.OPEN_CHANNEL_SETTINGS__OPERATORS__TITLE_ADD),\n            (channel === null || channel === void 0 ? void 0 : channel.operators) && channel.operators.length > 10 && (React__default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function () {\n                    setShowMore(true);\n                } }, stringSet.OPEN_CHANNEL_SETTINGS__OPERATORS__TITLE_ALL))),\n        showMore && (React__default.createElement(React__default.Fragment, null,\n            React__default.createElement(OperatorListModal, { onCancel: function () {\n                    setShowMore(false);\n                } }))),\n        showAdd && (React__default.createElement(React__default.Fragment, null,\n            React__default.createElement(AddOperatorsModal, { onCancel: function () { return setShowAdd(false); }, onSubmit: function () {\n                    setShowAdd(false);\n                } })))));\n};\n\nfunction MutedParticipantsModal(_a) {\n    var _b;\n    var onCancel = _a.onCancel;\n    var _c = useState([]), mutedUsers = _c[0], setMutedUsers = _c[1];\n    var _d = useState(null), userListQuery = _d[0], setUserListQuery = _d[1];\n    var channel = useOpenChannelSettingsContext().channel;\n    var state = useSendbirdStateContext();\n    var currentUserId = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.userId;\n    var stringSet = useContext(LocalizationContext).stringSet;\n    useEffect(function () {\n        var mutedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMutedUserListQuery({\n            limit: 10,\n        });\n        mutedUserListQuery === null || mutedUserListQuery === void 0 ? void 0 : mutedUserListQuery.next().then(function (users) {\n            setMutedUsers(users);\n        });\n        if (mutedUserListQuery) {\n            setUserListQuery(mutedUserListQuery);\n        }\n    }, []);\n    return (React__default.createElement(\"div\", null,\n        React__default.createElement(Modal, { isFullScreenOnMobile: true, hideFooter: true, onCancel: function () { return onCancel(); }, onSubmit: noop, titleText: stringSet.OPEN_CHANNEL_SETTINGS__MUTED_MEMBERS__TITLE },\n            React__default.createElement(\"div\", { className: \"sendbird-more-members__popup-scroll\", onScroll: function (e) {\n                    var hasNext = userListQuery === null || userListQuery === void 0 ? void 0 : userListQuery.hasNext;\n                    var target = e.target;\n                    var fetchMore = (target.clientHeight + target.scrollTop === target.scrollHeight);\n                    if (hasNext && fetchMore) {\n                        userListQuery.next().then(function (o) {\n                            setMutedUsers(__spreadArray(__spreadArray([], mutedUsers, true), o, true));\n                        });\n                    }\n                } }, mutedUsers.map(function (mutedUser) { return (React__default.createElement(UserListItem, { currentUser: currentUserId, user: mutedUser, key: mutedUser.userId, action: function (_a) {\n                    var actionRef = _a.actionRef;\n                    return ((mutedUser === null || mutedUser === void 0 ? void 0 : mutedUser.userId) !== currentUserId\n                        ? (React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) { return (React__default.createElement(IconButton, { className: \"sendbird-user-message__more__menu\", width: \"32px\", height: \"32px\", onClick: toggleDropdown },\n                                React__default.createElement(Icon, { width: \"24px\", height: \"24px\", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE }))); }, menuItems: function (closeDropdown) { return (React__default.createElement(MenuItems, { parentRef: actionRef, closeDropdown: closeDropdown, openLeft: true },\n                                React__default.createElement(MenuItem, { onClick: function () {\n                                        channel === null || channel === void 0 ? void 0 : channel.unmuteUser(mutedUser).then(function () {\n                                            closeDropdown();\n                                            setMutedUsers(mutedUsers.filter(function (u) {\n                                                return (u.userId !== mutedUser.userId);\n                                            }));\n                                        });\n                                    }, testID: \"open_channel_setting_muted_member_context_menu_unmute\" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE))); } })) : React__default.createElement(React__default.Fragment, null));\n                } })); })))));\n}\n\nvar MutedParticipantList = function () {\n    var _a;\n    var _b = useState([]), mutedUsers = _b[0], setMutedUsers = _b[1];\n    var _c = useState(false), hasNext = _c[0], setHasNext = _c[1];\n    var _d = useState(false), showModal = _d[0], setShowModal = _d[1];\n    var channel = useOpenChannelSettingsContext().channel;\n    var state = useSendbirdStateContext();\n    var currentUserId = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.userId;\n    var stringSet = useContext(LocalizationContext).stringSet;\n    useEffect(function () {\n        if (!channel) {\n            setMutedUsers([]);\n            return;\n        }\n        var mutedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMutedUserListQuery({\n            limit: 10,\n        });\n        mutedUserListQuery.next().then(function (members) {\n            setMutedUsers(members);\n            setHasNext(mutedUserListQuery.hasNext);\n        });\n    }, [channel]);\n    var refreshList = useCallback(function () {\n        if (!channel) {\n            setMutedUsers([]);\n            return;\n        }\n        var mutedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMutedUserListQuery({\n            limit: 10,\n        });\n        mutedUserListQuery.next().then(function (members) {\n            setMutedUsers(members);\n            setHasNext(mutedUserListQuery.hasNext);\n        });\n    }, [channel]);\n    return (React__default.createElement(React__default.Fragment, null,\n        mutedUsers.map(function (mutedUser) { return (React__default.createElement(UserListItem$1, { key: mutedUser.userId, user: mutedUser, currentUser: currentUserId, isOperator: channel === null || channel === void 0 ? void 0 : channel.isOperator(mutedUser.userId), action: function (_a) {\n                var actionRef = _a.actionRef;\n                return ((mutedUser === null || mutedUser === void 0 ? void 0 : mutedUser.userId) !== currentUserId\n                    ? (React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) { return (React__default.createElement(IconButton, { className: \"sendbird-user-message__more__menu\", width: \"32px\", height: \"32px\", onClick: toggleDropdown },\n                            React__default.createElement(Icon, { width: \"24px\", height: \"24px\", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE }))); }, menuItems: function (closeDropdown) { return (React__default.createElement(MenuItems, { closeDropdown: closeDropdown, openLeft: true, parentRef: actionRef },\n                            React__default.createElement(MenuItem, { onClick: function () {\n                                    channel === null || channel === void 0 ? void 0 : channel.unmuteUser(mutedUser).then(function () {\n                                        refreshList();\n                                        closeDropdown();\n                                    });\n                                }, testID: \"open_channel_setting_muted_member_context_menu_unmute\" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE))); } })) : React__default.createElement(React__default.Fragment, null));\n            } })); }),\n        mutedUsers && mutedUsers.length === 0 && (React__default.createElement(Label, { className: \"sendbird-channel-settings__empty-list\", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_3 }, stringSet.OPEN_CHANNEL_SETTINGS__MUTED_MEMBERS__NO_ONE)),\n        hasNext && (React__default.createElement(\"div\", { className: \"sendbird-channel-settings-muted-participant-list__footer\" },\n            React__default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function () {\n                    setShowModal(true);\n                } }, stringSet.OPEN_CHANNEL_SETTINGS__MUTED_MEMBERS__TITLE_ALL))),\n        showModal && (React__default.createElement(MutedParticipantsModal, { onCancel: function () {\n                setShowModal(false);\n                refreshList();\n            } }))));\n};\n\nfunction BannedUsersModal(_a) {\n    var _b;\n    var onCancel = _a.onCancel;\n    var _c = useState([]), bannedUsers = _c[0], setBannedUsers = _c[1];\n    var _d = useState(null), userListQuery = _d[0], setUserListQuery = _d[1];\n    var channel = useOpenChannelSettingsContext().channel;\n    var state = useSendbirdStateContext();\n    var stringSet = useContext(LocalizationContext).stringSet;\n    var currentUserId = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.userId;\n    useEffect(function () {\n        var bannedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createBannedUserListQuery();\n        bannedUserListQuery === null || bannedUserListQuery === void 0 ? void 0 : bannedUserListQuery.next().then(function (users) {\n            setBannedUsers(users);\n        });\n        setUserListQuery(bannedUserListQuery !== null && bannedUserListQuery !== void 0 ? bannedUserListQuery : null);\n    }, []);\n    return (React__default.createElement(\"div\", null,\n        React__default.createElement(Modal, { hideFooter: true, isFullScreenOnMobile: true, onCancel: function () { return onCancel(); }, onSubmit: noop, titleText: stringSet.OPEN_CHANNEL_SETTINGS__MUTED_MEMBERS__TITLE },\n            React__default.createElement(\"div\", { className: \"sendbird-more-members__popup-scroll\", onScroll: function (e) {\n                    var hasNext = userListQuery === null || userListQuery === void 0 ? void 0 : userListQuery.hasNext;\n                    var target = e.target;\n                    var fetchMore = (target.clientHeight + target.scrollTop === target.scrollHeight);\n                    if (hasNext && fetchMore) {\n                        userListQuery.next().then(function (o) {\n                            setBannedUsers(__spreadArray(__spreadArray([], bannedUsers, true), o, true));\n                        });\n                    }\n                } }, bannedUsers.map(function (bannedUser) { return (React__default.createElement(UserListItem, { user: bannedUser, key: bannedUser.userId, action: function (_a) {\n                    var actionRef = _a.actionRef;\n                    return ((bannedUser === null || bannedUser === void 0 ? void 0 : bannedUser.userId) !== currentUserId\n                        ? (React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) { return (React__default.createElement(IconButton, { className: \"sendbird-user-message__more__menu\", width: \"32px\", height: \"32px\", onClick: toggleDropdown },\n                                React__default.createElement(Icon, { width: \"24px\", height: \"24px\", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE }))); }, menuItems: function (closeDropdown) { return (React__default.createElement(MenuItems, { parentRef: actionRef, closeDropdown: closeDropdown, openLeft: true },\n                                React__default.createElement(MenuItem, { onClick: function () {\n                                        channel === null || channel === void 0 ? void 0 : channel.unbanUser(bannedUser).then(function () {\n                                            closeDropdown();\n                                            setBannedUsers(bannedUsers.filter(function (u) {\n                                                return (u.userId !== bannedUser.userId);\n                                            }));\n                                        });\n                                    }, testID: \"open_channel_setting_banned_user_context_menu_unban\" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNBAN))); } })) : React__default.createElement(React__default.Fragment, null));\n                } })); })))));\n}\n\nvar BannedUserList = function () {\n    var _a;\n    var _b = useState([]), bannedUsers = _b[0], setBannedUsers = _b[1];\n    var _c = useState(false), hasNext = _c[0], setHasNext = _c[1];\n    var _d = useState(false), showModal = _d[0], setShowModal = _d[1];\n    var channel = useOpenChannelSettingsContext().channel;\n    var state = useSendbirdStateContext();\n    var stringSet = useContext(LocalizationContext).stringSet;\n    var currentUserId = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.userId;\n    useEffect(function () {\n        if (!channel) {\n            setBannedUsers([]);\n            return;\n        }\n        var bannedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createBannedUserListQuery();\n        bannedUserListQuery.next().then(function (users) {\n            setBannedUsers(users);\n            setHasNext(bannedUserListQuery.hasNext);\n        });\n    }, [channel]);\n    var refreshList = useCallback(function () {\n        if (!channel) {\n            setBannedUsers([]);\n            return;\n        }\n        var bannedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createBannedUserListQuery();\n        bannedUserListQuery.next().then(function (users) {\n            setBannedUsers(users);\n            setHasNext(bannedUserListQuery.hasNext);\n        });\n    }, [channel]);\n    return (React__default.createElement(React__default.Fragment, null,\n        bannedUsers.map(function (bannedUser) { return (React__default.createElement(UserListItem$1, { key: bannedUser.userId, user: bannedUser, isOperator: channel === null || channel === void 0 ? void 0 : channel.isOperator(bannedUser.userId), action: function (_a) {\n                var actionRef = _a.actionRef;\n                return ((bannedUser === null || bannedUser === void 0 ? void 0 : bannedUser.userId) !== currentUserId\n                    ? (React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) { return (React__default.createElement(IconButton, { className: \"sendbird-user-message__more__menu\", width: \"32px\", height: \"32px\", onClick: toggleDropdown },\n                            React__default.createElement(Icon, { width: \"24px\", height: \"24px\", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE }))); }, menuItems: function (closeDropdown) { return (React__default.createElement(MenuItems, { parentRef: actionRef, closeDropdown: closeDropdown, openLeft: true },\n                            React__default.createElement(MenuItem, { onClick: function () {\n                                    channel === null || channel === void 0 ? void 0 : channel.unbanUser(bannedUser).then(function () {\n                                        closeDropdown();\n                                        refreshList();\n                                    });\n                                }, testID: \"open_channel_setting_banned_user_context_menu_unban\" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNBAN))); } })) : React__default.createElement(React__default.Fragment, null));\n            } })); }),\n        bannedUsers && bannedUsers.length === 0 && (React__default.createElement(Label, { className: \"sendbird-channel-settings__empty-list\", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_3 }, stringSet.OPEN_CHANNEL_SETTINGS__BANNED_MEMBERS__NO_ONE)),\n        hasNext && (React__default.createElement(\"div\", { className: \"sendbird-channel-settings-banned-user-list__footer\" },\n            React__default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function () {\n                    setShowModal(true);\n                } }, stringSet.OPEN_CHANNEL_SETTINGS__BANNED_MEMBERS__TITLE_ALL))),\n        showModal && (React__default.createElement(BannedUsersModal, { onCancel: function () {\n                setShowModal(false);\n                refreshList();\n            } }))));\n};\n\nvar copyToClipboard = function (text) {\n    // @ts-ignore: Unreachable code error\n    if (window.clipboardData && window.clipboardData.setData) {\n        // Internet Explorer-specific code path to prevent textarea being shown while dialog is visible.\n        // @ts-ignore: Unreachable code error\n        return window.clipboardData.setData('Text', text);\n    }\n    if (document.queryCommandSupported && document.queryCommandSupported('copy')) {\n        var textarea = document.createElement('textarea');\n        textarea.textContent = text;\n        textarea.style.position = 'fixed'; // Prevent scrolling to bottom of page in Microsoft Edge.\n        document.body.appendChild(textarea);\n        textarea.select();\n        try {\n            return document.execCommand('copy'); // Security exception may be thrown by some browsers.\n        }\n        catch (ex) {\n            return false;\n        }\n        finally {\n            document.body.removeChild(textarea);\n        }\n    }\n    return false;\n};\nvar OperatorUI = function (_a) {\n    var renderChannelProfile = _a.renderChannelProfile;\n    var stringSet = useContext(LocalizationContext).stringSet;\n    var _b = useOpenChannelSettingsContext(), onCloseClick = _b.onCloseClick, channel = _b.channel;\n    return (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(\"div\", { className: \"sendbird-openchannel-settings__header\" },\n            React__default.createElement(Label, { type: LabelTypography.H_2, color: LabelColors.ONBACKGROUND_1 }, stringSet.CHANNEL_SETTING__HEADER__TITLE),\n            React__default.createElement(Icon, { className: \"sendbird-openchannel-settings__close-icon\", type: IconTypes.CLOSE, height: \"24px\", width: \"24px\", onClick: function () {\n                    onCloseClick === null || onCloseClick === void 0 ? void 0 : onCloseClick();\n                } })),\n        React__default.createElement(\"div\", { className: \"sendbird-openchannel-settings__profile\" }, (renderChannelProfile === null || renderChannelProfile === void 0 ? void 0 : renderChannelProfile()) || (React__default.createElement(ChannelProfile, null))),\n        React__default.createElement(\"div\", { className: \"sendbird-openchannel-settings__url\" },\n            React__default.createElement(Icon, { className: \"sendbird-openchannel-settings__copy-icon\", type: IconTypes.COPY, height: \"22px\", width: \"22px\", onClick: function () {\n                    var _a;\n                    copyToClipboard((_a = channel === null || channel === void 0 ? void 0 : channel.url) !== null && _a !== void 0 ? _a : '');\n                } }),\n            React__default.createElement(Label, { className: \"sendbird-openchannel-settings__url-label\", type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, stringSet.OPEN_CHANNEL_SETTINGS__OPERATOR_URL),\n            React__default.createElement(Label, { className: \"sendbird-openchannel-settings__url-value\", type: LabelTypography.SUBTITLE_2 }, channel === null || channel === void 0 ? void 0 : channel.url)),\n        React__default.createElement(AccordionGroup, null,\n            React__default.createElement(Accordion, { className: \"sendbird-openchannel-settings__operators-list\", id: \"operators\", renderTitle: function () { return (React__default.createElement(React__default.Fragment, null,\n                    React__default.createElement(Icon, { className: \"sendbird-openchannel-settings__operator-accordion-icon\", type: IconTypes.OPERATOR, fillColor: IconColors.PRIMARY, width: \"24px\", height: \"24px\" }),\n                    React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.OPEN_CHANNEL_SETTINGS__OPERATORS_TITLE))); }, renderContent: function () { return (React__default.createElement(React__default.Fragment, null,\n                    React__default.createElement(OperatorList, null))); } }),\n            React__default.createElement(Accordion, { className: \"sendbird-channel-settings__operators-list\", id: \"participants\", renderTitle: function () { return (React__default.createElement(React__default.Fragment, null,\n                    React__default.createElement(Icon, { type: IconTypes.MEMBERS, fillColor: IconColors.PRIMARY, width: 24, height: 24, className: \"sendbird-openchannel-settings__operator-accordion-icon\" }),\n                    React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_ACCORDION_TITLE))); }, renderContent: function () { return (React__default.createElement(React__default.Fragment, null,\n                    React__default.createElement(ParticipantList, { isOperatorView: true }))); } }),\n            React__default.createElement(Accordion, { className: \"sendbird-channel-settings__operators-list\", id: \"mutedMembers\", renderTitle: function () { return (React__default.createElement(React__default.Fragment, null,\n                    React__default.createElement(Icon, { className: \"sendbird-openchannel-settings__operator-accordion-icon\", type: IconTypes.MUTE, fillColor: IconColors.PRIMARY, width: \"24px\", height: \"24px\" }),\n                    React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.OPEN_CHANNEL_SETTINGS__MUTED_MEMBERS__TITLE))); }, renderContent: function () { return (React__default.createElement(React__default.Fragment, null,\n                    React__default.createElement(MutedParticipantList, null))); } }),\n            React__default.createElement(Accordion, { className: \"sendbird-channel-settings__operators-list\", id: \"bannedUsers\", renderTitle: function () { return (React__default.createElement(React__default.Fragment, null,\n                    React__default.createElement(Icon, { className: \"sendbird-openchannel-settings__operator-accordion-icon\", type: IconTypes.BAN, fillColor: IconColors.PRIMARY, width: \"24px\", height: \"24px\" }),\n                    React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.OPEN_CHANNEL_SETTINGS__BANNED_MEMBERS__TITLE))); }, renderContent: function () { return (React__default.createElement(React__default.Fragment, null,\n                    React__default.createElement(BannedUserList, null))); } })),\n        React__default.createElement(DeleteChannel, null)));\n};\n\nexport { OperatorUI, copyToClipboard, OperatorUI as default };\n//# sourceMappingURL=OperatorUI.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}