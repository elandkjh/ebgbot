{"ast":null,"code":"import { p as pubSubTopics } from './chunks/bundle-b6TpX_JP.js';\nimport { n as noop } from './chunks/bundle-BgwzpLeQ.js';\n\n/**\n * 1. UIKit Instances\n *    a. getSdk\n *    b. getPubSub\n * 2. Chat & Connection\n *    a. getConnect\n *    b. getDisconnect\n *    c. getUpdateUserInfo\n * 3. Channel\n *    a. getCreateGroupChannel\n *    b. getCreateOpenChannel\n *    c. getGetGroupChannel\n *    d. getGetOpenChannel\n *    e. getLeaveGroupChannel\n *    f. getEnterOpenChannel\n *    g. getExitOpenChannel\n *    h. getFreezeChannel\n *    i. getUnfreezeChannel\n * 4. Message\n *    a. getSendUserMessage\n *    b. getSendFileMessage\n *    c. getUpdateUserMessage\n *    d. x - getUpdateFileMessage\n *    e. getDeleteMessage\n *    f. getResendUserMessage\n *    g. getResendFileMessage\n */\n/**\n * import useSendbirdStateContext from '@sendbird-uikit/useSendbirdStateContext'\n * import selectors from '@sendbird-uikit/send'\n * const state = useSendbirdStateContext();\n */\n// 1. UIKit Instances\n/**\n * const sdk = selectors.getSdk(state);\n */\nvar getSdk = function (state) {\n  var _a = state.stores,\n    stores = _a === void 0 ? {} : _a;\n  var _b = stores.sdkStore,\n    sdkStore = _b === void 0 ? {} : _b;\n  var sdk = sdkStore.sdk;\n  return sdk;\n};\n/**\n * const pubSub = selectors.getPubSub(state);\n */\nvar getPubSub = function (state) {\n  var _a = state.config,\n    config = _a === void 0 ? {} : _a;\n  var pubSub = config.pubSub;\n  return pubSub;\n};\n// 2. Chat & Connection\n/**\n * const connect = selectors.getConnect(state);\n * connect('user-id-sendbirdian', 'access-token-0000')\n *  .then((user) => {})\n *  .catch((error) => {})\n */\nvar getConnect = function (state) {\n  return function (userId, accessToken) {\n    return new Promise(function (resolve, reject) {\n      var sdk = getSdk(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!((sdk === null || sdk === void 0 ? void 0 : sdk.connect) && typeof sdk.connect === 'function')) {\n        reject(new Error('Not found the function \"connect'));\n      }\n      if (!accessToken) {\n        sdk.connect(userId).then(function (res) {\n          return resolve(res);\n        }).catch(function (err) {\n          return reject(err);\n        });\n      } else {\n        sdk.connect(userId, accessToken).then(function (res) {\n          return resolve(res);\n        }).catch(function (err) {\n          return reject(err);\n        });\n      }\n    });\n  };\n};\n/**\n * const disconnect = selectors.getDisconnect(state);\n * disconnect()\n *  .then(() => {})\n *  .catch((error) => {})\n */\nvar getDisconnect = function (state) {\n  return function () {\n    return new Promise(function (resolve, reject) {\n      var sdk = getSdk(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!(sdk.disconnect && typeof sdk.disconnect === 'function')) {\n        reject(new Error('Not found the function \"disconnect'));\n      }\n      sdk.disconnect().then(function (res) {\n        return resolve(res);\n      }).catch(function (err) {\n        return reject(err);\n      });\n    });\n  };\n};\n/**\n * const updateUserInfo = selectors.getUpdateUserInfo(state);\n * updateUserInfo('new-nickname', 'new-profile-url')\n *  .then((user) => {})\n *  .catch((error) => {})\n */\nvar getUpdateUserInfo = function (state) {\n  return function (nickname, profileUrl) {\n    return new Promise(function (resolve, reject) {\n      var sdk = getSdk(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!(sdk.updateCurrentUserInfo && typeof sdk.updateCurrentUserInfo === 'function')) {\n        reject(new Error('Not found the function \"updateCurrentUserInfo\"'));\n      }\n      var userParams = {\n        nickname: nickname\n      };\n      if (profileUrl) {\n        userParams.profileUrl = profileUrl;\n      }\n      sdk.updateCurrentUserInfo(userParams).then(function (res) {\n        return resolve(res);\n      }).catch(function (err) {\n        return reject(err);\n      });\n    });\n  };\n};\n// 3. Channel\n/**\n * const createGroupChannel = selectors.getCreateGroupChannel(state);\n * createGroupChannel(channelParams: GroupChannelCreateParams)\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nvar getCreateGroupChannel = function (state) {\n  return function (params) {\n    return new Promise(function (resolve, reject) {\n      var sdk = getSdk(state);\n      var pubSub = getPubSub(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!sdk.groupChannel) {\n        reject(new Error('Not found GroupChannelModule'));\n      }\n      if (!(sdk.groupChannel.createChannel && typeof sdk.groupChannel.createChannel === 'function')) {\n        reject(new Error('Not found the function \"createChannel\"'));\n      }\n      sdk.groupChannel.createChannel(params).then(function (channel) {\n        resolve(channel);\n        pubSub.publish(pubSubTopics.CREATE_CHANNEL, {\n          channel: channel\n        });\n      }).catch(reject);\n    });\n  };\n};\n/**\n * const createOpenChannel = selectors.getCreateOpenChannel(state);\n * createOpenChannel(channelParams: OpenChannelCreateParams)\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nvar getCreateOpenChannel = function (state) {\n  return function (params) {\n    return new Promise(function (resolve, reject) {\n      var sdk = getSdk(state);\n      // const pubSub = getPubSub(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!sdk.openChannel) {\n        reject(new Error('Not found OpenChannelModule'));\n      }\n      if (!(sdk.openChannel.createChannel && typeof sdk.openChannel.createChannel === 'function')) {\n        reject(new Error('Not found the function \"createChannel\"'));\n      }\n      sdk.openChannel.createChannel(params).then(function (channel) {\n        resolve(channel);\n        // Consider pubSub process\n      }).catch(reject);\n    });\n  };\n};\n/**\n * const getGroupChannel = selectors.getGetGroupChannel(state);\n * getGroupChannel('channel-url-1234', isSelected)\n *  .then((channel) => {\n *    // groupChannel = channel;\n *    // or\n *    // setCurrentChannel(channel);\n *  })\n *  .catch((error) => {})\n */\nvar getGetGroupChannel = function (state) {\n  return function (channelUrl) {\n    return new Promise(function (resolve, reject) {\n      var sdk = getSdk(state);\n      // const pubSub = getPubSub(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!sdk.groupChannel) {\n        reject(new Error('Not found GroupChannelModule'));\n      }\n      if (!(sdk.groupChannel.getChannel && typeof sdk.groupChannel.getChannel === 'function')) {\n        reject(new Error('Not found the function \"getChannel\"'));\n      }\n      sdk.groupChannel.getChannel(channelUrl).then(function (channel) {\n        resolve(channel);\n        // Add pubSub with isSelected\n      }).catch(reject);\n    });\n  };\n};\n/**\n * const getOpenChannel = selectors.getGetOpenChannel(state);\n * getOpenChannel('channel-url-12345')\n *  .then((channel) => {\n *    // openChannel = channel;\n *    // or\n *    // setCurrentChannel(channel);\n *  })\n *  .catch((error) => {})\n */\nvar getGetOpenChannel = function (state) {\n  return function (channelUrl) {\n    return new Promise(function (resolve, reject) {\n      var sdk = getSdk(state);\n      // const pubSub = getPubSub(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!sdk.openChannel) {\n        reject(new Error('Not found OpenChannelModule'));\n      }\n      if (!(sdk.openChannel.getChannel && typeof sdk.openChannel.getChannel === 'function')) {\n        reject(new Error('Not found the function \"getChannel\"'));\n      }\n      sdk.openChannel.getChannel(channelUrl).then(function (channel) {\n        resolve(channel);\n        // Add pubSub with isSelected\n      }).catch(reject);\n    });\n  };\n};\n/**\n * const leaveChannel = selectors.getLeaveGroupChannel(state);\n * leaveChannel('group-channel-url')\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nvar getLeaveGroupChannel = function (state) {\n  return function (channelUrl) {\n    return new Promise(function (resolve, reject) {\n      var _a;\n      (_a = getGetGroupChannel(state)) === null || _a === void 0 ? void 0 : _a(channelUrl).then(function (channel) {\n        channel.leave().then(function () {\n          resolve();\n          // Add pubSub process\n        }).catch(reject);\n      }).catch(reject);\n    });\n  };\n};\n/**\n * const enterChannel = selectors.getEnterOpenChannel(state);\n * enterChannel('open-channel-url')\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nvar getEnterOpenChannel = function (state) {\n  return function (channelUrl) {\n    return new Promise(function (resolve, reject) {\n      var _a;\n      (_a = getGetOpenChannel(state)) === null || _a === void 0 ? void 0 : _a(channelUrl).then(function (channel) {\n        channel.enter().then(function () {\n          resolve(channel);\n          // Add pubSub process\n        }).catch(reject);\n      }).catch(reject);\n    });\n  };\n};\n/**\n * const exitChannel = selectors.getExitOpenChannel(state);\n * exitChannel('open-channel-url')\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nvar getExitOpenChannel = function (state) {\n  return function (channelUrl) {\n    return new Promise(function (resolve, reject) {\n      var _a;\n      (_a = getGetOpenChannel(state)) === null || _a === void 0 ? void 0 : _a(channelUrl).then(function (channel) {\n        channel.exit().then(function () {\n          resolve(channel);\n          // Add pubSub process\n        }).catch(reject);\n      }).catch(reject);\n    });\n  };\n};\n/**\n * const freezeChannel = selectors.getFreezeChannel(currentChannel);\n * freezeChannel()\n *  .then(() => {})\n *  .catch((error) => {})\n */\nvar getFreezeChannel = function () {\n  return function (channel) {\n    return new Promise(function (resolve, reject) {\n      if (!(channel.freeze && typeof (channel === null || channel === void 0 ? void 0 : channel.freeze) === 'function')) {\n        reject(new Error('Not found the function \"freeze\"'));\n      }\n      channel.freeze().then(function () {\n        resolve();\n        // Add pubSub process\n        /**\n         * consider divide the logic to\n         * _freezeGroupChannel and _freezeOpenChannel\n         */\n      }).catch(reject);\n    });\n  };\n};\n/**\n * const unfreezeChannel = selectors.getUnfreezeChannel(currentChannel);\n * unfreezeChannel()\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nvar getUnfreezeChannel = function () {\n  return function (channel) {\n    return new Promise(function (resolve, reject) {\n      if (!(channel.unfreeze && typeof (channel === null || channel === void 0 ? void 0 : channel.unfreeze) === 'function')) {\n        reject(new Error('Not found the function \"unfreeze\"'));\n      }\n      channel.unfreeze().then(function () {\n        resolve();\n        // Add pubSub process\n        /**\n         * consider divide the logic to\n         * _unfreezeGroupChannel and _unfreezeOpenChannel\n         */\n      }).catch(reject);\n    });\n  };\n};\n// 4. Message\nvar UikitMessageHandler = /** @class */function () {\n  function UikitMessageHandler() {\n    this._onPending = noop;\n    this._onFailed = noop;\n    this._onSucceeded = noop;\n  }\n  UikitMessageHandler.prototype.triggerPending = function (message) {\n    this._onPending(message);\n  };\n  UikitMessageHandler.prototype.triggerFailed = function (error, message) {\n    this._onFailed(error, (message === null || message === void 0 ? void 0 : message.isResendable) ? message : null);\n  };\n  UikitMessageHandler.prototype.triggerSucceeded = function (message) {\n    this._onSucceeded(message);\n  };\n  UikitMessageHandler.prototype.onPending = function (handler) {\n    if (typeof handler === 'function') {\n      this._onPending = handler;\n    }\n    return this;\n  };\n  UikitMessageHandler.prototype.onFailed = function (handler) {\n    if (typeof handler === 'function') {\n      this._onFailed = handler;\n    }\n    return this;\n  };\n  UikitMessageHandler.prototype.onSucceeded = function (handler) {\n    if (typeof handler === 'function') {\n      this._onSucceeded = handler;\n    }\n    return this;\n  };\n  return UikitMessageHandler;\n}();\n/**\n * const sendUserMessage = selectors.getSendUserMessage(state);\n * sendUserMessage(\n *  channel: GroupChannel | OpenChannel,\n *  params: UserMessageCreateParams,\n * )\n *  .onPending((message) => {})\n *  .onFailed((error, message) => {})\n *  .onSucceeded((message) => {})\n */\nvar getSendUserMessage = function (state, publishingModules) {\n  if (publishingModules === void 0) {\n    publishingModules = [];\n  }\n  return function (channel, params) {\n    var handler = new UikitMessageHandler();\n    var pubSub = getPubSub(state);\n    channel.sendUserMessage(params).onFailed(function (error, message) {\n      pubSub.publish(pubSubTopics.SEND_MESSAGE_FAILED, {\n        error: error,\n        message: message,\n        channel: channel,\n        publishingModules: publishingModules\n      });\n      handler.triggerFailed(error, message);\n    }).onPending(function (message) {\n      pubSub.publish(pubSubTopics.SEND_MESSAGE_START, {\n        message: message,\n        channel: channel,\n        publishingModules: publishingModules\n      });\n      handler.triggerPending(message);\n    }).onSucceeded(function (message) {\n      pubSub.publish(pubSubTopics.SEND_USER_MESSAGE, {\n        message: message,\n        channel: channel,\n        publishingModules: publishingModules\n      });\n      handler.triggerSucceeded(message);\n    });\n    return handler;\n  };\n};\n/**\n * const sendFileMessage = selectors.getSendFileMessage(state);\n * sendFileMessage(\n *  channel: GroupChannel | OpenChannel,\n *  params: FileMessageCreateParams,\n * )\n *  .onPending((message) => {})\n *  .onFailed((error, message) => {})\n *  .onSucceeded((message) => {})\n */\nvar getSendFileMessage = function (state, publishingModules) {\n  if (publishingModules === void 0) {\n    publishingModules = [];\n  }\n  return function (channel, params) {\n    var handler = new UikitMessageHandler();\n    var pubSub = getPubSub(state);\n    channel.sendFileMessage(params).onFailed(function (error, message) {\n      pubSub.publish(pubSubTopics.SEND_MESSAGE_FAILED, {\n        error: error,\n        message: message,\n        channel: channel,\n        publishingModules: publishingModules\n      });\n      handler.triggerFailed(error, message);\n    }).onPending(function (message) {\n      pubSub.publish(pubSubTopics.SEND_MESSAGE_START, {\n        message: message,\n        channel: channel,\n        publishingModules: publishingModules\n      });\n      handler.triggerPending(message);\n    }).onSucceeded(function (message) {\n      pubSub.publish(pubSubTopics.SEND_FILE_MESSAGE, {\n        message: message,\n        channel: channel,\n        publishingModules: publishingModules\n      });\n      handler.triggerSucceeded(message);\n    });\n    return handler;\n  };\n};\n/**\n * const updateUserMessage = selectors.getUpdateUserMessage(state);\n * updateUserMessage(\n *  channel: GroupChannel | OpenChannel,\n *  messageId: number,\n *  messageParams: UserMessageUpdateParams,\n * )\n *  .then((message) => {})\n *  .catch((error) => {})\n */\nvar getUpdateUserMessage = function (state, publishingModules) {\n  if (publishingModules === void 0) {\n    publishingModules = [];\n  }\n  return function (channel, messageId, params) {\n    return new Promise(function (resolve, reject) {\n      var pubSub = getPubSub(state);\n      channel.updateUserMessage(messageId, params).then(function (message) {\n        pubSub.publish(pubSubTopics.UPDATE_USER_MESSAGE, {\n          message: message,\n          channel: channel,\n          fromSelector: true,\n          publishingModules: publishingModules\n        });\n        resolve(message);\n      }).catch(reject);\n    });\n  };\n};\n// TODO: We will provie this function in the future\n/**\n * const updateFileMessage = selectors.getUpdateFileMessage(state);\n * updateFileMessage(\n *  channel: GroupChannel | OpenChannel,\n *  messageId: number,\n *  params: FileMessageUpdateParams,\n * )\n *  .then((message) => {})\n *  .catch((error) => {})\n */\n// const getUpdateFileMessage = (state: SendBirdState) => (\n//   (channel: GroupChannel | OpenChannel, messageId: number, params: FileMessageUpdateParams) => (\n//     new Promise((resolve, reject) => {\n//       const pubSub = getPubSub(state);\n//       channel.updateFileMessage(messageId, params)\n//         .then((message) => {\n//           pubSub.publish(\n//             topics.UPDATE_USER_MESSAGE,\n//             { message, channel, fromSelector: true },\n//           );\n//           resolve(message);\n//         })\n//         .catch(reject);\n//     })\n//   )\n// );\n/**\n * const deleteMessage = selectors.getDeleteMessage(state);\n * deleteMessage(\n *  channel: GroupChannel | OpenChannel,\n *  message: SendableMessage,\n * )\n *  .then((deletedMessage) => {})\n *  .catch((error) => {})\n */\nvar getDeleteMessage = function (state) {\n  return function (channel, message) {\n    return new Promise(function (resolve, reject) {\n      var pubSub = getPubSub(state);\n      var messageId = message.messageId;\n      channel.deleteMessage(message).then(function () {\n        pubSub.publish(pubSubTopics.DELETE_MESSAGE, {\n          messageId: messageId,\n          channel: channel\n        });\n        resolve(message);\n      }).catch(reject);\n    });\n  };\n};\n/**\n * const resendUserMessage = selectors.getResendUserMessage(state);\n * resendUserMessage(\n *  channel: GroupChannel | OpenChannel,\n *  failedMessage: UserMessage,\n * )\n *  .then(() => {})\n *  .catch((error) => {})\n */\nvar getResendUserMessage = function (state, publishingModules) {\n  if (publishingModules === void 0) {\n    publishingModules = [];\n  }\n  return function (channel, failedMessage) {\n    return new Promise(function (resolve, reject) {\n      var pubSub = getPubSub(state);\n      channel.resendUserMessage(failedMessage).then(function (message) {\n        pubSub.publish(pubSubTopics.SEND_USER_MESSAGE, {\n          message: message,\n          channel: channel,\n          publishingModules: publishingModules\n        });\n        resolve(message);\n      }).catch(reject);\n    });\n  };\n};\n/**\n * const resendFileMessage = selectors.getResendFileMessage(state);\n * resendFileMessage(\n *  channel: GroupChannel | OpenChannel,\n *  failedMessage: FileMessage,\n *  blob: Blob,\n * )\n *  .then(() => {})\n *  .catch((error) => {})\n */\nvar getResendFileMessage = function (state, publishingModules) {\n  if (publishingModules === void 0) {\n    publishingModules = [];\n  }\n  return function (channel, failedMessage, blob) {\n    return new Promise(function (resolve, reject) {\n      var pubSub = getPubSub(state);\n      channel.resendFileMessage(failedMessage, blob).then(function (message) {\n        pubSub.publish(pubSubTopics.SEND_FILE_MESSAGE, {\n          message: message,\n          channel: channel,\n          publishingModules: publishingModules\n        });\n        resolve(message);\n      }).catch(reject);\n    });\n  };\n};\nvar sendbirdSelectors = {\n  getSdk: getSdk,\n  getPubSub: getPubSub,\n  getConnect: getConnect,\n  getDisconnect: getDisconnect,\n  getUpdateUserInfo: getUpdateUserInfo,\n  getCreateGroupChannel: getCreateGroupChannel,\n  getCreateOpenChannel: getCreateOpenChannel,\n  getGetGroupChannel: getGetGroupChannel,\n  getGetOpenChannel: getGetOpenChannel,\n  getLeaveGroupChannel: getLeaveGroupChannel,\n  getEnterOpenChannel: getEnterOpenChannel,\n  getExitOpenChannel: getExitOpenChannel,\n  getFreezeChannel: getFreezeChannel,\n  getUnfreezeChannel: getUnfreezeChannel,\n  getSendUserMessage: getSendUserMessage,\n  getSendFileMessage: getSendFileMessage,\n  getUpdateUserMessage: getUpdateUserMessage,\n  getDeleteMessage: getDeleteMessage,\n  getResendUserMessage: getResendUserMessage,\n  getResendFileMessage: getResendFileMessage\n};\nexport { UikitMessageHandler, sendbirdSelectors as default, getConnect, getCreateGroupChannel, getCreateOpenChannel, getDeleteMessage, getDisconnect, getEnterOpenChannel, getExitOpenChannel, getFreezeChannel, getGetGroupChannel, getGetOpenChannel, getLeaveGroupChannel, getPubSub, getResendFileMessage, getResendUserMessage, getSdk, getSendFileMessage, getSendUserMessage, getUnfreezeChannel, getUpdateUserInfo, getUpdateUserMessage };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { p as pubSubTopics } from './chunks/bundle-b6TpX_JP.js';\nimport { n as noop } from './chunks/bundle-BgwzpLeQ.js';\n\n/**\n * 1. UIKit Instances\n *    a. getSdk\n *    b. getPubSub\n * 2. Chat & Connection\n *    a. getConnect\n *    b. getDisconnect\n *    c. getUpdateUserInfo\n * 3. Channel\n *    a. getCreateGroupChannel\n *    b. getCreateOpenChannel\n *    c. getGetGroupChannel\n *    d. getGetOpenChannel\n *    e. getLeaveGroupChannel\n *    f. getEnterOpenChannel\n *    g. getExitOpenChannel\n *    h. getFreezeChannel\n *    i. getUnfreezeChannel\n * 4. Message\n *    a. getSendUserMessage\n *    b. getSendFileMessage\n *    c. getUpdateUserMessage\n *    d. x - getUpdateFileMessage\n *    e. getDeleteMessage\n *    f. getResendUserMessage\n *    g. getResendFileMessage\n */\n/**\n * import useSendbirdStateContext from '@sendbird-uikit/useSendbirdStateContext'\n * import selectors from '@sendbird-uikit/send'\n * const state = useSendbirdStateContext();\n */\n// 1. UIKit Instances\n/**\n * const sdk = selectors.getSdk(state);\n */\nvar getSdk = function (state) {\n    var _a = state.stores, stores = _a === void 0 ? {} : _a;\n    var _b = stores.sdkStore, sdkStore = _b === void 0 ? {} : _b;\n    var sdk = sdkStore.sdk;\n    return sdk;\n};\n/**\n * const pubSub = selectors.getPubSub(state);\n */\nvar getPubSub = function (state) {\n    var _a = state.config, config = _a === void 0 ? {} : _a;\n    var pubSub = config.pubSub;\n    return pubSub;\n};\n// 2. Chat & Connection\n/**\n * const connect = selectors.getConnect(state);\n * connect('user-id-sendbirdian', 'access-token-0000')\n *  .then((user) => {})\n *  .catch((error) => {})\n */\nvar getConnect = function (state) { return (function (userId, accessToken) { return (new Promise(function (resolve, reject) {\n    var sdk = getSdk(state);\n    if (!sdk) {\n        reject(new Error('Sdk not found'));\n    }\n    if (!((sdk === null || sdk === void 0 ? void 0 : sdk.connect) && typeof sdk.connect === 'function')) {\n        reject(new Error('Not found the function \"connect'));\n    }\n    if (!accessToken) {\n        sdk.connect(userId)\n            .then(function (res) { return resolve(res); })\n            .catch(function (err) { return reject(err); });\n    }\n    else {\n        sdk.connect(userId, accessToken)\n            .then(function (res) { return resolve(res); })\n            .catch(function (err) { return reject(err); });\n    }\n})); }); };\n/**\n * const disconnect = selectors.getDisconnect(state);\n * disconnect()\n *  .then(() => {})\n *  .catch((error) => {})\n */\nvar getDisconnect = function (state) { return (function () { return (new Promise(function (resolve, reject) {\n    var sdk = getSdk(state);\n    if (!sdk) {\n        reject(new Error('Sdk not found'));\n    }\n    if (!(sdk.disconnect && typeof sdk.disconnect === 'function')) {\n        reject(new Error('Not found the function \"disconnect'));\n    }\n    sdk.disconnect()\n        .then(function (res) { return resolve(res); })\n        .catch(function (err) { return reject(err); });\n})); }); };\n/**\n * const updateUserInfo = selectors.getUpdateUserInfo(state);\n * updateUserInfo('new-nickname', 'new-profile-url')\n *  .then((user) => {})\n *  .catch((error) => {})\n */\nvar getUpdateUserInfo = function (state) { return (function (nickname, profileUrl) { return (new Promise(function (resolve, reject) {\n    var sdk = getSdk(state);\n    if (!sdk) {\n        reject(new Error('Sdk not found'));\n    }\n    if (!(sdk.updateCurrentUserInfo && typeof sdk.updateCurrentUserInfo === 'function')) {\n        reject(new Error('Not found the function \"updateCurrentUserInfo\"'));\n    }\n    var userParams = { nickname: nickname };\n    if (profileUrl) {\n        userParams.profileUrl = profileUrl;\n    }\n    sdk.updateCurrentUserInfo(userParams)\n        .then(function (res) { return resolve(res); })\n        .catch(function (err) { return reject(err); });\n})); }); };\n// 3. Channel\n/**\n * const createGroupChannel = selectors.getCreateGroupChannel(state);\n * createGroupChannel(channelParams: GroupChannelCreateParams)\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nvar getCreateGroupChannel = function (state) { return (function (params) { return (new Promise(function (resolve, reject) {\n    var sdk = getSdk(state);\n    var pubSub = getPubSub(state);\n    if (!sdk) {\n        reject(new Error('Sdk not found'));\n    }\n    if (!sdk.groupChannel) {\n        reject(new Error('Not found GroupChannelModule'));\n    }\n    if (!(sdk.groupChannel.createChannel && typeof sdk.groupChannel.createChannel === 'function')) {\n        reject(new Error('Not found the function \"createChannel\"'));\n    }\n    sdk.groupChannel.createChannel(params)\n        .then(function (channel) {\n        resolve(channel);\n        pubSub.publish(pubSubTopics.CREATE_CHANNEL, { channel: channel });\n    })\n        .catch(reject);\n})); }); };\n/**\n * const createOpenChannel = selectors.getCreateOpenChannel(state);\n * createOpenChannel(channelParams: OpenChannelCreateParams)\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nvar getCreateOpenChannel = function (state) { return (function (params) { return (new Promise(function (resolve, reject) {\n    var sdk = getSdk(state);\n    // const pubSub = getPubSub(state);\n    if (!sdk) {\n        reject(new Error('Sdk not found'));\n    }\n    if (!sdk.openChannel) {\n        reject(new Error('Not found OpenChannelModule'));\n    }\n    if (!(sdk.openChannel.createChannel && typeof sdk.openChannel.createChannel === 'function')) {\n        reject(new Error('Not found the function \"createChannel\"'));\n    }\n    sdk.openChannel.createChannel(params)\n        .then(function (channel) {\n        resolve(channel);\n        // Consider pubSub process\n    })\n        .catch(reject);\n})); }); };\n/**\n * const getGroupChannel = selectors.getGetGroupChannel(state);\n * getGroupChannel('channel-url-1234', isSelected)\n *  .then((channel) => {\n *    // groupChannel = channel;\n *    // or\n *    // setCurrentChannel(channel);\n *  })\n *  .catch((error) => {})\n */\nvar getGetGroupChannel = function (state) { return (function (channelUrl) { return (new Promise(function (resolve, reject) {\n    var sdk = getSdk(state);\n    // const pubSub = getPubSub(state);\n    if (!sdk) {\n        reject(new Error('Sdk not found'));\n    }\n    if (!sdk.groupChannel) {\n        reject(new Error('Not found GroupChannelModule'));\n    }\n    if (!(sdk.groupChannel.getChannel && typeof sdk.groupChannel.getChannel === 'function')) {\n        reject(new Error('Not found the function \"getChannel\"'));\n    }\n    sdk.groupChannel.getChannel(channelUrl)\n        .then(function (channel) {\n        resolve(channel);\n        // Add pubSub with isSelected\n    })\n        .catch(reject);\n})); }); };\n/**\n * const getOpenChannel = selectors.getGetOpenChannel(state);\n * getOpenChannel('channel-url-12345')\n *  .then((channel) => {\n *    // openChannel = channel;\n *    // or\n *    // setCurrentChannel(channel);\n *  })\n *  .catch((error) => {})\n */\nvar getGetOpenChannel = function (state) { return (function (channelUrl) { return (new Promise(function (resolve, reject) {\n    var sdk = getSdk(state);\n    // const pubSub = getPubSub(state);\n    if (!sdk) {\n        reject(new Error('Sdk not found'));\n    }\n    if (!sdk.openChannel) {\n        reject(new Error('Not found OpenChannelModule'));\n    }\n    if (!(sdk.openChannel.getChannel && typeof sdk.openChannel.getChannel === 'function')) {\n        reject(new Error('Not found the function \"getChannel\"'));\n    }\n    sdk.openChannel.getChannel(channelUrl)\n        .then(function (channel) {\n        resolve(channel);\n        // Add pubSub with isSelected\n    })\n        .catch(reject);\n})); }); };\n/**\n * const leaveChannel = selectors.getLeaveGroupChannel(state);\n * leaveChannel('group-channel-url')\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nvar getLeaveGroupChannel = function (state) { return (function (channelUrl) { return (new Promise(function (resolve, reject) {\n    var _a;\n    (_a = getGetGroupChannel(state)) === null || _a === void 0 ? void 0 : _a(channelUrl).then(function (channel) {\n        channel.leave()\n            .then(function () {\n            resolve();\n            // Add pubSub process\n        })\n            .catch(reject);\n    }).catch(reject);\n})); }); };\n/**\n * const enterChannel = selectors.getEnterOpenChannel(state);\n * enterChannel('open-channel-url')\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nvar getEnterOpenChannel = function (state) { return (function (channelUrl) { return (new Promise(function (resolve, reject) {\n    var _a;\n    (_a = getGetOpenChannel(state)) === null || _a === void 0 ? void 0 : _a(channelUrl).then(function (channel) {\n        channel.enter()\n            .then(function () {\n            resolve(channel);\n            // Add pubSub process\n        })\n            .catch(reject);\n    }).catch(reject);\n})); }); };\n/**\n * const exitChannel = selectors.getExitOpenChannel(state);\n * exitChannel('open-channel-url')\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nvar getExitOpenChannel = function (state) { return (function (channelUrl) { return (new Promise(function (resolve, reject) {\n    var _a;\n    (_a = getGetOpenChannel(state)) === null || _a === void 0 ? void 0 : _a(channelUrl).then(function (channel) {\n        channel.exit()\n            .then(function () {\n            resolve(channel);\n            // Add pubSub process\n        })\n            .catch(reject);\n    }).catch(reject);\n})); }); };\n/**\n * const freezeChannel = selectors.getFreezeChannel(currentChannel);\n * freezeChannel()\n *  .then(() => {})\n *  .catch((error) => {})\n */\nvar getFreezeChannel = function () { return (function (channel) { return (new Promise(function (resolve, reject) {\n    if (!(channel.freeze && typeof (channel === null || channel === void 0 ? void 0 : channel.freeze) === 'function')) {\n        reject(new Error('Not found the function \"freeze\"'));\n    }\n    channel.freeze()\n        .then(function () {\n        resolve();\n        // Add pubSub process\n        /**\n         * consider divide the logic to\n         * _freezeGroupChannel and _freezeOpenChannel\n         */\n    })\n        .catch(reject);\n})); }); };\n/**\n * const unfreezeChannel = selectors.getUnfreezeChannel(currentChannel);\n * unfreezeChannel()\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nvar getUnfreezeChannel = function () { return (function (channel) { return (new Promise(function (resolve, reject) {\n    if (!(channel.unfreeze && typeof (channel === null || channel === void 0 ? void 0 : channel.unfreeze) === 'function')) {\n        reject(new Error('Not found the function \"unfreeze\"'));\n    }\n    channel.unfreeze()\n        .then(function () {\n        resolve();\n        // Add pubSub process\n        /**\n         * consider divide the logic to\n         * _unfreezeGroupChannel and _unfreezeOpenChannel\n         */\n    })\n        .catch(reject);\n})); }); };\n// 4. Message\nvar UikitMessageHandler = /** @class */ (function () {\n    function UikitMessageHandler() {\n        this._onPending = noop;\n        this._onFailed = noop;\n        this._onSucceeded = noop;\n    }\n    UikitMessageHandler.prototype.triggerPending = function (message) {\n        this._onPending(message);\n    };\n    UikitMessageHandler.prototype.triggerFailed = function (error, message) {\n        this._onFailed(error, (message === null || message === void 0 ? void 0 : message.isResendable) ? message : null);\n    };\n    UikitMessageHandler.prototype.triggerSucceeded = function (message) {\n        this._onSucceeded(message);\n    };\n    UikitMessageHandler.prototype.onPending = function (handler) {\n        if (typeof handler === 'function') {\n            this._onPending = handler;\n        }\n        return this;\n    };\n    UikitMessageHandler.prototype.onFailed = function (handler) {\n        if (typeof handler === 'function') {\n            this._onFailed = handler;\n        }\n        return this;\n    };\n    UikitMessageHandler.prototype.onSucceeded = function (handler) {\n        if (typeof handler === 'function') {\n            this._onSucceeded = handler;\n        }\n        return this;\n    };\n    return UikitMessageHandler;\n}());\n/**\n * const sendUserMessage = selectors.getSendUserMessage(state);\n * sendUserMessage(\n *  channel: GroupChannel | OpenChannel,\n *  params: UserMessageCreateParams,\n * )\n *  .onPending((message) => {})\n *  .onFailed((error, message) => {})\n *  .onSucceeded((message) => {})\n */\nvar getSendUserMessage = function (state, publishingModules) {\n    if (publishingModules === void 0) { publishingModules = []; }\n    return (function (channel, params) {\n        var handler = new UikitMessageHandler();\n        var pubSub = getPubSub(state);\n        channel.sendUserMessage(params)\n            .onFailed(function (error, message) {\n            pubSub.publish(pubSubTopics.SEND_MESSAGE_FAILED, { error: error, message: message, channel: channel, publishingModules: publishingModules });\n            handler.triggerFailed(error, message);\n        })\n            .onPending(function (message) {\n            pubSub.publish(pubSubTopics.SEND_MESSAGE_START, { message: message, channel: channel, publishingModules: publishingModules });\n            handler.triggerPending(message);\n        })\n            .onSucceeded(function (message) {\n            pubSub.publish(pubSubTopics.SEND_USER_MESSAGE, { message: message, channel: channel, publishingModules: publishingModules });\n            handler.triggerSucceeded(message);\n        });\n        return handler;\n    });\n};\n/**\n * const sendFileMessage = selectors.getSendFileMessage(state);\n * sendFileMessage(\n *  channel: GroupChannel | OpenChannel,\n *  params: FileMessageCreateParams,\n * )\n *  .onPending((message) => {})\n *  .onFailed((error, message) => {})\n *  .onSucceeded((message) => {})\n */\nvar getSendFileMessage = function (state, publishingModules) {\n    if (publishingModules === void 0) { publishingModules = []; }\n    return (function (channel, params) {\n        var handler = new UikitMessageHandler();\n        var pubSub = getPubSub(state);\n        channel.sendFileMessage(params)\n            .onFailed(function (error, message) {\n            pubSub.publish(pubSubTopics.SEND_MESSAGE_FAILED, { error: error, message: message, channel: channel, publishingModules: publishingModules });\n            handler.triggerFailed(error, message);\n        })\n            .onPending(function (message) {\n            pubSub.publish(pubSubTopics.SEND_MESSAGE_START, { message: message, channel: channel, publishingModules: publishingModules });\n            handler.triggerPending(message);\n        })\n            .onSucceeded(function (message) {\n            pubSub.publish(pubSubTopics.SEND_FILE_MESSAGE, { message: message, channel: channel, publishingModules: publishingModules });\n            handler.triggerSucceeded(message);\n        });\n        return handler;\n    });\n};\n/**\n * const updateUserMessage = selectors.getUpdateUserMessage(state);\n * updateUserMessage(\n *  channel: GroupChannel | OpenChannel,\n *  messageId: number,\n *  messageParams: UserMessageUpdateParams,\n * )\n *  .then((message) => {})\n *  .catch((error) => {})\n */\nvar getUpdateUserMessage = function (state, publishingModules) {\n    if (publishingModules === void 0) { publishingModules = []; }\n    return (function (channel, messageId, params) { return (new Promise(function (resolve, reject) {\n        var pubSub = getPubSub(state);\n        channel.updateUserMessage(messageId, params)\n            .then(function (message) {\n            pubSub.publish(pubSubTopics.UPDATE_USER_MESSAGE, { message: message, channel: channel, fromSelector: true, publishingModules: publishingModules });\n            resolve(message);\n        })\n            .catch(reject);\n    })); });\n};\n// TODO: We will provie this function in the future\n/**\n * const updateFileMessage = selectors.getUpdateFileMessage(state);\n * updateFileMessage(\n *  channel: GroupChannel | OpenChannel,\n *  messageId: number,\n *  params: FileMessageUpdateParams,\n * )\n *  .then((message) => {})\n *  .catch((error) => {})\n */\n// const getUpdateFileMessage = (state: SendBirdState) => (\n//   (channel: GroupChannel | OpenChannel, messageId: number, params: FileMessageUpdateParams) => (\n//     new Promise((resolve, reject) => {\n//       const pubSub = getPubSub(state);\n//       channel.updateFileMessage(messageId, params)\n//         .then((message) => {\n//           pubSub.publish(\n//             topics.UPDATE_USER_MESSAGE,\n//             { message, channel, fromSelector: true },\n//           );\n//           resolve(message);\n//         })\n//         .catch(reject);\n//     })\n//   )\n// );\n/**\n * const deleteMessage = selectors.getDeleteMessage(state);\n * deleteMessage(\n *  channel: GroupChannel | OpenChannel,\n *  message: SendableMessage,\n * )\n *  .then((deletedMessage) => {})\n *  .catch((error) => {})\n */\nvar getDeleteMessage = function (state) { return (function (channel, message) { return (new Promise(function (resolve, reject) {\n    var pubSub = getPubSub(state);\n    var messageId = message.messageId;\n    channel.deleteMessage(message)\n        .then(function () {\n        pubSub.publish(pubSubTopics.DELETE_MESSAGE, { messageId: messageId, channel: channel });\n        resolve(message);\n    })\n        .catch(reject);\n})); }); };\n/**\n * const resendUserMessage = selectors.getResendUserMessage(state);\n * resendUserMessage(\n *  channel: GroupChannel | OpenChannel,\n *  failedMessage: UserMessage,\n * )\n *  .then(() => {})\n *  .catch((error) => {})\n */\nvar getResendUserMessage = function (state, publishingModules) {\n    if (publishingModules === void 0) { publishingModules = []; }\n    return (function (channel, failedMessage) { return (new Promise(function (resolve, reject) {\n        var pubSub = getPubSub(state);\n        channel.resendUserMessage(failedMessage)\n            .then(function (message) {\n            pubSub.publish(pubSubTopics.SEND_USER_MESSAGE, { message: message, channel: channel, publishingModules: publishingModules });\n            resolve(message);\n        })\n            .catch(reject);\n    })); });\n};\n/**\n * const resendFileMessage = selectors.getResendFileMessage(state);\n * resendFileMessage(\n *  channel: GroupChannel | OpenChannel,\n *  failedMessage: FileMessage,\n *  blob: Blob,\n * )\n *  .then(() => {})\n *  .catch((error) => {})\n */\nvar getResendFileMessage = function (state, publishingModules) {\n    if (publishingModules === void 0) { publishingModules = []; }\n    return (function (channel, failedMessage, blob) { return (new Promise(function (resolve, reject) {\n        var pubSub = getPubSub(state);\n        channel.resendFileMessage(failedMessage, blob)\n            .then(function (message) {\n            pubSub.publish(pubSubTopics.SEND_FILE_MESSAGE, { message: message, channel: channel, publishingModules: publishingModules });\n            resolve(message);\n        })\n            .catch(reject);\n    })); });\n};\nvar sendbirdSelectors = {\n    getSdk: getSdk,\n    getPubSub: getPubSub,\n    getConnect: getConnect,\n    getDisconnect: getDisconnect,\n    getUpdateUserInfo: getUpdateUserInfo,\n    getCreateGroupChannel: getCreateGroupChannel,\n    getCreateOpenChannel: getCreateOpenChannel,\n    getGetGroupChannel: getGetGroupChannel,\n    getGetOpenChannel: getGetOpenChannel,\n    getLeaveGroupChannel: getLeaveGroupChannel,\n    getEnterOpenChannel: getEnterOpenChannel,\n    getExitOpenChannel: getExitOpenChannel,\n    getFreezeChannel: getFreezeChannel,\n    getUnfreezeChannel: getUnfreezeChannel,\n    getSendUserMessage: getSendUserMessage,\n    getSendFileMessage: getSendFileMessage,\n    getUpdateUserMessage: getUpdateUserMessage,\n    getDeleteMessage: getDeleteMessage,\n    getResendUserMessage: getResendUserMessage,\n    getResendFileMessage: getResendFileMessage,\n};\n\nexport { UikitMessageHandler, sendbirdSelectors as default, getConnect, getCreateGroupChannel, getCreateOpenChannel, getDeleteMessage, getDisconnect, getEnterOpenChannel, getExitOpenChannel, getFreezeChannel, getGetGroupChannel, getGetOpenChannel, getLeaveGroupChannel, getPubSub, getResendFileMessage, getResendUserMessage, getSdk, getSendFileMessage, getSendUserMessage, getUnfreezeChannel, getUpdateUserInfo, getUpdateUserMessage };\n//# sourceMappingURL=sendbirdSelectors.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}