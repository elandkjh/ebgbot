{"ast":null,"code":"import { _ as __assign, a as __awaiter, b as __generator } from '../chunks/bundle-BQi9-O76.js';\nimport React__default, { useState, useEffect } from 'react';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { U as UserProfileProvider } from '../chunks/bundle-BrTJ5Zbd.js';\nimport { u as uuidv4 } from '../chunks/bundle-etuaqevl.js';\nimport '../withSendbird.js';\nfunction useAsyncRequest(request, options) {\n  var _this = this;\n  var _a;\n  var _b = useState({\n      loading: true,\n      response: undefined,\n      error: undefined\n    }),\n    state = _b[0],\n    setState = _b[1];\n  var updateWithRequest = function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var response_1, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            setState(function (prev) {\n              return {\n                loading: true,\n                error: undefined,\n                response: (options === null || options === void 0 ? void 0 : options.resetResponseOnRefresh) ? undefined : prev.response\n              };\n            });\n            return [4 /*yield*/, request()];\n          case 1:\n            response_1 = _a.sent();\n            if (response_1) {\n              setState(function (prev) {\n                return __assign(__assign({}, prev), {\n                  response: response_1,\n                  loading: false\n                });\n              });\n            } else {\n              setState(function (prev) {\n                return __assign(__assign({}, prev), {\n                  loading: Boolean(options === null || options === void 0 ? void 0 : options.persistLoadingIfNoResponse)\n                });\n              });\n            }\n            return [3 /*break*/, 3];\n          case 2:\n            error_1 = _a.sent();\n            setState(function (prev) {\n              return __assign(__assign({}, prev), {\n                error: error_1,\n                loading: false\n              });\n            });\n            return [3 /*break*/, 3];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  useEffect(function () {\n    updateWithRequest();\n    return function () {\n      if (request.cancel && typeof request.cancel === 'function') {\n        request.cancel();\n      }\n    };\n  }, (_a = options === null || options === void 0 ? void 0 : options.deps) !== null && _a !== void 0 ? _a : []);\n  return __assign(__assign({}, state), {\n    refresh: updateWithRequest\n  });\n}\nvar ChannelSettingsContext = React__default.createContext(null);\nvar ChannelSettingsProvider = function (_a) {\n  var children = _a.children,\n    className = _a.className,\n    channelUrl = _a.channelUrl,\n    onCloseClick = _a.onCloseClick,\n    onLeaveChannel = _a.onLeaveChannel,\n    onChannelModified = _a.onChannelModified,\n    overrideInviteUser = _a.overrideInviteUser,\n    onBeforeUpdateChannel = _a.onBeforeUpdateChannel,\n    queries = _a.queries,\n    renderUserProfile = _a.renderUserProfile,\n    disableUserProfile = _a.disableUserProfile,\n    renderUserListItem = _a.renderUserListItem;\n  var _b = useSendbirdStateContext(),\n    config = _b.config,\n    stores = _b.stores;\n  var sdkStore = stores.sdkStore;\n  var logger = config.logger,\n    onUserProfileMessage = config.onUserProfileMessage;\n  // hack to keep track of channel updates by triggering useEffect\n  var _c = useState(function () {\n      return uuidv4();\n    }),\n    channelUpdateId = _c[0],\n    setChannelUpdateId = _c[1];\n  var forceUpdateUI = function () {\n    return setChannelUpdateId(uuidv4());\n  };\n  var _d = useAsyncRequest(function () {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var error_1;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              logger.info('ChannelSettings: fetching channel');\n              if (!channelUrl) {\n                logger.warning('ChannelSettings: channel url is required');\n                return [2 /*return*/];\n              } else if (!sdkStore.initialized || !sdkStore.sdk) {\n                logger.warning('ChannelSettings: SDK is not initialized');\n                return [2 /*return*/];\n              } else if (!sdkStore.sdk.groupChannel) {\n                logger.warning('ChannelSettings: GroupChannelModule is not specified in the SDK');\n                return [2 /*return*/];\n              }\n              _a.label = 1;\n            case 1:\n              _a.trys.push([1, 3,, 4]);\n              return [4 /*yield*/, sdkStore.sdk.groupChannel.getChannel(channelUrl)];\n            case 2:\n              return [2 /*return*/, _a.sent()];\n            case 3:\n              error_1 = _a.sent();\n              logger.error('ChannelSettings: fetching channel error:', error_1);\n              throw error_1;\n            case 4:\n              return [2 /*return*/];\n          }\n        });\n      });\n    }, {\n      resetResponseOnRefresh: true,\n      persistLoadingIfNoResponse: true,\n      deps: [sdkStore.initialized, sdkStore.sdk.groupChannel]\n    }),\n    _e = _d.response,\n    channel = _e === void 0 ? null : _e,\n    loading = _d.loading,\n    error = _d.error,\n    refresh = _d.refresh;\n  useEffect(function () {\n    refresh();\n  }, [channelUrl, channelUpdateId]);\n  return React__default.createElement(ChannelSettingsContext.Provider, {\n    value: {\n      channelUrl: channelUrl,\n      onCloseClick: onCloseClick,\n      onLeaveChannel: onLeaveChannel,\n      onChannelModified: onChannelModified,\n      onBeforeUpdateChannel: onBeforeUpdateChannel,\n      queries: queries,\n      overrideInviteUser: overrideInviteUser,\n      setChannelUpdateId: setChannelUpdateId,\n      forceUpdateUI: forceUpdateUI,\n      channel: channel,\n      loading: loading,\n      invalidChannel: Boolean(error),\n      renderUserListItem: renderUserListItem\n    }\n  }, React__default.createElement(UserProfileProvider, {\n    renderUserProfile: renderUserProfile,\n    disableUserProfile: disableUserProfile !== null && disableUserProfile !== void 0 ? disableUserProfile : !config.common.enableUsingDefaultUserProfile,\n    onUserProfileMessage: onUserProfileMessage\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-channel-settings \".concat(className)\n  }, children)));\n};\nvar useChannelSettingsContext = function () {\n  var context = React__default.useContext(ChannelSettingsContext);\n  if (!context) throw new Error('ChannelSettingsContext not found. Use within the ChannelSettings module');\n  return context;\n};\nexport { ChannelSettingsProvider, useChannelSettingsContext };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { _ as __assign, a as __awaiter, b as __generator } from '../chunks/bundle-BQi9-O76.js';\nimport React__default, { useState, useEffect } from 'react';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { U as UserProfileProvider } from '../chunks/bundle-BrTJ5Zbd.js';\nimport { u as uuidv4 } from '../chunks/bundle-etuaqevl.js';\nimport '../withSendbird.js';\n\nfunction useAsyncRequest(request, options) {\n    var _this = this;\n    var _a;\n    var _b = useState({ loading: true, response: undefined, error: undefined }), state = _b[0], setState = _b[1];\n    var updateWithRequest = function () { return __awaiter(_this, void 0, void 0, function () {\n        var response_1, error_1;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    _a.trys.push([0, 2, , 3]);\n                    setState(function (prev) { return ({ loading: true, error: undefined, response: (options === null || options === void 0 ? void 0 : options.resetResponseOnRefresh) ? undefined : prev.response }); });\n                    return [4 /*yield*/, request()];\n                case 1:\n                    response_1 = _a.sent();\n                    if (response_1) {\n                        setState(function (prev) { return (__assign(__assign({}, prev), { response: response_1, loading: false })); });\n                    }\n                    else {\n                        setState(function (prev) { return (__assign(__assign({}, prev), { loading: Boolean(options === null || options === void 0 ? void 0 : options.persistLoadingIfNoResponse) })); });\n                    }\n                    return [3 /*break*/, 3];\n                case 2:\n                    error_1 = _a.sent();\n                    setState(function (prev) { return (__assign(__assign({}, prev), { error: error_1, loading: false })); });\n                    return [3 /*break*/, 3];\n                case 3: return [2 /*return*/];\n            }\n        });\n    }); };\n    useEffect(function () {\n        updateWithRequest();\n        return function () {\n            if (request.cancel && typeof request.cancel === 'function') {\n                request.cancel();\n            }\n        };\n    }, (_a = options === null || options === void 0 ? void 0 : options.deps) !== null && _a !== void 0 ? _a : []);\n    return __assign(__assign({}, state), { refresh: updateWithRequest });\n}\n\nvar ChannelSettingsContext = React__default.createContext(null);\nvar ChannelSettingsProvider = function (_a) {\n    var children = _a.children, className = _a.className, channelUrl = _a.channelUrl, onCloseClick = _a.onCloseClick, onLeaveChannel = _a.onLeaveChannel, onChannelModified = _a.onChannelModified, overrideInviteUser = _a.overrideInviteUser, onBeforeUpdateChannel = _a.onBeforeUpdateChannel, queries = _a.queries, renderUserProfile = _a.renderUserProfile, disableUserProfile = _a.disableUserProfile, renderUserListItem = _a.renderUserListItem;\n    var _b = useSendbirdStateContext(), config = _b.config, stores = _b.stores;\n    var sdkStore = stores.sdkStore;\n    var logger = config.logger, onUserProfileMessage = config.onUserProfileMessage;\n    // hack to keep track of channel updates by triggering useEffect\n    var _c = useState(function () { return uuidv4(); }), channelUpdateId = _c[0], setChannelUpdateId = _c[1];\n    var forceUpdateUI = function () { return setChannelUpdateId(uuidv4()); };\n    var _d = useAsyncRequest(function () { return __awaiter(void 0, void 0, void 0, function () {\n        var error_1;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    logger.info('ChannelSettings: fetching channel');\n                    if (!channelUrl) {\n                        logger.warning('ChannelSettings: channel url is required');\n                        return [2 /*return*/];\n                    }\n                    else if (!sdkStore.initialized || !sdkStore.sdk) {\n                        logger.warning('ChannelSettings: SDK is not initialized');\n                        return [2 /*return*/];\n                    }\n                    else if (!sdkStore.sdk.groupChannel) {\n                        logger.warning('ChannelSettings: GroupChannelModule is not specified in the SDK');\n                        return [2 /*return*/];\n                    }\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([1, 3, , 4]);\n                    return [4 /*yield*/, sdkStore.sdk.groupChannel.getChannel(channelUrl)];\n                case 2: return [2 /*return*/, _a.sent()];\n                case 3:\n                    error_1 = _a.sent();\n                    logger.error('ChannelSettings: fetching channel error:', error_1);\n                    throw error_1;\n                case 4: return [2 /*return*/];\n            }\n        });\n    }); }, {\n        resetResponseOnRefresh: true,\n        persistLoadingIfNoResponse: true,\n        deps: [sdkStore.initialized, sdkStore.sdk.groupChannel],\n    }), _e = _d.response, channel = _e === void 0 ? null : _e, loading = _d.loading, error = _d.error, refresh = _d.refresh;\n    useEffect(function () {\n        refresh();\n    }, [channelUrl, channelUpdateId]);\n    return (React__default.createElement(ChannelSettingsContext.Provider, { value: {\n            channelUrl: channelUrl,\n            onCloseClick: onCloseClick,\n            onLeaveChannel: onLeaveChannel,\n            onChannelModified: onChannelModified,\n            onBeforeUpdateChannel: onBeforeUpdateChannel,\n            queries: queries,\n            overrideInviteUser: overrideInviteUser,\n            setChannelUpdateId: setChannelUpdateId,\n            forceUpdateUI: forceUpdateUI,\n            channel: channel,\n            loading: loading,\n            invalidChannel: Boolean(error),\n            renderUserListItem: renderUserListItem,\n        } },\n        React__default.createElement(UserProfileProvider, { renderUserProfile: renderUserProfile, disableUserProfile: disableUserProfile !== null && disableUserProfile !== void 0 ? disableUserProfile : !config.common.enableUsingDefaultUserProfile, onUserProfileMessage: onUserProfileMessage },\n            React__default.createElement(\"div\", { className: \"sendbird-channel-settings \".concat(className) }, children))));\n};\nvar useChannelSettingsContext = function () {\n    var context = React__default.useContext(ChannelSettingsContext);\n    if (!context)\n        throw new Error('ChannelSettingsContext not found. Use within the ChannelSettings module');\n    return context;\n};\n\nexport { ChannelSettingsProvider, useChannelSettingsContext };\n//# sourceMappingURL=context.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}