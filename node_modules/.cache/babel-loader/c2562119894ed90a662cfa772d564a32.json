{"ast":null,"code":"import { isSameType } from './validators.js';\n/**\n * Merges values from the subset object into the target object.\n *\n * @param target - The target object to merge into.\n * @param subset - The subset object from which values are merged into the target.\n * @returns A new object resulting from the merge operation.\n */\nexport function mergeObject(target, subset) {\n  // copy target to prevent mutation\n  const object = Object.assign({}, target);\n  Object.keys(subset).forEach(key => {\n    if (Object.prototype.hasOwnProperty.call(object, key) && isSameType(object[key], subset[key])) {\n      if (typeof subset[key] === 'object' && !Array.isArray(subset[key])) {\n        // Recursively call getConfigsByPriority only when the value of the key is Object\n        object[key] = mergeObject(object[key], subset[key]);\n      } else {\n        object[key] = subset[key];\n      }\n    }\n  });\n  return object;\n}","map":{"version":3,"names":["isSameType","mergeObject","target","subset","object","Object","assign","keys","forEach","key","prototype","hasOwnProperty","call","Array","isArray"],"sources":["D:/ebgbot/node_modules/@sendbird/uikit-react/node_modules/@sendbird/uikit-tools/dist/esm/utils/mergeObject.js"],"sourcesContent":["import { isSameType } from './validators.js';\n/**\n * Merges values from the subset object into the target object.\n *\n * @param target - The target object to merge into.\n * @param subset - The subset object from which values are merged into the target.\n * @returns A new object resulting from the merge operation.\n */\nexport function mergeObject(target, subset) {\n    // copy target to prevent mutation\n    const object = Object.assign({}, target);\n    Object.keys(subset).forEach((key) => {\n        if (Object.prototype.hasOwnProperty.call(object, key) && isSameType(object[key], subset[key])) {\n            if (typeof subset[key] === 'object' && !Array.isArray(subset[key])) {\n                // Recursively call getConfigsByPriority only when the value of the key is Object\n                object[key] = mergeObject(object[key], subset[key]);\n            }\n            else {\n                object[key] = subset[key];\n            }\n        }\n    });\n    return object;\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,MAAM,EAAEC,MAAM,EAAE;EACxC;EACA,MAAMC,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEJ,MAAM,CAAC;EACxCG,MAAM,CAACE,IAAI,CAACJ,MAAM,CAAC,CAACK,OAAO,CAAEC,GAAG,IAAK;IACjC,IAAIJ,MAAM,CAACK,SAAS,CAACC,cAAc,CAACC,IAAI,CAACR,MAAM,EAAEK,GAAG,CAAC,IAAIT,UAAU,CAACI,MAAM,CAACK,GAAG,CAAC,EAAEN,MAAM,CAACM,GAAG,CAAC,CAAC,EAAE;MAC3F,IAAI,OAAON,MAAM,CAACM,GAAG,CAAC,KAAK,QAAQ,IAAI,CAACI,KAAK,CAACC,OAAO,CAACX,MAAM,CAACM,GAAG,CAAC,CAAC,EAAE;QAChE;QACAL,MAAM,CAACK,GAAG,CAAC,GAAGR,WAAW,CAACG,MAAM,CAACK,GAAG,CAAC,EAAEN,MAAM,CAACM,GAAG,CAAC,CAAC;MACvD,CAAC,MACI;QACDL,MAAM,CAACK,GAAG,CAAC,GAAGN,MAAM,CAACM,GAAG,CAAC;MAC7B;IACJ;EACJ,CAAC,CAAC;EACF,OAAOL,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module"}