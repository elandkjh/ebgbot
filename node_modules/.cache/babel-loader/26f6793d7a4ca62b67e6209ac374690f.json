{"ast":null,"code":"import { a as __awaiter, b as __generator } from './bundle-BQi9-O76.js';\nimport { p as pxToNumber } from './bundle-DXRRGizV.js';\nvar compressImage = function (_a) {\n  var imageFile = _a.imageFile,\n    compressionRate = _a.compressionRate,\n    resizingWidth = _a.resizingWidth,\n    resizingHeight = _a.resizingHeight,\n    outputFormat = _a.outputFormat;\n  var image = document.createElement('img');\n  return new Promise(function (resolve, reject) {\n    image.src = URL.createObjectURL(imageFile);\n    image.onerror = reject;\n    image.onload = function () {\n      URL.revokeObjectURL(image.src);\n      var canvas = document.createElement('canvas');\n      var originWidth = image.width;\n      var originHeight = image.height;\n      var targetResizingWidth = !resizingWidth || resizingWidth > originWidth ? originWidth : resizingWidth;\n      var targetResizingHeight = !resizingHeight || resizingHeight > originHeight ? originHeight : resizingHeight;\n      var widthRatio = originWidth / targetResizingWidth;\n      var heightRatio = originHeight / targetResizingHeight;\n      /**\n       * Set the target resizing values again with the calculated ratios\n       * to use the impactful value, so the original images' ratio won't be broken.\n       */\n      if (widthRatio > heightRatio) {\n        targetResizingHeight = originHeight / (resizingWidth ? widthRatio : 1);\n      } else if (heightRatio > widthRatio) {\n        targetResizingWidth = originWidth / (resizingHeight ? heightRatio : 1);\n      }\n      canvas.width = targetResizingWidth;\n      canvas.height = targetResizingHeight;\n      var ctx = canvas.getContext('2d');\n      if (!ctx) {\n        reject(new Error('Failed to get canvas 2d context'));\n        return;\n      }\n      ctx.drawImage(image, 0, 0, targetResizingWidth, targetResizingHeight);\n      // Change the file.name & file.type for converting file type\n      var targetFileType = outputFormat === 'preserve' ? imageFile.type : \"image/\".concat(outputFormat);\n      var targetSubtype = targetFileType.split('/').pop();\n      var dotIndex = imageFile.name.lastIndexOf('.');\n      // targetName = `fileName.targetSubtype`\n      var targetName = \"\".concat(dotIndex === -1 ? imageFile.name : imageFile.name.substring(0, dotIndex), \".\").concat(targetSubtype);\n      ctx.canvas.toBlob(function (blob) {\n        if (blob) {\n          var file = new File([blob], targetName, {\n            type: targetFileType\n          });\n          resolve(file);\n        } else {\n          reject(new Error('Failed to compress image'));\n        }\n      }, targetFileType, compressionRate);\n    };\n  });\n};\nvar compressImages = function (_a) {\n  return __awaiter(void 0, [_a], void 0, function (_b) {\n    var compressionRate, _c, outputFormat, resizingWidth, resizingHeight, result;\n    var files = _b.files,\n      logger = _b.logger,\n      imageCompression = _b.imageCompression;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          compressionRate = imageCompression.compressionRate, _c = imageCompression.outputFormat, outputFormat = _c === void 0 ? 'preserve' : _c;\n          resizingWidth = imageCompression.resizingWidth ? pxToNumber(imageCompression.resizingWidth) : undefined;\n          resizingHeight = imageCompression.resizingHeight ? pxToNumber(imageCompression.resizingHeight) : undefined;\n          result = {\n            failedIndexes: [],\n            compressedFiles: []\n          };\n          if (!(Array.isArray(files) && files.length > 0)) {\n            logger === null || logger === void 0 ? void 0 : logger.warning('utils - compressImages: There are no files.', files);\n            return [2 /*return*/, result];\n          }\n          if (!compressionRate || compressionRate < 0 || 1 < compressionRate) {\n            logger === null || logger === void 0 ? void 0 : logger.warning('utils - compressImages: The compressionRate is not acceptable.', compressionRate);\n            return [2 /*return*/, result];\n          }\n          return [4 /*yield*/, Promise.all(files.map(function (file, index) {\n            return __awaiter(void 0, void 0, void 0, function () {\n              var compressedImage, err_1;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (!(file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg')) {\n                      logger === null || logger === void 0 ? void 0 : logger.warning('utils - compressImages: The fileType is not compressible.', {\n                        file: file,\n                        index: index\n                      });\n                      result.failedIndexes.push(index);\n                      result.compressedFiles.push(file);\n                      return [2 /*return*/];\n                    }\n                    _a.label = 1;\n                  case 1:\n                    _a.trys.push([1, 3,, 4]);\n                    return [4 /*yield*/, compressImage({\n                      imageFile: file,\n                      compressionRate: compressionRate,\n                      resizingWidth: resizingWidth,\n                      resizingHeight: resizingHeight,\n                      outputFormat: outputFormat\n                    })];\n                  case 2:\n                    compressedImage = _a.sent();\n                    result.compressedFiles.push(compressedImage);\n                    return [3 /*break*/, 4];\n                  case 3:\n                    err_1 = _a.sent();\n                    result.compressedFiles.push(file);\n                    result.failedIndexes.push(index);\n                    logger === null || logger === void 0 ? void 0 : logger.warning('utils - compressImages: Failed to compress image file', {\n                      file: file,\n                      err: err_1\n                    });\n                    return [3 /*break*/, 4];\n                  case 4:\n                    return [2 /*return*/];\n                }\n              });\n            });\n          }))];\n        case 1:\n          _d.sent();\n          logger === null || logger === void 0 ? void 0 : logger.info('utils - compressImages: Finished compressing images', result);\n          return [2 /*return*/, result];\n      }\n    });\n  });\n};\nexport { compressImages as c };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { a as __awaiter, b as __generator } from './bundle-BQi9-O76.js';\nimport { p as pxToNumber } from './bundle-DXRRGizV.js';\n\nvar compressImage = function (_a) {\n    var imageFile = _a.imageFile, compressionRate = _a.compressionRate, resizingWidth = _a.resizingWidth, resizingHeight = _a.resizingHeight, outputFormat = _a.outputFormat;\n    var image = document.createElement('img');\n    return new Promise(function (resolve, reject) {\n        image.src = URL.createObjectURL(imageFile);\n        image.onerror = reject;\n        image.onload = function () {\n            URL.revokeObjectURL(image.src);\n            var canvas = document.createElement('canvas');\n            var originWidth = image.width;\n            var originHeight = image.height;\n            var targetResizingWidth = (!resizingWidth || resizingWidth > originWidth) ? originWidth : resizingWidth;\n            var targetResizingHeight = (!resizingHeight || resizingHeight > originHeight) ? originHeight : resizingHeight;\n            var widthRatio = originWidth / targetResizingWidth;\n            var heightRatio = originHeight / targetResizingHeight;\n            /**\n             * Set the target resizing values again with the calculated ratios\n             * to use the impactful value, so the original images' ratio won't be broken.\n             */\n            if (widthRatio > heightRatio) {\n                targetResizingHeight = originHeight / (resizingWidth ? widthRatio : 1);\n            }\n            else if (heightRatio > widthRatio) {\n                targetResizingWidth = originWidth / (resizingHeight ? heightRatio : 1);\n            }\n            canvas.width = targetResizingWidth;\n            canvas.height = targetResizingHeight;\n            var ctx = canvas.getContext('2d');\n            if (!ctx) {\n                reject(new Error('Failed to get canvas 2d context'));\n                return;\n            }\n            ctx.drawImage(image, 0, 0, targetResizingWidth, targetResizingHeight);\n            // Change the file.name & file.type for converting file type\n            var targetFileType = outputFormat === 'preserve' ? imageFile.type : \"image/\".concat(outputFormat);\n            var targetSubtype = targetFileType.split('/').pop();\n            var dotIndex = imageFile.name.lastIndexOf('.');\n            // targetName = `fileName.targetSubtype`\n            var targetName = \"\".concat(dotIndex === -1 ? imageFile.name : imageFile.name.substring(0, dotIndex), \".\").concat(targetSubtype);\n            ctx.canvas.toBlob(function (blob) {\n                if (blob) {\n                    var file = new File([blob], targetName, { type: targetFileType });\n                    resolve(file);\n                }\n                else {\n                    reject(new Error('Failed to compress image'));\n                }\n            }, targetFileType, compressionRate);\n        };\n    });\n};\nvar compressImages = function (_a) { return __awaiter(void 0, [_a], void 0, function (_b) {\n    var compressionRate, _c, outputFormat, resizingWidth, resizingHeight, result;\n    var files = _b.files, logger = _b.logger, imageCompression = _b.imageCompression;\n    return __generator(this, function (_d) {\n        switch (_d.label) {\n            case 0:\n                compressionRate = imageCompression.compressionRate, _c = imageCompression.outputFormat, outputFormat = _c === void 0 ? 'preserve' : _c;\n                resizingWidth = imageCompression.resizingWidth ? pxToNumber(imageCompression.resizingWidth) : undefined;\n                resizingHeight = imageCompression.resizingHeight ? pxToNumber(imageCompression.resizingHeight) : undefined;\n                result = {\n                    failedIndexes: [],\n                    compressedFiles: [],\n                };\n                if (!(Array.isArray(files) && files.length > 0)) {\n                    logger === null || logger === void 0 ? void 0 : logger.warning('utils - compressImages: There are no files.', files);\n                    return [2 /*return*/, result];\n                }\n                if (!compressionRate || compressionRate < 0 || 1 < compressionRate) {\n                    logger === null || logger === void 0 ? void 0 : logger.warning('utils - compressImages: The compressionRate is not acceptable.', compressionRate);\n                    return [2 /*return*/, result];\n                }\n                return [4 /*yield*/, Promise.all(files\n                        .map(function (file, index) { return __awaiter(void 0, void 0, void 0, function () {\n                        var compressedImage, err_1;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    if (!(file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg')) {\n                                        logger === null || logger === void 0 ? void 0 : logger.warning('utils - compressImages: The fileType is not compressible.', { file: file, index: index });\n                                        result.failedIndexes.push(index);\n                                        result.compressedFiles.push(file);\n                                        return [2 /*return*/];\n                                    }\n                                    _a.label = 1;\n                                case 1:\n                                    _a.trys.push([1, 3, , 4]);\n                                    return [4 /*yield*/, compressImage({\n                                            imageFile: file,\n                                            compressionRate: compressionRate,\n                                            resizingWidth: resizingWidth,\n                                            resizingHeight: resizingHeight,\n                                            outputFormat: outputFormat,\n                                        })];\n                                case 2:\n                                    compressedImage = _a.sent();\n                                    result.compressedFiles.push(compressedImage);\n                                    return [3 /*break*/, 4];\n                                case 3:\n                                    err_1 = _a.sent();\n                                    result.compressedFiles.push(file);\n                                    result.failedIndexes.push(index);\n                                    logger === null || logger === void 0 ? void 0 : logger.warning('utils - compressImages: Failed to compress image file', { file: file, err: err_1 });\n                                    return [3 /*break*/, 4];\n                                case 4: return [2 /*return*/];\n                            }\n                        });\n                    }); }))];\n            case 1:\n                _d.sent();\n                logger === null || logger === void 0 ? void 0 : logger.info('utils - compressImages: Finished compressing images', result);\n                return [2 /*return*/, result];\n        }\n    });\n}); };\n\nexport { compressImages as c };\n//# sourceMappingURL=bundle-DAz5E5O_.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}