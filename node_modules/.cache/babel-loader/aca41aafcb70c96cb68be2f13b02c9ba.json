{"ast":null,"code":"import { _ as __assign } from './bundle-BQi9-O76.js';\nimport { useState, useRef, useCallback } from 'react';\nimport { u as useMediaQueryContext } from './bundle-f-SpnOx2.js';\nvar DEFAULT_DURATION = 300;\nfunction preventDefault(e) {\n  if (!isTouchEvent(e)) {\n    return;\n  }\n  if (e.touches.length < 2 && e.preventDefault) {\n    e.preventDefault();\n  }\n}\nfunction isTouchEvent(e) {\n  return e && 'touches' in e;\n}\nfunction useLongPress(_a, _b) {\n  var onLongPress = _a.onLongPress,\n    onClick = _a.onClick;\n  var _c = _b === void 0 ? {} : _b,\n    _d = _c.delay,\n    delay = _d === void 0 ? DEFAULT_DURATION : _d,\n    _e = _c.shouldPreventDefault,\n    shouldPreventDefault = _e === void 0 ? true : _e,\n    _f = _c.shouldStopPropagation,\n    shouldStopPropagation = _f === void 0 ? false : _f;\n  var isMobile = useMediaQueryContext().isMobile;\n  var _g = useState(false),\n    longPressTriggered = _g[0],\n    setLongPressTriggered = _g[1];\n  var _h = useState(false),\n    dragTriggered = _h[0],\n    setDragTriggered = _h[1];\n  // https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypetype\n  var timeout = useRef();\n  var target = useRef();\n  var start = useCallback(function (e) {\n    e.persist();\n    var clonedEvent = __assign({}, e);\n    setDragTriggered(false);\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n    if (shouldPreventDefault && e.target) {\n      e.target.addEventListener('touchend', preventDefault, {\n        passive: false\n      });\n      target.current = e.target;\n    }\n    timeout.current = setTimeout(function () {\n      onLongPress(clonedEvent);\n      setLongPressTriggered(true);\n    }, delay);\n  }, [onLongPress, delay, shouldPreventDefault, shouldStopPropagation, isMobile]);\n  var clear = useCallback(function (e, shouldTriggerClick, onDrag) {\n    if (shouldTriggerClick === void 0) {\n      shouldTriggerClick = true;\n    }\n    if (onDrag === void 0) {\n      onDrag = false;\n    }\n    if (onDrag) {\n      setDragTriggered(true);\n    } else {\n      setDragTriggered(false);\n    }\n    if (timeout === null || timeout === void 0 ? void 0 : timeout.current) {\n      clearTimeout(timeout.current);\n    }\n    if (shouldTriggerClick && !longPressTriggered && !dragTriggered) {\n      onClick === null || onClick === void 0 ? void 0 : onClick(e);\n    }\n    setLongPressTriggered(false);\n    if (shouldPreventDefault && target.current) {\n      target.current.removeEventListener('touchend', preventDefault);\n    }\n  }, [shouldPreventDefault, onClick, longPressTriggered, dragTriggered]);\n  return {\n    onMouseDown: function (e) {\n      return start(e);\n    },\n    onMouseUp: function (e) {\n      return clear(e);\n    },\n    onMouseLeave: function (e) {\n      return clear(e, false);\n    },\n    onTouchStart: function (e) {\n      return start(e);\n    },\n    // setDragTriggered as true on touchmove, so that next onTouchEnd is ignored\n    // if we dont do it, onClick?.(e) will be triggred, see inside clear()\n    onTouchMove: function (e) {\n      return clear(e, false, true);\n    },\n    onTouchEnd: function (e) {\n      return clear(e);\n    }\n  };\n}\nexport { useLongPress as u };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { _ as __assign } from './bundle-BQi9-O76.js';\nimport { useState, useRef, useCallback } from 'react';\nimport { u as useMediaQueryContext } from './bundle-f-SpnOx2.js';\n\nvar DEFAULT_DURATION = 300;\nfunction preventDefault(e) {\n    if (!isTouchEvent(e)) {\n        return;\n    }\n    if (e.touches.length < 2 && e.preventDefault) {\n        e.preventDefault();\n    }\n}\nfunction isTouchEvent(e) {\n    return e && 'touches' in e;\n}\nfunction useLongPress(_a, _b) {\n    var onLongPress = _a.onLongPress, onClick = _a.onClick;\n    var _c = _b === void 0 ? {} : _b, _d = _c.delay, delay = _d === void 0 ? DEFAULT_DURATION : _d, _e = _c.shouldPreventDefault, shouldPreventDefault = _e === void 0 ? true : _e, _f = _c.shouldStopPropagation, shouldStopPropagation = _f === void 0 ? false : _f;\n    var isMobile = useMediaQueryContext().isMobile;\n    var _g = useState(false), longPressTriggered = _g[0], setLongPressTriggered = _g[1];\n    var _h = useState(false), dragTriggered = _h[0], setDragTriggered = _h[1];\n    // https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypetype\n    var timeout = useRef();\n    var target = useRef();\n    var start = useCallback(function (e) {\n        e.persist();\n        var clonedEvent = __assign({}, e);\n        setDragTriggered(false);\n        if (shouldStopPropagation) {\n            e.stopPropagation();\n        }\n        if (shouldPreventDefault && e.target) {\n            e.target.addEventListener('touchend', preventDefault, {\n                passive: false,\n            });\n            target.current = e.target;\n        }\n        timeout.current = setTimeout(function () {\n            onLongPress(clonedEvent);\n            setLongPressTriggered(true);\n        }, delay);\n    }, [onLongPress, delay, shouldPreventDefault, shouldStopPropagation, isMobile]);\n    var clear = useCallback(function (e, shouldTriggerClick, onDrag) {\n        if (shouldTriggerClick === void 0) { shouldTriggerClick = true; }\n        if (onDrag === void 0) { onDrag = false; }\n        if (onDrag) {\n            setDragTriggered(true);\n        }\n        else {\n            setDragTriggered(false);\n        }\n        if (timeout === null || timeout === void 0 ? void 0 : timeout.current) {\n            clearTimeout(timeout.current);\n        }\n        if (shouldTriggerClick && !longPressTriggered && !dragTriggered) {\n            onClick === null || onClick === void 0 ? void 0 : onClick(e);\n        }\n        setLongPressTriggered(false);\n        if (shouldPreventDefault && target.current) {\n            target.current.removeEventListener('touchend', preventDefault);\n        }\n    }, [shouldPreventDefault, onClick, longPressTriggered, dragTriggered]);\n    return {\n        onMouseDown: function (e) { return start(e); },\n        onMouseUp: function (e) { return clear(e); },\n        onMouseLeave: function (e) { return clear(e, false); },\n        onTouchStart: function (e) { return start(e); },\n        // setDragTriggered as true on touchmove, so that next onTouchEnd is ignored\n        // if we dont do it, onClick?.(e) will be triggred, see inside clear()\n        onTouchMove: function (e) { return clear(e, false, true); },\n        onTouchEnd: function (e) { return clear(e); },\n    };\n}\n\nexport { useLongPress as u };\n//# sourceMappingURL=bundle-AfQS5DGf.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}