{"ast":null,"code":"import React__default, { useRef, useState, useContext } from 'react';\nimport { L as LocalizationContext } from '../../chunks/bundle-cQZ3UZoG.js';\nimport { p as pubSubTopics } from '../../chunks/bundle-b6TpX_JP.js';\nimport { M as Modal } from '../../chunks/bundle-CXdo2kR_.js';\nimport Input, { InputLabel } from '../../ui/Input.js';\nimport { A as Avatar } from '../../chunks/bundle-CFosTNce.js';\nimport '../../chunks/bundle-BQi9-O76.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../chunks/bundle-DhKQeIfP.js';\nimport { ButtonTypes } from '../../ui/Button.js';\nimport TextButton from '../../ui/TextButton.js';\nimport ChannelAvatar from '../../ui/OpenChannelAvatar.js';\nimport { useOpenChannelSettingsContext } from '../context.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-BgwzpLeQ.js';\nimport 'react-dom';\nimport '../../chunks/bundle-f-SpnOx2.js';\nimport '../../ui/IconButton.js';\nimport '../../ui/Icon.js';\nimport '@sendbird/uikit-tools';\nimport '../../withSendbird.js';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '@sendbird/chat/openChannel';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport '../../ui/SortByRow.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nimport '../../chunks/bundle-GMlM2rlV.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nvar EditDetails = function (props) {\n  var onCancel = props.onCancel;\n  var globalState = useSendbirdStateContext();\n  var _a = globalState.config,\n    logger = _a.logger,\n    theme = _a.theme,\n    pubSub = _a.pubSub;\n  var _b = useOpenChannelSettingsContext(),\n    channel = _b.channel,\n    onBeforeUpdateChannel = _b.onBeforeUpdateChannel,\n    onChannelModified = _b.onChannelModified,\n    setChannel = _b.setChannel;\n  var inputRef = useRef(null);\n  var formRef = useRef(null);\n  var hiddenInputRef = useRef(null);\n  var _c = useState(null),\n    currentImg = _c[0],\n    setCurrentImg = _c[1];\n  var _d = useState(null),\n    newFile = _d[0],\n    setNewFile = _d[1];\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var title = channel === null || channel === void 0 ? void 0 : channel.name;\n  return React__default.createElement(Modal, {\n    isFullScreenOnMobile: true,\n    titleText: stringSet.MODAL__CHANNEL_INFORMATION__TITLE,\n    submitText: stringSet.BUTTON__SAVE,\n    onCancel: onCancel,\n    onSubmit: function () {\n      var _a, _b, _c, _d, _e;\n      if (title !== '' && !((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.value)) {\n        if ((_b = formRef.current) === null || _b === void 0 ? void 0 : _b.reportValidity) {\n          // might not work in explorer\n          formRef.current.reportValidity();\n        }\n        return;\n      }\n      var currentTitle = (_d = (_c = inputRef.current) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : '';\n      var currentImg = newFile;\n      logger.info('ChannelSettings: Channel information being updated');\n      var params = onBeforeUpdateChannel ? onBeforeUpdateChannel(currentTitle, currentImg, (_e = channel === null || channel === void 0 ? void 0 : channel.data) !== null && _e !== void 0 ? _e : '') : {\n        name: currentTitle,\n        coverUrlOrImage: currentImg !== null && currentImg !== void 0 ? currentImg : undefined,\n        data: channel === null || channel === void 0 ? void 0 : channel.data\n      };\n      logger.info('ChannelSettings: Updating channel information', params);\n      channel === null || channel === void 0 ? void 0 : channel.updateChannel(params).then(function (updatedChannel) {\n        logger.info('ChannelSettings: Channel information update succeeded', updatedChannel);\n        onChannelModified === null || onChannelModified === void 0 ? void 0 : onChannelModified(updatedChannel);\n        setChannel === null || setChannel === void 0 ? void 0 : setChannel(updatedChannel);\n        pubSub === null || pubSub === void 0 ? void 0 : pubSub.publish(pubSubTopics.UPDATE_OPEN_CHANNEL, updatedChannel);\n      }).catch(function (error) {\n        logger.error('ChannelSettings: Channel infomation update failed', error);\n        setChannel === null || setChannel === void 0 ? void 0 : setChannel(null);\n      });\n      onCancel();\n    },\n    type: ButtonTypes.PRIMARY\n  }, React__default.createElement(\"form\", {\n    className: \"channel-profile-form\",\n    ref: formRef,\n    onSubmit: function (e) {\n      e.preventDefault();\n    }\n  }, React__default.createElement(\"div\", {\n    className: \"channel-profile-form__img-section\"\n  }, React__default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE), React__default.createElement(\"div\", {\n    className: \"channel-profile-form__avatar\"\n  }, currentImg ? React__default.createElement(Avatar, {\n    height: \"80px\",\n    width: \"80px\",\n    src: currentImg\n  }) : React__default.createElement(ChannelAvatar, {\n    height: 80,\n    width: 80,\n    channel: channel,\n    theme: theme\n  })), React__default.createElement(\"input\", {\n    ref: hiddenInputRef,\n    type: \"file\",\n    accept: \"image/gif, image/jpeg, image/png\",\n    style: {\n      display: 'none'\n    },\n    onChange: function (e) {\n      if (e.target.files) {\n        setCurrentImg(URL.createObjectURL(e.target.files[0]));\n        setNewFile(e.target.files[0]);\n      }\n      if (hiddenInputRef.current) hiddenInputRef.current.value = '';\n    }\n  }), React__default.createElement(TextButton, {\n    className: \"channel-profile-form__avatar-button\",\n    onClick: function () {\n      var _a;\n      return (_a = hiddenInputRef.current) === null || _a === void 0 ? void 0 : _a.click();\n    },\n    disableUnderline: true\n  }, React__default.createElement(Label, {\n    type: LabelTypography.BUTTON_1,\n    color: LabelColors.PRIMARY\n  }, stringSet.MODAL__CHANNEL_INFORMATION__UPLOAD))), React__default.createElement(\"div\", {\n    className: \"channel-profile-form__name-section\"\n  }, React__default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_NAME), React__default.createElement(Input, {\n    required: title !== '',\n    name: \"channel-profile-form__name\",\n    ref: inputRef,\n    value: title,\n    placeHolder: stringSet.MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER\n  }))));\n};\nexport { EditDetails as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { useRef, useState, useContext } from 'react';\nimport { L as LocalizationContext } from '../../chunks/bundle-cQZ3UZoG.js';\nimport { p as pubSubTopics } from '../../chunks/bundle-b6TpX_JP.js';\nimport { M as Modal } from '../../chunks/bundle-CXdo2kR_.js';\nimport Input, { InputLabel } from '../../ui/Input.js';\nimport { A as Avatar } from '../../chunks/bundle-CFosTNce.js';\nimport '../../chunks/bundle-BQi9-O76.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../chunks/bundle-DhKQeIfP.js';\nimport { ButtonTypes } from '../../ui/Button.js';\nimport TextButton from '../../ui/TextButton.js';\nimport ChannelAvatar from '../../ui/OpenChannelAvatar.js';\nimport { useOpenChannelSettingsContext } from '../context.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-BgwzpLeQ.js';\nimport 'react-dom';\nimport '../../chunks/bundle-f-SpnOx2.js';\nimport '../../ui/IconButton.js';\nimport '../../ui/Icon.js';\nimport '@sendbird/uikit-tools';\nimport '../../withSendbird.js';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '@sendbird/chat/openChannel';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport '../../ui/SortByRow.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nimport '../../chunks/bundle-GMlM2rlV.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\n\nvar EditDetails = function (props) {\n    var onCancel = props.onCancel;\n    var globalState = useSendbirdStateContext();\n    var _a = globalState.config, logger = _a.logger, theme = _a.theme, pubSub = _a.pubSub;\n    var _b = useOpenChannelSettingsContext(), channel = _b.channel, onBeforeUpdateChannel = _b.onBeforeUpdateChannel, onChannelModified = _b.onChannelModified, setChannel = _b.setChannel;\n    var inputRef = useRef(null);\n    var formRef = useRef(null);\n    var hiddenInputRef = useRef(null);\n    var _c = useState(null), currentImg = _c[0], setCurrentImg = _c[1];\n    var _d = useState(null), newFile = _d[0], setNewFile = _d[1];\n    var stringSet = useContext(LocalizationContext).stringSet;\n    var title = channel === null || channel === void 0 ? void 0 : channel.name;\n    return (React__default.createElement(Modal, { isFullScreenOnMobile: true, titleText: stringSet.MODAL__CHANNEL_INFORMATION__TITLE, submitText: stringSet.BUTTON__SAVE, onCancel: onCancel, onSubmit: function () {\n            var _a, _b, _c, _d, _e;\n            if (title !== '' && !((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.value)) {\n                if ((_b = formRef.current) === null || _b === void 0 ? void 0 : _b.reportValidity) { // might not work in explorer\n                    formRef.current.reportValidity();\n                }\n                return;\n            }\n            var currentTitle = (_d = (_c = inputRef.current) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : '';\n            var currentImg = newFile;\n            logger.info('ChannelSettings: Channel information being updated');\n            var params = onBeforeUpdateChannel\n                ? onBeforeUpdateChannel(currentTitle, currentImg, (_e = channel === null || channel === void 0 ? void 0 : channel.data) !== null && _e !== void 0 ? _e : '')\n                : {\n                    name: currentTitle,\n                    coverUrlOrImage: currentImg !== null && currentImg !== void 0 ? currentImg : undefined,\n                    data: channel === null || channel === void 0 ? void 0 : channel.data,\n                };\n            logger.info('ChannelSettings: Updating channel information', params);\n            channel === null || channel === void 0 ? void 0 : channel.updateChannel(params).then(function (updatedChannel) {\n                logger.info('ChannelSettings: Channel information update succeeded', updatedChannel);\n                onChannelModified === null || onChannelModified === void 0 ? void 0 : onChannelModified(updatedChannel);\n                setChannel === null || setChannel === void 0 ? void 0 : setChannel(updatedChannel);\n                pubSub === null || pubSub === void 0 ? void 0 : pubSub.publish(pubSubTopics.UPDATE_OPEN_CHANNEL, updatedChannel);\n            }).catch(function (error) {\n                logger.error('ChannelSettings: Channel infomation update failed', error);\n                setChannel === null || setChannel === void 0 ? void 0 : setChannel(null);\n            });\n            onCancel();\n        }, type: ButtonTypes.PRIMARY },\n        React__default.createElement(\"form\", { className: \"channel-profile-form\", ref: formRef, onSubmit: function (e) { e.preventDefault(); } },\n            React__default.createElement(\"div\", { className: \"channel-profile-form__img-section\" },\n                React__default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE),\n                React__default.createElement(\"div\", { className: \"channel-profile-form__avatar\" }, currentImg\n                    ? (React__default.createElement(Avatar, { height: \"80px\", width: \"80px\", src: currentImg })) : (React__default.createElement(ChannelAvatar, { height: 80, width: 80, channel: channel, theme: theme }))),\n                React__default.createElement(\"input\", { ref: hiddenInputRef, type: \"file\", accept: \"image/gif, image/jpeg, image/png\", style: { display: 'none' }, onChange: function (e) {\n                        if (e.target.files) {\n                            setCurrentImg(URL.createObjectURL(e.target.files[0]));\n                            setNewFile(e.target.files[0]);\n                        }\n                        if (hiddenInputRef.current)\n                            hiddenInputRef.current.value = '';\n                    } }),\n                React__default.createElement(TextButton, { className: \"channel-profile-form__avatar-button\", onClick: function () { var _a; return (_a = hiddenInputRef.current) === null || _a === void 0 ? void 0 : _a.click(); }, disableUnderline: true },\n                    React__default.createElement(Label, { type: LabelTypography.BUTTON_1, color: LabelColors.PRIMARY }, stringSet.MODAL__CHANNEL_INFORMATION__UPLOAD))),\n            React__default.createElement(\"div\", { className: \"channel-profile-form__name-section\" },\n                React__default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_NAME),\n                React__default.createElement(Input, { required: title !== '', name: \"channel-profile-form__name\", ref: inputRef, value: title, placeHolder: stringSet.MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER })))));\n};\n\nexport { EditDetails as default };\n//# sourceMappingURL=EditDetailsModal.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}