{"ast":null,"code":"import { c as __spreadArray } from './bundle-BQi9-O76.js';\nimport { SendingStatus } from '@sendbird/chat/message';\nvar scrollToRenderedMessage = function (scrollRef, initialTimeStamp, setIsScrolled) {\n  var _a;\n  try {\n    var container = scrollRef.current;\n    // scroll into the message with initialTimeStamp\n    var element = (_a = container === null || container === void 0 ? void 0 : container.querySelectorAll(\"[data-sb-created-at=\\\"\".concat(initialTimeStamp, \"\\\"]\"))) === null || _a === void 0 ? void 0 : _a[0];\n    if (container && element instanceof HTMLElement) {\n      // Set the scroll position of the container to bring the element to the top\n      container.scrollTop = element.offsetTop;\n    }\n  } catch (_b) {\n    // do nothing\n  } finally {\n    setIsScrolled === null || setIsScrolled === void 0 ? void 0 : setIsScrolled(true);\n  }\n};\n/* eslint-disable default-param-last */\nvar scrollIntoLast = function (initialTry, scrollRef, setIsScrolled) {\n  if (initialTry === void 0) {\n    initialTry = 0;\n  }\n  var MAX_TRIES = 10;\n  var currentTry = initialTry;\n  if (currentTry > MAX_TRIES) {\n    setIsScrolled === null || setIsScrolled === void 0 ? void 0 : setIsScrolled(true);\n    return;\n  }\n  try {\n    var scrollDOM = (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) || document.querySelector('.sendbird-conversation__messages-padding');\n    if (scrollDOM) scrollDOM.scrollTop = scrollDOM.scrollHeight;\n    setIsScrolled === null || setIsScrolled === void 0 ? void 0 : setIsScrolled(true);\n  } catch (error) {\n    setTimeout(function () {\n      scrollIntoLast(currentTry + 1, scrollRef, setIsScrolled);\n    }, 500 * currentTry);\n  }\n};\nvar isOperator = function (groupChannel) {\n  var myRole = groupChannel === null || groupChannel === void 0 ? void 0 : groupChannel.myRole;\n  return myRole === 'operator';\n};\nvar isDisabledBecauseFrozen = function (groupChannel) {\n  var isFrozen = groupChannel === null || groupChannel === void 0 ? void 0 : groupChannel.isFrozen;\n  return isFrozen && !isOperator(groupChannel);\n};\nvar isDisabledBecauseMuted = function (groupChannel) {\n  var myMutedState = groupChannel === null || groupChannel === void 0 ? void 0 : groupChannel.myMutedState;\n  return myMutedState === 'muted';\n};\nvar getAllEmojisMapFromEmojiContainer = function (emojiContainer) {\n  var _a = emojiContainer.emojiCategories,\n    emojiCategories = _a === void 0 ? [] : _a;\n  var allEmojisMap = new Map();\n  for (var categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    var emojis = emojiCategories[categoryIndex].emojis;\n    for (var emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      var _b = emojis[emojiIndex],\n        key = _b.key,\n        url = _b.url;\n      allEmojisMap.set(key, url);\n    }\n  }\n  return allEmojisMap;\n};\nvar getNicknamesMapFromMembers = function (members) {\n  if (members === void 0) {\n    members = [];\n  }\n  var nicknamesMap = new Map();\n  for (var memberIndex = 0; memberIndex < members.length; memberIndex += 1) {\n    var _a = members[memberIndex],\n      userId = _a.userId,\n      nickname = _a.nickname;\n    nicknamesMap.set(userId, nickname);\n  }\n  return nicknamesMap;\n};\nvar getUniqueListBy = function (arr, key) {\n  var entries = arr.map(function (item) {\n    return [item[key], item];\n  });\n  return Array.from(new Map(entries).values());\n};\nvar getUniqueListByMessageId = function (arr) {\n  return getUniqueListBy(arr, 'messageId');\n};\nvar sortByCreatedAt = function (messages) {\n  return messages.sort(function (a, b) {\n    return a.createdAt - b.createdAt;\n  });\n};\nvar mergeAndSortMessages = function (oldMessages, newMessages) {\n  var lastOldMessage = oldMessages[oldMessages.length - 1];\n  var firstNewMessage = newMessages[0];\n  // If the last message of oldMessages is older than the first message of newMessages,\n  // then we can safely append newMessages to oldMessages.\n  if ((lastOldMessage === null || lastOldMessage === void 0 ? void 0 : lastOldMessage.createdAt) < (firstNewMessage === null || firstNewMessage === void 0 ? void 0 : firstNewMessage.createdAt)) {\n    return __spreadArray(__spreadArray([], oldMessages, true), newMessages, true);\n  }\n  // todo: optimize this\n  // If the last message of oldMessages is newer than the first message of newMessages,\n  // then we need to merge the two arrays and sort them by createdAt.\n  var mergedMessages = __spreadArray(__spreadArray([], oldMessages, true), newMessages, true);\n  var unique = getUniqueListByMessageId(mergedMessages);\n  return sortByCreatedAt(unique);\n};\nvar passUnsuccessfullMessages = function (allMessages, newMessage) {\n  if ('sendingStatus' in newMessage && (newMessage.sendingStatus === SendingStatus.SUCCEEDED || newMessage.sendingStatus === SendingStatus.PENDING)) {\n    var lastIndexOfSucceededMessage = allMessages.map(function (message) {\n      if ('sendingStatus' in message && message.sendingStatus) return message.sendingStatus;\n      return message.isAdminMessage() ? SendingStatus.SUCCEEDED : null;\n    }).lastIndexOf(SendingStatus.SUCCEEDED);\n    if (lastIndexOfSucceededMessage + 1 < allMessages.length) {\n      var messages = __spreadArray([], allMessages, true);\n      messages.splice(lastIndexOfSucceededMessage + 1, 0, newMessage);\n      return messages;\n    }\n  }\n  return __spreadArray(__spreadArray([], allMessages, true), [newMessage], false);\n};\nvar isAboutSame = function (a, b, px) {\n  return Math.abs(a - b) <= px;\n};\nexport { isAboutSame as a, isDisabledBecauseFrozen as b, isDisabledBecauseMuted as c, scrollToRenderedMessage as d, getNicknamesMapFromMembers as e, getAllEmojisMapFromEmojiContainer as g, isOperator as i, mergeAndSortMessages as m, passUnsuccessfullMessages as p, scrollIntoLast as s };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { c as __spreadArray } from './bundle-BQi9-O76.js';\nimport { SendingStatus } from '@sendbird/chat/message';\n\nvar scrollToRenderedMessage = function (scrollRef, initialTimeStamp, setIsScrolled) {\n    var _a;\n    try {\n        var container = scrollRef.current;\n        // scroll into the message with initialTimeStamp\n        var element = (_a = container === null || container === void 0 ? void 0 : container.querySelectorAll(\"[data-sb-created-at=\\\"\".concat(initialTimeStamp, \"\\\"]\"))) === null || _a === void 0 ? void 0 : _a[0];\n        if (container && element instanceof HTMLElement) {\n            // Set the scroll position of the container to bring the element to the top\n            container.scrollTop = element.offsetTop;\n        }\n    }\n    catch (_b) {\n        // do nothing\n    }\n    finally {\n        setIsScrolled === null || setIsScrolled === void 0 ? void 0 : setIsScrolled(true);\n    }\n};\n/* eslint-disable default-param-last */\nvar scrollIntoLast = function (initialTry, scrollRef, setIsScrolled) {\n    if (initialTry === void 0) { initialTry = 0; }\n    var MAX_TRIES = 10;\n    var currentTry = initialTry;\n    if (currentTry > MAX_TRIES) {\n        setIsScrolled === null || setIsScrolled === void 0 ? void 0 : setIsScrolled(true);\n        return;\n    }\n    try {\n        var scrollDOM = (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) || document.querySelector('.sendbird-conversation__messages-padding');\n        if (scrollDOM)\n            scrollDOM.scrollTop = scrollDOM.scrollHeight;\n        setIsScrolled === null || setIsScrolled === void 0 ? void 0 : setIsScrolled(true);\n    }\n    catch (error) {\n        setTimeout(function () {\n            scrollIntoLast(currentTry + 1, scrollRef, setIsScrolled);\n        }, 500 * currentTry);\n    }\n};\nvar isOperator = function (groupChannel) {\n    var myRole = groupChannel === null || groupChannel === void 0 ? void 0 : groupChannel.myRole;\n    return myRole === 'operator';\n};\nvar isDisabledBecauseFrozen = function (groupChannel) {\n    var isFrozen = groupChannel === null || groupChannel === void 0 ? void 0 : groupChannel.isFrozen;\n    return isFrozen && !isOperator(groupChannel);\n};\nvar isDisabledBecauseMuted = function (groupChannel) {\n    var myMutedState = groupChannel === null || groupChannel === void 0 ? void 0 : groupChannel.myMutedState;\n    return myMutedState === 'muted';\n};\nvar getAllEmojisMapFromEmojiContainer = function (emojiContainer) {\n    var _a = emojiContainer.emojiCategories, emojiCategories = _a === void 0 ? [] : _a;\n    var allEmojisMap = new Map();\n    for (var categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n        var emojis = emojiCategories[categoryIndex].emojis;\n        for (var emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n            var _b = emojis[emojiIndex], key = _b.key, url = _b.url;\n            allEmojisMap.set(key, url);\n        }\n    }\n    return allEmojisMap;\n};\nvar getNicknamesMapFromMembers = function (members) {\n    if (members === void 0) { members = []; }\n    var nicknamesMap = new Map();\n    for (var memberIndex = 0; memberIndex < members.length; memberIndex += 1) {\n        var _a = members[memberIndex], userId = _a.userId, nickname = _a.nickname;\n        nicknamesMap.set(userId, nickname);\n    }\n    return nicknamesMap;\n};\nvar getUniqueListBy = function (arr, key) {\n    var entries = arr.map(function (item) { return [item[key], item]; });\n    return Array.from(new Map(entries).values());\n};\nvar getUniqueListByMessageId = function (arr) {\n    return getUniqueListBy(arr, 'messageId');\n};\nvar sortByCreatedAt = function (messages) {\n    return messages.sort(function (a, b) { return a.createdAt - b.createdAt; });\n};\nvar mergeAndSortMessages = function (oldMessages, newMessages) {\n    var lastOldMessage = oldMessages[oldMessages.length - 1];\n    var firstNewMessage = newMessages[0];\n    // If the last message of oldMessages is older than the first message of newMessages,\n    // then we can safely append newMessages to oldMessages.\n    if ((lastOldMessage === null || lastOldMessage === void 0 ? void 0 : lastOldMessage.createdAt) < (firstNewMessage === null || firstNewMessage === void 0 ? void 0 : firstNewMessage.createdAt)) {\n        return __spreadArray(__spreadArray([], oldMessages, true), newMessages, true);\n    }\n    // todo: optimize this\n    // If the last message of oldMessages is newer than the first message of newMessages,\n    // then we need to merge the two arrays and sort them by createdAt.\n    var mergedMessages = __spreadArray(__spreadArray([], oldMessages, true), newMessages, true);\n    var unique = getUniqueListByMessageId(mergedMessages);\n    return sortByCreatedAt(unique);\n};\nvar passUnsuccessfullMessages = function (allMessages, newMessage) {\n    if ('sendingStatus' in newMessage\n        && (newMessage.sendingStatus === SendingStatus.SUCCEEDED || newMessage.sendingStatus === SendingStatus.PENDING)) {\n        var lastIndexOfSucceededMessage = allMessages\n            .map(function (message) {\n            if ('sendingStatus' in message && message.sendingStatus)\n                return message.sendingStatus;\n            return message.isAdminMessage() ? SendingStatus.SUCCEEDED : null;\n        })\n            .lastIndexOf(SendingStatus.SUCCEEDED);\n        if (lastIndexOfSucceededMessage + 1 < allMessages.length) {\n            var messages = __spreadArray([], allMessages, true);\n            messages.splice(lastIndexOfSucceededMessage + 1, 0, newMessage);\n            return messages;\n        }\n    }\n    return __spreadArray(__spreadArray([], allMessages, true), [newMessage], false);\n};\nvar isAboutSame = function (a, b, px) {\n    return Math.abs(a - b) <= px;\n};\n\nexport { isAboutSame as a, isDisabledBecauseFrozen as b, isDisabledBecauseMuted as c, scrollToRenderedMessage as d, getNicknamesMapFromMembers as e, getAllEmojisMapFromEmojiContainer as g, isOperator as i, mergeAndSortMessages as m, passUnsuccessfullMessages as p, scrollIntoLast as s };\n//# sourceMappingURL=bundle-CMLImr6T.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}