{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useReducer } from 'react';\nconst defaultReducer = (_a, action) => {\n  var draft = __rest(_a, []);\n  const compareByOrder = createCompareByOrder(draft.order);\n  switch (action.type) {\n    case 'update_refreshing':\n      {\n        draft.refreshing = action.value.status;\n        break;\n      }\n    case 'update_initialized':\n      {\n        draft.initialized = action.value.status;\n        break;\n      }\n    case 'update_channels':\n      {\n        getGroupChannels(action.value.channels).forEach(freshChannel => {\n          const idx = draft.groupChannels.findIndex(staleChannel => staleChannel.url === freshChannel.url);\n          if (idx > -1) draft.groupChannels[idx] = freshChannel;\n        });\n        compareByOrder && (draft.groupChannels = draft.groupChannels.sort(compareByOrder));\n        break;\n      }\n    case 'delete_channels':\n      {\n        action.value.channelUrls.forEach(url => {\n          const idx = draft.groupChannels.findIndex(c => c.url === url);\n          if (idx > -1) draft.groupChannels.splice(idx, 1);\n        });\n        compareByOrder && (draft.groupChannels = draft.groupChannels.sort(compareByOrder));\n        break;\n      }\n    case 'append_channels':\n      {\n        const groupChannels = getGroupChannels(action.value.channels);\n        if (action.value.clearBeforeAction) {\n          draft.groupChannels = groupChannels;\n        } else {\n          draft.groupChannels = mergeObjectArrays(draft.groupChannels, groupChannels, 'url');\n        }\n        compareByOrder && (draft.groupChannels = draft.groupChannels.sort(compareByOrder));\n        break;\n      }\n    case 'update_order':\n      {\n        draft.order = action.value.order;\n        const compareByOrder = createCompareByOrder(draft.order);\n        compareByOrder && (draft.groupChannels = draft.groupChannels.sort(compareByOrder));\n        break;\n      }\n  }\n  return draft;\n};\nexport const useGroupChannelListReducer = order => {\n  const [{\n    initialized,\n    refreshing,\n    groupChannels\n  }, dispatch] = useReducer(defaultReducer, {\n    initialized: false,\n    refreshing: false,\n    groupChannels: [],\n    order\n  });\n  const updateChannels = channels => {\n    dispatch({\n      type: 'update_channels',\n      value: {\n        channels\n      }\n    });\n  };\n  const deleteChannels = channelUrls => {\n    dispatch({\n      type: 'delete_channels',\n      value: {\n        channelUrls\n      }\n    });\n  };\n  const appendChannels = (channels, clearBeforeAction) => {\n    dispatch({\n      type: 'append_channels',\n      value: {\n        channels,\n        clearBeforeAction\n      }\n    });\n  };\n  const updateInitialized = status => {\n    dispatch({\n      type: 'update_initialized',\n      value: {\n        status\n      }\n    });\n  };\n  const updateRefreshing = status => {\n    dispatch({\n      type: 'update_refreshing',\n      value: {\n        status\n      }\n    });\n  };\n  const updateOrder = order => {\n    dispatch({\n      type: 'update_order',\n      value: {\n        order\n      }\n    });\n  };\n  return {\n    updateInitialized,\n    updateRefreshing,\n    updateChannels,\n    deleteChannels,\n    appendChannels,\n    updateOrder,\n    initialized,\n    refreshing,\n    groupChannels\n  };\n};\nconst createCompareByOrder = order => {\n  if (!order) return undefined;\n  return (channel1, channel2) => {\n    switch (order) {\n      case 'latest_last_message':\n        {\n          if (channel1.lastMessage && channel2.lastMessage) {\n            return channel2.lastMessage.createdAt - channel1.lastMessage.createdAt;\n          } else if (channel1.lastMessage) {\n            return -1;\n          } else if (channel2.lastMessage) {\n            return 1;\n          } else {\n            return channel2.createdAt - channel1.createdAt;\n          }\n        }\n      case 'chronological':\n        {\n          return channel2.createdAt - channel1.createdAt;\n        }\n      case 'channel_name_alphabetical':\n        {\n          return channel1.name.localeCompare(channel2.name);\n        }\n      default:\n        {\n          return 0;\n        }\n    }\n  };\n};\nfunction mergeObjectArrays(A, B, key) {\n  const uniqueValues = new Set(A.map(obj => obj[key]));\n  const newArr = [...A];\n  for (let i = 0; i < B.length; i++) {\n    if (!uniqueValues.has(B[i][key])) {\n      newArr.push(B[i]);\n      uniqueValues.add(B[i][key]);\n    }\n  }\n  return newArr;\n}\nfunction getGroupChannels(channels) {\n  return channels.filter(it => it.isGroupChannel());\n}","map":{"version":3,"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","useReducer","defaultReducer","_a","action","draft","compareByOrder","createCompareByOrder","order","type","refreshing","value","status","initialized","getGroupChannels","channels","forEach","freshChannel","idx","groupChannels","findIndex","staleChannel","url","sort","channelUrls","c","splice","clearBeforeAction","mergeObjectArrays","useGroupChannelListReducer","dispatch","updateChannels","deleteChannels","appendChannels","updateInitialized","updateRefreshing","updateOrder","undefined","channel1","channel2","lastMessage","createdAt","name","localeCompare","A","B","key","uniqueValues","Set","map","obj","newArr","has","push","add","filter","it","isGroupChannel"],"sources":["D:/ebgbot/node_modules/@sendbird/uikit-react/node_modules/@sendbird/uikit-tools/dist/esm/hooks/useGroupChannelList/reducer.js"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { useReducer } from 'react';\nconst defaultReducer = (_a, action) => {\n    var draft = __rest(_a, []);\n    const compareByOrder = createCompareByOrder(draft.order);\n    switch (action.type) {\n        case 'update_refreshing': {\n            draft.refreshing = action.value.status;\n            break;\n        }\n        case 'update_initialized': {\n            draft.initialized = action.value.status;\n            break;\n        }\n        case 'update_channels': {\n            getGroupChannels(action.value.channels).forEach((freshChannel) => {\n                const idx = draft.groupChannels.findIndex((staleChannel) => staleChannel.url === freshChannel.url);\n                if (idx > -1)\n                    draft.groupChannels[idx] = freshChannel;\n            });\n            compareByOrder && (draft.groupChannels = draft.groupChannels.sort(compareByOrder));\n            break;\n        }\n        case 'delete_channels': {\n            action.value.channelUrls.forEach((url) => {\n                const idx = draft.groupChannels.findIndex((c) => c.url === url);\n                if (idx > -1)\n                    draft.groupChannels.splice(idx, 1);\n            });\n            compareByOrder && (draft.groupChannels = draft.groupChannels.sort(compareByOrder));\n            break;\n        }\n        case 'append_channels': {\n            const groupChannels = getGroupChannels(action.value.channels);\n            if (action.value.clearBeforeAction) {\n                draft.groupChannels = groupChannels;\n            }\n            else {\n                draft.groupChannels = mergeObjectArrays(draft.groupChannels, groupChannels, 'url');\n            }\n            compareByOrder && (draft.groupChannels = draft.groupChannels.sort(compareByOrder));\n            break;\n        }\n        case 'update_order': {\n            draft.order = action.value.order;\n            const compareByOrder = createCompareByOrder(draft.order);\n            compareByOrder && (draft.groupChannels = draft.groupChannels.sort(compareByOrder));\n            break;\n        }\n    }\n    return draft;\n};\nexport const useGroupChannelListReducer = (order) => {\n    const [{ initialized, refreshing, groupChannels }, dispatch] = useReducer(defaultReducer, {\n        initialized: false,\n        refreshing: false,\n        groupChannels: [],\n        order,\n    });\n    const updateChannels = (channels) => {\n        dispatch({ type: 'update_channels', value: { channels } });\n    };\n    const deleteChannels = (channelUrls) => {\n        dispatch({ type: 'delete_channels', value: { channelUrls } });\n    };\n    const appendChannels = (channels, clearBeforeAction) => {\n        dispatch({ type: 'append_channels', value: { channels, clearBeforeAction } });\n    };\n    const updateInitialized = (status) => {\n        dispatch({ type: 'update_initialized', value: { status } });\n    };\n    const updateRefreshing = (status) => {\n        dispatch({ type: 'update_refreshing', value: { status } });\n    };\n    const updateOrder = (order) => {\n        dispatch({ type: 'update_order', value: { order } });\n    };\n    return {\n        updateInitialized,\n        updateRefreshing,\n        updateChannels,\n        deleteChannels,\n        appendChannels,\n        updateOrder,\n        initialized,\n        refreshing,\n        groupChannels,\n    };\n};\nconst createCompareByOrder = (order) => {\n    if (!order)\n        return undefined;\n    return (channel1, channel2) => {\n        switch (order) {\n            case 'latest_last_message': {\n                if (channel1.lastMessage && channel2.lastMessage) {\n                    return channel2.lastMessage.createdAt - channel1.lastMessage.createdAt;\n                }\n                else if (channel1.lastMessage) {\n                    return -1;\n                }\n                else if (channel2.lastMessage) {\n                    return 1;\n                }\n                else {\n                    return channel2.createdAt - channel1.createdAt;\n                }\n            }\n            case 'chronological': {\n                return channel2.createdAt - channel1.createdAt;\n            }\n            case 'channel_name_alphabetical': {\n                return channel1.name.localeCompare(channel2.name);\n            }\n            default: {\n                return 0;\n            }\n        }\n    };\n};\nfunction mergeObjectArrays(A, B, key) {\n    const uniqueValues = new Set(A.map((obj) => obj[key]));\n    const newArr = [...A];\n    for (let i = 0; i < B.length; i++) {\n        if (!uniqueValues.has(B[i][key])) {\n            newArr.push(B[i]);\n            uniqueValues.add(B[i][key]);\n        }\n    }\n    return newArr;\n}\nfunction getGroupChannels(channels) {\n    return channels.filter((it) => it.isGroupChannel());\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}