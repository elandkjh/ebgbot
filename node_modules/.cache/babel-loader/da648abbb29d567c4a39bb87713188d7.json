{"ast":null,"code":"import React__default, { useEffect, useCallback, useState, useReducer, useRef } from 'react';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { _ as __assign, c as __spreadArray } from '../chunks/bundle-BQi9-O76.js';\nimport '../withSendbird.js';\nvar GET_SEARCHED_MESSAGES = 'GET_SEARCHED_MESSAGES';\nvar GET_NEXT_SEARCHED_MESSAGES = 'GET_NEXT_SEARCHED_MESSAGES';\nvar START_MESSAGE_SEARCH = 'START_MESSAGE_SEARCH';\nvar START_GETTING_SEARCHED_MESSAGES = 'START_GETTING_SEARCHED_MESSAGES';\nvar SET_QUERY_INVALID = 'SET_QUERY_INVALID';\nvar SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nvar CHANNEL_INVALID = 'CHANNEL_INVALID';\nvar RESET_SEARCH_STRING = 'RESET_SEARCH_STRING';\nfunction reducer(state, action) {\n  switch (action.type) {\n    case SET_CURRENT_CHANNEL:\n      {\n        var currentChannel = action.payload;\n        return __assign(__assign({}, state), {\n          currentChannel: currentChannel,\n          initialized: true\n        });\n      }\n    case CHANNEL_INVALID:\n      {\n        return __assign(__assign({}, state), {\n          currentChannel: null,\n          initialized: false\n        });\n      }\n    case GET_SEARCHED_MESSAGES:\n      {\n        var _a = action.payload,\n          messages = _a.messages,\n          createdQuery = _a.createdQuery;\n        if (createdQuery && createdQuery.channelUrl === (state === null || state === void 0 ? void 0 : state.currentMessageSearchQuery).channelUrl && createdQuery.key === (state === null || state === void 0 ? void 0 : state.currentMessageSearchQuery).key) {\n          return __assign(__assign({}, state), {\n            loading: false,\n            isInvalid: false,\n            allMessages: __spreadArray([], messages, true),\n            hasMoreResult: (state === null || state === void 0 ? void 0 : state.currentMessageSearchQuery).hasNext\n          });\n        }\n        return __assign({}, state);\n      }\n    case SET_QUERY_INVALID:\n      {\n        return __assign(__assign({}, state), {\n          isInvalid: true\n        });\n      }\n    case START_MESSAGE_SEARCH:\n      {\n        return __assign(__assign({}, state), {\n          isInvalid: false,\n          loading: false\n        });\n      }\n    case START_GETTING_SEARCHED_MESSAGES:\n      {\n        var currentMessageSearchQuery = action.payload;\n        return __assign(__assign({}, state), {\n          loading: true,\n          currentMessageSearchQuery: currentMessageSearchQuery\n        });\n      }\n    case GET_NEXT_SEARCHED_MESSAGES:\n      {\n        var messages = action.payload;\n        return __assign(__assign({}, state), {\n          allMessages: __spreadArray(__spreadArray([], state.allMessages, true), messages, true),\n          hasMoreResult: (state === null || state === void 0 ? void 0 : state.currentMessageSearchQuery).hasNext\n        });\n      }\n    case RESET_SEARCH_STRING:\n      {\n        return __assign(__assign({}, state), {\n          allMessages: []\n        });\n      }\n    default:\n      {\n        return state;\n      }\n  }\n}\nvar initialState = {\n  allMessages: [],\n  loading: false,\n  isInvalid: false,\n  initialized: false,\n  currentChannel: null,\n  currentMessageSearchQuery: null,\n  hasMoreResult: false\n};\nfunction useSetChannel(_a, _b) {\n  var channelUrl = _a.channelUrl,\n    sdkInit = _a.sdkInit;\n  var sdk = _b.sdk,\n    logger = _b.logger,\n    messageSearchDispatcher = _b.messageSearchDispatcher;\n  useEffect(function () {\n    if (channelUrl && sdkInit && (sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel)) {\n      sdk.groupChannel.getChannel(channelUrl).then(function (groupChannel) {\n        logger.info('MessageSearch | useSetChannel group channel', groupChannel);\n        messageSearchDispatcher({\n          type: SET_CURRENT_CHANNEL,\n          payload: groupChannel\n        });\n      }).catch(function () {\n        messageSearchDispatcher({\n          type: CHANNEL_INVALID,\n          payload: null\n        });\n      });\n    }\n  }, [channelUrl, sdkInit]);\n}\nvar MessageSearchOrder;\n(function (MessageSearchOrder) {\n  MessageSearchOrder[\"SCORE\"] = \"score\";\n  MessageSearchOrder[\"TIMESTAMP\"] = \"ts\";\n})(MessageSearchOrder || (MessageSearchOrder = {}));\nfunction useGetSearchedMessages(_a, _b) {\n  var currentChannel = _a.currentChannel,\n    channelUrl = _a.channelUrl,\n    requestString = _a.requestString,\n    messageSearchQuery = _a.messageSearchQuery,\n    onResultLoaded = _a.onResultLoaded,\n    retryCount = _a.retryCount;\n  var sdk = _b.sdk,\n    logger = _b.logger,\n    messageSearchDispatcher = _b.messageSearchDispatcher;\n  useEffect(function () {\n    messageSearchDispatcher({\n      type: START_MESSAGE_SEARCH,\n      payload: null\n    });\n    if (sdk && channelUrl && sdk.createMessageSearchQuery && currentChannel) {\n      if (requestString) {\n        currentChannel.refresh().then(function (channel) {\n          var inputSearchMessageQueryObject = __assign({\n            order: MessageSearchOrder.TIMESTAMP,\n            channelUrl: channelUrl,\n            messageTimestampFrom: channel.invitedAt,\n            keyword: requestString\n          }, messageSearchQuery);\n          var createdQuery = sdk.createMessageSearchQuery(inputSearchMessageQueryObject);\n          createdQuery.next().then(function (messages) {\n            logger.info('MessageSearch | useGetSearchedMessages: succeeded getting messages', messages);\n            messageSearchDispatcher({\n              type: GET_SEARCHED_MESSAGES,\n              payload: {\n                messages: messages,\n                createdQuery: createdQuery\n              }\n            });\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(messages, undefined);\n            }\n          }).catch(function (error) {\n            logger.warning('MessageSearch | useGetSearchedMessages: failed getting search messages.', error);\n            messageSearchDispatcher({\n              type: SET_QUERY_INVALID,\n              payload: null\n            });\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(undefined, error);\n            }\n          });\n          messageSearchDispatcher({\n            type: START_GETTING_SEARCHED_MESSAGES,\n            payload: createdQuery\n          });\n        }).catch(function (error) {\n          logger.warning('MessageSearch | useGetSearchedMessages: failed getting channel.', error);\n          messageSearchDispatcher({\n            type: SET_QUERY_INVALID,\n            payload: null\n          });\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(undefined, error);\n          }\n        });\n      } else {\n        logger.info('MessageSearch | useGetSeasrchedMessages: search string is empty');\n      }\n    }\n  }, [channelUrl, messageSearchQuery, requestString, currentChannel, retryCount]);\n}\nfunction useScrollCallback(_a, _b) {\n  var currentMessageSearchQuery = _a.currentMessageSearchQuery,\n    hasMoreResult = _a.hasMoreResult,\n    onResultLoaded = _a.onResultLoaded;\n  var logger = _b.logger,\n    messageSearchDispatcher = _b.messageSearchDispatcher;\n  return useCallback(function (cb) {\n    if (!hasMoreResult) {\n      logger.warning('MessageSearch | useScrollCallback: no more searched results', hasMoreResult);\n    }\n    if (currentMessageSearchQuery && currentMessageSearchQuery.hasNext) {\n      currentMessageSearchQuery.next().then(function (messages) {\n        logger.info('MessageSearch | useScrollCallback: succeeded getting searched messages', messages);\n        messageSearchDispatcher({\n          type: GET_NEXT_SEARCHED_MESSAGES,\n          payload: messages\n        });\n        cb(messages, null);\n        if (onResultLoaded && typeof onResultLoaded === 'function') {\n          onResultLoaded(messages, null);\n        }\n      }).catch(function (error) {\n        logger.warning('MessageSearch | useScrollCallback: failed getting searched messages', error);\n        cb(null, error);\n        if (onResultLoaded && typeof onResultLoaded === 'function') {\n          onResultLoaded(null, error);\n        }\n      });\n    } else {\n      logger.warning('MessageSearch | useScrollCallback: no currentMessageSearchQuery');\n    }\n  }, [currentMessageSearchQuery, hasMoreResult]);\n}\nvar DEBOUNCING_TIME = 500;\nfunction useSearchStringEffect(_a, _b) {\n  var searchString = _a.searchString;\n  var messageSearchDispatcher = _b.messageSearchDispatcher;\n  var _c = useState(''),\n    requestString = _c[0],\n    setRequestString = _c[1];\n  var _d = useState(null),\n    debouncingTimer = _d[0],\n    setDebouncingTimer = _d[1];\n  useEffect(function () {\n    clearTimeout(debouncingTimer !== null && debouncingTimer !== void 0 ? debouncingTimer : undefined);\n    if (searchString) {\n      setDebouncingTimer(setTimeout(function () {\n        setRequestString(searchString);\n      }, DEBOUNCING_TIME));\n    } else {\n      setRequestString('');\n      messageSearchDispatcher({\n        type: RESET_SEARCH_STRING,\n        payload: ''\n      });\n    }\n  }, [searchString]);\n  return requestString;\n}\nvar MessageSearchContext = React__default.createContext(null);\nvar MessageSearchProvider = function (props) {\n  var _a, _b, _c, _d, _e;\n  var\n    // message search props\n    channelUrl = props.channelUrl,\n    searchString = props.searchString,\n    messageSearchQuery = props.messageSearchQuery,\n    onResultLoaded = props.onResultLoaded,\n    onResultClick = props.onResultClick;\n  var globalState = useSendbirdStateContext();\n  // hook variables\n  var _f = useState(0),\n    retryCount = _f[0],\n    setRetryCount = _f[1]; // this is a trigger flag for activating useGetSearchMessages\n  var _g = useState(0),\n    selectedMessageId = _g[0],\n    setSelectedMessageId = _g[1];\n  var _h = useReducer(reducer, initialState),\n    messageSearchStore = _h[0],\n    messageSearchDispatcher = _h[1];\n  var allMessages = messageSearchStore.allMessages,\n    loading = messageSearchStore.loading,\n    isInvalid = messageSearchStore.isInvalid,\n    currentChannel = messageSearchStore.currentChannel,\n    currentMessageSearchQuery = messageSearchStore.currentMessageSearchQuery,\n    hasMoreResult = messageSearchStore.hasMoreResult;\n  var logger = (_a = globalState === null || globalState === void 0 ? void 0 : globalState.config) === null || _a === void 0 ? void 0 : _a.logger;\n  var sdk = (_c = (_b = globalState === null || globalState === void 0 ? void 0 : globalState.stores) === null || _b === void 0 ? void 0 : _b.sdkStore) === null || _c === void 0 ? void 0 : _c.sdk;\n  var sdkInit = (_e = (_d = globalState === null || globalState === void 0 ? void 0 : globalState.stores) === null || _d === void 0 ? void 0 : _d.sdkStore) === null || _e === void 0 ? void 0 : _e.initialized;\n  var scrollRef = useRef(null);\n  var handleOnScroll = function (e) {\n    var scrollElement = e.target;\n    var scrollTop = scrollElement.scrollTop,\n      scrollHeight = scrollElement.scrollHeight,\n      clientHeight = scrollElement.clientHeight;\n    if (!hasMoreResult) {\n      return;\n    }\n    if (scrollTop + clientHeight >= scrollHeight) {\n      onScroll(function () {\n        // after load more searched messages\n      });\n    }\n  };\n  useSetChannel({\n    channelUrl: channelUrl,\n    sdkInit: sdkInit\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messageSearchDispatcher: messageSearchDispatcher\n  });\n  var requestString = useSearchStringEffect({\n    searchString: searchString !== null && searchString !== void 0 ? searchString : ''\n  }, {\n    messageSearchDispatcher: messageSearchDispatcher\n  });\n  useGetSearchedMessages({\n    currentChannel: currentChannel,\n    channelUrl: channelUrl,\n    requestString: requestString,\n    messageSearchQuery: messageSearchQuery,\n    onResultLoaded: onResultLoaded,\n    retryCount: retryCount\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messageSearchDispatcher: messageSearchDispatcher\n  });\n  var onScroll = useScrollCallback({\n    currentMessageSearchQuery: currentMessageSearchQuery,\n    hasMoreResult: hasMoreResult,\n    onResultLoaded: onResultLoaded\n  }, {\n    logger: logger,\n    messageSearchDispatcher: messageSearchDispatcher\n  });\n  var handleRetryToConnect = function () {\n    setRetryCount(retryCount + 1);\n  };\n  return React__default.createElement(MessageSearchContext.Provider, {\n    value: {\n      channelUrl: channelUrl,\n      searchString: searchString,\n      requestString: requestString,\n      messageSearchQuery: messageSearchQuery,\n      onResultLoaded: onResultLoaded,\n      onResultClick: onResultClick,\n      retryCount: retryCount,\n      setRetryCount: setRetryCount,\n      selectedMessageId: selectedMessageId,\n      setSelectedMessageId: setSelectedMessageId,\n      messageSearchDispatcher: messageSearchDispatcher,\n      allMessages: allMessages,\n      loading: loading,\n      isInvalid: isInvalid,\n      currentChannel: currentChannel,\n      currentMessageSearchQuery: currentMessageSearchQuery,\n      hasMoreResult: hasMoreResult,\n      onScroll: onScroll,\n      scrollRef: scrollRef,\n      handleRetryToConnect: handleRetryToConnect,\n      handleOnScroll: handleOnScroll\n    }\n  }, props === null || props === void 0 ? void 0 : props.children);\n};\nvar useMessageSearchContext = function () {\n  var context = React__default.useContext(MessageSearchContext);\n  if (!context) throw new Error('MessageSearchContext not found. Use within the MessageSearch module.');\n  return context;\n};\nexport { MessageSearchProvider, useMessageSearchContext };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { useEffect, useCallback, useState, useReducer, useRef } from 'react';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { _ as __assign, c as __spreadArray } from '../chunks/bundle-BQi9-O76.js';\nimport '../withSendbird.js';\n\nvar GET_SEARCHED_MESSAGES = 'GET_SEARCHED_MESSAGES';\nvar GET_NEXT_SEARCHED_MESSAGES = 'GET_NEXT_SEARCHED_MESSAGES';\nvar START_MESSAGE_SEARCH = 'START_MESSAGE_SEARCH';\nvar START_GETTING_SEARCHED_MESSAGES = 'START_GETTING_SEARCHED_MESSAGES';\nvar SET_QUERY_INVALID = 'SET_QUERY_INVALID';\nvar SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nvar CHANNEL_INVALID = 'CHANNEL_INVALID';\nvar RESET_SEARCH_STRING = 'RESET_SEARCH_STRING';\n\nfunction reducer(state, action) {\n    switch (action.type) {\n        case SET_CURRENT_CHANNEL: {\n            var currentChannel = action.payload;\n            return __assign(__assign({}, state), { currentChannel: currentChannel, initialized: true });\n        }\n        case CHANNEL_INVALID: {\n            return __assign(__assign({}, state), { currentChannel: null, initialized: false });\n        }\n        case GET_SEARCHED_MESSAGES: {\n            var _a = action.payload, messages = _a.messages, createdQuery = _a.createdQuery;\n            if (createdQuery\n                && createdQuery.channelUrl === (state === null || state === void 0 ? void 0 : state.currentMessageSearchQuery).channelUrl\n                && createdQuery.key === (state === null || state === void 0 ? void 0 : state.currentMessageSearchQuery).key) {\n                return __assign(__assign({}, state), { loading: false, isInvalid: false, allMessages: __spreadArray([], messages, true), hasMoreResult: (state === null || state === void 0 ? void 0 : state.currentMessageSearchQuery).hasNext });\n            }\n            return __assign({}, state);\n        }\n        case SET_QUERY_INVALID: {\n            return __assign(__assign({}, state), { isInvalid: true });\n        }\n        case START_MESSAGE_SEARCH: {\n            return __assign(__assign({}, state), { isInvalid: false, loading: false });\n        }\n        case START_GETTING_SEARCHED_MESSAGES: {\n            var currentMessageSearchQuery = action.payload;\n            return __assign(__assign({}, state), { loading: true, currentMessageSearchQuery: currentMessageSearchQuery });\n        }\n        case GET_NEXT_SEARCHED_MESSAGES: {\n            var messages = action.payload;\n            return __assign(__assign({}, state), { allMessages: __spreadArray(__spreadArray([], state.allMessages, true), messages, true), hasMoreResult: (state === null || state === void 0 ? void 0 : state.currentMessageSearchQuery).hasNext });\n        }\n        case RESET_SEARCH_STRING: {\n            return __assign(__assign({}, state), { allMessages: [] });\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nvar initialState = {\n    allMessages: [],\n    loading: false,\n    isInvalid: false,\n    initialized: false,\n    currentChannel: null,\n    currentMessageSearchQuery: null,\n    hasMoreResult: false,\n};\n\nfunction useSetChannel(_a, _b) {\n    var channelUrl = _a.channelUrl, sdkInit = _a.sdkInit;\n    var sdk = _b.sdk, logger = _b.logger, messageSearchDispatcher = _b.messageSearchDispatcher;\n    useEffect(function () {\n        if (channelUrl && sdkInit && (sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel)) {\n            sdk.groupChannel.getChannel(channelUrl).then(function (groupChannel) {\n                logger.info('MessageSearch | useSetChannel group channel', groupChannel);\n                messageSearchDispatcher({\n                    type: SET_CURRENT_CHANNEL,\n                    payload: groupChannel,\n                });\n            }).catch(function () {\n                messageSearchDispatcher({\n                    type: CHANNEL_INVALID,\n                    payload: null,\n                });\n            });\n        }\n    }, [channelUrl, sdkInit]);\n}\n\nvar MessageSearchOrder;\n(function (MessageSearchOrder) {\n    MessageSearchOrder[\"SCORE\"] = \"score\";\n    MessageSearchOrder[\"TIMESTAMP\"] = \"ts\";\n})(MessageSearchOrder || (MessageSearchOrder = {}));\nfunction useGetSearchedMessages(_a, _b) {\n    var currentChannel = _a.currentChannel, channelUrl = _a.channelUrl, requestString = _a.requestString, messageSearchQuery = _a.messageSearchQuery, onResultLoaded = _a.onResultLoaded, retryCount = _a.retryCount;\n    var sdk = _b.sdk, logger = _b.logger, messageSearchDispatcher = _b.messageSearchDispatcher;\n    useEffect(function () {\n        messageSearchDispatcher({\n            type: START_MESSAGE_SEARCH,\n            payload: null,\n        });\n        if (sdk && channelUrl && sdk.createMessageSearchQuery && currentChannel) {\n            if (requestString) {\n                currentChannel.refresh()\n                    .then(function (channel) {\n                    var inputSearchMessageQueryObject = __assign({ order: MessageSearchOrder.TIMESTAMP, channelUrl: channelUrl, messageTimestampFrom: channel.invitedAt, keyword: requestString }, messageSearchQuery);\n                    var createdQuery = sdk.createMessageSearchQuery(inputSearchMessageQueryObject);\n                    createdQuery.next().then(function (messages) {\n                        logger.info('MessageSearch | useGetSearchedMessages: succeeded getting messages', messages);\n                        messageSearchDispatcher({\n                            type: GET_SEARCHED_MESSAGES,\n                            payload: {\n                                messages: messages,\n                                createdQuery: createdQuery,\n                            },\n                        });\n                        if (onResultLoaded && typeof onResultLoaded === 'function') {\n                            onResultLoaded(messages, undefined);\n                        }\n                    }).catch(function (error) {\n                        logger.warning('MessageSearch | useGetSearchedMessages: failed getting search messages.', error);\n                        messageSearchDispatcher({\n                            type: SET_QUERY_INVALID,\n                            payload: null,\n                        });\n                        if (onResultLoaded && typeof onResultLoaded === 'function') {\n                            onResultLoaded(undefined, error);\n                        }\n                    });\n                    messageSearchDispatcher({\n                        type: START_GETTING_SEARCHED_MESSAGES,\n                        payload: createdQuery,\n                    });\n                })\n                    .catch(function (error) {\n                    logger.warning('MessageSearch | useGetSearchedMessages: failed getting channel.', error);\n                    messageSearchDispatcher({\n                        type: SET_QUERY_INVALID,\n                        payload: null,\n                    });\n                    if (onResultLoaded && typeof onResultLoaded === 'function') {\n                        onResultLoaded(undefined, error);\n                    }\n                });\n            }\n            else {\n                logger.info('MessageSearch | useGetSeasrchedMessages: search string is empty');\n            }\n        }\n    }, [channelUrl, messageSearchQuery, requestString, currentChannel, retryCount]);\n}\n\nfunction useScrollCallback(_a, _b) {\n    var currentMessageSearchQuery = _a.currentMessageSearchQuery, hasMoreResult = _a.hasMoreResult, onResultLoaded = _a.onResultLoaded;\n    var logger = _b.logger, messageSearchDispatcher = _b.messageSearchDispatcher;\n    return useCallback(function (cb) {\n        if (!hasMoreResult) {\n            logger.warning('MessageSearch | useScrollCallback: no more searched results', hasMoreResult);\n        }\n        if (currentMessageSearchQuery && currentMessageSearchQuery.hasNext) {\n            currentMessageSearchQuery\n                .next()\n                .then(function (messages) {\n                logger.info('MessageSearch | useScrollCallback: succeeded getting searched messages', messages);\n                messageSearchDispatcher({\n                    type: GET_NEXT_SEARCHED_MESSAGES,\n                    payload: messages,\n                });\n                cb(messages, null);\n                if (onResultLoaded && typeof onResultLoaded === 'function') {\n                    onResultLoaded(messages, null);\n                }\n            })\n                .catch(function (error) {\n                logger.warning('MessageSearch | useScrollCallback: failed getting searched messages', error);\n                cb(null, error);\n                if (onResultLoaded && typeof onResultLoaded === 'function') {\n                    onResultLoaded(null, error);\n                }\n            });\n        }\n        else {\n            logger.warning('MessageSearch | useScrollCallback: no currentMessageSearchQuery');\n        }\n    }, [currentMessageSearchQuery, hasMoreResult]);\n}\n\nvar DEBOUNCING_TIME = 500;\nfunction useSearchStringEffect(_a, _b) {\n    var searchString = _a.searchString;\n    var messageSearchDispatcher = _b.messageSearchDispatcher;\n    var _c = useState(''), requestString = _c[0], setRequestString = _c[1];\n    var _d = useState(null), debouncingTimer = _d[0], setDebouncingTimer = _d[1];\n    useEffect(function () {\n        clearTimeout(debouncingTimer !== null && debouncingTimer !== void 0 ? debouncingTimer : undefined);\n        if (searchString) {\n            setDebouncingTimer(setTimeout(function () {\n                setRequestString(searchString);\n            }, DEBOUNCING_TIME));\n        }\n        else {\n            setRequestString('');\n            messageSearchDispatcher({\n                type: RESET_SEARCH_STRING,\n                payload: '',\n            });\n        }\n    }, [searchString]);\n    return requestString;\n}\n\nvar MessageSearchContext = React__default.createContext(null);\nvar MessageSearchProvider = function (props) {\n    var _a, _b, _c, _d, _e;\n    var \n    // message search props\n    channelUrl = props.channelUrl, searchString = props.searchString, messageSearchQuery = props.messageSearchQuery, onResultLoaded = props.onResultLoaded, onResultClick = props.onResultClick;\n    var globalState = useSendbirdStateContext();\n    // hook variables\n    var _f = useState(0), retryCount = _f[0], setRetryCount = _f[1]; // this is a trigger flag for activating useGetSearchMessages\n    var _g = useState(0), selectedMessageId = _g[0], setSelectedMessageId = _g[1];\n    var _h = useReducer(reducer, initialState), messageSearchStore = _h[0], messageSearchDispatcher = _h[1];\n    var allMessages = messageSearchStore.allMessages, loading = messageSearchStore.loading, isInvalid = messageSearchStore.isInvalid, currentChannel = messageSearchStore.currentChannel, currentMessageSearchQuery = messageSearchStore.currentMessageSearchQuery, hasMoreResult = messageSearchStore.hasMoreResult;\n    var logger = (_a = globalState === null || globalState === void 0 ? void 0 : globalState.config) === null || _a === void 0 ? void 0 : _a.logger;\n    var sdk = (_c = (_b = globalState === null || globalState === void 0 ? void 0 : globalState.stores) === null || _b === void 0 ? void 0 : _b.sdkStore) === null || _c === void 0 ? void 0 : _c.sdk;\n    var sdkInit = (_e = (_d = globalState === null || globalState === void 0 ? void 0 : globalState.stores) === null || _d === void 0 ? void 0 : _d.sdkStore) === null || _e === void 0 ? void 0 : _e.initialized;\n    var scrollRef = useRef(null);\n    var handleOnScroll = function (e) {\n        var scrollElement = e.target;\n        var scrollTop = scrollElement.scrollTop, scrollHeight = scrollElement.scrollHeight, clientHeight = scrollElement.clientHeight;\n        if (!hasMoreResult) {\n            return;\n        }\n        if (scrollTop + clientHeight >= scrollHeight) {\n            onScroll(function () {\n                // after load more searched messages\n            });\n        }\n    };\n    useSetChannel({ channelUrl: channelUrl, sdkInit: sdkInit }, { sdk: sdk, logger: logger, messageSearchDispatcher: messageSearchDispatcher });\n    var requestString = useSearchStringEffect({ searchString: searchString !== null && searchString !== void 0 ? searchString : '' }, { messageSearchDispatcher: messageSearchDispatcher });\n    useGetSearchedMessages({ currentChannel: currentChannel, channelUrl: channelUrl, requestString: requestString, messageSearchQuery: messageSearchQuery, onResultLoaded: onResultLoaded, retryCount: retryCount }, { sdk: sdk, logger: logger, messageSearchDispatcher: messageSearchDispatcher });\n    var onScroll = useScrollCallback({ currentMessageSearchQuery: currentMessageSearchQuery, hasMoreResult: hasMoreResult, onResultLoaded: onResultLoaded }, { logger: logger, messageSearchDispatcher: messageSearchDispatcher });\n    var handleRetryToConnect = function () {\n        setRetryCount(retryCount + 1);\n    };\n    return (React__default.createElement(MessageSearchContext.Provider, { value: {\n            channelUrl: channelUrl,\n            searchString: searchString,\n            requestString: requestString,\n            messageSearchQuery: messageSearchQuery,\n            onResultLoaded: onResultLoaded,\n            onResultClick: onResultClick,\n            retryCount: retryCount,\n            setRetryCount: setRetryCount,\n            selectedMessageId: selectedMessageId,\n            setSelectedMessageId: setSelectedMessageId,\n            messageSearchDispatcher: messageSearchDispatcher,\n            allMessages: allMessages,\n            loading: loading,\n            isInvalid: isInvalid,\n            currentChannel: currentChannel,\n            currentMessageSearchQuery: currentMessageSearchQuery,\n            hasMoreResult: hasMoreResult,\n            onScroll: onScroll,\n            scrollRef: scrollRef,\n            handleRetryToConnect: handleRetryToConnect,\n            handleOnScroll: handleOnScroll,\n        } }, props === null || props === void 0 ? void 0 : props.children));\n};\nvar useMessageSearchContext = function () {\n    var context = React__default.useContext(MessageSearchContext);\n    if (!context)\n        throw new Error('MessageSearchContext not found. Use within the MessageSearch module.');\n    return context;\n};\n\nexport { MessageSearchProvider, useMessageSearchContext };\n//# sourceMappingURL=context.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}