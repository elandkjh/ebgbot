{"ast":null,"code":"import React__default, { useContext, useMemo } from 'react';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../chunks/bundle-DhKQeIfP.js';\nimport { w as getClassName, d as isEditedMessage } from '../chunks/bundle-DxTN4_0p.js';\nimport { L as LocalizationContext } from '../chunks/bundle-cQZ3UZoG.js';\nimport { t as tokenizeMessage } from '../chunks/bundle-GUbI4JcD.js';\nimport { T as TextFragment } from '../chunks/bundle-DofK8ySe.js';\nimport { T as TEXT_MESSAGE_BODY_CLASSNAME } from '../chunks/bundle-B6edg1g0.js';\nimport '../chunks/bundle-BQi9-O76.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CNWAfTVw.js';\nimport '../chunks/bundle-CA85nVxp.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport '../Message/context.js';\nimport './MentionLabel.js';\nimport '../chunks/bundle-CwKZj-B6.js';\nimport 'react-dom';\nimport '../chunks/bundle-BgwzpLeQ.js';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport './SortByRow.js';\nimport '../chunks/bundle-etuaqevl.js';\nimport '../withSendbird.js';\nimport './IconButton.js';\nimport './UserProfile.js';\nimport '../chunks/bundle-BrTJ5Zbd.js';\nimport '../sendbirdSelectors.js';\nimport '../chunks/bundle-b6TpX_JP.js';\nimport '../chunks/bundle-CFosTNce.js';\nimport './ImageRenderer.js';\nimport '../chunks/bundle-DXRRGizV.js';\nimport './Icon.js';\nimport './Button.js';\nimport '../useSendbirdStateContext.js';\nimport './LinkLabel.js';\nfunction TextMessageItemBody(_a) {\n  var _b;\n  var _c = _a.className,\n    className = _c === void 0 ? '' : _c,\n    message = _a.message,\n    _d = _a.isByMe,\n    isByMe = _d === void 0 ? false : _d,\n    _e = _a.mouseHover,\n    mouseHover = _e === void 0 ? false : _e,\n    _f = _a.isMentionEnabled,\n    isMentionEnabled = _f === void 0 ? false : _f,\n    _g = _a.isReactionEnabled,\n    isReactionEnabled = _g === void 0 ? false : _g,\n    _h = _a.isMarkdownEnabled,\n    isMarkdownEnabled = _h === void 0 ? false : _h;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var isMessageMentioned = isMentionEnabled && (message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate) && message.mentionedMessageTemplate.length > 0 && (message === null || message === void 0 ? void 0 : message.mentionedUsers) && message.mentionedUsers.length > 0;\n  var tokens = useMemo(function () {\n    var _a;\n    if (isMessageMentioned) {\n      return tokenizeMessage({\n        mentionedUsers: (_a = message === null || message === void 0 ? void 0 : message.mentionedUsers) !== null && _a !== void 0 ? _a : undefined,\n        messageText: message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate,\n        includeMarkdown: isMarkdownEnabled\n      });\n    }\n    return tokenizeMessage({\n      messageText: message === null || message === void 0 ? void 0 : message.message,\n      includeMarkdown: isMarkdownEnabled\n    });\n  }, [message === null || message === void 0 ? void 0 : message.updatedAt, message === null || message === void 0 ? void 0 : message.message]);\n  return React__default.createElement(Label, {\n    type: LabelTypography.BODY_1,\n    color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1\n  }, React__default.createElement(\"div\", {\n    className: getClassName([className, TEXT_MESSAGE_BODY_CLASSNAME, isByMe ? 'outgoing' : 'incoming', mouseHover ? 'mouse-hover' : '', isReactionEnabled && ((_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length) > 0 ? 'reactions' : ''])\n  }, React__default.createElement(TextFragment, {\n    tokens: tokens\n  }), isEditedMessage(message) && React__default.createElement(Label, {\n    className: \"sendbird-text-message-item-body__message edited\",\n    type: LabelTypography.BODY_1,\n    color: isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2\n  }, \" \".concat(stringSet.MESSAGE_EDITED, \" \"))));\n}\nexport { TextMessageItemBody as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { useContext, useMemo } from 'react';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../chunks/bundle-DhKQeIfP.js';\nimport { w as getClassName, d as isEditedMessage } from '../chunks/bundle-DxTN4_0p.js';\nimport { L as LocalizationContext } from '../chunks/bundle-cQZ3UZoG.js';\nimport { t as tokenizeMessage } from '../chunks/bundle-GUbI4JcD.js';\nimport { T as TextFragment } from '../chunks/bundle-DofK8ySe.js';\nimport { T as TEXT_MESSAGE_BODY_CLASSNAME } from '../chunks/bundle-B6edg1g0.js';\nimport '../chunks/bundle-BQi9-O76.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CNWAfTVw.js';\nimport '../chunks/bundle-CA85nVxp.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport '../Message/context.js';\nimport './MentionLabel.js';\nimport '../chunks/bundle-CwKZj-B6.js';\nimport 'react-dom';\nimport '../chunks/bundle-BgwzpLeQ.js';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport './SortByRow.js';\nimport '../chunks/bundle-etuaqevl.js';\nimport '../withSendbird.js';\nimport './IconButton.js';\nimport './UserProfile.js';\nimport '../chunks/bundle-BrTJ5Zbd.js';\nimport '../sendbirdSelectors.js';\nimport '../chunks/bundle-b6TpX_JP.js';\nimport '../chunks/bundle-CFosTNce.js';\nimport './ImageRenderer.js';\nimport '../chunks/bundle-DXRRGizV.js';\nimport './Icon.js';\nimport './Button.js';\nimport '../useSendbirdStateContext.js';\nimport './LinkLabel.js';\n\nfunction TextMessageItemBody(_a) {\n    var _b;\n    var _c = _a.className, className = _c === void 0 ? '' : _c, message = _a.message, _d = _a.isByMe, isByMe = _d === void 0 ? false : _d, _e = _a.mouseHover, mouseHover = _e === void 0 ? false : _e, _f = _a.isMentionEnabled, isMentionEnabled = _f === void 0 ? false : _f, _g = _a.isReactionEnabled, isReactionEnabled = _g === void 0 ? false : _g, _h = _a.isMarkdownEnabled, isMarkdownEnabled = _h === void 0 ? false : _h;\n    var stringSet = useContext(LocalizationContext).stringSet;\n    var isMessageMentioned = isMentionEnabled\n        && (message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate)\n        && message.mentionedMessageTemplate.length > 0\n        && (message === null || message === void 0 ? void 0 : message.mentionedUsers)\n        && message.mentionedUsers.length > 0;\n    var tokens = useMemo(function () {\n        var _a;\n        if (isMessageMentioned) {\n            return tokenizeMessage({\n                mentionedUsers: (_a = message === null || message === void 0 ? void 0 : message.mentionedUsers) !== null && _a !== void 0 ? _a : undefined,\n                messageText: message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate,\n                includeMarkdown: isMarkdownEnabled,\n            });\n        }\n        return tokenizeMessage({\n            messageText: message === null || message === void 0 ? void 0 : message.message,\n            includeMarkdown: isMarkdownEnabled,\n        });\n    }, [message === null || message === void 0 ? void 0 : message.updatedAt, message === null || message === void 0 ? void 0 : message.message]);\n    return (React__default.createElement(Label, { type: LabelTypography.BODY_1, color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1 },\n        React__default.createElement(\"div\", { className: getClassName([\n                className,\n                TEXT_MESSAGE_BODY_CLASSNAME,\n                isByMe ? 'outgoing' : 'incoming',\n                mouseHover ? 'mouse-hover' : '',\n                (isReactionEnabled && ((_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length) > 0) ? 'reactions' : '',\n            ]) },\n            React__default.createElement(TextFragment, { tokens: tokens }),\n            isEditedMessage(message) && (React__default.createElement(Label, { className: \"sendbird-text-message-item-body__message edited\", type: LabelTypography.BODY_1, color: isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2 }, \" \".concat(stringSet.MESSAGE_EDITED, \" \"))))));\n}\n\nexport { TextMessageItemBody as default };\n//# sourceMappingURL=TextMessageItemBody.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}