{"ast":null,"code":"import React__default, { useRef, useContext, useEffect, useMemo, useState } from 'react';\nimport { L as Label, a as LabelTypography, b as LabelColors } from './bundle-DhKQeIfP.js';\nimport Icon, { IconTypes, IconColors } from '../ui/Icon.js';\nimport { A as Avatar } from './bundle-CFosTNce.js';\nimport { L as LocalizationContext, u as useLocalization } from './bundle-cQZ3UZoG.js';\nimport { u as uuidv4 } from './bundle-etuaqevl.js';\nimport { c as classnames } from './bundle-BgwzpLeQ.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { U as USER_MENTION_TEMP_CHAR, M as MAX_USER_MENTION_COUNT, a as MAX_USER_SUGGESTION_COUNT } from './bundle-CveCFQYP.js';\nimport { M as MessageInputKeys } from './bundle-0qSTzMXb.js';\nimport { a as __awaiter, b as __generator } from './bundle-BQi9-O76.js';\nfunction SuggestedUserMentionItem(props) {\n  var member = props.member,\n    _a = props.isFocused,\n    isFocused = _a === void 0 ? false : _a,\n    parentScrollRef = props.parentScrollRef,\n    onClick = props.onClick,\n    onMouseOver = props.onMouseOver,\n    onMouseMove = props.onMouseMove,\n    renderUserMentionItem = props.renderUserMentionItem;\n  var scrollRef = useRef(null);\n  var stringSet = useContext(LocalizationContext).stringSet;\n  useEffect(function () {\n    if (isFocused && (parentScrollRef === null || parentScrollRef === void 0 ? void 0 : parentScrollRef.current) != null && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) != null && (parentScrollRef.current.scrollTop >= scrollRef.current.offsetTop || parentScrollRef.current.scrollTop + parentScrollRef.current.clientHeight <= scrollRef.current.offsetTop)) {\n      scrollRef.current.scrollIntoView({\n        block: 'nearest',\n        inline: 'nearest'\n      });\n    }\n  }, [isFocused]);\n  var customMentionItem = useMemo(function () {\n    if (renderUserMentionItem) {\n      return React__default.createElement(\"div\", {\n        className: \"sendbird-mention-suggest-list__user-item\",\n        onClick: function (event) {\n          return onClick === null || onClick === void 0 ? void 0 : onClick({\n            event: event,\n            member: member,\n            itemRef: scrollRef\n          });\n        },\n        onMouseOver: function (event) {\n          return onMouseOver === null || onMouseOver === void 0 ? void 0 : onMouseOver({\n            event: event,\n            member: member,\n            itemRef: scrollRef\n          });\n        },\n        onMouseMove: function (event) {\n          return onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove({\n            event: event,\n            member: member,\n            itemRef: scrollRef\n          });\n        },\n        key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(),\n        ref: scrollRef\n      }, renderUserMentionItem({\n        user: member\n      }));\n    }\n  }, [renderUserMentionItem]);\n  if (customMentionItem) {\n    return customMentionItem;\n  }\n  return React__default.createElement(\"div\", {\n    className: classnames('sendbird-mention-suggest-list__user-item', isFocused && 'focused'),\n    onClick: function (event) {\n      return onClick === null || onClick === void 0 ? void 0 : onClick({\n        event: event,\n        member: member,\n        itemRef: scrollRef\n      });\n    },\n    onMouseOver: function (event) {\n      return onMouseOver === null || onMouseOver === void 0 ? void 0 : onMouseOver({\n        event: event,\n        member: member,\n        itemRef: scrollRef\n      });\n    },\n    onMouseMove: function (event) {\n      return onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove({\n        event: event,\n        member: member,\n        itemRef: scrollRef\n      });\n    },\n    key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(),\n    ref: scrollRef\n  }, React__default.createElement(Avatar, {\n    className: \"sendbird-mention-suggest-list__user-item__avatar\",\n    src: member === null || member === void 0 ? void 0 : member.profileUrl,\n    alt: \"user-profile\",\n    width: \"24px\",\n    height: \"24px\"\n  }), React__default.createElement(Label, {\n    className: \"sendbird-mention-suggest-list__user-item__nickname\",\n    testID: \"sendbird-mention-suggest-list__user-item__nickname\",\n    type: LabelTypography.SUBTITLE_2,\n    color: (member === null || member === void 0 ? void 0 : member.nickname) ? LabelColors.ONBACKGROUND_1 : LabelColors.ONBACKGROUND_3\n  }, (member === null || member === void 0 ? void 0 : member.nickname) || (stringSet === null || stringSet === void 0 ? void 0 : stringSet.MENTION_NAME__NO_NAME)), React__default.createElement(Label, {\n    className: \"sendbird-mention-suggest-list__user-item__user-id\",\n    testID: \"sendbird-mention-suggest-list__user-item__user-id\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, member === null || member === void 0 ? void 0 : member.userId));\n}\nfunction fetchMembersFromChannel(currentUserId, channel, maxSuggestionCount, searchString) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      return [2 /*return*/, channel.members.sort(function (a, b) {\n        var _a;\n        return (_a = a.nickname) === null || _a === void 0 ? void 0 : _a.localeCompare(b.nickname);\n      }).filter(function (member) {\n        var _a;\n        return ((_a = member.nickname) === null || _a === void 0 ? void 0 : _a.toLowerCase().startsWith(searchString.toLowerCase())) && member.userId !== currentUserId && member.isActive;\n      }).slice(0, maxSuggestionCount)];\n    });\n  });\n}\nfunction fetchMembersFromQuery(currentUserId, channel, maxSuggestionCount, searchString) {\n  return __awaiter(this, void 0, void 0, function () {\n    var query;\n    return __generator(this, function (_a) {\n      query = channel.createMemberListQuery({\n        limit: maxSuggestionCount + 1,\n        // because current user could be included\n        nicknameStartsWithFilter: searchString\n      });\n      return [2 /*return*/, query.next().then(function (memberList) {\n        return memberList.filter(function (member) {\n          return currentUserId !== (member === null || member === void 0 ? void 0 : member.userId);\n        }).slice(0, maxSuggestionCount);\n      })];\n    });\n  });\n}\nvar DEBOUNCING_TIME = 300;\nvar SuggestedMentionListView = function (props) {\n  var _a, _b, _c;\n  var className = props.className,\n    currentChannel = props.currentChannel,\n    _d = props.targetNickname,\n    targetNickname = _d === void 0 ? '' : _d,\n    // memberListQuery,\n    onUserItemClick = props.onUserItemClick,\n    onFocusItemChange = props.onFocusItemChange,\n    onFetchUsers = props.onFetchUsers,\n    renderUserMentionItem = props.renderUserMentionItem,\n    inputEvent = props.inputEvent,\n    _e = props.ableAddMention,\n    ableAddMention = _e === void 0 ? true : _e,\n    _f = props.maxMentionCount,\n    maxMentionCount = _f === void 0 ? MAX_USER_MENTION_COUNT : _f,\n    _g = props.maxSuggestionCount,\n    maxSuggestionCount = _g === void 0 ? MAX_USER_SUGGESTION_COUNT : _g;\n  var _h = useSendbirdStateContext(),\n    config = _h.config,\n    stores = _h.stores;\n  var logger = config.logger;\n  var currentUserId = ((_c = (_b = (_a = stores === null || stores === void 0 ? void 0 : stores.sdkStore) === null || _a === void 0 ? void 0 : _a.sdk) === null || _b === void 0 ? void 0 : _b.currentUser) === null || _c === void 0 ? void 0 : _c.userId) || '';\n  var scrollRef = useRef(null);\n  var stringSet = useLocalization().stringSet;\n  var _j = useState(null),\n    timer = _j[0],\n    setTimer = _j[1];\n  var _k = useState(''),\n    searchString = _k[0],\n    setSearchString = _k[1];\n  var _l = useState(''),\n    lastSearchString = _l[0],\n    setLastSearchString = _l[1];\n  var _m = useState(null),\n    currentFocusedMember = _m[0],\n    setCurrentFocusedMember = _m[1];\n  var _o = useState([]),\n    currentMemberList = _o[0],\n    setCurrentMemberList = _o[1];\n  useEffect(function () {\n    clearTimeout(timer !== null && timer !== void 0 ? timer : undefined);\n    setTimer(setTimeout(function () {\n      setSearchString(targetNickname);\n    }, DEBOUNCING_TIME));\n  }, [targetNickname]);\n  useEffect(function () {\n    if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.Enter) {\n      if (currentFocusedMember && currentMemberList.length > 0) {\n        onUserItemClick === null || onUserItemClick === void 0 ? void 0 : onUserItemClick(currentFocusedMember);\n      }\n    }\n    if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.ArrowUp) {\n      var currentUserIndex = currentMemberList.findIndex(function (member) {\n        return (member === null || member === void 0 ? void 0 : member.userId) === (currentFocusedMember === null || currentFocusedMember === void 0 ? void 0 : currentFocusedMember.userId);\n      });\n      if (0 < currentUserIndex) {\n        setCurrentFocusedMember(currentMemberList[currentUserIndex - 1]);\n        onFocusItemChange === null || onFocusItemChange === void 0 ? void 0 : onFocusItemChange(currentMemberList[currentUserIndex - 1]);\n      }\n    }\n    if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.ArrowDown) {\n      var currentUserIndex = currentMemberList.findIndex(function (member) {\n        return (member === null || member === void 0 ? void 0 : member.userId) === (currentFocusedMember === null || currentFocusedMember === void 0 ? void 0 : currentFocusedMember.userId);\n      });\n      if (currentUserIndex < currentMemberList.length - 1) {\n        setCurrentFocusedMember(currentMemberList[currentUserIndex + 1]);\n        onFocusItemChange === null || onFocusItemChange === void 0 ? void 0 : onFocusItemChange(currentMemberList[currentUserIndex + 1]);\n      }\n    }\n  }, [inputEvent]);\n  useEffect(function () {\n    if (lastSearchString && searchString.indexOf(lastSearchString) === 0 && currentMemberList.length === 0) {\n      // Don't need to request query again\n      return;\n    }\n    if (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isSuper) {\n      if (!(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.createMemberListQuery)) {\n        logger.warning('SuggestedMentionList: Creating member list query failed');\n        return;\n      }\n    }\n    var fetcher = (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isSuper) ? fetchMembersFromQuery : fetchMembersFromChannel;\n    fetcher(currentUserId, currentChannel, maxSuggestionCount, searchString.slice(USER_MENTION_TEMP_CHAR.length)).then(function (suggestingMembers) {\n      if (suggestingMembers.length < 1) {\n        logger.info('SuggestedMentionList: Fetched member list is empty');\n      } else {\n        logger.info('SuggestedMentionList: Fetching member list succeeded', {\n          memberList: suggestingMembers\n        });\n        setCurrentFocusedMember(suggestingMembers[0]);\n      }\n      setLastSearchString(searchString);\n      onFetchUsers === null || onFetchUsers === void 0 ? void 0 : onFetchUsers(suggestingMembers);\n      setCurrentMemberList(suggestingMembers);\n    }).catch(function (error) {\n      if (error) {\n        logger.error('SuggestedMentionList: Fetching member list failed', error);\n      }\n    });\n  }, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url,\n  // We have to be specific like this or React would not recognize the changes in instances.\n  currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.members.map(function (member) {\n    return member.nickname;\n  }).join(), currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.members.map(function (member) {\n    return member.isActive;\n  }).join(), searchString, maxSuggestionCount, currentUserId, currentMemberList.length, lastSearchString]);\n  if (!ableAddMention && currentMemberList.length === 0) {\n    return null;\n  }\n  return React__default.createElement(\"div\", {\n    className: classnames('sendbird-mention-suggest-list', className),\n    \"data-testid\": \"sendbird-mention-suggest-list\",\n    key: \"sendbird-mention-suggest-list\",\n    ref: scrollRef\n  }, ableAddMention && (currentMemberList === null || currentMemberList === void 0 ? void 0 : currentMemberList.map(function (member) {\n    return React__default.createElement(SuggestedUserMentionItem, {\n      key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(),\n      member: member,\n      isFocused: (member === null || member === void 0 ? void 0 : member.userId) === (currentFocusedMember === null || currentFocusedMember === void 0 ? void 0 : currentFocusedMember.userId),\n      parentScrollRef: scrollRef,\n      onClick: function (_a) {\n        var member = _a.member;\n        onUserItemClick === null || onUserItemClick === void 0 ? void 0 : onUserItemClick(member);\n      },\n      onMouseOver: function (_a) {\n        var member = _a.member;\n        setCurrentFocusedMember(member);\n      },\n      renderUserMentionItem: renderUserMentionItem\n    });\n  })), !ableAddMention && React__default.createElement(\"div\", {\n    className: \"sendbird-mention-suggest-list__notice-item\"\n  }, React__default.createElement(Icon, {\n    className: \"sendbird-mention-suggest-list__notice-item__icon\",\n    type: IconTypes.INFO,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"20px\",\n    height: \"20px\"\n  }), React__default.createElement(Label, {\n    className: \"sendbird-mention-suggest-list__notice-item__text\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, stringSet.MENTION_COUNT__OVER_LIMIT.replace('%d', String(maxMentionCount)))));\n};\nexport { SuggestedMentionListView as S };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { useRef, useContext, useEffect, useMemo, useState } from 'react';\nimport { L as Label, a as LabelTypography, b as LabelColors } from './bundle-DhKQeIfP.js';\nimport Icon, { IconTypes, IconColors } from '../ui/Icon.js';\nimport { A as Avatar } from './bundle-CFosTNce.js';\nimport { L as LocalizationContext, u as useLocalization } from './bundle-cQZ3UZoG.js';\nimport { u as uuidv4 } from './bundle-etuaqevl.js';\nimport { c as classnames } from './bundle-BgwzpLeQ.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { U as USER_MENTION_TEMP_CHAR, M as MAX_USER_MENTION_COUNT, a as MAX_USER_SUGGESTION_COUNT } from './bundle-CveCFQYP.js';\nimport { M as MessageInputKeys } from './bundle-0qSTzMXb.js';\nimport { a as __awaiter, b as __generator } from './bundle-BQi9-O76.js';\n\nfunction SuggestedUserMentionItem(props) {\n    var member = props.member, _a = props.isFocused, isFocused = _a === void 0 ? false : _a, parentScrollRef = props.parentScrollRef, onClick = props.onClick, onMouseOver = props.onMouseOver, onMouseMove = props.onMouseMove, renderUserMentionItem = props.renderUserMentionItem;\n    var scrollRef = useRef(null);\n    var stringSet = useContext(LocalizationContext).stringSet;\n    useEffect(function () {\n        if (isFocused && (parentScrollRef === null || parentScrollRef === void 0 ? void 0 : parentScrollRef.current) != null && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) != null\n            && (parentScrollRef.current.scrollTop >= scrollRef.current.offsetTop\n                || parentScrollRef.current.scrollTop + parentScrollRef.current.clientHeight <= scrollRef.current.offsetTop)) {\n            scrollRef.current.scrollIntoView({ block: 'nearest', inline: 'nearest' });\n        }\n    }, [isFocused]);\n    var customMentionItem = useMemo(function () {\n        if (renderUserMentionItem) {\n            return (React__default.createElement(\"div\", { className: \"sendbird-mention-suggest-list__user-item\", onClick: function (event) { return onClick === null || onClick === void 0 ? void 0 : onClick({ event: event, member: member, itemRef: scrollRef }); }, onMouseOver: function (event) { return onMouseOver === null || onMouseOver === void 0 ? void 0 : onMouseOver({ event: event, member: member, itemRef: scrollRef }); }, onMouseMove: function (event) { return onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove({ event: event, member: member, itemRef: scrollRef }); }, key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(), ref: scrollRef }, renderUserMentionItem({ user: member })));\n        }\n    }, [renderUserMentionItem]);\n    if (customMentionItem) {\n        return customMentionItem;\n    }\n    return (React__default.createElement(\"div\", { className: classnames('sendbird-mention-suggest-list__user-item', isFocused && 'focused'), onClick: function (event) { return onClick === null || onClick === void 0 ? void 0 : onClick({ event: event, member: member, itemRef: scrollRef }); }, onMouseOver: function (event) { return onMouseOver === null || onMouseOver === void 0 ? void 0 : onMouseOver({ event: event, member: member, itemRef: scrollRef }); }, onMouseMove: function (event) { return onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove({ event: event, member: member, itemRef: scrollRef }); }, key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(), ref: scrollRef },\n        React__default.createElement(Avatar, { className: \"sendbird-mention-suggest-list__user-item__avatar\", src: member === null || member === void 0 ? void 0 : member.profileUrl, alt: \"user-profile\", width: \"24px\", height: \"24px\" }),\n        React__default.createElement(Label, { className: \"sendbird-mention-suggest-list__user-item__nickname\", testID: \"sendbird-mention-suggest-list__user-item__nickname\", type: LabelTypography.SUBTITLE_2, color: (member === null || member === void 0 ? void 0 : member.nickname) ? LabelColors.ONBACKGROUND_1 : LabelColors.ONBACKGROUND_3 }, (member === null || member === void 0 ? void 0 : member.nickname) || (stringSet === null || stringSet === void 0 ? void 0 : stringSet.MENTION_NAME__NO_NAME)),\n        React__default.createElement(Label, { className: \"sendbird-mention-suggest-list__user-item__user-id\", testID: \"sendbird-mention-suggest-list__user-item__user-id\", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_2 }, member === null || member === void 0 ? void 0 : member.userId)));\n}\n\nfunction fetchMembersFromChannel(currentUserId, channel, maxSuggestionCount, searchString) {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            return [2 /*return*/, channel.members\n                    .sort(function (a, b) { var _a; return (_a = a.nickname) === null || _a === void 0 ? void 0 : _a.localeCompare(b.nickname); })\n                    .filter(function (member) {\n                    var _a;\n                    return ((_a = member.nickname) === null || _a === void 0 ? void 0 : _a.toLowerCase().startsWith(searchString.toLowerCase()))\n                        && member.userId !== currentUserId\n                        && member.isActive;\n                }).slice(0, maxSuggestionCount)];\n        });\n    });\n}\nfunction fetchMembersFromQuery(currentUserId, channel, maxSuggestionCount, searchString) {\n    return __awaiter(this, void 0, void 0, function () {\n        var query;\n        return __generator(this, function (_a) {\n            query = channel.createMemberListQuery({\n                limit: maxSuggestionCount + 1, // because current user could be included\n                nicknameStartsWithFilter: searchString,\n            });\n            return [2 /*return*/, query.next()\n                    .then(function (memberList) {\n                    return memberList\n                        .filter(function (member) { return currentUserId !== (member === null || member === void 0 ? void 0 : member.userId); })\n                        .slice(0, maxSuggestionCount);\n                })];\n        });\n    });\n}\n\nvar DEBOUNCING_TIME = 300;\nvar SuggestedMentionListView = function (props) {\n    var _a, _b, _c;\n    var className = props.className, currentChannel = props.currentChannel, _d = props.targetNickname, targetNickname = _d === void 0 ? '' : _d, \n    // memberListQuery,\n    onUserItemClick = props.onUserItemClick, onFocusItemChange = props.onFocusItemChange, onFetchUsers = props.onFetchUsers, renderUserMentionItem = props.renderUserMentionItem, inputEvent = props.inputEvent, _e = props.ableAddMention, ableAddMention = _e === void 0 ? true : _e, _f = props.maxMentionCount, maxMentionCount = _f === void 0 ? MAX_USER_MENTION_COUNT : _f, _g = props.maxSuggestionCount, maxSuggestionCount = _g === void 0 ? MAX_USER_SUGGESTION_COUNT : _g;\n    var _h = useSendbirdStateContext(), config = _h.config, stores = _h.stores;\n    var logger = config.logger;\n    var currentUserId = ((_c = (_b = (_a = stores === null || stores === void 0 ? void 0 : stores.sdkStore) === null || _a === void 0 ? void 0 : _a.sdk) === null || _b === void 0 ? void 0 : _b.currentUser) === null || _c === void 0 ? void 0 : _c.userId) || '';\n    var scrollRef = useRef(null);\n    var stringSet = useLocalization().stringSet;\n    var _j = useState(null), timer = _j[0], setTimer = _j[1];\n    var _k = useState(''), searchString = _k[0], setSearchString = _k[1];\n    var _l = useState(''), lastSearchString = _l[0], setLastSearchString = _l[1];\n    var _m = useState(null), currentFocusedMember = _m[0], setCurrentFocusedMember = _m[1];\n    var _o = useState([]), currentMemberList = _o[0], setCurrentMemberList = _o[1];\n    useEffect(function () {\n        clearTimeout(timer !== null && timer !== void 0 ? timer : undefined);\n        setTimer(setTimeout(function () {\n            setSearchString(targetNickname);\n        }, DEBOUNCING_TIME));\n    }, [targetNickname]);\n    useEffect(function () {\n        if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.Enter) {\n            if (currentFocusedMember && currentMemberList.length > 0) {\n                onUserItemClick === null || onUserItemClick === void 0 ? void 0 : onUserItemClick(currentFocusedMember);\n            }\n        }\n        if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.ArrowUp) {\n            var currentUserIndex = currentMemberList.findIndex(function (member) { return (member === null || member === void 0 ? void 0 : member.userId) === (currentFocusedMember === null || currentFocusedMember === void 0 ? void 0 : currentFocusedMember.userId); });\n            if (0 < currentUserIndex) {\n                setCurrentFocusedMember(currentMemberList[currentUserIndex - 1]);\n                onFocusItemChange === null || onFocusItemChange === void 0 ? void 0 : onFocusItemChange(currentMemberList[currentUserIndex - 1]);\n            }\n        }\n        if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.ArrowDown) {\n            var currentUserIndex = currentMemberList.findIndex(function (member) { return (member === null || member === void 0 ? void 0 : member.userId) === (currentFocusedMember === null || currentFocusedMember === void 0 ? void 0 : currentFocusedMember.userId); });\n            if (currentUserIndex < currentMemberList.length - 1) {\n                setCurrentFocusedMember(currentMemberList[currentUserIndex + 1]);\n                onFocusItemChange === null || onFocusItemChange === void 0 ? void 0 : onFocusItemChange(currentMemberList[currentUserIndex + 1]);\n            }\n        }\n    }, [inputEvent]);\n    useEffect(function () {\n        if (lastSearchString && searchString.indexOf(lastSearchString) === 0 && currentMemberList.length === 0) {\n            // Don't need to request query again\n            return;\n        }\n        if (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isSuper) {\n            if (!(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.createMemberListQuery)) {\n                logger.warning('SuggestedMentionList: Creating member list query failed');\n                return;\n            }\n        }\n        var fetcher = (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isSuper) ? fetchMembersFromQuery : fetchMembersFromChannel;\n        fetcher(currentUserId, currentChannel, maxSuggestionCount, searchString.slice(USER_MENTION_TEMP_CHAR.length))\n            .then(function (suggestingMembers) {\n            if (suggestingMembers.length < 1) {\n                logger.info('SuggestedMentionList: Fetched member list is empty');\n            }\n            else {\n                logger.info('SuggestedMentionList: Fetching member list succeeded', { memberList: suggestingMembers });\n                setCurrentFocusedMember(suggestingMembers[0]);\n            }\n            setLastSearchString(searchString);\n            onFetchUsers === null || onFetchUsers === void 0 ? void 0 : onFetchUsers(suggestingMembers);\n            setCurrentMemberList(suggestingMembers);\n        })\n            .catch(function (error) {\n            if (error) {\n                logger.error('SuggestedMentionList: Fetching member list failed', error);\n            }\n        });\n    }, [\n        currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url,\n        // We have to be specific like this or React would not recognize the changes in instances.\n        currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.members.map(function (member) { return member.nickname; }).join(),\n        currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.members.map(function (member) { return member.isActive; }).join(),\n        searchString,\n        maxSuggestionCount,\n        currentUserId,\n        currentMemberList.length,\n        lastSearchString,\n    ]);\n    if (!ableAddMention && currentMemberList.length === 0) {\n        return null;\n    }\n    return (React__default.createElement(\"div\", { className: classnames('sendbird-mention-suggest-list', className), \"data-testid\": \"sendbird-mention-suggest-list\", key: \"sendbird-mention-suggest-list\", ref: scrollRef },\n        ableAddMention\n            && (currentMemberList === null || currentMemberList === void 0 ? void 0 : currentMemberList.map(function (member) { return (React__default.createElement(SuggestedUserMentionItem, { key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(), member: member, isFocused: (member === null || member === void 0 ? void 0 : member.userId) === (currentFocusedMember === null || currentFocusedMember === void 0 ? void 0 : currentFocusedMember.userId), parentScrollRef: scrollRef, onClick: function (_a) {\n                    var member = _a.member;\n                    onUserItemClick === null || onUserItemClick === void 0 ? void 0 : onUserItemClick(member);\n                }, onMouseOver: function (_a) {\n                    var member = _a.member;\n                    setCurrentFocusedMember(member);\n                }, renderUserMentionItem: renderUserMentionItem })); })),\n        !ableAddMention && (React__default.createElement(\"div\", { className: \"sendbird-mention-suggest-list__notice-item\" },\n            React__default.createElement(Icon, { className: \"sendbird-mention-suggest-list__notice-item__icon\", type: IconTypes.INFO, fillColor: IconColors.ON_BACKGROUND_2, width: \"20px\", height: \"20px\" }),\n            React__default.createElement(Label, { className: \"sendbird-mention-suggest-list__notice-item__text\", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_2 }, stringSet.MENTION_COUNT__OVER_LIMIT.replace('%d', String(maxMentionCount)))))));\n};\n\nexport { SuggestedMentionListView as S };\n//# sourceMappingURL=bundle-Due9yzp6.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}