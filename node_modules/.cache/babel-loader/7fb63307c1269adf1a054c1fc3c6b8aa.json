{"ast":null,"code":"import React__default from 'react';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport { useChannelSettingsContext } from '../context.js';\nimport { n as noop } from '../../chunks/bundle-BgwzpLeQ.js';\nimport { M as Modal } from '../../chunks/bundle-CXdo2kR_.js';\nimport { u as useLocalization } from '../../chunks/bundle-cQZ3UZoG.js';\nimport { u as useMediaQueryContext } from '../../chunks/bundle-f-SpnOx2.js';\nimport TextButton from '../../ui/TextButton.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../chunks/bundle-DhKQeIfP.js';\nimport '../../withSendbird.js';\nimport '../../chunks/bundle-BQi9-O76.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '../../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport 'react-dom';\nimport '../../ui/IconButton.js';\nimport '../../ui/Button.js';\nimport '../../ui/Icon.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport '../../ui/SortByRow.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nvar LeaveChannel = function (props) {\n  var _a, _b;\n  var _c = props.onSubmit,\n    onSubmit = _c === void 0 ? noop : _c,\n    _d = props.onCancel,\n    onCancel = _d === void 0 ? noop : _d;\n  var _e = useChannelSettingsContext(),\n    channel = _e.channel,\n    onLeaveChannel = _e.onLeaveChannel;\n  var stringSet = useLocalization().stringSet;\n  var state = useSendbirdStateContext();\n  var logger = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.logger;\n  var isOnline = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.isOnline;\n  var isMobile = useMediaQueryContext().isMobile;\n  var getChannelName = function (channel) {\n    if ((channel === null || channel === void 0 ? void 0 : channel.name) && (channel === null || channel === void 0 ? void 0 : channel.name) !== 'Group Channel') {\n      return channel.name;\n    }\n    if ((channel === null || channel === void 0 ? void 0 : channel.name) === 'Group Channel' || !(channel === null || channel === void 0 ? void 0 : channel.name)) {\n      return ((channel === null || channel === void 0 ? void 0 : channel.members) || []).map(function (member) {\n        return member.nickname || stringSet.NO_NAME;\n      }).join(', ');\n    }\n    return stringSet.NO_TITLE;\n  };\n  if (isMobile) {\n    return React__default.createElement(Modal, {\n      className: \"sendbird-channel-settings__leave--mobile\",\n      titleText: getChannelName(channel),\n      hideFooter: true,\n      isCloseOnClickOutside: true,\n      onCancel: onCancel\n    }, React__default.createElement(TextButton, {\n      onClick: function () {\n        logger.info('ChannelSettings: Leaving channel', channel);\n        channel === null || channel === void 0 ? void 0 : channel.leave().then(function () {\n          logger.info('ChannelSettings: Leaving channel successful!', channel);\n          onLeaveChannel === null || onLeaveChannel === void 0 ? void 0 : onLeaveChannel();\n        });\n      },\n      className: \"sendbird-channel-settings__leave-label--mobile\"\n    }, React__default.createElement(Label, {\n      type: LabelTypography.SUBTITLE_1,\n      color: LabelColors.ONBACKGROUND_1\n    }, stringSet.CHANNEL_PREVIEW_MOBILE_LEAVE)));\n  }\n  return React__default.createElement(Modal, {\n    isFullScreenOnMobile: true,\n    disabled: !isOnline,\n    onCancel: onCancel,\n    onSubmit: function () {\n      logger.info('ChannelSettings: Leaving channel', channel);\n      channel === null || channel === void 0 ? void 0 : channel.leave().then(function () {\n        logger.info('ChannelSettings: Leaving channel successful!', channel);\n        // is for backward compactability\n        if (onLeaveChannel) {\n          onLeaveChannel();\n        } else {\n          onSubmit();\n        }\n      });\n    },\n    submitText: stringSet.MODAL__LEAVE_CHANNEL__FOOTER,\n    titleText: stringSet.MODAL__LEAVE_CHANNEL__TITLE\n  });\n};\nexport { LeaveChannel as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default from 'react';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport { useChannelSettingsContext } from '../context.js';\nimport { n as noop } from '../../chunks/bundle-BgwzpLeQ.js';\nimport { M as Modal } from '../../chunks/bundle-CXdo2kR_.js';\nimport { u as useLocalization } from '../../chunks/bundle-cQZ3UZoG.js';\nimport { u as useMediaQueryContext } from '../../chunks/bundle-f-SpnOx2.js';\nimport TextButton from '../../ui/TextButton.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../chunks/bundle-DhKQeIfP.js';\nimport '../../withSendbird.js';\nimport '../../chunks/bundle-BQi9-O76.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '../../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport 'react-dom';\nimport '../../ui/IconButton.js';\nimport '../../ui/Button.js';\nimport '../../ui/Icon.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport '../../ui/SortByRow.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../chunks/bundle-rA4afvKU.js';\n\nvar LeaveChannel = function (props) {\n    var _a, _b;\n    var _c = props.onSubmit, onSubmit = _c === void 0 ? noop : _c, _d = props.onCancel, onCancel = _d === void 0 ? noop : _d;\n    var _e = useChannelSettingsContext(), channel = _e.channel, onLeaveChannel = _e.onLeaveChannel;\n    var stringSet = useLocalization().stringSet;\n    var state = useSendbirdStateContext();\n    var logger = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.logger;\n    var isOnline = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.isOnline;\n    var isMobile = useMediaQueryContext().isMobile;\n    var getChannelName = function (channel) {\n        if ((channel === null || channel === void 0 ? void 0 : channel.name) && (channel === null || channel === void 0 ? void 0 : channel.name) !== 'Group Channel') {\n            return channel.name;\n        }\n        if ((channel === null || channel === void 0 ? void 0 : channel.name) === 'Group Channel' || !(channel === null || channel === void 0 ? void 0 : channel.name)) {\n            return ((channel === null || channel === void 0 ? void 0 : channel.members) || []).map(function (member) { return member.nickname || stringSet.NO_NAME; }).join(', ');\n        }\n        return stringSet.NO_TITLE;\n    };\n    if (isMobile) {\n        return (React__default.createElement(Modal, { className: \"sendbird-channel-settings__leave--mobile\", titleText: getChannelName(channel), hideFooter: true, isCloseOnClickOutside: true, onCancel: onCancel },\n            React__default.createElement(TextButton, { onClick: function () {\n                    logger.info('ChannelSettings: Leaving channel', channel);\n                    channel === null || channel === void 0 ? void 0 : channel.leave().then(function () {\n                        logger.info('ChannelSettings: Leaving channel successful!', channel);\n                        onLeaveChannel === null || onLeaveChannel === void 0 ? void 0 : onLeaveChannel();\n                    });\n                }, className: \"sendbird-channel-settings__leave-label--mobile\" },\n                React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.CHANNEL_PREVIEW_MOBILE_LEAVE))));\n    }\n    return (React__default.createElement(Modal, { isFullScreenOnMobile: true, disabled: !isOnline, onCancel: onCancel, onSubmit: function () {\n            logger.info('ChannelSettings: Leaving channel', channel);\n            channel === null || channel === void 0 ? void 0 : channel.leave().then(function () {\n                logger.info('ChannelSettings: Leaving channel successful!', channel);\n                // is for backward compactability\n                if (onLeaveChannel) {\n                    onLeaveChannel();\n                }\n                else {\n                    onSubmit();\n                }\n            });\n        }, submitText: stringSet.MODAL__LEAVE_CHANNEL__FOOTER, titleText: stringSet.MODAL__LEAVE_CHANNEL__TITLE }));\n};\n\nexport { LeaveChannel as default };\n//# sourceMappingURL=LeaveChannel.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}