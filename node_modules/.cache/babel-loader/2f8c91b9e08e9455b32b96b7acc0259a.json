{"ast":null,"code":"import { _ as __assign } from '../chunks/bundle-BQi9-O76.js';\nimport React__default, { useEffect, useState, useContext } from 'react';\nimport { GroupChannelFilter } from '@sendbird/chat/groupChannel';\nimport { useGroupChannelList, useGroupChannelHandler } from '@sendbird/uikit-tools';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { U as UserProfileProvider } from '../chunks/bundle-BrTJ5Zbd.js';\nimport { u as useOnlineStatus, a as useMarkAsDeliveredScheduler } from '../chunks/bundle-Soz6sOqr.js';\nimport { n as noop } from '../chunks/bundle-BgwzpLeQ.js';\nimport '../withSendbird.js';\nimport '@sendbird/chat';\nimport '../chunks/bundle-etuaqevl.js';\nvar GroupChannelListContext = React__default.createContext(null);\nvar GroupChannelListProvider = function (props) {\n  var _a, _b, _c;\n  var children = props.children,\n    _d = props.className,\n    className = _d === void 0 ? '' : _d,\n    selectedChannelUrl = props.selectedChannelUrl,\n    _e = props.disableAutoSelect,\n    disableAutoSelect = _e === void 0 ? false : _e,\n    allowProfileEdit = props.allowProfileEdit,\n    isTypingIndicatorEnabled = props.isTypingIndicatorEnabled,\n    isMessageReceiptStatusEnabled = props.isMessageReceiptStatusEnabled,\n    channelListQueryParams = props.channelListQueryParams,\n    onThemeChange = props.onThemeChange,\n    _f = props.onChannelSelect,\n    onChannelSelect = _f === void 0 ? noop : _f,\n    _g = props.onChannelCreated,\n    onChannelCreated = _g === void 0 ? noop : _g,\n    onCreateChannelClick = props.onCreateChannelClick,\n    onBeforeCreateChannel = props.onBeforeCreateChannel,\n    onUserProfileUpdated = props.onUserProfileUpdated,\n    disableUserProfile = props.disableUserProfile,\n    renderUserProfile = props.renderUserProfile,\n    onUserProfileMessage = props.onUserProfileMessage;\n  var globalStore = useSendbirdStateContext();\n  var config = globalStore.config,\n    stores = globalStore.stores;\n  var sdkStore = stores.sdkStore;\n  var sdk = sdkStore.sdk;\n  var isConnected = useOnlineStatus(sdk, config.logger);\n  var scheduler = useMarkAsDeliveredScheduler({\n    isConnected: isConnected\n  }, config);\n  var channelListDataSource = useGroupChannelList(sdk, {\n    collectionCreator: getCollectionCreator(sdk, channelListQueryParams),\n    markAsDelivered: function (channels) {\n      return channels.forEach(scheduler.push);\n    },\n    onChannelsDeleted: function (channelUrls) {\n      channelUrls.forEach(function (url) {\n        if (url === selectedChannelUrl) onChannelSelect(null);\n      });\n    }\n  });\n  var refreshing = channelListDataSource.refreshing,\n    initialized = channelListDataSource.initialized,\n    groupChannels = channelListDataSource.groupChannels,\n    refresh = channelListDataSource.refresh,\n    loadMore = channelListDataSource.loadMore;\n  // SideEffect: Auto select channel\n  useEffect(function () {\n    var _a;\n    if (!disableAutoSelect && stores.sdkStore.initialized && initialized) {\n      if (!selectedChannelUrl) onChannelSelect((_a = groupChannels[0]) !== null && _a !== void 0 ? _a : null);\n    }\n  }, [disableAutoSelect, stores.sdkStore.initialized, initialized, selectedChannelUrl]);\n  var _h = useState([]),\n    typingChannelUrls = _h[0],\n    setTypingChannelUrls = _h[1];\n  useGroupChannelHandler(sdk, {\n    onTypingStatusUpdated: function (channel) {\n      var _a;\n      var channelList = typingChannelUrls.filter(function (channelUrl) {\n        return channelUrl !== channel.url;\n      });\n      if (((_a = channel.getTypingUsers()) === null || _a === void 0 ? void 0 : _a.length) > 0) {\n        setTypingChannelUrls(channelList.concat(channel.url));\n      } else {\n        setTypingChannelUrls(channelList);\n      }\n    }\n  });\n  return React__default.createElement(GroupChannelListContext.Provider, {\n    value: {\n      className: className,\n      selectedChannelUrl: selectedChannelUrl,\n      disableAutoSelect: disableAutoSelect,\n      allowProfileEdit: (_a = allowProfileEdit !== null && allowProfileEdit !== void 0 ? allowProfileEdit : config.allowProfileEdit) !== null && _a !== void 0 ? _a : true,\n      isTypingIndicatorEnabled: (_b = isTypingIndicatorEnabled !== null && isTypingIndicatorEnabled !== void 0 ? isTypingIndicatorEnabled : config.groupChannelList.enableTypingIndicator) !== null && _b !== void 0 ? _b : false,\n      isMessageReceiptStatusEnabled: (_c = isMessageReceiptStatusEnabled !== null && isMessageReceiptStatusEnabled !== void 0 ? isMessageReceiptStatusEnabled : config.groupChannelList.enableMessageReceiptStatus) !== null && _c !== void 0 ? _c : false,\n      onChannelSelect: onChannelSelect,\n      onChannelCreated: onChannelCreated,\n      onThemeChange: onThemeChange,\n      onCreateChannelClick: onCreateChannelClick,\n      onBeforeCreateChannel: onBeforeCreateChannel,\n      onUserProfileUpdated: onUserProfileUpdated,\n      typingChannelUrls: typingChannelUrls,\n      refreshing: refreshing,\n      initialized: initialized,\n      groupChannels: groupChannels,\n      refresh: refresh,\n      loadMore: loadMore\n    }\n  }, React__default.createElement(UserProfileProvider, {\n    disableUserProfile: disableUserProfile !== null && disableUserProfile !== void 0 ? disableUserProfile : !config.common.enableUsingDefaultUserProfile,\n    renderUserProfile: renderUserProfile !== null && renderUserProfile !== void 0 ? renderUserProfile : config === null || config === void 0 ? void 0 : config.renderUserProfile,\n    onUserProfileMessage: onUserProfileMessage !== null && onUserProfileMessage !== void 0 ? onUserProfileMessage : config === null || config === void 0 ? void 0 : config.onUserProfileMessage\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-channel-list \".concat(className)\n  }, children)));\n};\nvar useGroupChannelListContext = function () {\n  var context = useContext(GroupChannelListContext);\n  if (!context) throw new Error('GroupChannelListContext not found. Use within the GroupChannelList module.');\n  return context;\n};\nfunction getCollectionCreator(sdk, channelListQueryParams) {\n  return function (defaultParams) {\n    var params = __assign(__assign({}, defaultParams), channelListQueryParams);\n    return sdk.groupChannel.createGroupChannelCollection(__assign(__assign({}, params), {\n      filter: new GroupChannelFilter(params)\n    }));\n  };\n}\nexport { GroupChannelListContext, GroupChannelListProvider, useGroupChannelListContext };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { _ as __assign } from '../chunks/bundle-BQi9-O76.js';\nimport React__default, { useEffect, useState, useContext } from 'react';\nimport { GroupChannelFilter } from '@sendbird/chat/groupChannel';\nimport { useGroupChannelList, useGroupChannelHandler } from '@sendbird/uikit-tools';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { U as UserProfileProvider } from '../chunks/bundle-BrTJ5Zbd.js';\nimport { u as useOnlineStatus, a as useMarkAsDeliveredScheduler } from '../chunks/bundle-Soz6sOqr.js';\nimport { n as noop } from '../chunks/bundle-BgwzpLeQ.js';\nimport '../withSendbird.js';\nimport '@sendbird/chat';\nimport '../chunks/bundle-etuaqevl.js';\n\nvar GroupChannelListContext = React__default.createContext(null);\nvar GroupChannelListProvider = function (props) {\n    var _a, _b, _c;\n    var children = props.children, _d = props.className, className = _d === void 0 ? '' : _d, selectedChannelUrl = props.selectedChannelUrl, _e = props.disableAutoSelect, disableAutoSelect = _e === void 0 ? false : _e, allowProfileEdit = props.allowProfileEdit, isTypingIndicatorEnabled = props.isTypingIndicatorEnabled, isMessageReceiptStatusEnabled = props.isMessageReceiptStatusEnabled, channelListQueryParams = props.channelListQueryParams, onThemeChange = props.onThemeChange, _f = props.onChannelSelect, onChannelSelect = _f === void 0 ? noop : _f, _g = props.onChannelCreated, onChannelCreated = _g === void 0 ? noop : _g, onCreateChannelClick = props.onCreateChannelClick, onBeforeCreateChannel = props.onBeforeCreateChannel, onUserProfileUpdated = props.onUserProfileUpdated, disableUserProfile = props.disableUserProfile, renderUserProfile = props.renderUserProfile, onUserProfileMessage = props.onUserProfileMessage;\n    var globalStore = useSendbirdStateContext();\n    var config = globalStore.config, stores = globalStore.stores;\n    var sdkStore = stores.sdkStore;\n    var sdk = sdkStore.sdk;\n    var isConnected = useOnlineStatus(sdk, config.logger);\n    var scheduler = useMarkAsDeliveredScheduler({ isConnected: isConnected }, config);\n    var channelListDataSource = useGroupChannelList(sdk, {\n        collectionCreator: getCollectionCreator(sdk, channelListQueryParams),\n        markAsDelivered: function (channels) { return channels.forEach(scheduler.push); },\n        onChannelsDeleted: function (channelUrls) {\n            channelUrls.forEach(function (url) {\n                if (url === selectedChannelUrl)\n                    onChannelSelect(null);\n            });\n        },\n    });\n    var refreshing = channelListDataSource.refreshing, initialized = channelListDataSource.initialized, groupChannels = channelListDataSource.groupChannels, refresh = channelListDataSource.refresh, loadMore = channelListDataSource.loadMore;\n    // SideEffect: Auto select channel\n    useEffect(function () {\n        var _a;\n        if (!disableAutoSelect && stores.sdkStore.initialized && initialized) {\n            if (!selectedChannelUrl)\n                onChannelSelect((_a = groupChannels[0]) !== null && _a !== void 0 ? _a : null);\n        }\n    }, [disableAutoSelect, stores.sdkStore.initialized, initialized, selectedChannelUrl]);\n    var _h = useState([]), typingChannelUrls = _h[0], setTypingChannelUrls = _h[1];\n    useGroupChannelHandler(sdk, {\n        onTypingStatusUpdated: function (channel) {\n            var _a;\n            var channelList = typingChannelUrls.filter(function (channelUrl) { return channelUrl !== channel.url; });\n            if (((_a = channel.getTypingUsers()) === null || _a === void 0 ? void 0 : _a.length) > 0) {\n                setTypingChannelUrls(channelList.concat(channel.url));\n            }\n            else {\n                setTypingChannelUrls(channelList);\n            }\n        },\n    });\n    return (React__default.createElement(GroupChannelListContext.Provider, { value: {\n            className: className,\n            selectedChannelUrl: selectedChannelUrl,\n            disableAutoSelect: disableAutoSelect,\n            allowProfileEdit: (_a = allowProfileEdit !== null && allowProfileEdit !== void 0 ? allowProfileEdit : config.allowProfileEdit) !== null && _a !== void 0 ? _a : true,\n            isTypingIndicatorEnabled: (_b = isTypingIndicatorEnabled !== null && isTypingIndicatorEnabled !== void 0 ? isTypingIndicatorEnabled : config.groupChannelList.enableTypingIndicator) !== null && _b !== void 0 ? _b : false,\n            isMessageReceiptStatusEnabled: (_c = isMessageReceiptStatusEnabled !== null && isMessageReceiptStatusEnabled !== void 0 ? isMessageReceiptStatusEnabled : config.groupChannelList.enableMessageReceiptStatus) !== null && _c !== void 0 ? _c : false,\n            onChannelSelect: onChannelSelect,\n            onChannelCreated: onChannelCreated,\n            onThemeChange: onThemeChange,\n            onCreateChannelClick: onCreateChannelClick,\n            onBeforeCreateChannel: onBeforeCreateChannel,\n            onUserProfileUpdated: onUserProfileUpdated,\n            typingChannelUrls: typingChannelUrls,\n            refreshing: refreshing,\n            initialized: initialized,\n            groupChannels: groupChannels,\n            refresh: refresh,\n            loadMore: loadMore,\n        } },\n        React__default.createElement(UserProfileProvider, { disableUserProfile: disableUserProfile !== null && disableUserProfile !== void 0 ? disableUserProfile : !config.common.enableUsingDefaultUserProfile, renderUserProfile: renderUserProfile !== null && renderUserProfile !== void 0 ? renderUserProfile : config === null || config === void 0 ? void 0 : config.renderUserProfile, onUserProfileMessage: onUserProfileMessage !== null && onUserProfileMessage !== void 0 ? onUserProfileMessage : config === null || config === void 0 ? void 0 : config.onUserProfileMessage },\n            React__default.createElement(\"div\", { className: \"sendbird-channel-list \".concat(className) }, children))));\n};\nvar useGroupChannelListContext = function () {\n    var context = useContext(GroupChannelListContext);\n    if (!context)\n        throw new Error('GroupChannelListContext not found. Use within the GroupChannelList module.');\n    return context;\n};\nfunction getCollectionCreator(sdk, channelListQueryParams) {\n    return function (defaultParams) {\n        var params = __assign(__assign({}, defaultParams), channelListQueryParams);\n        return sdk.groupChannel.createGroupChannelCollection(__assign(__assign({}, params), { filter: new GroupChannelFilter(params) }));\n    };\n}\n\nexport { GroupChannelListContext, GroupChannelListProvider, useGroupChannelListContext };\n//# sourceMappingURL=context.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}