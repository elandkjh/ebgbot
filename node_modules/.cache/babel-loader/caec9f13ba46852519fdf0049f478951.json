{"ast":null,"code":"import React__default, { useRef, useState, useContext } from 'react';\nimport { useChannelSettingsContext } from '../context.js';\nimport { L as LocalizationContext } from '../../chunks/bundle-cQZ3UZoG.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport { M as Modal } from '../../chunks/bundle-CXdo2kR_.js';\nimport Input, { InputLabel } from '../../ui/Input.js';\nimport { A as Avatar } from '../../chunks/bundle-CFosTNce.js';\nimport '../../chunks/bundle-BQi9-O76.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../chunks/bundle-DhKQeIfP.js';\nimport { ButtonTypes } from '../../ui/Button.js';\nimport TextButton from '../../ui/TextButton.js';\nimport ChannelAvatar from '../../ui/ChannelAvatar.js';\nimport { u as uuidv4 } from '../../chunks/bundle-etuaqevl.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../withSendbird.js';\nimport '../../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-BgwzpLeQ.js';\nimport 'react-dom';\nimport '../../chunks/bundle-f-SpnOx2.js';\nimport '../../ui/IconButton.js';\nimport '../../ui/Icon.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport '../../ui/SortByRow.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nimport '../../chunks/bundle-GMlM2rlV.js';\nvar EditDetails = function (props) {\n  var _a, _b, _c;\n  var onSubmit = props.onSubmit,\n    onCancel = props.onCancel;\n  var _d = useChannelSettingsContext(),\n    channel = _d.channel,\n    onChannelModified = _d.onChannelModified,\n    onBeforeUpdateChannel = _d.onBeforeUpdateChannel,\n    setChannelUpdateId = _d.setChannelUpdateId;\n  var title = channel === null || channel === void 0 ? void 0 : channel.name;\n  var state = useSendbirdStateContext();\n  var userId = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.userId;\n  var theme = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.theme;\n  var logger = (_c = state === null || state === void 0 ? void 0 : state.config) === null || _c === void 0 ? void 0 : _c.logger;\n  var inputRef = useRef(null);\n  var formRef = useRef(null);\n  var hiddenInputRef = useRef(null);\n  var _e = useState(null),\n    currentImg = _e[0],\n    setCurrentImg = _e[1];\n  var _f = useState(null),\n    newFile = _f[0],\n    setNewFile = _f[1];\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return React__default.createElement(Modal, {\n    isFullScreenOnMobile: true,\n    titleText: stringSet.MODAL__CHANNEL_INFORMATION__TITLE,\n    submitText: stringSet.BUTTON__SAVE,\n    onCancel: onCancel,\n    onSubmit: function () {\n      var _a, _b, _c;\n      if (title !== '' && !((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.value)) {\n        if ((_b = formRef.current) === null || _b === void 0 ? void 0 : _b.reportValidity) {\n          // might not work in explorer\n          formRef.current.reportValidity();\n        }\n        return;\n      }\n      var currentTitle = (_c = inputRef.current) === null || _c === void 0 ? void 0 : _c.value;\n      var currentImg = newFile;\n      logger.info('ChannelSettings: Channel information being updated', {\n        currentTitle: currentTitle,\n        currentImg: currentImg\n      });\n      if (onBeforeUpdateChannel) {\n        logger.info('ChannelSettings: onBeforeUpdateChannel');\n        var params = onBeforeUpdateChannel(currentTitle !== null && currentTitle !== void 0 ? currentTitle : '', currentImg, channel === null || channel === void 0 ? void 0 : channel.data);\n        channel === null || channel === void 0 ? void 0 : channel.updateChannel(params).then(function (groupChannel) {\n          onChannelModified === null || onChannelModified === void 0 ? void 0 : onChannelModified(groupChannel);\n          setChannelUpdateId(uuidv4());\n          onSubmit();\n        });\n      } else {\n        logger.info('ChannelSettings: normal');\n        channel === null || channel === void 0 ? void 0 : channel.updateChannel({\n          coverImage: currentImg,\n          name: currentTitle,\n          data: (channel === null || channel === void 0 ? void 0 : channel.data) || ''\n        }).then(function (groupChannel) {\n          logger.info('ChannelSettings: Channel information updated', groupChannel);\n          onChannelModified === null || onChannelModified === void 0 ? void 0 : onChannelModified(groupChannel);\n          setChannelUpdateId === null || setChannelUpdateId === void 0 ? void 0 : setChannelUpdateId(uuidv4());\n          onSubmit();\n        });\n      }\n    },\n    type: ButtonTypes.PRIMARY\n  }, React__default.createElement(\"form\", {\n    className: \"channel-profile-form\",\n    ref: formRef,\n    onSubmit: function (e) {\n      e.preventDefault();\n    }\n  }, React__default.createElement(\"div\", {\n    className: \"channel-profile-form__img-section\"\n  }, React__default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE), React__default.createElement(\"div\", {\n    className: \"channel-profile-form__avatar\"\n  }, currentImg ? React__default.createElement(Avatar, {\n    height: \"80px\",\n    width: \"80px\",\n    src: currentImg\n  }) : React__default.createElement(ChannelAvatar, {\n    height: 80,\n    width: 80,\n    channel: channel,\n    userId: userId,\n    theme: theme\n  })), React__default.createElement(\"input\", {\n    ref: hiddenInputRef,\n    type: \"file\",\n    accept: \"image/gif, image/jpeg, image/png\",\n    style: {\n      display: 'none'\n    },\n    onChange: function (e) {\n      if (e.target.files) {\n        setCurrentImg(URL.createObjectURL(e.target.files[0]));\n        setNewFile(e.target.files[0]);\n      }\n      if (hiddenInputRef.current) {\n        hiddenInputRef.current.value = '';\n      }\n    }\n  }), React__default.createElement(TextButton, {\n    className: \"channel-profile-form__avatar-button\",\n    onClick: function () {\n      var _a;\n      return (_a = hiddenInputRef.current) === null || _a === void 0 ? void 0 : _a.click();\n    },\n    disableUnderline: true\n  }, React__default.createElement(Label, {\n    type: LabelTypography.BUTTON_1,\n    color: LabelColors.PRIMARY\n  }, stringSet.MODAL__CHANNEL_INFORMATION__UPLOAD))), React__default.createElement(\"div\", {\n    className: \"channel-profile-form__name-section\"\n  }, React__default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_NAME), React__default.createElement(Input, {\n    required: title !== '',\n    name: \"channel-profile-form__name\",\n    ref: inputRef,\n    value: title,\n    placeHolder: stringSet.MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER\n  }))));\n};\nexport { EditDetails as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { useRef, useState, useContext } from 'react';\nimport { useChannelSettingsContext } from '../context.js';\nimport { L as LocalizationContext } from '../../chunks/bundle-cQZ3UZoG.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport { M as Modal } from '../../chunks/bundle-CXdo2kR_.js';\nimport Input, { InputLabel } from '../../ui/Input.js';\nimport { A as Avatar } from '../../chunks/bundle-CFosTNce.js';\nimport '../../chunks/bundle-BQi9-O76.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../chunks/bundle-DhKQeIfP.js';\nimport { ButtonTypes } from '../../ui/Button.js';\nimport TextButton from '../../ui/TextButton.js';\nimport ChannelAvatar from '../../ui/ChannelAvatar.js';\nimport { u as uuidv4 } from '../../chunks/bundle-etuaqevl.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../withSendbird.js';\nimport '../../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-BgwzpLeQ.js';\nimport 'react-dom';\nimport '../../chunks/bundle-f-SpnOx2.js';\nimport '../../ui/IconButton.js';\nimport '../../ui/Icon.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport '../../ui/SortByRow.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nimport '../../chunks/bundle-GMlM2rlV.js';\n\nvar EditDetails = function (props) {\n    var _a, _b, _c;\n    var onSubmit = props.onSubmit, onCancel = props.onCancel;\n    var _d = useChannelSettingsContext(), channel = _d.channel, onChannelModified = _d.onChannelModified, onBeforeUpdateChannel = _d.onBeforeUpdateChannel, setChannelUpdateId = _d.setChannelUpdateId;\n    var title = channel === null || channel === void 0 ? void 0 : channel.name;\n    var state = useSendbirdStateContext();\n    var userId = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.userId;\n    var theme = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.theme;\n    var logger = (_c = state === null || state === void 0 ? void 0 : state.config) === null || _c === void 0 ? void 0 : _c.logger;\n    var inputRef = useRef(null);\n    var formRef = useRef(null);\n    var hiddenInputRef = useRef(null);\n    var _e = useState(null), currentImg = _e[0], setCurrentImg = _e[1];\n    var _f = useState(null), newFile = _f[0], setNewFile = _f[1];\n    var stringSet = useContext(LocalizationContext).stringSet;\n    return (React__default.createElement(Modal, { isFullScreenOnMobile: true, titleText: stringSet.MODAL__CHANNEL_INFORMATION__TITLE, submitText: stringSet.BUTTON__SAVE, onCancel: onCancel, onSubmit: function () {\n            var _a, _b, _c;\n            if (title !== '' && !((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.value)) {\n                if ((_b = formRef.current) === null || _b === void 0 ? void 0 : _b.reportValidity) { // might not work in explorer\n                    formRef.current.reportValidity();\n                }\n                return;\n            }\n            var currentTitle = (_c = inputRef.current) === null || _c === void 0 ? void 0 : _c.value;\n            var currentImg = newFile;\n            logger.info('ChannelSettings: Channel information being updated', {\n                currentTitle: currentTitle,\n                currentImg: currentImg,\n            });\n            if (onBeforeUpdateChannel) {\n                logger.info('ChannelSettings: onBeforeUpdateChannel');\n                var params = onBeforeUpdateChannel(currentTitle !== null && currentTitle !== void 0 ? currentTitle : '', currentImg, channel === null || channel === void 0 ? void 0 : channel.data);\n                channel === null || channel === void 0 ? void 0 : channel.updateChannel(params).then(function (groupChannel) {\n                    onChannelModified === null || onChannelModified === void 0 ? void 0 : onChannelModified(groupChannel);\n                    setChannelUpdateId(uuidv4());\n                    onSubmit();\n                });\n            }\n            else {\n                logger.info('ChannelSettings: normal');\n                channel === null || channel === void 0 ? void 0 : channel.updateChannel({\n                    coverImage: currentImg,\n                    name: currentTitle,\n                    data: (channel === null || channel === void 0 ? void 0 : channel.data) || '',\n                }).then(function (groupChannel) {\n                    logger.info('ChannelSettings: Channel information updated', groupChannel);\n                    onChannelModified === null || onChannelModified === void 0 ? void 0 : onChannelModified(groupChannel);\n                    setChannelUpdateId === null || setChannelUpdateId === void 0 ? void 0 : setChannelUpdateId(uuidv4());\n                    onSubmit();\n                });\n            }\n        }, type: ButtonTypes.PRIMARY },\n        React__default.createElement(\"form\", { className: \"channel-profile-form\", ref: formRef, onSubmit: function (e) { e.preventDefault(); } },\n            React__default.createElement(\"div\", { className: \"channel-profile-form__img-section\" },\n                React__default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE),\n                React__default.createElement(\"div\", { className: \"channel-profile-form__avatar\" }, currentImg\n                    ? (React__default.createElement(Avatar, { height: \"80px\", width: \"80px\", src: currentImg })) : (React__default.createElement(ChannelAvatar, { height: 80, width: 80, channel: channel, userId: userId, theme: theme }))),\n                React__default.createElement(\"input\", { ref: hiddenInputRef, type: \"file\", accept: \"image/gif, image/jpeg, image/png\", style: { display: 'none' }, onChange: function (e) {\n                        if (e.target.files) {\n                            setCurrentImg(URL.createObjectURL(e.target.files[0]));\n                            setNewFile(e.target.files[0]);\n                        }\n                        if (hiddenInputRef.current) {\n                            hiddenInputRef.current.value = '';\n                        }\n                    } }),\n                React__default.createElement(TextButton, { className: \"channel-profile-form__avatar-button\", onClick: function () { var _a; return (_a = hiddenInputRef.current) === null || _a === void 0 ? void 0 : _a.click(); }, disableUnderline: true },\n                    React__default.createElement(Label, { type: LabelTypography.BUTTON_1, color: LabelColors.PRIMARY }, stringSet.MODAL__CHANNEL_INFORMATION__UPLOAD))),\n            React__default.createElement(\"div\", { className: \"channel-profile-form__name-section\" },\n                React__default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_NAME),\n                React__default.createElement(Input, { required: title !== '', name: \"channel-profile-form__name\", ref: inputRef, value: title, placeHolder: stringSet.MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER })))));\n};\n\nexport { EditDetails as default };\n//# sourceMappingURL=EditDetailsModal.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}