{"ast":null,"code":"import { a as __awaiter, b as __generator } from '../../chunks/bundle-BQi9-O76.js';\nimport React__default, { useCallback } from 'react';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport { j as isImage } from '../../chunks/bundle-DxTN4_0p.js';\nimport { b as useGlobalModalContext, c as ModalFooter } from '../../chunks/bundle-CXdo2kR_.js';\nimport '../../chunks/bundle-DhKQeIfP.js';\nimport { ButtonTypes } from '../../ui/Button.js';\nimport { u as useLocalization } from '../../chunks/bundle-cQZ3UZoG.js';\nimport { c as compressImages } from '../../chunks/bundle-DAz5E5O_.js';\nimport { O as ONE_MiB } from '../../chunks/bundle-DCMGp6rH.js';\nimport '../../withSendbird.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-BgwzpLeQ.js';\nimport 'react-dom';\nimport '../../chunks/bundle-f-SpnOx2.js';\nimport '../../ui/IconButton.js';\nimport '../../ui/Icon.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '@sendbird/chat/openChannel';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport '../../ui/SortByRow.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nvar useHandleUploadFiles = function (_a, _b) {\n  var sendFileMessage = _a.sendFileMessage,\n    sendMultipleFilesMessage = _a.sendMultipleFilesMessage,\n    quoteMessage = _a.quoteMessage;\n  var logger = _b.logger;\n  var stringSet = useLocalization().stringSet;\n  var config = useSendbirdStateContext().config;\n  var imageCompression = config.imageCompression;\n  var uikitUploadSizeLimit = config === null || config === void 0 ? void 0 : config.uikitUploadSizeLimit;\n  var uikitMultipleFilesMessageLimit = config === null || config === void 0 ? void 0 : config.uikitMultipleFilesMessageLimit;\n  var openModal = useGlobalModalContext().openModal;\n  var handleUploadFiles = useCallback(function (files) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var compressedFiles, sendingFiles, file, imageFiles_1, otherFiles_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Validate Parameters\n            if (!sendFileMessage || !sendMultipleFilesMessage) {\n              logger.warning('Channel|useHandleUploadFiles: required functions are undefined', {\n                sendFileMessage: sendFileMessage,\n                sendMultipleFilesMessage: sendMultipleFilesMessage\n              });\n              return [2 /*return*/];\n            }\n            if (files.length === 0) {\n              logger.warning('Channel|useHandleUploadFiles: given file list is empty.', {\n                files: files\n              });\n              return [2 /*return*/];\n            }\n            if (files.length > uikitMultipleFilesMessageLimit) {\n              logger.info(\"Channel|useHandleUploadFiles: Cannot upload files more than \".concat(uikitMultipleFilesMessageLimit));\n              openModal({\n                modalProps: {\n                  titleText: stringSet.FILE_UPLOAD_NOTIFICATION__COUNT_LIMIT.replace('%d', \"\".concat(uikitMultipleFilesMessageLimit)),\n                  hideFooter: true\n                },\n                childElement: function (_a) {\n                  var closeModal = _a.closeModal;\n                  return React__default.createElement(ModalFooter, {\n                    type: ButtonTypes.PRIMARY,\n                    submitText: stringSet.BUTTON__OK,\n                    hideCancelButton: true,\n                    onCancel: closeModal,\n                    onSubmit: closeModal\n                  });\n                }\n              });\n              return [2 /*return*/];\n            }\n            /**\n             * Validate file sizes\n             * The default value of uikitUploadSizeLimit is 25MiB\n             */\n            if (files.some(function (file) {\n              return file.size > uikitUploadSizeLimit;\n            })) {\n              logger.info(\"Channel|useHandleUploadFiles: Cannot upload file size exceeding \".concat(uikitUploadSizeLimit));\n              openModal({\n                modalProps: {\n                  titleText: stringSet.FILE_UPLOAD_NOTIFICATION__SIZE_LIMIT.replace('%d', \"\".concat(Math.floor(uikitUploadSizeLimit / ONE_MiB))),\n                  hideFooter: true\n                },\n                childElement: function (_a) {\n                  var closeModal = _a.closeModal;\n                  return React__default.createElement(ModalFooter, {\n                    type: ButtonTypes.PRIMARY,\n                    submitText: stringSet.BUTTON__OK,\n                    hideCancelButton: true,\n                    onCancel: closeModal,\n                    onSubmit: closeModal\n                  });\n                }\n              });\n              return [2 /*return*/];\n            }\n            return [4 /*yield*/, compressImages({\n              files: files,\n              imageCompression: imageCompression,\n              logger: logger\n            })];\n          case 1:\n            compressedFiles = _a.sent().compressedFiles;\n            sendingFiles = compressedFiles;\n            // Send File Message\n            if (sendingFiles.length === 1) {\n              logger.info('Channel|useHandleUploadFiles: sending one file.');\n              file = sendingFiles[0];\n              sendFileMessage(file, quoteMessage);\n            } else if (sendingFiles.length > 1) {\n              logger.info('Channel|useHandleUploadFiles: sending multiple files.');\n              imageFiles_1 = [];\n              otherFiles_1 = [];\n              sendingFiles.forEach(function (file) {\n                if (isImage(file.type)) {\n                  imageFiles_1.push(file);\n                } else {\n                  otherFiles_1.push(file);\n                }\n              });\n              return [2 /*return*/, otherFiles_1.reduce(function (previousPromise, item) {\n                return previousPromise.then(function () {\n                  return sendFileMessage(item, quoteMessage);\n                });\n              }, function () {\n                if (imageFiles_1.length === 0) {\n                  return Promise.resolve();\n                } else if (imageFiles_1.length === 1) {\n                  return sendFileMessage(imageFiles_1[0], quoteMessage);\n                } else {\n                  return sendMultipleFilesMessage(imageFiles_1, quoteMessage);\n                }\n              }())];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  }, [sendFileMessage, sendMultipleFilesMessage, quoteMessage]);\n  return handleUploadFiles;\n};\nexport { useHandleUploadFiles };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { a as __awaiter, b as __generator } from '../../chunks/bundle-BQi9-O76.js';\nimport React__default, { useCallback } from 'react';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport { j as isImage } from '../../chunks/bundle-DxTN4_0p.js';\nimport { b as useGlobalModalContext, c as ModalFooter } from '../../chunks/bundle-CXdo2kR_.js';\nimport '../../chunks/bundle-DhKQeIfP.js';\nimport { ButtonTypes } from '../../ui/Button.js';\nimport { u as useLocalization } from '../../chunks/bundle-cQZ3UZoG.js';\nimport { c as compressImages } from '../../chunks/bundle-DAz5E5O_.js';\nimport { O as ONE_MiB } from '../../chunks/bundle-DCMGp6rH.js';\nimport '../../withSendbird.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-BgwzpLeQ.js';\nimport 'react-dom';\nimport '../../chunks/bundle-f-SpnOx2.js';\nimport '../../ui/IconButton.js';\nimport '../../ui/Icon.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '@sendbird/chat/openChannel';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport '../../ui/SortByRow.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../chunks/bundle-DXRRGizV.js';\n\nvar useHandleUploadFiles = function (_a, _b) {\n    var sendFileMessage = _a.sendFileMessage, sendMultipleFilesMessage = _a.sendMultipleFilesMessage, quoteMessage = _a.quoteMessage;\n    var logger = _b.logger;\n    var stringSet = useLocalization().stringSet;\n    var config = useSendbirdStateContext().config;\n    var imageCompression = config.imageCompression;\n    var uikitUploadSizeLimit = config === null || config === void 0 ? void 0 : config.uikitUploadSizeLimit;\n    var uikitMultipleFilesMessageLimit = config === null || config === void 0 ? void 0 : config.uikitMultipleFilesMessageLimit;\n    var openModal = useGlobalModalContext().openModal;\n    var handleUploadFiles = useCallback(function (files) { return __awaiter(void 0, void 0, void 0, function () {\n        var compressedFiles, sendingFiles, file, imageFiles_1, otherFiles_1;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    // Validate Parameters\n                    if (!sendFileMessage || !sendMultipleFilesMessage) {\n                        logger.warning('Channel|useHandleUploadFiles: required functions are undefined', { sendFileMessage: sendFileMessage, sendMultipleFilesMessage: sendMultipleFilesMessage });\n                        return [2 /*return*/];\n                    }\n                    if (files.length === 0) {\n                        logger.warning('Channel|useHandleUploadFiles: given file list is empty.', { files: files });\n                        return [2 /*return*/];\n                    }\n                    if (files.length > uikitMultipleFilesMessageLimit) {\n                        logger.info(\"Channel|useHandleUploadFiles: Cannot upload files more than \".concat(uikitMultipleFilesMessageLimit));\n                        openModal({\n                            modalProps: {\n                                titleText: stringSet.FILE_UPLOAD_NOTIFICATION__COUNT_LIMIT.replace('%d', \"\".concat(uikitMultipleFilesMessageLimit)),\n                                hideFooter: true,\n                            },\n                            childElement: function (_a) {\n                                var closeModal = _a.closeModal;\n                                return (React__default.createElement(ModalFooter, { type: ButtonTypes.PRIMARY, submitText: stringSet.BUTTON__OK, hideCancelButton: true, onCancel: closeModal, onSubmit: closeModal }));\n                            },\n                        });\n                        return [2 /*return*/];\n                    }\n                    /**\n                     * Validate file sizes\n                     * The default value of uikitUploadSizeLimit is 25MiB\n                     */\n                    if (files.some(function (file) { return file.size > uikitUploadSizeLimit; })) {\n                        logger.info(\"Channel|useHandleUploadFiles: Cannot upload file size exceeding \".concat(uikitUploadSizeLimit));\n                        openModal({\n                            modalProps: {\n                                titleText: stringSet.FILE_UPLOAD_NOTIFICATION__SIZE_LIMIT.replace('%d', \"\".concat(Math.floor(uikitUploadSizeLimit / ONE_MiB))),\n                                hideFooter: true,\n                            },\n                            childElement: function (_a) {\n                                var closeModal = _a.closeModal;\n                                return (React__default.createElement(ModalFooter, { type: ButtonTypes.PRIMARY, submitText: stringSet.BUTTON__OK, hideCancelButton: true, onCancel: closeModal, onSubmit: closeModal }));\n                            },\n                        });\n                        return [2 /*return*/];\n                    }\n                    return [4 /*yield*/, compressImages({\n                            files: files,\n                            imageCompression: imageCompression,\n                            logger: logger,\n                        })];\n                case 1:\n                    compressedFiles = (_a.sent()).compressedFiles;\n                    sendingFiles = compressedFiles;\n                    // Send File Message\n                    if (sendingFiles.length === 1) {\n                        logger.info('Channel|useHandleUploadFiles: sending one file.');\n                        file = sendingFiles[0];\n                        sendFileMessage(file, quoteMessage);\n                    }\n                    else if (sendingFiles.length > 1) {\n                        logger.info('Channel|useHandleUploadFiles: sending multiple files.');\n                        imageFiles_1 = [];\n                        otherFiles_1 = [];\n                        sendingFiles.forEach(function (file) {\n                            if (isImage(file.type)) {\n                                imageFiles_1.push(file);\n                            }\n                            else {\n                                otherFiles_1.push(file);\n                            }\n                        });\n                        return [2 /*return*/, otherFiles_1.reduce(function (previousPromise, item) {\n                                return previousPromise.then(function () {\n                                    return sendFileMessage(item, quoteMessage);\n                                });\n                            }, (function () {\n                                if (imageFiles_1.length === 0) {\n                                    return Promise.resolve();\n                                }\n                                else if (imageFiles_1.length === 1) {\n                                    return sendFileMessage(imageFiles_1[0], quoteMessage);\n                                }\n                                else {\n                                    return sendMultipleFilesMessage(imageFiles_1, quoteMessage);\n                                }\n                            })())];\n                    }\n                    return [2 /*return*/];\n            }\n        });\n    }); }, [\n        sendFileMessage,\n        sendMultipleFilesMessage,\n        quoteMessage,\n    ]);\n    return handleUploadFiles;\n};\n\nexport { useHandleUploadFiles };\n//# sourceMappingURL=useHandleUploadFiles.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}