{"ast":null,"code":"import { useEffect } from 'react';\nimport { u as useVoicePlayerContext, A as AudioUnitDefaultValue, g as generateGroupKey } from '../chunks/bundle-DDeWOERD.js';\nimport { V as VOICE_PLAYER_AUDIO_ID, a as VOICE_MESSAGE_MIME_TYPE } from '../chunks/bundle-DCMGp6rH.js';\nimport { u as useVoiceRecorderContext } from '../chunks/bundle-CXdo2kR_.js';\nimport '../chunks/bundle-BQi9-O76.js';\nimport '../useSendbirdStateContext.js';\nimport '../withSendbird.js';\nimport '../chunks/bundle-CNWAfTVw.js';\nimport '../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CA85nVxp.js';\nimport '../chunks/bundle-BgwzpLeQ.js';\nimport 'react-dom';\nimport '../chunks/bundle-cQZ3UZoG.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport '../chunks/bundle-f-SpnOx2.js';\nimport '../ui/IconButton.js';\nimport '../ui/Button.js';\nimport '../chunks/bundle-DhKQeIfP.js';\nimport '../ui/Icon.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '../chunks/bundle-etuaqevl.js';\nimport '@sendbird/chat/openChannel';\nimport '../chunks/bundle-CwKZj-B6.js';\nimport '../ui/SortByRow.js';\nvar useVoicePlayer = function (_a) {\n  var _b;\n  var _c = _a.key,\n    key = _c === void 0 ? '' : _c,\n    _d = _a.channelUrl,\n    channelUrl = _d === void 0 ? '' : _d,\n    audioFile = _a.audioFile,\n    _e = _a.audioFileUrl,\n    audioFileUrl = _e === void 0 ? '' : _e,\n    _f = _a.audioFileMimeType,\n    audioFileMimeType = _f === void 0 ? VOICE_MESSAGE_MIME_TYPE : _f;\n  var groupKey = generateGroupKey(channelUrl, key);\n  var _g = useVoicePlayerContext(),\n    play = _g.play,\n    pause = _g.pause,\n    stop = _g.stop,\n    voicePlayerStore = _g.voicePlayerStore;\n  var isRecordable = useVoiceRecorderContext().isRecordable;\n  var currentAudioUnit = ((_b = voicePlayerStore === null || voicePlayerStore === void 0 ? void 0 : voicePlayerStore.audioStorage) === null || _b === void 0 ? void 0 : _b[groupKey]) || AudioUnitDefaultValue();\n  var playVoicePlayer = function () {\n    if (!isRecordable) {\n      play === null || play === void 0 ? void 0 : play({\n        groupKey: groupKey,\n        audioFile: audioFile,\n        audioFileUrl: audioFileUrl,\n        audioFileMimeType: audioFileMimeType\n      });\n    }\n  };\n  var pauseVoicePlayer = function () {\n    pause === null || pause === void 0 ? void 0 : pause(groupKey);\n  };\n  var stopVoicePlayer = function (text) {\n    if (text === void 0) {\n      text = '';\n    }\n    stop === null || stop === void 0 ? void 0 : stop(text);\n  };\n  useEffect(function () {\n    return function () {\n      var _a;\n      if (audioFile || audioFileUrl) {\n        // Can't get the current AudioPlayer through the React hooks(useReducer or useState) in this scope\n        var voiceAudioPlayerElement = document.getElementById(VOICE_PLAYER_AUDIO_ID);\n        (_a = voiceAudioPlayerElement === null || voiceAudioPlayerElement === void 0 ? void 0 : voiceAudioPlayerElement.pause) === null || _a === void 0 ? void 0 : _a.call(voiceAudioPlayerElement);\n      }\n    };\n  }, []);\n  return {\n    play: playVoicePlayer,\n    pause: pauseVoicePlayer,\n    stop: stopVoicePlayer,\n    /**\n     * The reason why we multiply this by *1000 is,\n     * The unit of playbackTime and duration should be millisecond\n     */\n    playbackTime: ((currentAudioUnit === null || currentAudioUnit === void 0 ? void 0 : currentAudioUnit.playbackTime) || 0) * 1000,\n    duration: ((currentAudioUnit === null || currentAudioUnit === void 0 ? void 0 : currentAudioUnit.duration) || 0) * 1000,\n    playingStatus: currentAudioUnit.playingStatus\n  };\n};\nexport { useVoicePlayer };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { useEffect } from 'react';\nimport { u as useVoicePlayerContext, A as AudioUnitDefaultValue, g as generateGroupKey } from '../chunks/bundle-DDeWOERD.js';\nimport { V as VOICE_PLAYER_AUDIO_ID, a as VOICE_MESSAGE_MIME_TYPE } from '../chunks/bundle-DCMGp6rH.js';\nimport { u as useVoiceRecorderContext } from '../chunks/bundle-CXdo2kR_.js';\nimport '../chunks/bundle-BQi9-O76.js';\nimport '../useSendbirdStateContext.js';\nimport '../withSendbird.js';\nimport '../chunks/bundle-CNWAfTVw.js';\nimport '../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CA85nVxp.js';\nimport '../chunks/bundle-BgwzpLeQ.js';\nimport 'react-dom';\nimport '../chunks/bundle-cQZ3UZoG.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport '../chunks/bundle-f-SpnOx2.js';\nimport '../ui/IconButton.js';\nimport '../ui/Button.js';\nimport '../chunks/bundle-DhKQeIfP.js';\nimport '../ui/Icon.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '../chunks/bundle-etuaqevl.js';\nimport '@sendbird/chat/openChannel';\nimport '../chunks/bundle-CwKZj-B6.js';\nimport '../ui/SortByRow.js';\n\nvar useVoicePlayer = function (_a) {\n    var _b;\n    var _c = _a.key, key = _c === void 0 ? '' : _c, _d = _a.channelUrl, channelUrl = _d === void 0 ? '' : _d, audioFile = _a.audioFile, _e = _a.audioFileUrl, audioFileUrl = _e === void 0 ? '' : _e, _f = _a.audioFileMimeType, audioFileMimeType = _f === void 0 ? VOICE_MESSAGE_MIME_TYPE : _f;\n    var groupKey = generateGroupKey(channelUrl, key);\n    var _g = useVoicePlayerContext(), play = _g.play, pause = _g.pause, stop = _g.stop, voicePlayerStore = _g.voicePlayerStore;\n    var isRecordable = useVoiceRecorderContext().isRecordable;\n    var currentAudioUnit = ((_b = voicePlayerStore === null || voicePlayerStore === void 0 ? void 0 : voicePlayerStore.audioStorage) === null || _b === void 0 ? void 0 : _b[groupKey]) || AudioUnitDefaultValue();\n    var playVoicePlayer = function () {\n        if (!isRecordable) {\n            play === null || play === void 0 ? void 0 : play({\n                groupKey: groupKey,\n                audioFile: audioFile,\n                audioFileUrl: audioFileUrl,\n                audioFileMimeType: audioFileMimeType,\n            });\n        }\n    };\n    var pauseVoicePlayer = function () {\n        pause === null || pause === void 0 ? void 0 : pause(groupKey);\n    };\n    var stopVoicePlayer = function (text) {\n        if (text === void 0) { text = ''; }\n        stop === null || stop === void 0 ? void 0 : stop(text);\n    };\n    useEffect(function () {\n        return function () {\n            var _a;\n            if (audioFile || audioFileUrl) {\n                // Can't get the current AudioPlayer through the React hooks(useReducer or useState) in this scope\n                var voiceAudioPlayerElement = document.getElementById(VOICE_PLAYER_AUDIO_ID);\n                (_a = voiceAudioPlayerElement === null || voiceAudioPlayerElement === void 0 ? void 0 : voiceAudioPlayerElement.pause) === null || _a === void 0 ? void 0 : _a.call(voiceAudioPlayerElement);\n            }\n        };\n    }, []);\n    return ({\n        play: playVoicePlayer,\n        pause: pauseVoicePlayer,\n        stop: stopVoicePlayer,\n        /**\n         * The reason why we multiply this by *1000 is,\n         * The unit of playbackTime and duration should be millisecond\n         */\n        playbackTime: ((currentAudioUnit === null || currentAudioUnit === void 0 ? void 0 : currentAudioUnit.playbackTime) || 0) * 1000,\n        duration: ((currentAudioUnit === null || currentAudioUnit === void 0 ? void 0 : currentAudioUnit.duration) || 0) * 1000,\n        playingStatus: currentAudioUnit.playingStatus,\n    });\n};\n\nexport { useVoicePlayer };\n//# sourceMappingURL=useVoicePlayer.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}