{"ast":null,"code":"import { _ as __assign, a as __awaiter, b as __generator, c as __spreadArray } from './chunks/bundle-BQi9-O76.js';\nimport React__default, { useLayoutEffect, useRef, useEffect, useCallback, useMemo, useState, useReducer } from 'react';\nimport { UIKitConfigProvider, useUIKitConfig } from '@sendbird/uikit-tools';\nimport { SendbirdSdkContext } from './withSendbird.js';\nimport { m as mapColorKeys, V as VoiceRecorderProvider, E as EmojiManager, G as GlobalModalProvider, d as ModalRoot } from './chunks/bundle-CXdo2kR_.js';\nimport cssVars from 'css-vars-ponyfill';\nimport { K, a4 as isTextuallyNull } from './chunks/bundle-DxTN4_0p.js';\nimport { U as USER_ACTIONS } from './chunks/bundle-B7BfObV1.js';\nimport { s as schedulerFactory, b as useUnmount, u as useOnlineStatus, a as useMarkAsDeliveredScheduler } from './chunks/bundle-Soz6sOqr.js';\nimport SendbirdChat, { SendbirdError, SendbirdProduct, SendbirdPlatform, DeviceOsPlatform, SendbirdErrorCode } from '@sendbird/chat';\nimport { OpenChannelModule } from '@sendbird/chat/openChannel';\nimport { GroupChannelModule } from '@sendbird/chat/groupChannel';\nimport { n as noop } from './chunks/bundle-BgwzpLeQ.js';\nimport { p as pubSubFactory } from './chunks/bundle-Df65wuUZ.js';\nimport { b as VoicePlayerProvider } from './chunks/bundle-DDeWOERD.js';\nimport { a as LocalizationProvider } from './chunks/bundle-cQZ3UZoG.js';\nimport { u as useMediaQueryContext, M as MediaQueryProvider } from './chunks/bundle-f-SpnOx2.js';\nimport { g as getStringSet } from './chunks/bundle-Bwk5KPwK.js';\nimport { C as CACHED_MESSAGE_TEMPLATES_TOKEN_KEY, o as CACHED_MESSAGE_TEMPLATES_KEY, l as VOICE_PLAYER_ROOT_ID, p as DEFAULT_MULTIPLE_FILES_MESSAGE_LIMIT, q as DEFAULT_UPLOAD_SIZE_LIMIT, r as VOICE_RECORDER_DEFAULT_MAX, i as VOICE_RECORDER_DEFAULT_MIN } from './chunks/bundle-DCMGp6rH.js';\nimport { g as getCaseResolvedReplyType } from './chunks/bundle-fHeMHhND.js';\nimport { i as EmojiReactionListRoot, j as MenuRoot } from './chunks/bundle-CwKZj-B6.js';\nexport { useSendbirdStateContext } from './useSendbirdStateContext.js';\nimport 'react-dom';\nimport './ui/IconButton.js';\nimport './ui/Button.js';\nimport './chunks/bundle-DhKQeIfP.js';\nimport './ui/Icon.js';\nimport './chunks/bundle-etuaqevl.js';\nimport './utils/message/getOutgoingMessageState.js';\nimport './chunks/bundle-CNWAfTVw.js';\nimport './chunks/bundle-CA85nVxp.js';\nimport './chunks/bundle-bdDHjHH6.js';\nimport './ui/SortByRow.js';\nvar DEFAULT_COLOR_SET = {\n  '--sendbird-dark-primary-500': '#4d2aa6',\n  '--sendbird-dark-primary-400': '#6440C4',\n  '--sendbird-dark-primary-300': '#7B53EF',\n  '--sendbird-dark-primary-200': '#9E8CF5',\n  '--sendbird-dark-primary-100': '#E2DFFF',\n  '--sendbird-dark-secondary-500': '#007A7A',\n  '--sendbird-dark-secondary-400': '#189A8D',\n  '--sendbird-dark-secondary-300': '#2EBA9F',\n  '--sendbird-dark-secondary-200': '#6FD6BE',\n  '--sendbird-dark-secondary-100': '#AEF2DC',\n  '--sendbird-dark-information-100': '#b2d9ff',\n  '--sendbird-dark-error-500': '#A30E2D',\n  '--sendbird-dark-error-400': '#C11F41',\n  '--sendbird-dark-error-300': '#E53157',\n  '--sendbird-dark-error-200': '#FF6183',\n  '--sendbird-dark-error-100': '#FFABBD',\n  '--sendbird-dark-background-700': '#000000',\n  '--sendbird-dark-background-600': '#161616',\n  '--sendbird-dark-background-500': '#2C2C2C',\n  '--sendbird-dark-background-400': '#393939',\n  '--sendbird-dark-background-300': '#A8A8A8',\n  '--sendbird-dark-background-200': '#D9D9D9',\n  '--sendbird-dark-background-100': '#F0F0F0',\n  '--sendbird-dark-background-50': '#FFFFFF',\n  '--sendbird-dark-overlay': 'rgba(0, 0, 0, 0.32)',\n  '--sendbird-dark-onlight-01': 'rgba(0, 0, 0, 0.88)',\n  '--sendbird-dark-onlight-02': 'rgba(0, 0, 0, 0.50)',\n  '--sendbird-dark-onlight-03': 'rgba(0, 0, 0, 0.38)',\n  '--sendbird-dark-onlight-04': 'rgba(0, 0, 0, 0.12)',\n  '--sendbird-dark-ondark-01': 'rgba(255, 255, 255, 0.88)',\n  '--sendbird-dark-ondark-02': 'rgba(255, 255, 255, 0.50)',\n  '--sendbird-dark-ondark-03': 'rgba(255, 255, 255, 0.38)',\n  '--sendbird-dark-ondark-04': 'rgba(255, 255, 255, 0.12)',\n  '--sendbird-dark-shadow-01': '0 1px 5px 0 rgba(33, 34, 66, 0.04), 0 0 3px 0 rgba(0, 0, 0, 0.08), 0 2px 1px 0 rgba(0, 0, 0, 0.12)',\n  '--sendbird-dark-shadow-02': '0 3px 5px -3px rgba(33, 34, 66, 0.04), 0 3px 14px 2px rgba(0, 0, 0, 0.08), 0 8px 10px 1px rgba(0, 0, 0, 0.12)',\n  '--sendbird-dark-shadow-03': '0 6px 10px -5px rgba(0, 0, 0, 0.04), 0 6px 30px 5px rgba(0, 0, 0, 0.08), 0 16px 24px 2px rgba(0, 0, 0, 0.12)',\n  '--sendbird-dark-shadow-04': '0 9px 15px -7px rgba(0, 0, 0, 0.04), 0 9px 46px 8px rgba(0, 0, 0, 0.08), 0 24px 38px 3px rgba(0, 0, 0, 0.12)',\n  '--sendbird-dark-shadow-message-input': '0 1px 5px 0 rgba(33, 34, 66, 0.12), 0 0 1px 0 rgba(33, 34, 66, 0.16), 0 2px 1px 0 rgba(33, 34, 66, 0.08), 0 1px 5px 0 rgba(0, 0, 0, 0.12)',\n  '--sendbird-light-primary-500': '#4d2aa6',\n  '--sendbird-light-primary-400': '#6440C4',\n  '--sendbird-light-primary-300': '#7B53EF',\n  '--sendbird-light-primary-200': '#9E8CF5',\n  '--sendbird-light-primary-100': '#E2DFFF',\n  '--sendbird-light-secondary-500': '#007A7A',\n  '--sendbird-light-secondary-400': '#189A8D',\n  '--sendbird-light-secondary-300': '#2EBA9F',\n  '--sendbird-light-secondary-200': '#6FD6BE',\n  '--sendbird-light-secondary-100': '#AEF2DC',\n  '--sendbird-light-information-100': '#b2d9ff',\n  '--sendbird-light-error-500': '#A30E2D',\n  '--sendbird-light-error-400': '#C11F41',\n  '--sendbird-light-error-300': '#E53157',\n  '--sendbird-light-error-200': '#FF6183',\n  '--sendbird-light-error-100': '#FFABBD',\n  '--sendbird-light-background-700': '#000000',\n  '--sendbird-light-background-600': '#161616',\n  '--sendbird-light-background-500': '#2C2C2C',\n  '--sendbird-light-background-400': '#393939',\n  '--sendbird-light-background-300': '#A8A8A8',\n  '--sendbird-light-background-200': '#D9D9D9',\n  '--sendbird-light-background-100': '#F0F0F0',\n  '--sendbird-light-background-50': ' #FFFFFF',\n  '--sendbird-light-overlay': 'rgba(0, 0, 0, 0.32)',\n  '--sendbird-light-onlight-01': 'rgba(0, 0, 0, 0.88)',\n  '--sendbird-light-onlight-02': 'rgba(0, 0, 0, 0.50)',\n  '--sendbird-light-onlight-03': 'rgba(0, 0, 0, 0.38)',\n  '--sendbird-light-onlight-04': 'rgba(0, 0, 0, 0.12)',\n  '--sendbird-light-ondark-01': 'rgba(255, 255, 255, 0.88)',\n  '--sendbird-light-ondark-02': 'rgba(255, 255, 255, 0.50)',\n  '--sendbird-light-ondark-03': 'rgba(255, 255, 255, 0.38)',\n  '--sendbird-light-ondark-04': 'rgba(255, 255, 255, 0.12)',\n  '--sendbird-light-shadow-01': '0 1px 5px 0 rgba(33, 34, 66, 0.04), 0 0 3px 0 rgba(0, 0, 0, 0.08), 0 2px 1px 0 rgba(0, 0, 0, 0.12)',\n  '--sendbird-light-shadow-02': '0 3px 5px -3px rgba(33, 34, 66, 0.04), 0 3px 14px 2px rgba(0, 0, 0, 0.08), 0 8px 10px 1px rgba(0, 0, 0, 0.12)',\n  '--sendbird-light-shadow-03': '0 6px 10px -5px rgba(0, 0, 0, 0.04), 0 6px 30px 5px rgba(0, 0, 0, 0.08), 0 16px 24px 2px rgba(0, 0, 0, 0.12)',\n  '--sendbird-light-shadow-04': '0 9px 15px -7px rgba(0, 0, 0, 0.04), 0 9px 46px 8px rgba(0, 0, 0, 0.08), 0 24px 38px 3px rgba(0, 0, 0, 0.12)',\n  '--sendbird-light-shadow-message-input': '0 1px 5px 0 rgba(33, 34, 66, 0.12), 0 0 1px 0 rgba(33, 34, 66, 0.16), 0 2px 1px 0 rgba(33, 34, 66, 0.08), 0 1px 5px 0 rgba(0, 0, 0, 0.12)'\n};\nvar isEmpty = function (obj) {\n  if (obj === null || obj === undefined) {\n    return true;\n  }\n  for (var prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      return false;\n    }\n  }\n  return JSON.stringify(obj) === JSON.stringify({});\n};\nvar useTheme = function (overrides) {\n  useLayoutEffect(function () {\n    if (!isEmpty(overrides)) {\n      var variables = __assign(__assign({}, DEFAULT_COLOR_SET), mapColorKeys(overrides));\n      cssVars({\n        variables: variables\n      });\n    }\n  }, [overrides]);\n};\nvar SDK_ACTIONS = {\n  INIT_SDK: 'INIT_SDK',\n  SET_SDK_LOADING: 'SET_SDK_LOADING',\n  RESET_SDK: 'RESET_SDK',\n  SDK_ERROR: 'SDK_ERROR'\n};\nvar initialState$2 = {\n  initialized: false,\n  loading: false,\n  sdk: {},\n  error: false\n};\nfunction reducer$2(state, action) {\n  return K(action).with({\n    type: SDK_ACTIONS.SET_SDK_LOADING\n  }, function (_a) {\n    var payload = _a.payload;\n    return __assign(__assign({}, state), {\n      initialized: false,\n      loading: payload\n    });\n  }).with({\n    type: SDK_ACTIONS.SDK_ERROR\n  }, function () {\n    return __assign(__assign({}, state), {\n      initialized: false,\n      loading: false,\n      error: true\n    });\n  }).with({\n    type: SDK_ACTIONS.INIT_SDK\n  }, function (_a) {\n    var payload = _a.payload;\n    return {\n      sdk: payload,\n      initialized: true,\n      loading: false,\n      error: false\n    };\n  }).with({\n    type: SDK_ACTIONS.RESET_SDK\n  }, function () {\n    return initialState$2;\n  }).otherwise(function () {\n    return state;\n  });\n}\nvar initialState$1 = {\n  initialized: false,\n  loading: false,\n  user: {}\n};\nfunction reducer$1(state, action) {\n  return K(action).with({\n    type: USER_ACTIONS.INIT_USER\n  }, function (_a) {\n    var payload = _a.payload;\n    return {\n      initialized: true,\n      loading: false,\n      user: payload\n    };\n  }).with({\n    type: USER_ACTIONS.RESET_USER\n  }, function () {\n    return initialState$1;\n  }).with({\n    type: USER_ACTIONS.UPDATE_USER_INFO\n  }, function (_a) {\n    var payload = _a.payload;\n    return __assign(__assign({}, state), {\n      user: payload\n    });\n  }).otherwise(function () {\n    return state;\n  });\n}\nvar APP_INFO_ACTIONS = {\n  INITIALIZE_MESSAGE_TEMPLATES_INFO: 'INITIALIZE_MESSAGE_TEMPLATES_INFO',\n  UPSERT_MESSAGE_TEMPLATES: 'UPSERT_MESSAGE_TEMPLATES',\n  UPSERT_WAITING_TEMPLATE_KEYS: 'UPSERT_WAITING_TEMPLATE_KEYS',\n  MARK_ERROR_WAITING_TEMPLATE_KEYS: 'MARK_ERROR_WAITING_TEMPLATE_KEYS'\n};\nfunction reducer(state, action) {\n  return K(action).with({\n    type: APP_INFO_ACTIONS.INITIALIZE_MESSAGE_TEMPLATES_INFO\n  }, function (_a) {\n    var payload = _a.payload;\n    return {\n      messageTemplatesInfo: payload,\n      waitingTemplateKeysMap: {}\n    };\n  }).with({\n    type: APP_INFO_ACTIONS.UPSERT_MESSAGE_TEMPLATES\n  }, function (_a) {\n    var payload = _a.payload;\n    var templatesInfo = state.messageTemplatesInfo;\n    if (!templatesInfo) return state; // Not initialized. Ignore.\n    var waitingTemplateKeysMap = __assign({}, state.waitingTemplateKeysMap);\n    payload.forEach(function (templatesMapData) {\n      var key = templatesMapData.key,\n        template = templatesMapData.template;\n      templatesInfo.templatesMap[key] = template;\n      delete waitingTemplateKeysMap[key];\n    });\n    return __assign(__assign({}, state), {\n      waitingTemplateKeysMap: waitingTemplateKeysMap,\n      messageTemplatesInfo: templatesInfo\n    });\n  }).with({\n    type: APP_INFO_ACTIONS.UPSERT_WAITING_TEMPLATE_KEYS\n  }, function (_a) {\n    var payload = _a.payload;\n    var keys = payload.keys,\n      requestedAt = payload.requestedAt;\n    var waitingTemplateKeysMap = __assign({}, state.waitingTemplateKeysMap);\n    keys.forEach(function (key) {\n      var _a, _b;\n      waitingTemplateKeysMap[key] = {\n        erroredMessageIds: (_b = (_a = waitingTemplateKeysMap[key]) === null || _a === void 0 ? void 0 : _a.erroredMessageIds) !== null && _b !== void 0 ? _b : [],\n        requestedAt: requestedAt\n      };\n    });\n    return __assign(__assign({}, state), {\n      waitingTemplateKeysMap: waitingTemplateKeysMap\n    });\n  }).with({\n    type: APP_INFO_ACTIONS.MARK_ERROR_WAITING_TEMPLATE_KEYS\n  }, function (_a) {\n    var payload = _a.payload;\n    var keys = payload.keys,\n      messageId = payload.messageId;\n    var waitingTemplateKeysMap = __assign({}, state.waitingTemplateKeysMap);\n    keys.forEach(function (key) {\n      var waitingTemplateKeyData = waitingTemplateKeysMap[key];\n      if (waitingTemplateKeyData && waitingTemplateKeyData.erroredMessageIds.indexOf(messageId) === -1) {\n        waitingTemplateKeyData.erroredMessageIds.push(messageId);\n      }\n    });\n    return __assign(__assign({}, state), {\n      waitingTemplateKeysMap: waitingTemplateKeysMap\n    });\n  }).otherwise(function () {\n    return state;\n  });\n}\nvar initialState = {\n  waitingTemplateKeysMap: {}\n};\nfunction disconnectSdk(_a) {\n  return __awaiter(this, arguments, void 0, function (_b) {\n    var sdkDispatcher = _b.sdkDispatcher,\n      userDispatcher = _b.userDispatcher,\n      sdk = _b.sdk;\n    return __generator(this, function (_c) {\n      return [2 /*return*/, new Promise(function (resolve) {\n        sdkDispatcher({\n          type: SDK_ACTIONS.SET_SDK_LOADING,\n          payload: true\n        });\n        if (sdk === null || sdk === void 0 ? void 0 : sdk.disconnect) {\n          sdk.disconnect().then(function () {\n            sdkDispatcher({\n              type: SDK_ACTIONS.RESET_SDK\n            });\n            userDispatcher({\n              type: USER_ACTIONS.RESET_USER\n            });\n          }).finally(function () {\n            resolve(true);\n          });\n        } else {\n          resolve(true);\n        }\n      })];\n    });\n  });\n}\nvar APP_VERSION_STRING = '3.14.13';\nvar INIT_SDK = SDK_ACTIONS.INIT_SDK,\n  SET_SDK_LOADING = SDK_ACTIONS.SET_SDK_LOADING,\n  RESET_SDK = SDK_ACTIONS.RESET_SDK,\n  SDK_ERROR = SDK_ACTIONS.SDK_ERROR;\nvar INIT_USER = USER_ACTIONS.INIT_USER,\n  UPDATE_USER_INFO = USER_ACTIONS.UPDATE_USER_INFO,\n  RESET_USER = USER_ACTIONS.RESET_USER;\nfunction getMissingParamError(_a) {\n  var userId = _a.userId,\n    appId = _a.appId;\n  return \"SendbirdProvider | useConnect/setupConnection/Connection failed UserId: \".concat(userId, \" or appId: \").concat(appId, \" missing\");\n}\nfunction getConnectSbError(error) {\n  return \"SendbirdProvider | useConnect/setupConnection/Connection failed. \".concat((error === null || error === void 0 ? void 0 : error.code) || '', \" \").concat((error === null || error === void 0 ? void 0 : error.message) || '');\n}\nfunction setUpConnection(_a) {\n  return __awaiter(this, arguments, void 0, function (_b) {\n    var errorMessage;\n    var _this = this;\n    var _c, _d;\n    var logger = _b.logger,\n      sdkDispatcher = _b.sdkDispatcher,\n      userDispatcher = _b.userDispatcher,\n      initDashboardConfigs = _b.initDashboardConfigs,\n      userId = _b.userId,\n      appId = _b.appId,\n      isNewApp = _b.isNewApp,\n      customApiHost = _b.customApiHost,\n      customWebSocketHost = _b.customWebSocketHost,\n      configureSession = _b.configureSession,\n      nickname = _b.nickname,\n      profileUrl = _b.profileUrl,\n      accessToken = _b.accessToken,\n      isUserIdUsedForNickname = _b.isUserIdUsedForNickname,\n      sdkInitParams = _b.sdkInitParams,\n      customExtensionParams = _b.customExtensionParams,\n      _e = _b.isMobile,\n      isMobile = _e === void 0 ? false : _e,\n      eventHandlers = _b.eventHandlers,\n      initializeMessageTemplatesInfo = _b.initializeMessageTemplatesInfo;\n    return __generator(this, function (_f) {\n      (_c = logger.info) === null || _c === void 0 ? void 0 : _c.call(logger, 'SendbirdProvider | useConnect/setupConnection/init', {\n        userId: userId,\n        appId: appId\n      });\n      sdkDispatcher({\n        type: SET_SDK_LOADING,\n        payload: true\n      });\n      if (!userId || !appId) {\n        errorMessage = getMissingParamError({\n          userId: userId,\n          appId: appId\n        });\n        (_d = logger.error) === null || _d === void 0 ? void 0 : _d.call(logger, errorMessage);\n        sdkDispatcher({\n          type: SDK_ERROR\n        });\n        return [2 /*return*/, Promise.reject(errorMessage)];\n      }\n      return [2 /*return*/, new Promise(function (resolve, reject) {\n        var _a;\n        (_a = logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, \"SendbirdProvider | useConnect/setupConnection/connect connecting using \".concat(accessToken !== null && accessToken !== void 0 ? accessToken : userId));\n        var sdk = initSDK({\n          appId: appId,\n          customApiHost: customApiHost,\n          customWebSocketHost: customWebSocketHost,\n          isNewApp: isNewApp,\n          sdkInitParams: sdkInitParams\n        });\n        var sessionHandler = typeof configureSession === 'function' ? configureSession(sdk) : undefined;\n        setupSDK(sdk, {\n          logger: logger,\n          sessionHandler: sessionHandler,\n          customExtensionParams: customExtensionParams,\n          isMobile: isMobile\n        });\n        sdk.connect(userId, accessToken).then(function (user) {\n          return onConnected(user);\n        }).catch(function (error) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var sessionToken, user, error_1;\n            var _a;\n            return __generator(this, function (_b) {\n              switch (_b.label) {\n                case 0:\n                  if (!(shouldRetryWithValidSessionToken(error) && sessionHandler)) return [3 /*break*/, 6];\n                  _b.label = 1;\n                case 1:\n                  _b.trys.push([1, 5,, 6]);\n                  return [4 /*yield*/, new Promise(sessionHandler.onSessionTokenRequired)];\n                case 2:\n                  sessionToken = _b.sent();\n                  if (!sessionToken) return [3 /*break*/, 4];\n                  (_a = logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, \"SendbirdProvider | useConnect/setupConnection/connect retry connect with valid session token: \".concat(sessionToken.slice(0, 10) + '...'));\n                  return [4 /*yield*/, sdk.connect(userId, sessionToken)];\n                case 3:\n                  user = _b.sent();\n                  return [2 /*return*/, onConnected(user)];\n                case 4:\n                  return [3 /*break*/, 6];\n                case 5:\n                  error_1 = _b.sent();\n                  // NOTE: Filter out the error from `onSessionTokenRequired`.\n                  if (error_1 instanceof SendbirdError) {\n                    // connect in offline mode\n                    // if (sdk.isCacheEnabled && sdk.currentUser) return onConnected(sdk.currentUser);\n                    return [2 /*return*/, onConnectFailed(error_1)];\n                  }\n                  return [3 /*break*/, 6];\n                case 6:\n                  return [2 /*return*/, onConnectFailed(error)];\n              }\n            });\n          });\n        });\n        var onConnected = function (user) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var error_2, error_3, updateParams, updatedUser;\n            var _b, _c, _d, _e, _f, _g, _h, _j;\n            return __generator(this, function (_k) {\n              switch (_k.label) {\n                case 0:\n                  (_b = logger.info) === null || _b === void 0 ? void 0 : _b.call(logger, 'SendbirdProvider | useConnect/setupConnection/onConnected', user);\n                  sdkDispatcher({\n                    type: INIT_SDK,\n                    payload: sdk\n                  });\n                  userDispatcher({\n                    type: INIT_USER,\n                    payload: user\n                  });\n                  _k.label = 1;\n                case 1:\n                  _k.trys.push([1, 3,, 4]);\n                  return [4 /*yield*/, initializeMessageTemplatesInfo(sdk)];\n                case 2:\n                  _k.sent();\n                  return [3 /*break*/, 4];\n                case 3:\n                  error_2 = _k.sent();\n                  (_c = logger.error) === null || _c === void 0 ? void 0 : _c.call(logger, 'SendbirdProvider | useConnect/setupConnection/upsertMessageTemplateListInLocalStorage failed', {\n                    error: error_2\n                  });\n                  return [3 /*break*/, 4];\n                case 4:\n                  _k.trys.push([4, 6,, 7]);\n                  return [4 /*yield*/, initDashboardConfigs(sdk)];\n                case 5:\n                  _k.sent();\n                  (_d = logger.info) === null || _d === void 0 ? void 0 : _d.call(logger, 'SendbirdProvider | useConnect/setupConnection/getUIKitConfiguration success');\n                  return [3 /*break*/, 7];\n                case 6:\n                  error_3 = _k.sent();\n                  (_e = logger.error) === null || _e === void 0 ? void 0 : _e.call(logger, 'SendbirdProvider | useConnect/setupConnection/getUIKitConfiguration failed', {\n                    error: error_3\n                  });\n                  return [3 /*break*/, 7];\n                case 7:\n                  _k.trys.push([7, 10,, 11]);\n                  if (!((nickname !== user.nickname || profileUrl !== user.profileUrl) && !(isTextuallyNull(nickname) && isTextuallyNull(profileUrl)))) return [3 /*break*/, 9];\n                  (_f = logger.info) === null || _f === void 0 ? void 0 : _f.call(logger, 'SendbirdProvider | useConnect/setupConnection/updateCurrentUserInfo', {\n                    nickname: nickname,\n                    profileUrl: profileUrl\n                  });\n                  updateParams = {\n                    nickname: nickname || user.nickname || (isUserIdUsedForNickname ? user.userId : ''),\n                    profileUrl: profileUrl || user.profileUrl\n                  };\n                  return [4 /*yield*/, sdk.updateCurrentUserInfo(updateParams)];\n                case 8:\n                  updatedUser = _k.sent();\n                  (_g = logger.info) === null || _g === void 0 ? void 0 : _g.call(logger, 'SendbirdProvider | useConnect/setupConnection/updateCurrentUserInfo success', updateParams);\n                  userDispatcher({\n                    type: UPDATE_USER_INFO,\n                    payload: updatedUser\n                  });\n                  _k.label = 9;\n                case 9:\n                  return [3 /*break*/, 11];\n                case 10:\n                  _k.sent();\n                  return [3 /*break*/, 11];\n                case 11:\n                  resolve();\n                  (_j = (_h = eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.connection) === null || _h === void 0 ? void 0 : _h.onConnected) === null || _j === void 0 ? void 0 : _j.call(_h, user);\n                  return [2 /*return*/];\n              }\n            });\n          });\n        };\n        var onConnectFailed = function (e) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var errorMessage;\n            var _a, _b, _c, _d;\n            return __generator(this, function (_e) {\n              switch (_e.label) {\n                case 0:\n                  if (!(sdk.isCacheEnabled && shouldClearCache(e))) return [3 /*break*/, 2];\n                  (_a = logger.error) === null || _a === void 0 ? void 0 : _a.call(logger, \"SendbirdProvider | useConnect/setupConnection/connect clear cache [\".concat(e.code, \"/\").concat(e.message, \"]\"));\n                  return [4 /*yield*/, sdk.clearCachedData()];\n                case 1:\n                  _e.sent();\n                  _e.label = 2;\n                case 2:\n                  errorMessage = getConnectSbError(e);\n                  (_b = logger.error) === null || _b === void 0 ? void 0 : _b.call(logger, errorMessage, {\n                    e: e,\n                    appId: appId,\n                    userId: userId\n                  });\n                  userDispatcher({\n                    type: RESET_USER\n                  });\n                  sdkDispatcher({\n                    type: RESET_SDK\n                  });\n                  sdkDispatcher({\n                    type: SDK_ERROR\n                  });\n                  reject(errorMessage);\n                  (_d = (_c = eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.connection) === null || _c === void 0 ? void 0 : _c.onFailed) === null || _d === void 0 ? void 0 : _d.call(_c, e);\n                  return [2 /*return*/];\n              }\n            });\n          });\n        };\n      })];\n    });\n  });\n}\n/**\n * Initializes the Sendbird SDK with the provided parameters.\n * */\nfunction initSDK(_a) {\n  var appId = _a.appId,\n    _b = _a.isNewApp,\n    isNewApp = _b === void 0 ? false : _b,\n    customApiHost = _a.customApiHost,\n    customWebSocketHost = _a.customWebSocketHost,\n    _c = _a.sdkInitParams,\n    sdkInitParams = _c === void 0 ? {} : _c;\n  var params = Object.assign(sdkInitParams, {\n    appId: appId,\n    modules: [new GroupChannelModule(), new OpenChannelModule()],\n    newInstance: isNewApp,\n    localCacheEnabled: true\n  });\n  if (customApiHost) params.customApiHost = customApiHost;\n  if (customWebSocketHost) params.customWebSocketHost = customWebSocketHost;\n  return SendbirdChat.init(params);\n}\n/**\n * Sets up the Sendbird SDK after initialization.\n * Configures necessary settings, adds extensions, sets the platform, and configures the session handler if provided.\n */\nfunction setupSDK(sdk, params) {\n  var _a, _b;\n  var logger = params.logger,\n    sessionHandler = params.sessionHandler,\n    isMobile = params.isMobile,\n    customExtensionParams = params.customExtensionParams;\n  (_a = logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, 'SendbirdProvider | useConnect/setupConnection/setVersion', {\n    version: APP_VERSION_STRING\n  });\n  sdk.addExtension('sb_uikit', APP_VERSION_STRING);\n  sdk.addSendbirdExtensions([{\n    product: SendbirdProduct.UIKIT_CHAT,\n    version: APP_VERSION_STRING,\n    platform: SendbirdPlatform === null || SendbirdPlatform === void 0 ? void 0 : SendbirdPlatform.JS\n  }], {\n    platform: isMobile ? DeviceOsPlatform.MOBILE_WEB : DeviceOsPlatform.WEB\n  }, customExtensionParams);\n  if (sessionHandler) {\n    (_b = logger.info) === null || _b === void 0 ? void 0 : _b.call(logger, 'SendbirdProvider | useConnect/setupConnection/configureSession', sessionHandler);\n    sdk.setSessionHandler(sessionHandler);\n  }\n}\nfunction shouldClearCache(error) {\n  if (!(error instanceof SendbirdError)) return false;\n  return [SendbirdErrorCode.USER_AUTH_DEACTIVATED, SendbirdErrorCode.USER_AUTH_DELETED_OR_NOT_FOUND, SendbirdErrorCode.SESSION_TOKEN_EXPIRED, SendbirdErrorCode.SESSION_REVOKED].includes(error.code);\n}\nfunction shouldRetryWithValidSessionToken(error) {\n  if (!(error instanceof SendbirdError)) return false;\n  return [SendbirdErrorCode.SESSION_TOKEN_EXPIRED,\n  /**\n   * Note: INVALID_TOKEN has been added arbitrarily due to legacy constraints\n   *\n   * In the useEffect of the useConnect hook, authentication is being performed\n   * but changes of the `accessToken` is not being detected.\n   * `disconnectSdk` is called when connect is called redundantly for the same user ID, causing issues, so `accessToken` has been excluded form the deps.\n   *\n   * In case the `accessToken` is missed, an additional attempt to connect is made\n   * */\n  SendbirdErrorCode.INVALID_TOKEN].includes(error.code);\n}\nfunction connect(_a) {\n  return __awaiter(this, arguments, void 0, function (_b) {\n    var logger = _b.logger,\n      sdkDispatcher = _b.sdkDispatcher,\n      userDispatcher = _b.userDispatcher,\n      appInfoDispatcher = _b.appInfoDispatcher,\n      initDashboardConfigs = _b.initDashboardConfigs,\n      userId = _b.userId,\n      appId = _b.appId,\n      _c = _b.isNewApp,\n      isNewApp = _c === void 0 ? false : _c,\n      customApiHost = _b.customApiHost,\n      customWebSocketHost = _b.customWebSocketHost,\n      configureSession = _b.configureSession,\n      nickname = _b.nickname,\n      profileUrl = _b.profileUrl,\n      accessToken = _b.accessToken,\n      sdk = _b.sdk,\n      sdkInitParams = _b.sdkInitParams,\n      customExtensionParams = _b.customExtensionParams,\n      isMobile = _b.isMobile,\n      eventHandlers = _b.eventHandlers,\n      isUserIdUsedForNickname = _b.isUserIdUsedForNickname,\n      initializeMessageTemplatesInfo = _b.initializeMessageTemplatesInfo;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          return [4 /*yield*/, disconnectSdk({\n            logger: logger,\n            sdkDispatcher: sdkDispatcher,\n            userDispatcher: userDispatcher,\n            sdk: sdk\n          })];\n        case 1:\n          _d.sent();\n          return [4 /*yield*/, setUpConnection({\n            logger: logger,\n            sdkDispatcher: sdkDispatcher,\n            userDispatcher: userDispatcher,\n            appInfoDispatcher: appInfoDispatcher,\n            initDashboardConfigs: initDashboardConfigs,\n            userId: userId,\n            appId: appId,\n            isNewApp: isNewApp,\n            customApiHost: customApiHost,\n            customWebSocketHost: customWebSocketHost,\n            configureSession: configureSession,\n            nickname: nickname,\n            profileUrl: profileUrl,\n            accessToken: accessToken,\n            sdkInitParams: sdkInitParams,\n            customExtensionParams: customExtensionParams,\n            isMobile: isMobile,\n            eventHandlers: eventHandlers,\n            isUserIdUsedForNickname: isUserIdUsedForNickname,\n            initializeMessageTemplatesInfo: initializeMessageTemplatesInfo\n          })];\n        case 2:\n          _d.sent();\n          return [2 /*return*/];\n      }\n    });\n  });\n}\nfunction useConnect(triggerTypes, staticTypes) {\n  var _this = this;\n  var userId = triggerTypes.userId,\n    appId = triggerTypes.appId,\n    accessToken = triggerTypes.accessToken,\n    isMobile = triggerTypes.isMobile,\n    isUserIdUsedForNickname = triggerTypes.isUserIdUsedForNickname;\n  var logger = staticTypes.logger,\n    nickname = staticTypes.nickname,\n    profileUrl = staticTypes.profileUrl,\n    configureSession = staticTypes.configureSession,\n    customApiHost = staticTypes.customApiHost,\n    customWebSocketHost = staticTypes.customWebSocketHost,\n    sdk = staticTypes.sdk,\n    sdkDispatcher = staticTypes.sdkDispatcher,\n    userDispatcher = staticTypes.userDispatcher,\n    appInfoDispatcher = staticTypes.appInfoDispatcher,\n    initDashboardConfigs = staticTypes.initDashboardConfigs,\n    sdkInitParams = staticTypes.sdkInitParams,\n    customExtensionParams = staticTypes.customExtensionParams,\n    eventHandlers = staticTypes.eventHandlers,\n    initializeMessageTemplatesInfo = staticTypes.initializeMessageTemplatesInfo;\n  // Note: This is a workaround to prevent the creation of multiple SDK instances when React strict mode is enabled.\n  var connectDeps = useRef({\n    appId: '',\n    userId: ''\n  });\n  useEffect(function () {\n    var _a;\n    (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, 'SendbirdProvider | useConnect/useEffect', {\n      userId: userId,\n      appId: appId,\n      accessToken: accessToken\n    });\n    var isNewApp = connectDeps.current.appId !== appId;\n    if (connectDeps.current.appId === appId && connectDeps.current.userId === userId) {\n      return;\n    } else {\n      connectDeps.current = {\n        appId: appId,\n        userId: userId\n      };\n    }\n    connect({\n      userId: userId,\n      appId: appId,\n      isNewApp: isNewApp,\n      accessToken: accessToken,\n      logger: logger,\n      nickname: nickname,\n      profileUrl: profileUrl,\n      configureSession: configureSession,\n      customApiHost: customApiHost,\n      customWebSocketHost: customWebSocketHost,\n      sdk: sdk,\n      sdkDispatcher: sdkDispatcher,\n      userDispatcher: userDispatcher,\n      appInfoDispatcher: appInfoDispatcher,\n      initDashboardConfigs: initDashboardConfigs,\n      isUserIdUsedForNickname: isUserIdUsedForNickname,\n      sdkInitParams: sdkInitParams,\n      customExtensionParams: customExtensionParams,\n      isMobile: isMobile,\n      eventHandlers: eventHandlers,\n      initializeMessageTemplatesInfo: initializeMessageTemplatesInfo\n    }).catch(function (error) {\n      var _a;\n      (_a = logger === null || logger === void 0 ? void 0 : logger.error) === null || _a === void 0 ? void 0 : _a.call(logger, 'SendbirdProvider | useConnect/useEffect', error);\n    });\n  }, [userId, appId]);\n  var reconnect = useCallback(function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var error_1;\n      var _a, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, 'SendbirdProvider | useConnect/reconnect/useCallback', {\n              sdk: sdk\n            });\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, connect({\n              userId: userId,\n              appId: appId,\n              accessToken: accessToken,\n              logger: logger,\n              nickname: nickname,\n              profileUrl: profileUrl,\n              configureSession: configureSession,\n              customApiHost: customApiHost,\n              customWebSocketHost: customWebSocketHost,\n              sdk: sdk,\n              sdkDispatcher: sdkDispatcher,\n              userDispatcher: userDispatcher,\n              appInfoDispatcher: appInfoDispatcher,\n              initDashboardConfigs: initDashboardConfigs,\n              isUserIdUsedForNickname: isUserIdUsedForNickname,\n              sdkInitParams: sdkInitParams,\n              customExtensionParams: customExtensionParams,\n              isMobile: isMobile,\n              eventHandlers: eventHandlers,\n              initializeMessageTemplatesInfo: initializeMessageTemplatesInfo\n            })];\n          case 2:\n            _c.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            error_1 = _c.sent();\n            (_b = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b === void 0 ? void 0 : _b.call(logger, 'SendbirdProvider | useConnect/reconnect/useCallback', error_1);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  }, [sdk]);\n  return reconnect;\n}\n\n// Logger, pretty much explains it\n// in SendbirdProvider\n// const [logger, setLogger] = useState(LoggerFactory(logLevel));\nvar LOG_LEVELS = {\n  DEBUG: 'debug',\n  WARNING: 'warning',\n  ERROR: 'error',\n  INFO: 'info',\n  ALL: 'all'\n};\nvar colorLog = function (level) {\n  switch (level) {\n    case LOG_LEVELS.WARNING:\n      return 'color: Orange';\n    case LOG_LEVELS.ERROR:\n      return 'color: Red';\n    default:\n      return 'color: Gray';\n  }\n};\nvar printLog = function (_a) {\n  var level = _a.level,\n    title = _a.title,\n    _b = _a.description,\n    description = _b === void 0 ? '' : _b,\n    _c = _a.payload,\n    payload = _c === void 0 ? [] : _c;\n  // eslint-disable-next-line no-console\n  console.log.apply(console, __spreadArray([\"%c SendbirdUIKit | \".concat(level, \" | \").concat(new Date().toISOString(), \" | \").concat(title, \" \").concat(description && '|'), colorLog(level), description], payload, false));\n};\nvar getDefaultLogger = function () {\n  return {\n    info: noop,\n    error: noop,\n    warning: noop\n  };\n};\nvar LoggerFactory = function (lvl, customInterface) {\n  var logInterface = customInterface || printLog;\n  var lvlArray = Array.isArray(lvl) ? lvl : [lvl];\n  var applyLog = function (lgLvl) {\n    return function (title, description) {\n      var payload = [];\n      for (var _i = 2; _i < arguments.length; _i++) {\n        payload[_i - 2] = arguments[_i];\n      }\n      return logInterface({\n        level: lgLvl,\n        title: title,\n        description: description,\n        payload: payload\n      });\n    };\n  };\n  return lvlArray.reduce(function (accumulator, currentLvl) {\n    if (currentLvl === LOG_LEVELS.DEBUG || currentLvl === LOG_LEVELS.ALL) {\n      return __assign(__assign({}, accumulator), {\n        info: applyLog(LOG_LEVELS.INFO),\n        error: applyLog(LOG_LEVELS.ERROR),\n        warning: applyLog(LOG_LEVELS.WARNING)\n      });\n    }\n    if (currentLvl === LOG_LEVELS.INFO) {\n      return __assign(__assign({}, accumulator), {\n        info: applyLog(LOG_LEVELS.INFO)\n      });\n    }\n    if (currentLvl === LOG_LEVELS.ERROR) {\n      return __assign(__assign({}, accumulator), {\n        error: applyLog(LOG_LEVELS.ERROR)\n      });\n    }\n    if (currentLvl === LOG_LEVELS.WARNING) {\n      return __assign(__assign({}, accumulator), {\n        warning: applyLog(LOG_LEVELS.WARNING)\n      });\n    }\n    return __assign({}, accumulator);\n  }, getDefaultLogger());\n};\n// TODO: Make this to hook, useLogger\n\nvar VoiceMessageProvider = function (_a) {\n  var children = _a.children;\n  return React__default.createElement(VoicePlayerProvider, null, React__default.createElement(VoiceRecorderProvider, null, children));\n};\nfunction uikitConfigMapper(_a) {\n  var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7;\n  var legacyConfig = _a.legacyConfig,\n    _8 = _a.uikitOptions,\n    uikitOptions = _8 === void 0 ? {} : _8;\n  var replyType = legacyConfig.replyType,\n    isMentionEnabled = legacyConfig.isMentionEnabled,\n    isReactionEnabled = legacyConfig.isReactionEnabled,\n    disableUserProfile = legacyConfig.disableUserProfile,\n    isVoiceMessageEnabled = legacyConfig.isVoiceMessageEnabled,\n    isTypingIndicatorEnabledOnChannelList = legacyConfig.isTypingIndicatorEnabledOnChannelList,\n    isMessageReceiptStatusEnabledOnChannelList = legacyConfig.isMessageReceiptStatusEnabledOnChannelList,\n    showSearchIcon = legacyConfig.showSearchIcon;\n  return {\n    common: {\n      enableUsingDefaultUserProfile: (_c = (_b = uikitOptions.common) === null || _b === void 0 ? void 0 : _b.enableUsingDefaultUserProfile) !== null && _c !== void 0 ? _c : typeof disableUserProfile === 'boolean' ? !disableUserProfile : undefined\n    },\n    groupChannel: {\n      enableOgtag: (_d = uikitOptions.groupChannel) === null || _d === void 0 ? void 0 : _d.enableOgtag,\n      enableMention: (_f = (_e = uikitOptions.groupChannel) === null || _e === void 0 ? void 0 : _e.enableMention) !== null && _f !== void 0 ? _f : isMentionEnabled,\n      enableReactions: (_h = (_g = uikitOptions.groupChannel) === null || _g === void 0 ? void 0 : _g.enableReactions) !== null && _h !== void 0 ? _h : isReactionEnabled,\n      enableReactionsSupergroup: (_j = uikitOptions.groupChannel) === null || _j === void 0 ? void 0 : _j.enableReactionsSupergroup,\n      enableTypingIndicator: (_k = uikitOptions.groupChannel) === null || _k === void 0 ? void 0 : _k.enableTypingIndicator,\n      enableVoiceMessage: (_m = (_l = uikitOptions.groupChannel) === null || _l === void 0 ? void 0 : _l.enableVoiceMessage) !== null && _m !== void 0 ? _m : isVoiceMessageEnabled,\n      replyType: (_p = (_o = uikitOptions.groupChannel) === null || _o === void 0 ? void 0 : _o.replyType) !== null && _p !== void 0 ? _p : replyType != null ? getCaseResolvedReplyType(replyType).lowerCase : undefined,\n      threadReplySelectType: (_q = uikitOptions.groupChannel) === null || _q === void 0 ? void 0 : _q.threadReplySelectType,\n      input: {\n        enableDocument: (_s = (_r = uikitOptions.groupChannel) === null || _r === void 0 ? void 0 : _r.input) === null || _s === void 0 ? void 0 : _s.enableDocument\n      },\n      typingIndicatorTypes: (_t = uikitOptions.groupChannel) === null || _t === void 0 ? void 0 : _t.typingIndicatorTypes,\n      enableFeedback: (_u = uikitOptions.groupChannel) === null || _u === void 0 ? void 0 : _u.enableFeedback,\n      enableSuggestedReplies: (_v = uikitOptions.groupChannel) === null || _v === void 0 ? void 0 : _v.enableSuggestedReplies,\n      showSuggestedRepliesFor: (_w = uikitOptions.groupChannel) === null || _w === void 0 ? void 0 : _w.showSuggestedRepliesFor,\n      suggestedRepliesDirection: (_x = uikitOptions.groupChannel) === null || _x === void 0 ? void 0 : _x.suggestedRepliesDirection,\n      enableMarkdownForUserMessage: (_y = uikitOptions.groupChannel) === null || _y === void 0 ? void 0 : _y.enableMarkdownForUserMessage\n    },\n    groupChannelList: {\n      enableTypingIndicator: (_0 = (_z = uikitOptions.groupChannelList) === null || _z === void 0 ? void 0 : _z.enableTypingIndicator) !== null && _0 !== void 0 ? _0 : isTypingIndicatorEnabledOnChannelList,\n      enableMessageReceiptStatus: (_2 = (_1 = uikitOptions.groupChannelList) === null || _1 === void 0 ? void 0 : _1.enableMessageReceiptStatus) !== null && _2 !== void 0 ? _2 : isMessageReceiptStatusEnabledOnChannelList\n    },\n    groupChannelSettings: {\n      enableMessageSearch: (_4 = (_3 = uikitOptions.groupChannelSettings) === null || _3 === void 0 ? void 0 : _3.enableMessageSearch) !== null && _4 !== void 0 ? _4 : showSearchIcon\n    },\n    openChannel: {\n      enableOgtag: (_5 = uikitOptions.openChannel) === null || _5 === void 0 ? void 0 : _5.enableOgtag,\n      input: {\n        enableDocument: (_7 = (_6 = uikitOptions.openChannel) === null || _6 === void 0 ? void 0 : _6.input) === null || _7 === void 0 ? void 0 : _7.enableDocument\n      }\n    }\n  };\n}\nfunction useMarkAsReadScheduler(_a, _b) {\n  var isConnected = _a.isConnected;\n  var logger = _b.logger;\n  var markAsReadScheduler = useMemo(function () {\n    return schedulerFactory({\n      logger: logger,\n      cb: function (channel) {\n        try {\n          channel.markAsRead();\n        } catch (error) {\n          logger.warning('Channel: Mark as delivered failed', {\n            channel: channel,\n            error: error\n          });\n        }\n      }\n    });\n  }, []);\n  useEffect(function () {\n    // for simplicity, we clear the queue when the connection is lost\n    if (!isConnected) {\n      markAsReadScheduler.clear();\n    }\n  }, [isConnected]);\n  useUnmount(function () {\n    markAsReadScheduler.clear();\n  });\n  return markAsReadScheduler;\n}\nvar uikitConfigStorage = {\n  getItem: function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        return [2 /*return*/, (_a = localStorage.getItem(key)) !== null && _a !== void 0 ? _a : null];\n      });\n    });\n  },\n  setItem: function (key, value) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, localStorage.setItem(key, value)];\n      });\n    });\n  }\n};\n\n/**\n * Takes JSON parsed template and then returns processed message template for storing it in global state.\n */\nvar getProcessedTemplate = function (parsedTemplate) {\n  return {\n    version: Number(parsedTemplate.ui_template.version),\n    uiTemplate: JSON.stringify(parsedTemplate.ui_template.body.items),\n    colorVariables: parsedTemplate.color_variables\n  };\n};\nvar getProcessedTemplatesMap = function (parsedTemplates) {\n  var processedTemplates = {};\n  parsedTemplates.forEach(function (template) {\n    processedTemplates[template.key] = getProcessedTemplate(template);\n  });\n  return processedTemplates;\n};\nvar MESSAGE_TEMPLATES_FETCH_LIMIT = 20;\nvar INITIALIZE_MESSAGE_TEMPLATES_INFO = APP_INFO_ACTIONS.INITIALIZE_MESSAGE_TEMPLATES_INFO,\n  UPSERT_MESSAGE_TEMPLATES = APP_INFO_ACTIONS.UPSERT_MESSAGE_TEMPLATES,\n  UPSERT_WAITING_TEMPLATE_KEYS = APP_INFO_ACTIONS.UPSERT_WAITING_TEMPLATE_KEYS,\n  MARK_ERROR_WAITING_TEMPLATE_KEYS = APP_INFO_ACTIONS.MARK_ERROR_WAITING_TEMPLATE_KEYS;\nfunction useMessageTemplateUtils(_a) {\n  var _this = this;\n  var sdk = _a.sdk,\n    logger = _a.logger,\n    appInfoStore = _a.appInfoStore,\n    appInfoDispatcher = _a.appInfoDispatcher;\n  var messageTemplatesInfo = appInfoStore === null || appInfoStore === void 0 ? void 0 : appInfoStore.messageTemplatesInfo;\n  var getCachedTemplate = function (key) {\n    var _a, _b;\n    if (!messageTemplatesInfo) return null;\n    var cachedTemplate = null;\n    var cachedMessageTemplates = (_a = messageTemplatesInfo === null || messageTemplatesInfo === void 0 ? void 0 : messageTemplatesInfo.templatesMap) !== null && _a !== void 0 ? _a : null;\n    if (cachedMessageTemplates) {\n      cachedTemplate = (_b = cachedMessageTemplates[key]) !== null && _b !== void 0 ? _b : null;\n    }\n    return cachedTemplate;\n  };\n  /**\n   * Fetches a single message template by given key and then\n   * returns processed template for updating templates info in global state.\n   * If no such templates exists (error) or any error occurs in response, return null.\n   */\n  var fetchAllMessageTemplates = function (readySdk) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var hasMore, paginationToken, fetchedTemplates, res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            hasMore = true;\n            paginationToken = null;\n            fetchedTemplates = [];\n            _a.label = 1;\n          case 1:\n            if (!hasMore) return [3 /*break*/, 3];\n            return [4 /*yield*/, readySdk.message.getMessageTemplatesByToken(paginationToken, {\n              limit: MESSAGE_TEMPLATES_FETCH_LIMIT\n            })];\n          case 2:\n            res = _a.sent();\n            hasMore = res.hasMore;\n            paginationToken = res.token;\n            res.templates.forEach(function (messageTemplate) {\n              fetchedTemplates.push(JSON.parse(messageTemplate.template));\n            });\n            return [3 /*break*/, 1];\n          case 3:\n            return [2 /*return*/, fetchedTemplates];\n        }\n      });\n    });\n  };\n  var initializeMessageTemplatesInfo = function (readySdk) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var sdkMessageTemplateToken, cachedMessageTemplatesToken, cachedMessageTemplates, parsedTemplates, newMessageTemplatesInfo, parsedTemplates, newMessageTemplatesInfo;\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            sdkMessageTemplateToken = (_a = readySdk.appInfo) === null || _a === void 0 ? void 0 : _a.messageTemplateInfo.token;\n            /**\n             * no sdkMessageTemplateToken => no templates => clear cached\n             */\n            if (!sdkMessageTemplateToken) {\n              localStorage.removeItem(CACHED_MESSAGE_TEMPLATES_TOKEN_KEY);\n              localStorage.removeItem(CACHED_MESSAGE_TEMPLATES_KEY);\n              return [2 /*return*/];\n            }\n            cachedMessageTemplatesToken = localStorage.getItem(CACHED_MESSAGE_TEMPLATES_TOKEN_KEY);\n            cachedMessageTemplates = localStorage.getItem(CACHED_MESSAGE_TEMPLATES_KEY);\n            if (!(!cachedMessageTemplatesToken || cachedMessageTemplatesToken !== sdkMessageTemplateToken)) return [3 /*break*/, 2];\n            return [4 /*yield*/, fetchAllMessageTemplates(readySdk)];\n          case 1:\n            parsedTemplates = _b.sent();\n            newMessageTemplatesInfo = {\n              token: sdkMessageTemplateToken,\n              templatesMap: getProcessedTemplatesMap(parsedTemplates)\n            };\n            appInfoDispatcher({\n              type: INITIALIZE_MESSAGE_TEMPLATES_INFO,\n              payload: newMessageTemplatesInfo\n            });\n            localStorage.setItem(CACHED_MESSAGE_TEMPLATES_TOKEN_KEY, sdkMessageTemplateToken);\n            localStorage.setItem(CACHED_MESSAGE_TEMPLATES_KEY, JSON.stringify(parsedTemplates));\n            return [3 /*break*/, 3];\n          case 2:\n            if (cachedMessageTemplatesToken && cachedMessageTemplatesToken === sdkMessageTemplateToken && cachedMessageTemplates) {\n              parsedTemplates = JSON.parse(cachedMessageTemplates);\n              newMessageTemplatesInfo = {\n                token: sdkMessageTemplateToken,\n                templatesMap: getProcessedTemplatesMap(parsedTemplates)\n              };\n              appInfoDispatcher({\n                type: INITIALIZE_MESSAGE_TEMPLATES_INFO,\n                payload: newMessageTemplatesInfo\n              });\n            }\n            _b.label = 3;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * If given message is a template message with template key and if the key does not exist in the cache,\n   * update the cache by fetching the template.\n   */\n  var updateMessageTemplatesInfo = function (templateKeys, messageId, requestedAt) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var newParsedTemplates_1, hasMore, token, result, e_1, cachedMessageTemplates, parsedTemplates_1, existingKeys_1;\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!appInfoDispatcher) return [3 /*break*/, 7];\n            appInfoDispatcher({\n              type: UPSERT_WAITING_TEMPLATE_KEYS,\n              payload: {\n                keys: templateKeys,\n                requestedAt: requestedAt\n              }\n            });\n            newParsedTemplates_1 = [];\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 5,, 6]);\n            hasMore = true;\n            token = null;\n            _b.label = 2;\n          case 2:\n            if (!hasMore) return [3 /*break*/, 4];\n            return [4 /*yield*/, sdk.message.getMessageTemplatesByToken(token, {\n              keys: templateKeys\n            })];\n          case 3:\n            result = _b.sent();\n            result.templates.forEach(function (newTemplate) {\n              newParsedTemplates_1.push(JSON.parse(newTemplate.template));\n            });\n            hasMore = result.hasMore;\n            token = result.token;\n            return [3 /*break*/, 2];\n          case 4:\n            return [3 /*break*/, 6];\n          case 5:\n            e_1 = _b.sent();\n            (_a = logger === null || logger === void 0 ? void 0 : logger.error) === null || _a === void 0 ? void 0 : _a.call(logger, 'Sendbird | fetchProcessedMessageTemplates failed', e_1, templateKeys);\n            return [3 /*break*/, 6];\n          case 6:\n            if (newParsedTemplates_1.length > 0) {\n              cachedMessageTemplates = localStorage.getItem(CACHED_MESSAGE_TEMPLATES_KEY);\n              if (cachedMessageTemplates) {\n                parsedTemplates_1 = JSON.parse(cachedMessageTemplates);\n                existingKeys_1 = parsedTemplates_1.map(function (parsedTemplate) {\n                  return parsedTemplate.key;\n                });\n                newParsedTemplates_1.forEach(function (newParsedTemplate) {\n                  if (!existingKeys_1.includes(newParsedTemplate.key)) {\n                    parsedTemplates_1.push(newParsedTemplate);\n                  }\n                });\n                localStorage.setItem(CACHED_MESSAGE_TEMPLATES_KEY, JSON.stringify(parsedTemplates_1));\n              } else {\n                localStorage.setItem(CACHED_MESSAGE_TEMPLATES_KEY, JSON.stringify([newParsedTemplates_1]));\n              }\n              // Update memory\n              appInfoDispatcher({\n                type: UPSERT_MESSAGE_TEMPLATES,\n                payload: newParsedTemplates_1.map(function (newParsedTemplate) {\n                  return {\n                    key: newParsedTemplate.key,\n                    template: getProcessedTemplate(newParsedTemplate)\n                  };\n                })\n              });\n            } else {\n              appInfoDispatcher({\n                type: MARK_ERROR_WAITING_TEMPLATE_KEYS,\n                payload: {\n                  keys: templateKeys,\n                  messageId: messageId\n                }\n              });\n            }\n            _b.label = 7;\n          case 7:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  return {\n    getCachedTemplate: getCachedTemplate,\n    updateMessageTemplatesInfo: updateMessageTemplatesInfo,\n    initializeMessageTemplatesInfo: initializeMessageTemplatesInfo\n  };\n}\nvar useHTMLTextDirection = function (direction) {\n  useEffect(function () {\n    /**\n     * It sets the 'dir' attribute of the closest parent <div> element of the element with VOICE_PLAYER_ROOT_ID cause:\n     * - An empty <div> element is created in the VoiceMessageProvider, which is the highest-level <div> element within the SendbirdProvider.\n     * - It tries to find the nearest parent <div> element within the SendbirdProvider and sets 'dir' attribute,\n     * ensuring that the directionality is applied correctly.\n     * */\n    var targetElement = document.getElementById(VOICE_PLAYER_ROOT_ID);\n    targetElement.parentElement.dir = direction;\n  }, [direction]);\n};\nfunction SendbirdProvider(props) {\n  var localConfigs = uikitConfigMapper({\n    legacyConfig: {\n      replyType: props.replyType,\n      isMentionEnabled: props.isMentionEnabled,\n      isReactionEnabled: props.isReactionEnabled,\n      disableUserProfile: props.disableUserProfile,\n      isVoiceMessageEnabled: props.isVoiceMessageEnabled,\n      isTypingIndicatorEnabledOnChannelList: props.isTypingIndicatorEnabledOnChannelList,\n      isMessageReceiptStatusEnabledOnChannelList: props.isMessageReceiptStatusEnabledOnChannelList,\n      showSearchIcon: props.showSearchIcon\n    },\n    uikitOptions: props.uikitOptions\n  });\n  return React__default.createElement(UIKitConfigProvider, {\n    storage: uikitConfigStorage,\n    localConfigs: {\n      common: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.common,\n      groupChannel: {\n        channel: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.groupChannel,\n        channelList: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.groupChannelList,\n        setting: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.groupChannelSettings\n      },\n      openChannel: {\n        channel: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.openChannel\n      }\n    }\n  }, React__default.createElement(SendbirdSDK, __assign({}, props)));\n}\nvar SendbirdSDK = function (_a) {\n  var _b, _c, _d;\n  var appId = _a.appId,\n    userId = _a.userId,\n    children = _a.children,\n    accessToken = _a.accessToken,\n    customApiHost = _a.customApiHost,\n    customWebSocketHost = _a.customWebSocketHost,\n    configureSession = _a.configureSession,\n    _e = _a.theme,\n    theme = _e === void 0 ? 'light' : _e,\n    _f = _a.config,\n    config = _f === void 0 ? {} : _f,\n    _g = _a.nickname,\n    nickname = _g === void 0 ? '' : _g,\n    colorSet = _a.colorSet,\n    stringSet = _a.stringSet,\n    dateLocale = _a.dateLocale,\n    _h = _a.profileUrl,\n    profileUrl = _h === void 0 ? '' : _h,\n    voiceRecord = _a.voiceRecord,\n    userListQuery = _a.userListQuery,\n    _j = _a.imageCompression,\n    imageCompression = _j === void 0 ? {} : _j,\n    _k = _a.allowProfileEdit,\n    allowProfileEdit = _k === void 0 ? false : _k,\n    _l = _a.disableMarkAsDelivered,\n    disableMarkAsDelivered = _l === void 0 ? false : _l,\n    renderUserProfile = _a.renderUserProfile,\n    onUserProfileMessage = _a.onUserProfileMessage,\n    _m = _a.breakpoint,\n    breakpoint = _m === void 0 ? false : _m,\n    _o = _a.isUserIdUsedForNickname,\n    isUserIdUsedForNickname = _o === void 0 ? true : _o,\n    sdkInitParams = _a.sdkInitParams,\n    customExtensionParams = _a.customExtensionParams,\n    _p = _a.isMultipleFilesMessageEnabled,\n    isMultipleFilesMessageEnabled = _p === void 0 ? false : _p,\n    eventHandlers = _a.eventHandlers,\n    _q = _a.htmlTextDirection,\n    htmlTextDirection = _q === void 0 ? 'ltr' : _q;\n  var _r = config.logLevel,\n    logLevel = _r === void 0 ? '' : _r,\n    _s = config.userMention,\n    userMention = _s === void 0 ? {} : _s,\n    _t = config.isREMUnitEnabled,\n    isREMUnitEnabled = _t === void 0 ? false : _t,\n    customPubSub = config.pubSub;\n  var isMobile = useMediaQueryContext().isMobile;\n  var _u = useState(LoggerFactory(logLevel)),\n    logger = _u[0],\n    setLogger = _u[1];\n  var pubSub = useState(function () {\n    return customPubSub !== null && customPubSub !== void 0 ? customPubSub : pubSubFactory();\n  })[0];\n  var _v = useReducer(reducer$2, initialState$2),\n    sdkStore = _v[0],\n    sdkDispatcher = _v[1];\n  var _w = useReducer(reducer$1, initialState$1),\n    userStore = _w[0],\n    userDispatcher = _w[1];\n  var _x = useReducer(reducer, initialState),\n    appInfoStore = _x[0],\n    appInfoDispatcher = _x[1];\n  var _y = useUIKitConfig(),\n    configs = _y.configs,\n    configsWithAppAttr = _y.configsWithAppAttr,\n    initDashboardConfigs = _y.initDashboardConfigs;\n  var sdkInitialized = sdkStore.initialized;\n  var sdk = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.sdk;\n  var _z = (_b = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) !== null && _b !== void 0 ? _b : {},\n    uploadSizeLimit = _z.uploadSizeLimit,\n    multipleFilesMessageFileCountLimit = _z.multipleFilesMessageFileCountLimit;\n  useTheme(colorSet);\n  var _0 = useMessageTemplateUtils({\n      sdk: sdk,\n      logger: logger,\n      appInfoStore: appInfoStore,\n      appInfoDispatcher: appInfoDispatcher\n    }),\n    getCachedTemplate = _0.getCachedTemplate,\n    updateMessageTemplatesInfo = _0.updateMessageTemplatesInfo,\n    initializeMessageTemplatesInfo = _0.initializeMessageTemplatesInfo;\n  var utils = {\n    updateMessageTemplatesInfo: updateMessageTemplatesInfo,\n    getCachedTemplate: getCachedTemplate\n  };\n  var reconnect = useConnect({\n    appId: appId,\n    userId: userId,\n    accessToken: accessToken,\n    isUserIdUsedForNickname: isUserIdUsedForNickname,\n    isMobile: isMobile\n  }, {\n    logger: logger,\n    nickname: nickname,\n    profileUrl: profileUrl,\n    configureSession: configureSession,\n    customApiHost: customApiHost,\n    customWebSocketHost: customWebSocketHost,\n    sdkInitParams: sdkInitParams,\n    customExtensionParams: customExtensionParams,\n    sdk: sdk,\n    sdkDispatcher: sdkDispatcher,\n    userDispatcher: userDispatcher,\n    appInfoDispatcher: appInfoDispatcher,\n    initDashboardConfigs: initDashboardConfigs,\n    eventHandlers: eventHandlers,\n    initializeMessageTemplatesInfo: initializeMessageTemplatesInfo\n  });\n  useUnmount(function () {\n    if (typeof sdk.disconnect === 'function') {\n      disconnectSdk({\n        logger: logger,\n        sdkDispatcher: sdkDispatcher,\n        userDispatcher: userDispatcher,\n        sdk: sdk\n      });\n    }\n  }, [sdk.disconnect]);\n  // to create a pubsub to communicate between parent and child\n  useEffect(function () {\n    setLogger(LoggerFactory(logLevel));\n  }, [logLevel]);\n  // should move to reducer\n  var _1 = useState(theme),\n    currentTheme = _1[0],\n    setCurrentTheme = _1[1];\n  useEffect(function () {\n    setCurrentTheme(theme);\n  }, [theme]);\n  useEffect(function () {\n    var body = document.querySelector('body');\n    body === null || body === void 0 ? void 0 : body.classList.remove('sendbird-experimental__rem__units');\n    if (isREMUnitEnabled) {\n      body === null || body === void 0 ? void 0 : body.classList.add('sendbird-experimental__rem__units');\n    }\n  }, [isREMUnitEnabled]);\n  // add-remove theme from body\n  useEffect(function () {\n    logger.info('Setup theme', \"Theme: \".concat(currentTheme));\n    try {\n      var body = document.querySelector('body');\n      body === null || body === void 0 ? void 0 : body.classList.remove('sendbird-theme--light');\n      body === null || body === void 0 ? void 0 : body.classList.remove('sendbird-theme--dark');\n      body === null || body === void 0 ? void 0 : body.classList.add(\"sendbird-theme--\".concat(currentTheme || 'light'));\n      logger.info('Finish setup theme');\n      // eslint-disable-next-line no-empty\n    } catch (e) {\n      logger.warning('Setup theme failed', \"\".concat(e));\n    }\n    return function () {\n      try {\n        var body = document.querySelector('body');\n        body === null || body === void 0 ? void 0 : body.classList.remove('sendbird-theme--light');\n        body === null || body === void 0 ? void 0 : body.classList.remove('sendbird-theme--dark');\n        // eslint-disable-next-line no-empty\n      } catch (_a) {}\n    };\n  }, [currentTheme]);\n  useHTMLTextDirection(htmlTextDirection);\n  var isOnline = useOnlineStatus(sdkStore.sdk, logger);\n  var markAsReadScheduler = useMarkAsReadScheduler({\n    isConnected: isOnline\n  }, {\n    logger: logger\n  });\n  var markAsDeliveredScheduler = useMarkAsDeliveredScheduler({\n    isConnected: isOnline\n  }, {\n    logger: logger\n  });\n  var localeStringSet = React__default.useMemo(function () {\n    return __assign(__assign({}, getStringSet('en')), stringSet);\n  }, [stringSet]);\n  /**\n   * Feature Configuration - TODO\n   * This will be moved into the UIKitConfigProvider, aftering Dashboard applies\n   */\n  var uikitMultipleFilesMessageLimit = useMemo(function () {\n    return Math.min(DEFAULT_MULTIPLE_FILES_MESSAGE_LIMIT, multipleFilesMessageFileCountLimit !== null && multipleFilesMessageFileCountLimit !== void 0 ? multipleFilesMessageFileCountLimit : Number.MAX_SAFE_INTEGER);\n  }, [multipleFilesMessageFileCountLimit]);\n  // Emoji Manager\n  var emojiManager = useMemo(function () {\n    return new EmojiManager({\n      sdk: sdk,\n      logger: logger\n    });\n  }, [sdkStore.initialized]);\n  return React__default.createElement(SendbirdSdkContext.Provider, {\n    value: {\n      stores: {\n        sdkStore: sdkStore,\n        userStore: userStore,\n        appInfoStore: appInfoStore\n      },\n      dispatchers: {\n        sdkDispatcher: sdkDispatcher,\n        userDispatcher: userDispatcher,\n        appInfoDispatcher: appInfoDispatcher,\n        reconnect: reconnect\n      },\n      config: {\n        disableMarkAsDelivered: disableMarkAsDelivered,\n        renderUserProfile: renderUserProfile,\n        onUserProfileMessage: onUserProfileMessage,\n        allowProfileEdit: allowProfileEdit,\n        isOnline: isOnline,\n        userId: userId,\n        appId: appId,\n        accessToken: accessToken,\n        theme: currentTheme,\n        setCurrentTheme: setCurrentTheme,\n        setCurrenttheme: setCurrentTheme,\n        // deprecated: typo\n        isMultipleFilesMessageEnabled: isMultipleFilesMessageEnabled,\n        uikitUploadSizeLimit: uploadSizeLimit !== null && uploadSizeLimit !== void 0 ? uploadSizeLimit : DEFAULT_UPLOAD_SIZE_LIMIT,\n        uikitMultipleFilesMessageLimit: uikitMultipleFilesMessageLimit,\n        userListQuery: userListQuery,\n        logger: logger,\n        pubSub: pubSub,\n        imageCompression: __assign({\n          compressionRate: 0.7,\n          outputFormat: 'preserve'\n        }, imageCompression),\n        voiceRecord: {\n          maxRecordingTime: (_c = voiceRecord === null || voiceRecord === void 0 ? void 0 : voiceRecord.maxRecordingTime) !== null && _c !== void 0 ? _c : VOICE_RECORDER_DEFAULT_MAX,\n          minRecordingTime: (_d = voiceRecord === null || voiceRecord === void 0 ? void 0 : voiceRecord.minRecordingTime) !== null && _d !== void 0 ? _d : VOICE_RECORDER_DEFAULT_MIN\n        },\n        userMention: {\n          maxMentionCount: (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount) || 10,\n          maxSuggestionCount: (userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount) || 15\n        },\n        markAsReadScheduler: markAsReadScheduler,\n        markAsDeliveredScheduler: markAsDeliveredScheduler,\n        // Remote configs set from dashboard by UIKit feature configuration\n        common: configs.common,\n        groupChannel: {\n          enableOgtag: sdkInitialized && configsWithAppAttr(sdk).groupChannel.channel.enableOgtag,\n          enableTypingIndicator: configs.groupChannel.channel.enableTypingIndicator,\n          enableReactions: sdkInitialized && configsWithAppAttr(sdk).groupChannel.channel.enableReactions,\n          enableMention: configs.groupChannel.channel.enableMention,\n          replyType: configs.groupChannel.channel.replyType,\n          threadReplySelectType: configs.groupChannel.channel.threadReplySelectType,\n          enableVoiceMessage: configs.groupChannel.channel.enableVoiceMessage,\n          enableDocument: configs.groupChannel.channel.input.enableDocument,\n          typingIndicatorTypes: configs.groupChannel.channel.typingIndicatorTypes,\n          enableFeedback: configs.groupChannel.channel.enableFeedback,\n          enableSuggestedReplies: configs.groupChannel.channel.enableSuggestedReplies,\n          showSuggestedRepliesFor: configs.groupChannel.channel.showSuggestedRepliesFor,\n          suggestedRepliesDirection: configs.groupChannel.channel.suggestedRepliesDirection,\n          enableMarkdownForUserMessage: configs.groupChannel.channel.enableMarkdownForUserMessage,\n          enableReactionsSupergroup: sdkInitialized && configsWithAppAttr(sdk).groupChannel.channel.enableReactionsSupergroup\n        },\n        groupChannelList: {\n          enableTypingIndicator: configs.groupChannel.channelList.enableTypingIndicator,\n          enableMessageReceiptStatus: configs.groupChannel.channelList.enableMessageReceiptStatus\n        },\n        groupChannelSettings: {\n          enableMessageSearch: sdkInitialized && configsWithAppAttr(sdk).groupChannel.setting.enableMessageSearch\n        },\n        openChannel: {\n          enableOgtag: sdkInitialized && configsWithAppAttr(sdk).openChannel.channel.enableOgtag,\n          enableDocument: configs.openChannel.channel.input.enableDocument\n        },\n        // deprecated configs\n        disableUserProfile: !configs.common.enableUsingDefaultUserProfile,\n        isReactionEnabled: sdkInitialized && configsWithAppAttr(sdk).groupChannel.channel.enableReactions,\n        isMentionEnabled: configs.groupChannel.channel.enableMention,\n        isVoiceMessageEnabled: configs.groupChannel.channel.enableVoiceMessage,\n        replyType: getCaseResolvedReplyType(configs.groupChannel.channel.replyType).upperCase,\n        isTypingIndicatorEnabledOnChannelList: configs.groupChannel.channelList.enableTypingIndicator,\n        isMessageReceiptStatusEnabledOnChannelList: configs.groupChannel.channelList.enableMessageReceiptStatus,\n        showSearchIcon: sdkInitialized && configsWithAppAttr(sdk).groupChannel.setting.enableMessageSearch,\n        htmlTextDirection: htmlTextDirection\n      },\n      eventHandlers: eventHandlers,\n      emojiManager: emojiManager,\n      utils: utils\n    }\n  }, React__default.createElement(MediaQueryProvider, {\n    logger: logger,\n    breakpoint: breakpoint\n  }, React__default.createElement(LocalizationProvider, {\n    stringSet: localeStringSet,\n    dateLocale: dateLocale\n  }, React__default.createElement(VoiceMessageProvider, null, React__default.createElement(GlobalModalProvider, null, children)))), React__default.createElement(EmojiReactionListRoot, null), React__default.createElement(ModalRoot, null), React__default.createElement(MenuRoot, null));\n};\nexport { SendbirdProvider, SendbirdProvider as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { _ as __assign, a as __awaiter, b as __generator, c as __spreadArray } from './chunks/bundle-BQi9-O76.js';\nimport React__default, { useLayoutEffect, useRef, useEffect, useCallback, useMemo, useState, useReducer } from 'react';\nimport { UIKitConfigProvider, useUIKitConfig } from '@sendbird/uikit-tools';\nimport { SendbirdSdkContext } from './withSendbird.js';\nimport { m as mapColorKeys, V as VoiceRecorderProvider, E as EmojiManager, G as GlobalModalProvider, d as ModalRoot } from './chunks/bundle-CXdo2kR_.js';\nimport cssVars from 'css-vars-ponyfill';\nimport { K, a4 as isTextuallyNull } from './chunks/bundle-DxTN4_0p.js';\nimport { U as USER_ACTIONS } from './chunks/bundle-B7BfObV1.js';\nimport { s as schedulerFactory, b as useUnmount, u as useOnlineStatus, a as useMarkAsDeliveredScheduler } from './chunks/bundle-Soz6sOqr.js';\nimport SendbirdChat, { SendbirdError, SendbirdProduct, SendbirdPlatform, DeviceOsPlatform, SendbirdErrorCode } from '@sendbird/chat';\nimport { OpenChannelModule } from '@sendbird/chat/openChannel';\nimport { GroupChannelModule } from '@sendbird/chat/groupChannel';\nimport { n as noop } from './chunks/bundle-BgwzpLeQ.js';\nimport { p as pubSubFactory } from './chunks/bundle-Df65wuUZ.js';\nimport { b as VoicePlayerProvider } from './chunks/bundle-DDeWOERD.js';\nimport { a as LocalizationProvider } from './chunks/bundle-cQZ3UZoG.js';\nimport { u as useMediaQueryContext, M as MediaQueryProvider } from './chunks/bundle-f-SpnOx2.js';\nimport { g as getStringSet } from './chunks/bundle-Bwk5KPwK.js';\nimport { C as CACHED_MESSAGE_TEMPLATES_TOKEN_KEY, o as CACHED_MESSAGE_TEMPLATES_KEY, l as VOICE_PLAYER_ROOT_ID, p as DEFAULT_MULTIPLE_FILES_MESSAGE_LIMIT, q as DEFAULT_UPLOAD_SIZE_LIMIT, r as VOICE_RECORDER_DEFAULT_MAX, i as VOICE_RECORDER_DEFAULT_MIN } from './chunks/bundle-DCMGp6rH.js';\nimport { g as getCaseResolvedReplyType } from './chunks/bundle-fHeMHhND.js';\nimport { i as EmojiReactionListRoot, j as MenuRoot } from './chunks/bundle-CwKZj-B6.js';\nexport { useSendbirdStateContext } from './useSendbirdStateContext.js';\nimport 'react-dom';\nimport './ui/IconButton.js';\nimport './ui/Button.js';\nimport './chunks/bundle-DhKQeIfP.js';\nimport './ui/Icon.js';\nimport './chunks/bundle-etuaqevl.js';\nimport './utils/message/getOutgoingMessageState.js';\nimport './chunks/bundle-CNWAfTVw.js';\nimport './chunks/bundle-CA85nVxp.js';\nimport './chunks/bundle-bdDHjHH6.js';\nimport './ui/SortByRow.js';\n\nvar DEFAULT_COLOR_SET = {\n    '--sendbird-dark-primary-500': '#4d2aa6',\n    '--sendbird-dark-primary-400': '#6440C4',\n    '--sendbird-dark-primary-300': '#7B53EF',\n    '--sendbird-dark-primary-200': '#9E8CF5',\n    '--sendbird-dark-primary-100': '#E2DFFF',\n    '--sendbird-dark-secondary-500': '#007A7A',\n    '--sendbird-dark-secondary-400': '#189A8D',\n    '--sendbird-dark-secondary-300': '#2EBA9F',\n    '--sendbird-dark-secondary-200': '#6FD6BE',\n    '--sendbird-dark-secondary-100': '#AEF2DC',\n    '--sendbird-dark-information-100': '#b2d9ff',\n    '--sendbird-dark-error-500': '#A30E2D',\n    '--sendbird-dark-error-400': '#C11F41',\n    '--sendbird-dark-error-300': '#E53157',\n    '--sendbird-dark-error-200': '#FF6183',\n    '--sendbird-dark-error-100': '#FFABBD',\n    '--sendbird-dark-background-700': '#000000',\n    '--sendbird-dark-background-600': '#161616',\n    '--sendbird-dark-background-500': '#2C2C2C',\n    '--sendbird-dark-background-400': '#393939',\n    '--sendbird-dark-background-300': '#A8A8A8',\n    '--sendbird-dark-background-200': '#D9D9D9',\n    '--sendbird-dark-background-100': '#F0F0F0',\n    '--sendbird-dark-background-50': '#FFFFFF',\n    '--sendbird-dark-overlay': 'rgba(0, 0, 0, 0.32)',\n    '--sendbird-dark-onlight-01': 'rgba(0, 0, 0, 0.88)',\n    '--sendbird-dark-onlight-02': 'rgba(0, 0, 0, 0.50)',\n    '--sendbird-dark-onlight-03': 'rgba(0, 0, 0, 0.38)',\n    '--sendbird-dark-onlight-04': 'rgba(0, 0, 0, 0.12)',\n    '--sendbird-dark-ondark-01': 'rgba(255, 255, 255, 0.88)',\n    '--sendbird-dark-ondark-02': 'rgba(255, 255, 255, 0.50)',\n    '--sendbird-dark-ondark-03': 'rgba(255, 255, 255, 0.38)',\n    '--sendbird-dark-ondark-04': 'rgba(255, 255, 255, 0.12)',\n    '--sendbird-dark-shadow-01': '0 1px 5px 0 rgba(33, 34, 66, 0.04), 0 0 3px 0 rgba(0, 0, 0, 0.08), 0 2px 1px 0 rgba(0, 0, 0, 0.12)',\n    '--sendbird-dark-shadow-02': '0 3px 5px -3px rgba(33, 34, 66, 0.04), 0 3px 14px 2px rgba(0, 0, 0, 0.08), 0 8px 10px 1px rgba(0, 0, 0, 0.12)',\n    '--sendbird-dark-shadow-03': '0 6px 10px -5px rgba(0, 0, 0, 0.04), 0 6px 30px 5px rgba(0, 0, 0, 0.08), 0 16px 24px 2px rgba(0, 0, 0, 0.12)',\n    '--sendbird-dark-shadow-04': '0 9px 15px -7px rgba(0, 0, 0, 0.04), 0 9px 46px 8px rgba(0, 0, 0, 0.08), 0 24px 38px 3px rgba(0, 0, 0, 0.12)',\n    '--sendbird-dark-shadow-message-input': '0 1px 5px 0 rgba(33, 34, 66, 0.12), 0 0 1px 0 rgba(33, 34, 66, 0.16), 0 2px 1px 0 rgba(33, 34, 66, 0.08), 0 1px 5px 0 rgba(0, 0, 0, 0.12)',\n    '--sendbird-light-primary-500': '#4d2aa6',\n    '--sendbird-light-primary-400': '#6440C4',\n    '--sendbird-light-primary-300': '#7B53EF',\n    '--sendbird-light-primary-200': '#9E8CF5',\n    '--sendbird-light-primary-100': '#E2DFFF',\n    '--sendbird-light-secondary-500': '#007A7A',\n    '--sendbird-light-secondary-400': '#189A8D',\n    '--sendbird-light-secondary-300': '#2EBA9F',\n    '--sendbird-light-secondary-200': '#6FD6BE',\n    '--sendbird-light-secondary-100': '#AEF2DC',\n    '--sendbird-light-information-100': '#b2d9ff',\n    '--sendbird-light-error-500': '#A30E2D',\n    '--sendbird-light-error-400': '#C11F41',\n    '--sendbird-light-error-300': '#E53157',\n    '--sendbird-light-error-200': '#FF6183',\n    '--sendbird-light-error-100': '#FFABBD',\n    '--sendbird-light-background-700': '#000000',\n    '--sendbird-light-background-600': '#161616',\n    '--sendbird-light-background-500': '#2C2C2C',\n    '--sendbird-light-background-400': '#393939',\n    '--sendbird-light-background-300': '#A8A8A8',\n    '--sendbird-light-background-200': '#D9D9D9',\n    '--sendbird-light-background-100': '#F0F0F0',\n    '--sendbird-light-background-50': ' #FFFFFF',\n    '--sendbird-light-overlay': 'rgba(0, 0, 0, 0.32)',\n    '--sendbird-light-onlight-01': 'rgba(0, 0, 0, 0.88)',\n    '--sendbird-light-onlight-02': 'rgba(0, 0, 0, 0.50)',\n    '--sendbird-light-onlight-03': 'rgba(0, 0, 0, 0.38)',\n    '--sendbird-light-onlight-04': 'rgba(0, 0, 0, 0.12)',\n    '--sendbird-light-ondark-01': 'rgba(255, 255, 255, 0.88)',\n    '--sendbird-light-ondark-02': 'rgba(255, 255, 255, 0.50)',\n    '--sendbird-light-ondark-03': 'rgba(255, 255, 255, 0.38)',\n    '--sendbird-light-ondark-04': 'rgba(255, 255, 255, 0.12)',\n    '--sendbird-light-shadow-01': '0 1px 5px 0 rgba(33, 34, 66, 0.04), 0 0 3px 0 rgba(0, 0, 0, 0.08), 0 2px 1px 0 rgba(0, 0, 0, 0.12)',\n    '--sendbird-light-shadow-02': '0 3px 5px -3px rgba(33, 34, 66, 0.04), 0 3px 14px 2px rgba(0, 0, 0, 0.08), 0 8px 10px 1px rgba(0, 0, 0, 0.12)',\n    '--sendbird-light-shadow-03': '0 6px 10px -5px rgba(0, 0, 0, 0.04), 0 6px 30px 5px rgba(0, 0, 0, 0.08), 0 16px 24px 2px rgba(0, 0, 0, 0.12)',\n    '--sendbird-light-shadow-04': '0 9px 15px -7px rgba(0, 0, 0, 0.04), 0 9px 46px 8px rgba(0, 0, 0, 0.08), 0 24px 38px 3px rgba(0, 0, 0, 0.12)',\n    '--sendbird-light-shadow-message-input': '0 1px 5px 0 rgba(33, 34, 66, 0.12), 0 0 1px 0 rgba(33, 34, 66, 0.16), 0 2px 1px 0 rgba(33, 34, 66, 0.08), 0 1px 5px 0 rgba(0, 0, 0, 0.12)',\n};\nvar isEmpty = function (obj) {\n    if (obj === null || obj === undefined) {\n        return true;\n    }\n    for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n            return false;\n        }\n    }\n    return JSON.stringify(obj) === JSON.stringify({});\n};\nvar useTheme = function (overrides) {\n    useLayoutEffect(function () {\n        if (!isEmpty(overrides)) {\n            var variables = __assign(__assign({}, DEFAULT_COLOR_SET), mapColorKeys(overrides));\n            cssVars({ variables: variables });\n        }\n    }, [overrides]);\n};\n\nvar SDK_ACTIONS = {\n    INIT_SDK: 'INIT_SDK',\n    SET_SDK_LOADING: 'SET_SDK_LOADING',\n    RESET_SDK: 'RESET_SDK',\n    SDK_ERROR: 'SDK_ERROR',\n};\n\nvar initialState$2 = {\n    initialized: false,\n    loading: false,\n    sdk: {},\n    error: false,\n};\n\nfunction reducer$2(state, action) {\n    return K(action)\n        .with({ type: SDK_ACTIONS.SET_SDK_LOADING }, function (_a) {\n        var payload = _a.payload;\n        return __assign(__assign({}, state), { initialized: false, loading: payload });\n    })\n        .with({ type: SDK_ACTIONS.SDK_ERROR }, function () {\n        return __assign(__assign({}, state), { initialized: false, loading: false, error: true });\n    })\n        .with({ type: SDK_ACTIONS.INIT_SDK }, function (_a) {\n        var payload = _a.payload;\n        return {\n            sdk: payload,\n            initialized: true,\n            loading: false,\n            error: false,\n        };\n    })\n        .with({ type: SDK_ACTIONS.RESET_SDK }, function () {\n        return initialState$2;\n    })\n        .otherwise(function () {\n        return state;\n    });\n}\n\nvar initialState$1 = {\n    initialized: false,\n    loading: false,\n    user: {},\n};\n\nfunction reducer$1(state, action) {\n    return K(action)\n        .with({ type: USER_ACTIONS.INIT_USER }, function (_a) {\n        var payload = _a.payload;\n        return {\n            initialized: true,\n            loading: false,\n            user: payload,\n        };\n    })\n        .with({ type: USER_ACTIONS.RESET_USER }, function () {\n        return initialState$1;\n    })\n        .with({ type: USER_ACTIONS.UPDATE_USER_INFO }, function (_a) {\n        var payload = _a.payload;\n        return __assign(__assign({}, state), { user: payload });\n    })\n        .otherwise(function () {\n        return state;\n    });\n}\n\nvar APP_INFO_ACTIONS = {\n    INITIALIZE_MESSAGE_TEMPLATES_INFO: 'INITIALIZE_MESSAGE_TEMPLATES_INFO',\n    UPSERT_MESSAGE_TEMPLATES: 'UPSERT_MESSAGE_TEMPLATES',\n    UPSERT_WAITING_TEMPLATE_KEYS: 'UPSERT_WAITING_TEMPLATE_KEYS',\n    MARK_ERROR_WAITING_TEMPLATE_KEYS: 'MARK_ERROR_WAITING_TEMPLATE_KEYS',\n};\n\nfunction reducer(state, action) {\n    return K(action)\n        .with({ type: APP_INFO_ACTIONS.INITIALIZE_MESSAGE_TEMPLATES_INFO }, function (_a) {\n        var payload = _a.payload;\n        return {\n            messageTemplatesInfo: payload,\n            waitingTemplateKeysMap: {},\n        };\n    })\n        .with({ type: APP_INFO_ACTIONS.UPSERT_MESSAGE_TEMPLATES }, function (_a) {\n        var payload = _a.payload;\n        var templatesInfo = state.messageTemplatesInfo;\n        if (!templatesInfo)\n            return state; // Not initialized. Ignore.\n        var waitingTemplateKeysMap = __assign({}, state.waitingTemplateKeysMap);\n        payload.forEach(function (templatesMapData) {\n            var key = templatesMapData.key, template = templatesMapData.template;\n            templatesInfo.templatesMap[key] = template;\n            delete waitingTemplateKeysMap[key];\n        });\n        return __assign(__assign({}, state), { waitingTemplateKeysMap: waitingTemplateKeysMap, messageTemplatesInfo: templatesInfo });\n    })\n        .with({ type: APP_INFO_ACTIONS.UPSERT_WAITING_TEMPLATE_KEYS }, function (_a) {\n        var payload = _a.payload;\n        var keys = payload.keys, requestedAt = payload.requestedAt;\n        var waitingTemplateKeysMap = __assign({}, state.waitingTemplateKeysMap);\n        keys.forEach(function (key) {\n            var _a, _b;\n            waitingTemplateKeysMap[key] = {\n                erroredMessageIds: (_b = (_a = waitingTemplateKeysMap[key]) === null || _a === void 0 ? void 0 : _a.erroredMessageIds) !== null && _b !== void 0 ? _b : [],\n                requestedAt: requestedAt,\n            };\n        });\n        return __assign(__assign({}, state), { waitingTemplateKeysMap: waitingTemplateKeysMap });\n    })\n        .with({ type: APP_INFO_ACTIONS.MARK_ERROR_WAITING_TEMPLATE_KEYS }, function (_a) {\n        var payload = _a.payload;\n        var keys = payload.keys, messageId = payload.messageId;\n        var waitingTemplateKeysMap = __assign({}, state.waitingTemplateKeysMap);\n        keys.forEach(function (key) {\n            var waitingTemplateKeyData = waitingTemplateKeysMap[key];\n            if (waitingTemplateKeyData && waitingTemplateKeyData.erroredMessageIds.indexOf(messageId) === -1) {\n                waitingTemplateKeyData.erroredMessageIds.push(messageId);\n            }\n        });\n        return __assign(__assign({}, state), { waitingTemplateKeysMap: waitingTemplateKeysMap });\n    })\n        .otherwise(function () {\n        return state;\n    });\n}\n\nvar initialState = {\n    waitingTemplateKeysMap: {},\n};\n\nfunction disconnectSdk(_a) {\n    return __awaiter(this, arguments, void 0, function (_b) {\n        var sdkDispatcher = _b.sdkDispatcher, userDispatcher = _b.userDispatcher, sdk = _b.sdk;\n        return __generator(this, function (_c) {\n            return [2 /*return*/, new Promise(function (resolve) {\n                    sdkDispatcher({ type: SDK_ACTIONS.SET_SDK_LOADING, payload: true });\n                    if (sdk === null || sdk === void 0 ? void 0 : sdk.disconnect) {\n                        sdk.disconnect()\n                            .then(function () {\n                            sdkDispatcher({ type: SDK_ACTIONS.RESET_SDK });\n                            userDispatcher({ type: USER_ACTIONS.RESET_USER });\n                        })\n                            .finally(function () {\n                            resolve(true);\n                        });\n                    }\n                    else {\n                        resolve(true);\n                    }\n                })];\n        });\n    });\n}\n\nvar APP_VERSION_STRING = '3.14.13';\nvar INIT_SDK = SDK_ACTIONS.INIT_SDK, SET_SDK_LOADING = SDK_ACTIONS.SET_SDK_LOADING, RESET_SDK = SDK_ACTIONS.RESET_SDK, SDK_ERROR = SDK_ACTIONS.SDK_ERROR;\nvar INIT_USER = USER_ACTIONS.INIT_USER, UPDATE_USER_INFO = USER_ACTIONS.UPDATE_USER_INFO, RESET_USER = USER_ACTIONS.RESET_USER;\nfunction getMissingParamError(_a) {\n    var userId = _a.userId, appId = _a.appId;\n    return \"SendbirdProvider | useConnect/setupConnection/Connection failed UserId: \".concat(userId, \" or appId: \").concat(appId, \" missing\");\n}\nfunction getConnectSbError(error) {\n    return \"SendbirdProvider | useConnect/setupConnection/Connection failed. \".concat((error === null || error === void 0 ? void 0 : error.code) || '', \" \").concat((error === null || error === void 0 ? void 0 : error.message) || '');\n}\nfunction setUpConnection(_a) {\n    return __awaiter(this, arguments, void 0, function (_b) {\n        var errorMessage;\n        var _this = this;\n        var _c, _d;\n        var logger = _b.logger, sdkDispatcher = _b.sdkDispatcher, userDispatcher = _b.userDispatcher, initDashboardConfigs = _b.initDashboardConfigs, userId = _b.userId, appId = _b.appId, isNewApp = _b.isNewApp, customApiHost = _b.customApiHost, customWebSocketHost = _b.customWebSocketHost, configureSession = _b.configureSession, nickname = _b.nickname, profileUrl = _b.profileUrl, accessToken = _b.accessToken, isUserIdUsedForNickname = _b.isUserIdUsedForNickname, sdkInitParams = _b.sdkInitParams, customExtensionParams = _b.customExtensionParams, _e = _b.isMobile, isMobile = _e === void 0 ? false : _e, eventHandlers = _b.eventHandlers, initializeMessageTemplatesInfo = _b.initializeMessageTemplatesInfo;\n        return __generator(this, function (_f) {\n            (_c = logger.info) === null || _c === void 0 ? void 0 : _c.call(logger, 'SendbirdProvider | useConnect/setupConnection/init', { userId: userId, appId: appId });\n            sdkDispatcher({ type: SET_SDK_LOADING, payload: true });\n            if (!userId || !appId) {\n                errorMessage = getMissingParamError({ userId: userId, appId: appId });\n                (_d = logger.error) === null || _d === void 0 ? void 0 : _d.call(logger, errorMessage);\n                sdkDispatcher({ type: SDK_ERROR });\n                return [2 /*return*/, Promise.reject(errorMessage)];\n            }\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n                    var _a;\n                    (_a = logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, \"SendbirdProvider | useConnect/setupConnection/connect connecting using \".concat(accessToken !== null && accessToken !== void 0 ? accessToken : userId));\n                    var sdk = initSDK({ appId: appId, customApiHost: customApiHost, customWebSocketHost: customWebSocketHost, isNewApp: isNewApp, sdkInitParams: sdkInitParams });\n                    var sessionHandler = typeof configureSession === 'function' ? configureSession(sdk) : undefined;\n                    setupSDK(sdk, { logger: logger, sessionHandler: sessionHandler, customExtensionParams: customExtensionParams, isMobile: isMobile });\n                    sdk\n                        .connect(userId, accessToken)\n                        .then(function (user) { return onConnected(user); })\n                        .catch(function (error) { return __awaiter(_this, void 0, void 0, function () {\n                        var sessionToken, user, error_1;\n                        var _a;\n                        return __generator(this, function (_b) {\n                            switch (_b.label) {\n                                case 0:\n                                    if (!(shouldRetryWithValidSessionToken(error) && sessionHandler)) return [3 /*break*/, 6];\n                                    _b.label = 1;\n                                case 1:\n                                    _b.trys.push([1, 5, , 6]);\n                                    return [4 /*yield*/, new Promise(sessionHandler.onSessionTokenRequired)];\n                                case 2:\n                                    sessionToken = _b.sent();\n                                    if (!sessionToken) return [3 /*break*/, 4];\n                                    (_a = logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, \"SendbirdProvider | useConnect/setupConnection/connect retry connect with valid session token: \".concat(sessionToken.slice(0, 10) + '...'));\n                                    return [4 /*yield*/, sdk.connect(userId, sessionToken)];\n                                case 3:\n                                    user = _b.sent();\n                                    return [2 /*return*/, onConnected(user)];\n                                case 4: return [3 /*break*/, 6];\n                                case 5:\n                                    error_1 = _b.sent();\n                                    // NOTE: Filter out the error from `onSessionTokenRequired`.\n                                    if (error_1 instanceof SendbirdError) {\n                                        // connect in offline mode\n                                        // if (sdk.isCacheEnabled && sdk.currentUser) return onConnected(sdk.currentUser);\n                                        return [2 /*return*/, onConnectFailed(error_1)];\n                                    }\n                                    return [3 /*break*/, 6];\n                                case 6: return [2 /*return*/, onConnectFailed(error)];\n                            }\n                        });\n                    }); });\n                    var onConnected = function (user) { return __awaiter(_this, void 0, void 0, function () {\n                        var error_2, error_3, updateParams, updatedUser;\n                        var _b, _c, _d, _e, _f, _g, _h, _j;\n                        return __generator(this, function (_k) {\n                            switch (_k.label) {\n                                case 0:\n                                    (_b = logger.info) === null || _b === void 0 ? void 0 : _b.call(logger, 'SendbirdProvider | useConnect/setupConnection/onConnected', user);\n                                    sdkDispatcher({ type: INIT_SDK, payload: sdk });\n                                    userDispatcher({ type: INIT_USER, payload: user });\n                                    _k.label = 1;\n                                case 1:\n                                    _k.trys.push([1, 3, , 4]);\n                                    return [4 /*yield*/, initializeMessageTemplatesInfo(sdk)];\n                                case 2:\n                                    _k.sent();\n                                    return [3 /*break*/, 4];\n                                case 3:\n                                    error_2 = _k.sent();\n                                    (_c = logger.error) === null || _c === void 0 ? void 0 : _c.call(logger, 'SendbirdProvider | useConnect/setupConnection/upsertMessageTemplateListInLocalStorage failed', { error: error_2 });\n                                    return [3 /*break*/, 4];\n                                case 4:\n                                    _k.trys.push([4, 6, , 7]);\n                                    return [4 /*yield*/, initDashboardConfigs(sdk)];\n                                case 5:\n                                    _k.sent();\n                                    (_d = logger.info) === null || _d === void 0 ? void 0 : _d.call(logger, 'SendbirdProvider | useConnect/setupConnection/getUIKitConfiguration success');\n                                    return [3 /*break*/, 7];\n                                case 6:\n                                    error_3 = _k.sent();\n                                    (_e = logger.error) === null || _e === void 0 ? void 0 : _e.call(logger, 'SendbirdProvider | useConnect/setupConnection/getUIKitConfiguration failed', { error: error_3 });\n                                    return [3 /*break*/, 7];\n                                case 7:\n                                    _k.trys.push([7, 10, , 11]);\n                                    if (!((nickname !== user.nickname || profileUrl !== user.profileUrl) && !(isTextuallyNull(nickname) && isTextuallyNull(profileUrl)))) return [3 /*break*/, 9];\n                                    (_f = logger.info) === null || _f === void 0 ? void 0 : _f.call(logger, 'SendbirdProvider | useConnect/setupConnection/updateCurrentUserInfo', { nickname: nickname, profileUrl: profileUrl });\n                                    updateParams = {\n                                        nickname: nickname || user.nickname || (isUserIdUsedForNickname ? user.userId : ''),\n                                        profileUrl: profileUrl || user.profileUrl,\n                                    };\n                                    return [4 /*yield*/, sdk.updateCurrentUserInfo(updateParams)];\n                                case 8:\n                                    updatedUser = _k.sent();\n                                    (_g = logger.info) === null || _g === void 0 ? void 0 : _g.call(logger, 'SendbirdProvider | useConnect/setupConnection/updateCurrentUserInfo success', updateParams);\n                                    userDispatcher({ type: UPDATE_USER_INFO, payload: updatedUser });\n                                    _k.label = 9;\n                                case 9: return [3 /*break*/, 11];\n                                case 10:\n                                    _k.sent();\n                                    return [3 /*break*/, 11];\n                                case 11:\n                                    resolve();\n                                    (_j = (_h = eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.connection) === null || _h === void 0 ? void 0 : _h.onConnected) === null || _j === void 0 ? void 0 : _j.call(_h, user);\n                                    return [2 /*return*/];\n                            }\n                        });\n                    }); };\n                    var onConnectFailed = function (e) { return __awaiter(_this, void 0, void 0, function () {\n                        var errorMessage;\n                        var _a, _b, _c, _d;\n                        return __generator(this, function (_e) {\n                            switch (_e.label) {\n                                case 0:\n                                    if (!(sdk.isCacheEnabled && shouldClearCache(e))) return [3 /*break*/, 2];\n                                    (_a = logger.error) === null || _a === void 0 ? void 0 : _a.call(logger, \"SendbirdProvider | useConnect/setupConnection/connect clear cache [\".concat(e.code, \"/\").concat(e.message, \"]\"));\n                                    return [4 /*yield*/, sdk.clearCachedData()];\n                                case 1:\n                                    _e.sent();\n                                    _e.label = 2;\n                                case 2:\n                                    errorMessage = getConnectSbError(e);\n                                    (_b = logger.error) === null || _b === void 0 ? void 0 : _b.call(logger, errorMessage, { e: e, appId: appId, userId: userId });\n                                    userDispatcher({ type: RESET_USER });\n                                    sdkDispatcher({ type: RESET_SDK });\n                                    sdkDispatcher({ type: SDK_ERROR });\n                                    reject(errorMessage);\n                                    (_d = (_c = eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.connection) === null || _c === void 0 ? void 0 : _c.onFailed) === null || _d === void 0 ? void 0 : _d.call(_c, e);\n                                    return [2 /*return*/];\n                            }\n                        });\n                    }); };\n                })];\n        });\n    });\n}\n/**\n * Initializes the Sendbird SDK with the provided parameters.\n * */\nfunction initSDK(_a) {\n    var appId = _a.appId, _b = _a.isNewApp, isNewApp = _b === void 0 ? false : _b, customApiHost = _a.customApiHost, customWebSocketHost = _a.customWebSocketHost, _c = _a.sdkInitParams, sdkInitParams = _c === void 0 ? {} : _c;\n    var params = Object.assign(sdkInitParams, {\n        appId: appId,\n        modules: [new GroupChannelModule(), new OpenChannelModule()],\n        newInstance: isNewApp,\n        localCacheEnabled: true,\n    });\n    if (customApiHost)\n        params.customApiHost = customApiHost;\n    if (customWebSocketHost)\n        params.customWebSocketHost = customWebSocketHost;\n    return SendbirdChat.init(params);\n}\n/**\n * Sets up the Sendbird SDK after initialization.\n * Configures necessary settings, adds extensions, sets the platform, and configures the session handler if provided.\n */\nfunction setupSDK(sdk, params) {\n    var _a, _b;\n    var logger = params.logger, sessionHandler = params.sessionHandler, isMobile = params.isMobile, customExtensionParams = params.customExtensionParams;\n    (_a = logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, 'SendbirdProvider | useConnect/setupConnection/setVersion', { version: APP_VERSION_STRING });\n    sdk.addExtension('sb_uikit', APP_VERSION_STRING);\n    sdk.addSendbirdExtensions([{ product: SendbirdProduct.UIKIT_CHAT, version: APP_VERSION_STRING, platform: SendbirdPlatform === null || SendbirdPlatform === void 0 ? void 0 : SendbirdPlatform.JS }], { platform: isMobile ? DeviceOsPlatform.MOBILE_WEB : DeviceOsPlatform.WEB }, customExtensionParams);\n    if (sessionHandler) {\n        (_b = logger.info) === null || _b === void 0 ? void 0 : _b.call(logger, 'SendbirdProvider | useConnect/setupConnection/configureSession', sessionHandler);\n        sdk.setSessionHandler(sessionHandler);\n    }\n}\nfunction shouldClearCache(error) {\n    if (!(error instanceof SendbirdError))\n        return false;\n    return [\n        SendbirdErrorCode.USER_AUTH_DEACTIVATED,\n        SendbirdErrorCode.USER_AUTH_DELETED_OR_NOT_FOUND,\n        SendbirdErrorCode.SESSION_TOKEN_EXPIRED,\n        SendbirdErrorCode.SESSION_REVOKED,\n    ].includes(error.code);\n}\nfunction shouldRetryWithValidSessionToken(error) {\n    if (!(error instanceof SendbirdError))\n        return false;\n    return [\n        SendbirdErrorCode.SESSION_TOKEN_EXPIRED,\n        /**\n         * Note: INVALID_TOKEN has been added arbitrarily due to legacy constraints\n         *\n         * In the useEffect of the useConnect hook, authentication is being performed\n         * but changes of the `accessToken` is not being detected.\n         * `disconnectSdk` is called when connect is called redundantly for the same user ID, causing issues, so `accessToken` has been excluded form the deps.\n         *\n         * In case the `accessToken` is missed, an additional attempt to connect is made\n         * */\n        SendbirdErrorCode.INVALID_TOKEN,\n    ].includes(error.code);\n}\n\nfunction connect(_a) {\n    return __awaiter(this, arguments, void 0, function (_b) {\n        var logger = _b.logger, sdkDispatcher = _b.sdkDispatcher, userDispatcher = _b.userDispatcher, appInfoDispatcher = _b.appInfoDispatcher, initDashboardConfigs = _b.initDashboardConfigs, userId = _b.userId, appId = _b.appId, _c = _b.isNewApp, isNewApp = _c === void 0 ? false : _c, customApiHost = _b.customApiHost, customWebSocketHost = _b.customWebSocketHost, configureSession = _b.configureSession, nickname = _b.nickname, profileUrl = _b.profileUrl, accessToken = _b.accessToken, sdk = _b.sdk, sdkInitParams = _b.sdkInitParams, customExtensionParams = _b.customExtensionParams, isMobile = _b.isMobile, eventHandlers = _b.eventHandlers, isUserIdUsedForNickname = _b.isUserIdUsedForNickname, initializeMessageTemplatesInfo = _b.initializeMessageTemplatesInfo;\n        return __generator(this, function (_d) {\n            switch (_d.label) {\n                case 0: return [4 /*yield*/, disconnectSdk({\n                        logger: logger,\n                        sdkDispatcher: sdkDispatcher,\n                        userDispatcher: userDispatcher,\n                        sdk: sdk,\n                    })];\n                case 1:\n                    _d.sent();\n                    return [4 /*yield*/, setUpConnection({\n                            logger: logger,\n                            sdkDispatcher: sdkDispatcher,\n                            userDispatcher: userDispatcher,\n                            appInfoDispatcher: appInfoDispatcher,\n                            initDashboardConfigs: initDashboardConfigs,\n                            userId: userId,\n                            appId: appId,\n                            isNewApp: isNewApp,\n                            customApiHost: customApiHost,\n                            customWebSocketHost: customWebSocketHost,\n                            configureSession: configureSession,\n                            nickname: nickname,\n                            profileUrl: profileUrl,\n                            accessToken: accessToken,\n                            sdkInitParams: sdkInitParams,\n                            customExtensionParams: customExtensionParams,\n                            isMobile: isMobile,\n                            eventHandlers: eventHandlers,\n                            isUserIdUsedForNickname: isUserIdUsedForNickname,\n                            initializeMessageTemplatesInfo: initializeMessageTemplatesInfo,\n                        })];\n                case 2:\n                    _d.sent();\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\n\nfunction useConnect(triggerTypes, staticTypes) {\n    var _this = this;\n    var userId = triggerTypes.userId, appId = triggerTypes.appId, accessToken = triggerTypes.accessToken, isMobile = triggerTypes.isMobile, isUserIdUsedForNickname = triggerTypes.isUserIdUsedForNickname;\n    var logger = staticTypes.logger, nickname = staticTypes.nickname, profileUrl = staticTypes.profileUrl, configureSession = staticTypes.configureSession, customApiHost = staticTypes.customApiHost, customWebSocketHost = staticTypes.customWebSocketHost, sdk = staticTypes.sdk, sdkDispatcher = staticTypes.sdkDispatcher, userDispatcher = staticTypes.userDispatcher, appInfoDispatcher = staticTypes.appInfoDispatcher, initDashboardConfigs = staticTypes.initDashboardConfigs, sdkInitParams = staticTypes.sdkInitParams, customExtensionParams = staticTypes.customExtensionParams, eventHandlers = staticTypes.eventHandlers, initializeMessageTemplatesInfo = staticTypes.initializeMessageTemplatesInfo;\n    // Note: This is a workaround to prevent the creation of multiple SDK instances when React strict mode is enabled.\n    var connectDeps = useRef({\n        appId: '',\n        userId: '',\n    });\n    useEffect(function () {\n        var _a;\n        (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, 'SendbirdProvider | useConnect/useEffect', { userId: userId, appId: appId, accessToken: accessToken });\n        var isNewApp = connectDeps.current.appId !== appId;\n        if (connectDeps.current.appId === appId && connectDeps.current.userId === userId) {\n            return;\n        }\n        else {\n            connectDeps.current = { appId: appId, userId: userId };\n        }\n        connect({\n            userId: userId,\n            appId: appId,\n            isNewApp: isNewApp,\n            accessToken: accessToken,\n            logger: logger,\n            nickname: nickname,\n            profileUrl: profileUrl,\n            configureSession: configureSession,\n            customApiHost: customApiHost,\n            customWebSocketHost: customWebSocketHost,\n            sdk: sdk,\n            sdkDispatcher: sdkDispatcher,\n            userDispatcher: userDispatcher,\n            appInfoDispatcher: appInfoDispatcher,\n            initDashboardConfigs: initDashboardConfigs,\n            isUserIdUsedForNickname: isUserIdUsedForNickname,\n            sdkInitParams: sdkInitParams,\n            customExtensionParams: customExtensionParams,\n            isMobile: isMobile,\n            eventHandlers: eventHandlers,\n            initializeMessageTemplatesInfo: initializeMessageTemplatesInfo,\n        }).catch(function (error) {\n            var _a;\n            (_a = logger === null || logger === void 0 ? void 0 : logger.error) === null || _a === void 0 ? void 0 : _a.call(logger, 'SendbirdProvider | useConnect/useEffect', error);\n        });\n    }, [userId, appId]);\n    var reconnect = useCallback(function () { return __awaiter(_this, void 0, void 0, function () {\n        var error_1;\n        var _a, _b;\n        return __generator(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, 'SendbirdProvider | useConnect/reconnect/useCallback', { sdk: sdk });\n                    _c.label = 1;\n                case 1:\n                    _c.trys.push([1, 3, , 4]);\n                    return [4 /*yield*/, connect({\n                            userId: userId,\n                            appId: appId,\n                            accessToken: accessToken,\n                            logger: logger,\n                            nickname: nickname,\n                            profileUrl: profileUrl,\n                            configureSession: configureSession,\n                            customApiHost: customApiHost,\n                            customWebSocketHost: customWebSocketHost,\n                            sdk: sdk,\n                            sdkDispatcher: sdkDispatcher,\n                            userDispatcher: userDispatcher,\n                            appInfoDispatcher: appInfoDispatcher,\n                            initDashboardConfigs: initDashboardConfigs,\n                            isUserIdUsedForNickname: isUserIdUsedForNickname,\n                            sdkInitParams: sdkInitParams,\n                            customExtensionParams: customExtensionParams,\n                            isMobile: isMobile,\n                            eventHandlers: eventHandlers,\n                            initializeMessageTemplatesInfo: initializeMessageTemplatesInfo,\n                        })];\n                case 2:\n                    _c.sent();\n                    return [3 /*break*/, 4];\n                case 3:\n                    error_1 = _c.sent();\n                    (_b = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b === void 0 ? void 0 : _b.call(logger, 'SendbirdProvider | useConnect/reconnect/useCallback', error_1);\n                    return [3 /*break*/, 4];\n                case 4: return [2 /*return*/];\n            }\n        });\n    }); }, [sdk]);\n    return reconnect;\n}\n\n// Logger, pretty much explains it\n// in SendbirdProvider\n// const [logger, setLogger] = useState(LoggerFactory(logLevel));\nvar LOG_LEVELS = {\n    DEBUG: 'debug',\n    WARNING: 'warning',\n    ERROR: 'error',\n    INFO: 'info',\n    ALL: 'all',\n};\nvar colorLog = function (level) {\n    switch (level) {\n        case LOG_LEVELS.WARNING:\n            return ('color: Orange');\n        case LOG_LEVELS.ERROR:\n            return ('color: Red');\n        default:\n            return ('color: Gray');\n    }\n};\nvar printLog = function (_a) {\n    var level = _a.level, title = _a.title, _b = _a.description, description = _b === void 0 ? '' : _b, _c = _a.payload, payload = _c === void 0 ? [] : _c;\n    // eslint-disable-next-line no-console\n    console.log.apply(console, __spreadArray([\"%c SendbirdUIKit | \".concat(level, \" | \").concat(new Date().toISOString(), \" | \").concat(title, \" \").concat(description && '|'), colorLog(level), description], payload, false));\n};\nvar getDefaultLogger = function () { return ({\n    info: noop,\n    error: noop,\n    warning: noop,\n}); };\nvar LoggerFactory = function (lvl, customInterface) {\n    var logInterface = customInterface || printLog;\n    var lvlArray = Array.isArray(lvl) ? lvl : [lvl];\n    var applyLog = function (lgLvl) { return function (title, description) {\n        var payload = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            payload[_i - 2] = arguments[_i];\n        }\n        return logInterface({\n            level: lgLvl,\n            title: title,\n            description: description,\n            payload: payload,\n        });\n    }; };\n    return lvlArray.reduce(function (accumulator, currentLvl) {\n        if (currentLvl === LOG_LEVELS.DEBUG || currentLvl === LOG_LEVELS.ALL) {\n            return (__assign(__assign({}, accumulator), { info: applyLog(LOG_LEVELS.INFO), error: applyLog(LOG_LEVELS.ERROR), warning: applyLog(LOG_LEVELS.WARNING) }));\n        }\n        if (currentLvl === LOG_LEVELS.INFO) {\n            return (__assign(__assign({}, accumulator), { info: applyLog(LOG_LEVELS.INFO) }));\n        }\n        if (currentLvl === LOG_LEVELS.ERROR) {\n            return (__assign(__assign({}, accumulator), { error: applyLog(LOG_LEVELS.ERROR) }));\n        }\n        if (currentLvl === LOG_LEVELS.WARNING) {\n            return (__assign(__assign({}, accumulator), { warning: applyLog(LOG_LEVELS.WARNING) }));\n        }\n        return __assign({}, accumulator);\n    }, getDefaultLogger());\n};\n// TODO: Make this to hook, useLogger\n\nvar VoiceMessageProvider = function (_a) {\n    var children = _a.children;\n    return (React__default.createElement(VoicePlayerProvider, null,\n        React__default.createElement(VoiceRecorderProvider, null, children)));\n};\n\nfunction uikitConfigMapper(_a) {\n    var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7;\n    var legacyConfig = _a.legacyConfig, _8 = _a.uikitOptions, uikitOptions = _8 === void 0 ? {} : _8;\n    var replyType = legacyConfig.replyType, isMentionEnabled = legacyConfig.isMentionEnabled, isReactionEnabled = legacyConfig.isReactionEnabled, disableUserProfile = legacyConfig.disableUserProfile, isVoiceMessageEnabled = legacyConfig.isVoiceMessageEnabled, isTypingIndicatorEnabledOnChannelList = legacyConfig.isTypingIndicatorEnabledOnChannelList, isMessageReceiptStatusEnabledOnChannelList = legacyConfig.isMessageReceiptStatusEnabledOnChannelList, showSearchIcon = legacyConfig.showSearchIcon;\n    return {\n        common: {\n            enableUsingDefaultUserProfile: (_c = (_b = uikitOptions.common) === null || _b === void 0 ? void 0 : _b.enableUsingDefaultUserProfile) !== null && _c !== void 0 ? _c : (typeof disableUserProfile === 'boolean' ? !disableUserProfile : undefined),\n        },\n        groupChannel: {\n            enableOgtag: (_d = uikitOptions.groupChannel) === null || _d === void 0 ? void 0 : _d.enableOgtag,\n            enableMention: (_f = (_e = uikitOptions.groupChannel) === null || _e === void 0 ? void 0 : _e.enableMention) !== null && _f !== void 0 ? _f : isMentionEnabled,\n            enableReactions: (_h = (_g = uikitOptions.groupChannel) === null || _g === void 0 ? void 0 : _g.enableReactions) !== null && _h !== void 0 ? _h : isReactionEnabled,\n            enableReactionsSupergroup: (_j = uikitOptions.groupChannel) === null || _j === void 0 ? void 0 : _j.enableReactionsSupergroup,\n            enableTypingIndicator: (_k = uikitOptions.groupChannel) === null || _k === void 0 ? void 0 : _k.enableTypingIndicator,\n            enableVoiceMessage: (_m = (_l = uikitOptions.groupChannel) === null || _l === void 0 ? void 0 : _l.enableVoiceMessage) !== null && _m !== void 0 ? _m : isVoiceMessageEnabled,\n            replyType: (_p = (_o = uikitOptions.groupChannel) === null || _o === void 0 ? void 0 : _o.replyType) !== null && _p !== void 0 ? _p : (replyType != null ? getCaseResolvedReplyType(replyType).lowerCase : undefined),\n            threadReplySelectType: (_q = uikitOptions.groupChannel) === null || _q === void 0 ? void 0 : _q.threadReplySelectType,\n            input: {\n                enableDocument: (_s = (_r = uikitOptions.groupChannel) === null || _r === void 0 ? void 0 : _r.input) === null || _s === void 0 ? void 0 : _s.enableDocument,\n            },\n            typingIndicatorTypes: (_t = uikitOptions.groupChannel) === null || _t === void 0 ? void 0 : _t.typingIndicatorTypes,\n            enableFeedback: (_u = uikitOptions.groupChannel) === null || _u === void 0 ? void 0 : _u.enableFeedback,\n            enableSuggestedReplies: (_v = uikitOptions.groupChannel) === null || _v === void 0 ? void 0 : _v.enableSuggestedReplies,\n            showSuggestedRepliesFor: (_w = uikitOptions.groupChannel) === null || _w === void 0 ? void 0 : _w.showSuggestedRepliesFor,\n            suggestedRepliesDirection: (_x = uikitOptions.groupChannel) === null || _x === void 0 ? void 0 : _x.suggestedRepliesDirection,\n            enableMarkdownForUserMessage: (_y = uikitOptions.groupChannel) === null || _y === void 0 ? void 0 : _y.enableMarkdownForUserMessage,\n        },\n        groupChannelList: {\n            enableTypingIndicator: (_0 = (_z = uikitOptions.groupChannelList) === null || _z === void 0 ? void 0 : _z.enableTypingIndicator) !== null && _0 !== void 0 ? _0 : isTypingIndicatorEnabledOnChannelList,\n            enableMessageReceiptStatus: (_2 = (_1 = uikitOptions.groupChannelList) === null || _1 === void 0 ? void 0 : _1.enableMessageReceiptStatus) !== null && _2 !== void 0 ? _2 : isMessageReceiptStatusEnabledOnChannelList,\n        },\n        groupChannelSettings: {\n            enableMessageSearch: (_4 = (_3 = uikitOptions.groupChannelSettings) === null || _3 === void 0 ? void 0 : _3.enableMessageSearch) !== null && _4 !== void 0 ? _4 : showSearchIcon,\n        },\n        openChannel: {\n            enableOgtag: (_5 = uikitOptions.openChannel) === null || _5 === void 0 ? void 0 : _5.enableOgtag,\n            input: {\n                enableDocument: (_7 = (_6 = uikitOptions.openChannel) === null || _6 === void 0 ? void 0 : _6.input) === null || _7 === void 0 ? void 0 : _7.enableDocument,\n            },\n        },\n    };\n}\n\nfunction useMarkAsReadScheduler(_a, _b) {\n    var isConnected = _a.isConnected;\n    var logger = _b.logger;\n    var markAsReadScheduler = useMemo(function () { return schedulerFactory({\n        logger: logger,\n        cb: function (channel) {\n            try {\n                channel.markAsRead();\n            }\n            catch (error) {\n                logger.warning('Channel: Mark as delivered failed', { channel: channel, error: error });\n            }\n        },\n    }); }, []);\n    useEffect(function () {\n        // for simplicity, we clear the queue when the connection is lost\n        if (!isConnected) {\n            markAsReadScheduler.clear();\n        }\n    }, [isConnected]);\n    useUnmount(function () { markAsReadScheduler.clear(); });\n    return markAsReadScheduler;\n}\n\nvar uikitConfigStorage = {\n    getItem: function (key) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a;\n            return __generator(this, function (_b) {\n                return [2 /*return*/, (_a = localStorage.getItem(key)) !== null && _a !== void 0 ? _a : null];\n            });\n        });\n    },\n    setItem: function (key, value) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, localStorage.setItem(key, value)];\n            });\n        });\n    },\n};\n\n/**\n * Takes JSON parsed template and then returns processed message template for storing it in global state.\n */\nvar getProcessedTemplate = function (parsedTemplate) {\n    return {\n        version: Number(parsedTemplate.ui_template.version),\n        uiTemplate: JSON.stringify(parsedTemplate.ui_template.body.items),\n        colorVariables: parsedTemplate.color_variables,\n    };\n};\nvar getProcessedTemplatesMap = function (parsedTemplates) {\n    var processedTemplates = {};\n    parsedTemplates.forEach(function (template) {\n        processedTemplates[template.key] = getProcessedTemplate(template);\n    });\n    return processedTemplates;\n};\n\nvar MESSAGE_TEMPLATES_FETCH_LIMIT = 20;\nvar INITIALIZE_MESSAGE_TEMPLATES_INFO = APP_INFO_ACTIONS.INITIALIZE_MESSAGE_TEMPLATES_INFO, UPSERT_MESSAGE_TEMPLATES = APP_INFO_ACTIONS.UPSERT_MESSAGE_TEMPLATES, UPSERT_WAITING_TEMPLATE_KEYS = APP_INFO_ACTIONS.UPSERT_WAITING_TEMPLATE_KEYS, MARK_ERROR_WAITING_TEMPLATE_KEYS = APP_INFO_ACTIONS.MARK_ERROR_WAITING_TEMPLATE_KEYS;\nfunction useMessageTemplateUtils(_a) {\n    var _this = this;\n    var sdk = _a.sdk, logger = _a.logger, appInfoStore = _a.appInfoStore, appInfoDispatcher = _a.appInfoDispatcher;\n    var messageTemplatesInfo = appInfoStore === null || appInfoStore === void 0 ? void 0 : appInfoStore.messageTemplatesInfo;\n    var getCachedTemplate = function (key) {\n        var _a, _b;\n        if (!messageTemplatesInfo)\n            return null;\n        var cachedTemplate = null;\n        var cachedMessageTemplates = (_a = messageTemplatesInfo === null || messageTemplatesInfo === void 0 ? void 0 : messageTemplatesInfo.templatesMap) !== null && _a !== void 0 ? _a : null;\n        if (cachedMessageTemplates) {\n            cachedTemplate = (_b = cachedMessageTemplates[key]) !== null && _b !== void 0 ? _b : null;\n        }\n        return cachedTemplate;\n    };\n    /**\n     * Fetches a single message template by given key and then\n     * returns processed template for updating templates info in global state.\n     * If no such templates exists (error) or any error occurs in response, return null.\n     */\n    var fetchAllMessageTemplates = function (readySdk) { return __awaiter(_this, void 0, void 0, function () {\n        var hasMore, paginationToken, fetchedTemplates, res;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    hasMore = true;\n                    paginationToken = null;\n                    fetchedTemplates = [];\n                    _a.label = 1;\n                case 1:\n                    if (!hasMore) return [3 /*break*/, 3];\n                    return [4 /*yield*/, readySdk.message.getMessageTemplatesByToken(paginationToken, { limit: MESSAGE_TEMPLATES_FETCH_LIMIT })];\n                case 2:\n                    res = _a.sent();\n                    hasMore = res.hasMore;\n                    paginationToken = res.token;\n                    res.templates.forEach(function (messageTemplate) {\n                        fetchedTemplates.push(JSON.parse(messageTemplate.template));\n                    });\n                    return [3 /*break*/, 1];\n                case 3: return [2 /*return*/, fetchedTemplates];\n            }\n        });\n    }); };\n    var initializeMessageTemplatesInfo = function (readySdk) { return __awaiter(_this, void 0, void 0, function () {\n        var sdkMessageTemplateToken, cachedMessageTemplatesToken, cachedMessageTemplates, parsedTemplates, newMessageTemplatesInfo, parsedTemplates, newMessageTemplatesInfo;\n        var _a;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    sdkMessageTemplateToken = (_a = readySdk.appInfo) === null || _a === void 0 ? void 0 : _a.messageTemplateInfo.token;\n                    /**\n                     * no sdkMessageTemplateToken => no templates => clear cached\n                     */\n                    if (!sdkMessageTemplateToken) {\n                        localStorage.removeItem(CACHED_MESSAGE_TEMPLATES_TOKEN_KEY);\n                        localStorage.removeItem(CACHED_MESSAGE_TEMPLATES_KEY);\n                        return [2 /*return*/];\n                    }\n                    cachedMessageTemplatesToken = localStorage.getItem(CACHED_MESSAGE_TEMPLATES_TOKEN_KEY);\n                    cachedMessageTemplates = localStorage.getItem(CACHED_MESSAGE_TEMPLATES_KEY);\n                    if (!(!cachedMessageTemplatesToken\n                        || cachedMessageTemplatesToken !== sdkMessageTemplateToken)) return [3 /*break*/, 2];\n                    return [4 /*yield*/, fetchAllMessageTemplates(readySdk)];\n                case 1:\n                    parsedTemplates = _b.sent();\n                    newMessageTemplatesInfo = {\n                        token: sdkMessageTemplateToken,\n                        templatesMap: getProcessedTemplatesMap(parsedTemplates),\n                    };\n                    appInfoDispatcher({ type: INITIALIZE_MESSAGE_TEMPLATES_INFO, payload: newMessageTemplatesInfo });\n                    localStorage.setItem(CACHED_MESSAGE_TEMPLATES_TOKEN_KEY, sdkMessageTemplateToken);\n                    localStorage.setItem(CACHED_MESSAGE_TEMPLATES_KEY, JSON.stringify(parsedTemplates));\n                    return [3 /*break*/, 3];\n                case 2:\n                    if (cachedMessageTemplatesToken\n                        && cachedMessageTemplatesToken === sdkMessageTemplateToken\n                        && cachedMessageTemplates) {\n                        parsedTemplates = JSON.parse(cachedMessageTemplates);\n                        newMessageTemplatesInfo = {\n                            token: sdkMessageTemplateToken,\n                            templatesMap: getProcessedTemplatesMap(parsedTemplates),\n                        };\n                        appInfoDispatcher({ type: INITIALIZE_MESSAGE_TEMPLATES_INFO, payload: newMessageTemplatesInfo });\n                    }\n                    _b.label = 3;\n                case 3: return [2 /*return*/];\n            }\n        });\n    }); };\n    /**\n     * If given message is a template message with template key and if the key does not exist in the cache,\n     * update the cache by fetching the template.\n     */\n    var updateMessageTemplatesInfo = function (templateKeys, messageId, requestedAt) { return __awaiter(_this, void 0, void 0, function () {\n        var newParsedTemplates_1, hasMore, token, result, e_1, cachedMessageTemplates, parsedTemplates_1, existingKeys_1;\n        var _a;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    if (!appInfoDispatcher) return [3 /*break*/, 7];\n                    appInfoDispatcher({\n                        type: UPSERT_WAITING_TEMPLATE_KEYS,\n                        payload: {\n                            keys: templateKeys,\n                            requestedAt: requestedAt,\n                        },\n                    });\n                    newParsedTemplates_1 = [];\n                    _b.label = 1;\n                case 1:\n                    _b.trys.push([1, 5, , 6]);\n                    hasMore = true;\n                    token = null;\n                    _b.label = 2;\n                case 2:\n                    if (!hasMore) return [3 /*break*/, 4];\n                    return [4 /*yield*/, sdk.message.getMessageTemplatesByToken(token, {\n                            keys: templateKeys,\n                        })];\n                case 3:\n                    result = _b.sent();\n                    result.templates.forEach(function (newTemplate) {\n                        newParsedTemplates_1.push(JSON.parse(newTemplate.template));\n                    });\n                    hasMore = result.hasMore;\n                    token = result.token;\n                    return [3 /*break*/, 2];\n                case 4: return [3 /*break*/, 6];\n                case 5:\n                    e_1 = _b.sent();\n                    (_a = logger === null || logger === void 0 ? void 0 : logger.error) === null || _a === void 0 ? void 0 : _a.call(logger, 'Sendbird | fetchProcessedMessageTemplates failed', e_1, templateKeys);\n                    return [3 /*break*/, 6];\n                case 6:\n                    if (newParsedTemplates_1.length > 0) {\n                        cachedMessageTemplates = localStorage.getItem(CACHED_MESSAGE_TEMPLATES_KEY);\n                        if (cachedMessageTemplates) {\n                            parsedTemplates_1 = JSON.parse(cachedMessageTemplates);\n                            existingKeys_1 = parsedTemplates_1.map(function (parsedTemplate) { return parsedTemplate.key; });\n                            newParsedTemplates_1.forEach(function (newParsedTemplate) {\n                                if (!existingKeys_1.includes(newParsedTemplate.key)) {\n                                    parsedTemplates_1.push(newParsedTemplate);\n                                }\n                            });\n                            localStorage.setItem(CACHED_MESSAGE_TEMPLATES_KEY, JSON.stringify(parsedTemplates_1));\n                        }\n                        else {\n                            localStorage.setItem(CACHED_MESSAGE_TEMPLATES_KEY, JSON.stringify([newParsedTemplates_1]));\n                        }\n                        // Update memory\n                        appInfoDispatcher({\n                            type: UPSERT_MESSAGE_TEMPLATES,\n                            payload: newParsedTemplates_1.map(function (newParsedTemplate) {\n                                return {\n                                    key: newParsedTemplate.key,\n                                    template: getProcessedTemplate(newParsedTemplate),\n                                };\n                            }),\n                        });\n                    }\n                    else {\n                        appInfoDispatcher({\n                            type: MARK_ERROR_WAITING_TEMPLATE_KEYS,\n                            payload: {\n                                keys: templateKeys,\n                                messageId: messageId,\n                            },\n                        });\n                    }\n                    _b.label = 7;\n                case 7: return [2 /*return*/];\n            }\n        });\n    }); };\n    return {\n        getCachedTemplate: getCachedTemplate,\n        updateMessageTemplatesInfo: updateMessageTemplatesInfo,\n        initializeMessageTemplatesInfo: initializeMessageTemplatesInfo,\n    };\n}\n\nvar useHTMLTextDirection = function (direction) {\n    useEffect(function () {\n        /**\n         * It sets the 'dir' attribute of the closest parent <div> element of the element with VOICE_PLAYER_ROOT_ID cause:\n         * - An empty <div> element is created in the VoiceMessageProvider, which is the highest-level <div> element within the SendbirdProvider.\n         * - It tries to find the nearest parent <div> element within the SendbirdProvider and sets 'dir' attribute,\n         * ensuring that the directionality is applied correctly.\n         * */\n        var targetElement = document.getElementById(VOICE_PLAYER_ROOT_ID);\n        targetElement.parentElement.dir = direction;\n    }, [direction]);\n};\n\nfunction SendbirdProvider(props) {\n    var localConfigs = uikitConfigMapper({\n        legacyConfig: {\n            replyType: props.replyType,\n            isMentionEnabled: props.isMentionEnabled,\n            isReactionEnabled: props.isReactionEnabled,\n            disableUserProfile: props.disableUserProfile,\n            isVoiceMessageEnabled: props.isVoiceMessageEnabled,\n            isTypingIndicatorEnabledOnChannelList: props.isTypingIndicatorEnabledOnChannelList,\n            isMessageReceiptStatusEnabledOnChannelList: props.isMessageReceiptStatusEnabledOnChannelList,\n            showSearchIcon: props.showSearchIcon,\n        },\n        uikitOptions: props.uikitOptions,\n    });\n    return (React__default.createElement(UIKitConfigProvider, { storage: uikitConfigStorage, localConfigs: {\n            common: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.common,\n            groupChannel: {\n                channel: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.groupChannel,\n                channelList: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.groupChannelList,\n                setting: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.groupChannelSettings,\n            },\n            openChannel: {\n                channel: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.openChannel,\n            },\n        } },\n        React__default.createElement(SendbirdSDK, __assign({}, props))));\n}\nvar SendbirdSDK = function (_a) {\n    var _b, _c, _d;\n    var appId = _a.appId, userId = _a.userId, children = _a.children, accessToken = _a.accessToken, customApiHost = _a.customApiHost, customWebSocketHost = _a.customWebSocketHost, configureSession = _a.configureSession, _e = _a.theme, theme = _e === void 0 ? 'light' : _e, _f = _a.config, config = _f === void 0 ? {} : _f, _g = _a.nickname, nickname = _g === void 0 ? '' : _g, colorSet = _a.colorSet, stringSet = _a.stringSet, dateLocale = _a.dateLocale, _h = _a.profileUrl, profileUrl = _h === void 0 ? '' : _h, voiceRecord = _a.voiceRecord, userListQuery = _a.userListQuery, _j = _a.imageCompression, imageCompression = _j === void 0 ? {} : _j, _k = _a.allowProfileEdit, allowProfileEdit = _k === void 0 ? false : _k, _l = _a.disableMarkAsDelivered, disableMarkAsDelivered = _l === void 0 ? false : _l, renderUserProfile = _a.renderUserProfile, onUserProfileMessage = _a.onUserProfileMessage, _m = _a.breakpoint, breakpoint = _m === void 0 ? false : _m, _o = _a.isUserIdUsedForNickname, isUserIdUsedForNickname = _o === void 0 ? true : _o, sdkInitParams = _a.sdkInitParams, customExtensionParams = _a.customExtensionParams, _p = _a.isMultipleFilesMessageEnabled, isMultipleFilesMessageEnabled = _p === void 0 ? false : _p, eventHandlers = _a.eventHandlers, _q = _a.htmlTextDirection, htmlTextDirection = _q === void 0 ? 'ltr' : _q;\n    var _r = config.logLevel, logLevel = _r === void 0 ? '' : _r, _s = config.userMention, userMention = _s === void 0 ? {} : _s, _t = config.isREMUnitEnabled, isREMUnitEnabled = _t === void 0 ? false : _t, customPubSub = config.pubSub;\n    var isMobile = useMediaQueryContext().isMobile;\n    var _u = useState(LoggerFactory(logLevel)), logger = _u[0], setLogger = _u[1];\n    var pubSub = useState(function () { return customPubSub !== null && customPubSub !== void 0 ? customPubSub : pubSubFactory(); })[0];\n    var _v = useReducer(reducer$2, initialState$2), sdkStore = _v[0], sdkDispatcher = _v[1];\n    var _w = useReducer(reducer$1, initialState$1), userStore = _w[0], userDispatcher = _w[1];\n    var _x = useReducer(reducer, initialState), appInfoStore = _x[0], appInfoDispatcher = _x[1];\n    var _y = useUIKitConfig(), configs = _y.configs, configsWithAppAttr = _y.configsWithAppAttr, initDashboardConfigs = _y.initDashboardConfigs;\n    var sdkInitialized = sdkStore.initialized;\n    var sdk = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.sdk;\n    var _z = (_b = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) !== null && _b !== void 0 ? _b : {}, uploadSizeLimit = _z.uploadSizeLimit, multipleFilesMessageFileCountLimit = _z.multipleFilesMessageFileCountLimit;\n    useTheme(colorSet);\n    var _0 = useMessageTemplateUtils({\n        sdk: sdk,\n        logger: logger,\n        appInfoStore: appInfoStore,\n        appInfoDispatcher: appInfoDispatcher,\n    }), getCachedTemplate = _0.getCachedTemplate, updateMessageTemplatesInfo = _0.updateMessageTemplatesInfo, initializeMessageTemplatesInfo = _0.initializeMessageTemplatesInfo;\n    var utils = {\n        updateMessageTemplatesInfo: updateMessageTemplatesInfo,\n        getCachedTemplate: getCachedTemplate,\n    };\n    var reconnect = useConnect({\n        appId: appId,\n        userId: userId,\n        accessToken: accessToken,\n        isUserIdUsedForNickname: isUserIdUsedForNickname,\n        isMobile: isMobile,\n    }, {\n        logger: logger,\n        nickname: nickname,\n        profileUrl: profileUrl,\n        configureSession: configureSession,\n        customApiHost: customApiHost,\n        customWebSocketHost: customWebSocketHost,\n        sdkInitParams: sdkInitParams,\n        customExtensionParams: customExtensionParams,\n        sdk: sdk,\n        sdkDispatcher: sdkDispatcher,\n        userDispatcher: userDispatcher,\n        appInfoDispatcher: appInfoDispatcher,\n        initDashboardConfigs: initDashboardConfigs,\n        eventHandlers: eventHandlers,\n        initializeMessageTemplatesInfo: initializeMessageTemplatesInfo,\n    });\n    useUnmount(function () {\n        if (typeof sdk.disconnect === 'function') {\n            disconnectSdk({\n                logger: logger,\n                sdkDispatcher: sdkDispatcher,\n                userDispatcher: userDispatcher,\n                sdk: sdk,\n            });\n        }\n    }, [sdk.disconnect]);\n    // to create a pubsub to communicate between parent and child\n    useEffect(function () {\n        setLogger(LoggerFactory(logLevel));\n    }, [logLevel]);\n    // should move to reducer\n    var _1 = useState(theme), currentTheme = _1[0], setCurrentTheme = _1[1];\n    useEffect(function () {\n        setCurrentTheme(theme);\n    }, [theme]);\n    useEffect(function () {\n        var body = document.querySelector('body');\n        body === null || body === void 0 ? void 0 : body.classList.remove('sendbird-experimental__rem__units');\n        if (isREMUnitEnabled) {\n            body === null || body === void 0 ? void 0 : body.classList.add('sendbird-experimental__rem__units');\n        }\n    }, [isREMUnitEnabled]);\n    // add-remove theme from body\n    useEffect(function () {\n        logger.info('Setup theme', \"Theme: \".concat(currentTheme));\n        try {\n            var body = document.querySelector('body');\n            body === null || body === void 0 ? void 0 : body.classList.remove('sendbird-theme--light');\n            body === null || body === void 0 ? void 0 : body.classList.remove('sendbird-theme--dark');\n            body === null || body === void 0 ? void 0 : body.classList.add(\"sendbird-theme--\".concat(currentTheme || 'light'));\n            logger.info('Finish setup theme');\n            // eslint-disable-next-line no-empty\n        }\n        catch (e) {\n            logger.warning('Setup theme failed', \"\".concat(e));\n        }\n        return function () {\n            try {\n                var body = document.querySelector('body');\n                body === null || body === void 0 ? void 0 : body.classList.remove('sendbird-theme--light');\n                body === null || body === void 0 ? void 0 : body.classList.remove('sendbird-theme--dark');\n                // eslint-disable-next-line no-empty\n            }\n            catch (_a) { }\n        };\n    }, [currentTheme]);\n    useHTMLTextDirection(htmlTextDirection);\n    var isOnline = useOnlineStatus(sdkStore.sdk, logger);\n    var markAsReadScheduler = useMarkAsReadScheduler({ isConnected: isOnline }, { logger: logger });\n    var markAsDeliveredScheduler = useMarkAsDeliveredScheduler({ isConnected: isOnline }, { logger: logger });\n    var localeStringSet = React__default.useMemo(function () {\n        return __assign(__assign({}, getStringSet('en')), stringSet);\n    }, [stringSet]);\n    /**\n     * Feature Configuration - TODO\n     * This will be moved into the UIKitConfigProvider, aftering Dashboard applies\n     */\n    var uikitMultipleFilesMessageLimit = useMemo(function () {\n        return Math.min(DEFAULT_MULTIPLE_FILES_MESSAGE_LIMIT, multipleFilesMessageFileCountLimit !== null && multipleFilesMessageFileCountLimit !== void 0 ? multipleFilesMessageFileCountLimit : Number.MAX_SAFE_INTEGER);\n    }, [multipleFilesMessageFileCountLimit]);\n    // Emoji Manager\n    var emojiManager = useMemo(function () {\n        return new EmojiManager({\n            sdk: sdk,\n            logger: logger,\n        });\n    }, [sdkStore.initialized]);\n    return (React__default.createElement(SendbirdSdkContext.Provider, { value: {\n            stores: {\n                sdkStore: sdkStore,\n                userStore: userStore,\n                appInfoStore: appInfoStore,\n            },\n            dispatchers: {\n                sdkDispatcher: sdkDispatcher,\n                userDispatcher: userDispatcher,\n                appInfoDispatcher: appInfoDispatcher,\n                reconnect: reconnect,\n            },\n            config: {\n                disableMarkAsDelivered: disableMarkAsDelivered,\n                renderUserProfile: renderUserProfile,\n                onUserProfileMessage: onUserProfileMessage,\n                allowProfileEdit: allowProfileEdit,\n                isOnline: isOnline,\n                userId: userId,\n                appId: appId,\n                accessToken: accessToken,\n                theme: currentTheme,\n                setCurrentTheme: setCurrentTheme,\n                setCurrenttheme: setCurrentTheme, // deprecated: typo\n                isMultipleFilesMessageEnabled: isMultipleFilesMessageEnabled,\n                uikitUploadSizeLimit: uploadSizeLimit !== null && uploadSizeLimit !== void 0 ? uploadSizeLimit : DEFAULT_UPLOAD_SIZE_LIMIT,\n                uikitMultipleFilesMessageLimit: uikitMultipleFilesMessageLimit,\n                userListQuery: userListQuery,\n                logger: logger,\n                pubSub: pubSub,\n                imageCompression: __assign({ compressionRate: 0.7, outputFormat: 'preserve' }, imageCompression),\n                voiceRecord: {\n                    maxRecordingTime: (_c = voiceRecord === null || voiceRecord === void 0 ? void 0 : voiceRecord.maxRecordingTime) !== null && _c !== void 0 ? _c : VOICE_RECORDER_DEFAULT_MAX,\n                    minRecordingTime: (_d = voiceRecord === null || voiceRecord === void 0 ? void 0 : voiceRecord.minRecordingTime) !== null && _d !== void 0 ? _d : VOICE_RECORDER_DEFAULT_MIN,\n                },\n                userMention: {\n                    maxMentionCount: (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount) || 10,\n                    maxSuggestionCount: (userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount) || 15,\n                },\n                markAsReadScheduler: markAsReadScheduler,\n                markAsDeliveredScheduler: markAsDeliveredScheduler,\n                // Remote configs set from dashboard by UIKit feature configuration\n                common: configs.common,\n                groupChannel: {\n                    enableOgtag: sdkInitialized && configsWithAppAttr(sdk).groupChannel.channel.enableOgtag,\n                    enableTypingIndicator: configs.groupChannel.channel.enableTypingIndicator,\n                    enableReactions: sdkInitialized && configsWithAppAttr(sdk).groupChannel.channel.enableReactions,\n                    enableMention: configs.groupChannel.channel.enableMention,\n                    replyType: configs.groupChannel.channel.replyType,\n                    threadReplySelectType: configs.groupChannel.channel.threadReplySelectType,\n                    enableVoiceMessage: configs.groupChannel.channel.enableVoiceMessage,\n                    enableDocument: configs.groupChannel.channel.input.enableDocument,\n                    typingIndicatorTypes: configs.groupChannel.channel.typingIndicatorTypes,\n                    enableFeedback: configs.groupChannel.channel.enableFeedback,\n                    enableSuggestedReplies: configs.groupChannel.channel.enableSuggestedReplies,\n                    showSuggestedRepliesFor: configs.groupChannel.channel.showSuggestedRepliesFor,\n                    suggestedRepliesDirection: configs.groupChannel.channel.suggestedRepliesDirection,\n                    enableMarkdownForUserMessage: configs.groupChannel.channel.enableMarkdownForUserMessage,\n                    enableReactionsSupergroup: sdkInitialized && configsWithAppAttr(sdk).groupChannel.channel.enableReactionsSupergroup,\n                },\n                groupChannelList: {\n                    enableTypingIndicator: configs.groupChannel.channelList.enableTypingIndicator,\n                    enableMessageReceiptStatus: configs.groupChannel.channelList.enableMessageReceiptStatus,\n                },\n                groupChannelSettings: {\n                    enableMessageSearch: sdkInitialized && configsWithAppAttr(sdk).groupChannel.setting.enableMessageSearch,\n                },\n                openChannel: {\n                    enableOgtag: sdkInitialized && configsWithAppAttr(sdk).openChannel.channel.enableOgtag,\n                    enableDocument: configs.openChannel.channel.input.enableDocument,\n                },\n                // deprecated configs\n                disableUserProfile: !configs.common.enableUsingDefaultUserProfile,\n                isReactionEnabled: sdkInitialized && configsWithAppAttr(sdk).groupChannel.channel.enableReactions,\n                isMentionEnabled: configs.groupChannel.channel.enableMention,\n                isVoiceMessageEnabled: configs.groupChannel.channel.enableVoiceMessage,\n                replyType: getCaseResolvedReplyType(configs.groupChannel.channel.replyType).upperCase,\n                isTypingIndicatorEnabledOnChannelList: configs.groupChannel.channelList.enableTypingIndicator,\n                isMessageReceiptStatusEnabledOnChannelList: configs.groupChannel.channelList.enableMessageReceiptStatus,\n                showSearchIcon: sdkInitialized && configsWithAppAttr(sdk).groupChannel.setting.enableMessageSearch,\n                htmlTextDirection: htmlTextDirection,\n            },\n            eventHandlers: eventHandlers,\n            emojiManager: emojiManager,\n            utils: utils,\n        } },\n        React__default.createElement(MediaQueryProvider, { logger: logger, breakpoint: breakpoint },\n            React__default.createElement(LocalizationProvider, { stringSet: localeStringSet, dateLocale: dateLocale },\n                React__default.createElement(VoiceMessageProvider, null,\n                    React__default.createElement(GlobalModalProvider, null, children)))),\n        React__default.createElement(EmojiReactionListRoot, null),\n        React__default.createElement(ModalRoot, null),\n        React__default.createElement(MenuRoot, null)));\n};\n\nexport { SendbirdProvider, SendbirdProvider as default };\n//# sourceMappingURL=SendbirdProvider.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}