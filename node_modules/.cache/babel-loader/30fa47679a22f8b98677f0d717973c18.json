{"ast":null,"code":"import { c as __spreadArray, _ as __assign } from './bundle-BQi9-O76.js';\nimport React__default, { useState, useEffect, useRef, useLayoutEffect, useMemo } from 'react';\nimport { f as format } from './bundle-CAdqcqOm.js';\nimport { u as useLocalization } from './bundle-cQZ3UZoG.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { M as MAX_USER_MENTION_COUNT, a as MAX_USER_SUGGESTION_COUNT } from './bundle-CveCFQYP.js';\nimport { i as isDisabledBecauseFrozen, a as isDisabledBecauseMuted } from './bundle-C3ktHDOc.js';\nimport { useDirtyGetMentions } from '../Message/hooks/useDirtyGetMentions.js';\nimport { g as getSuggestedReplies } from './bundle-DxTN4_0p.js';\nimport DateSeparator from '../ui/DateSeparator.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from './bundle-DhKQeIfP.js';\nimport MessageInput from '../ui/MessageInput.js';\nimport { M as MessageInputKeys } from './bundle-0qSTzMXb.js';\nimport MessageContent from '../ui/MessageContent.js';\nimport SuggestedReplies from '../GroupChannel/components/SuggestedReplies.js';\nimport { S as SuggestedMentionListView } from './bundle-Due9yzp6.js';\nimport { d as deleteNullish, c as classnames } from './bundle-BgwzpLeQ.js';\nvar useDidMountEffect = function (func, deps) {\n  var _a = useState(false),\n    didMount = _a[0],\n    setDidmount = _a[1];\n  useEffect(function () {\n    if (didMount) {\n      func();\n    } else {\n      setDidmount(true);\n    }\n  }, deps);\n};\n\n// TODO: Refactor this component, is too complex now\nvar MessageView = function (props) {\n  var _a, _b;\n  var\n    // MessageProps\n    message = props.message,\n    children = props.children,\n    hasSeparator = props.hasSeparator,\n    chainTop = props.chainTop,\n    chainBottom = props.chainBottom,\n    handleScroll = props.handleScroll,\n    // MessageViewProps\n    channel = props.channel,\n    emojiContainer = props.emojiContainer,\n    editInputDisabled = props.editInputDisabled,\n    shouldRenderSuggestedReplies = props.shouldRenderSuggestedReplies,\n    isReactionEnabled = props.isReactionEnabled,\n    replyType = props.replyType,\n    threadReplySelectType = props.threadReplySelectType,\n    nicknamesMap = props.nicknamesMap,\n    scrollToMessage = props.scrollToMessage,\n    toggleReaction = props.toggleReaction,\n    setQuoteMessage = props.setQuoteMessage,\n    onQuoteMessageClick = props.onQuoteMessageClick,\n    onReplyInThreadClick = props.onReplyInThreadClick,\n    onBeforeDownloadFileMessage = props.onBeforeDownloadFileMessage,\n    sendUserMessage = props.sendUserMessage,\n    updateUserMessage = props.updateUserMessage,\n    resendMessage = props.resendMessage,\n    deleteMessage = props.deleteMessage,\n    setAnimatedMessageId = props.setAnimatedMessageId,\n    animatedMessageId = props.animatedMessageId,\n    onMessageAnimated = props.onMessageAnimated,\n    _c = props.usedInLegacy,\n    usedInLegacy = _c === void 0 ? true : _c;\n  var _d = deleteNullish(props),\n    renderUserMentionItem = _d.renderUserMentionItem,\n    renderMessage = _d.renderMessage,\n    _e = _d.renderMessageContent,\n    renderMessageContent = _e === void 0 ? function (props) {\n      return React__default.createElement(MessageContent, __assign({}, props));\n    } : _e,\n    _f = _d.renderSuggestedReplies,\n    renderSuggestedReplies = _f === void 0 ? function (props) {\n      return React__default.createElement(SuggestedReplies, __assign({}, props));\n    } : _f,\n    renderCustomSeparator = _d.renderCustomSeparator,\n    renderEditInput = _d.renderEditInput,\n    renderFileViewer = _d.renderFileViewer,\n    renderRemoveMessageModal = _d.renderRemoveMessageModal;\n  var _g = useLocalization(),\n    dateLocale = _g.dateLocale,\n    stringSet = _g.stringSet;\n  var globalStore = useSendbirdStateContext();\n  var _h = globalStore.config,\n    userId = _h.userId,\n    isOnline = _h.isOnline,\n    userMention = _h.userMention,\n    logger = _h.logger,\n    groupChannel = _h.groupChannel;\n  var maxUserMentionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount) || MAX_USER_MENTION_COUNT;\n  var maxUserSuggestionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount) || MAX_USER_SUGGESTION_COUNT;\n  var _j = useState(false),\n    showEdit = _j[0],\n    setShowEdit = _j[1];\n  var _k = useState(false),\n    showRemove = _k[0],\n    setShowRemove = _k[1];\n  var _l = useState(false),\n    showFileViewer = _l[0],\n    setShowFileViewer = _l[1];\n  var _m = useState(false),\n    isAnimated = _m[0],\n    setIsAnimated = _m[1];\n  var _o = useState(''),\n    mentionNickname = _o[0],\n    setMentionNickname = _o[1];\n  var _p = useState([]),\n    mentionedUsers = _p[0],\n    setMentionedUsers = _p[1];\n  var _q = useState([]),\n    mentionedUserIds = _q[0],\n    setMentionedUserIds = _q[1];\n  var _r = useState(null),\n    messageInputEvent = _r[0],\n    setMessageInputEvent = _r[1];\n  var _s = useState(null),\n    selectedUser = _s[0],\n    setSelectedUser = _s[1];\n  var _t = useState([]),\n    mentionSuggestedUsers = _t[0],\n    setMentionSuggestedUsers = _t[1];\n  var editMessageInputRef = useRef(null);\n  var messageScrollRef = useRef(null);\n  var displaySuggestedMentionList = isOnline && groupChannel.enableMention && mentionNickname.length > 0 && !isDisabledBecauseFrozen(channel) && !isDisabledBecauseMuted(channel);\n  var mentionNodes = useDirtyGetMentions({\n    ref: editMessageInputRef\n  }, {\n    logger: logger\n  });\n  var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < maxUserMentionCount;\n  useEffect(function () {\n    setMentionedUsers(mentionedUsers.filter(function (_a) {\n      var userId = _a.userId;\n      var i = mentionedUserIds.indexOf(userId);\n      if (i < 0) {\n        return false;\n      } else {\n        mentionedUserIds.splice(i, 1);\n        return true;\n      }\n    }));\n  }, [mentionedUserIds]);\n  // Side effect: scroll position update when showEdit is toggled or reactions updated\n  useDidMountEffect(function () {\n    handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll();\n  }, [showEdit, (_a = message === null || message === void 0 ? void 0 : message.reactions) === null || _a === void 0 ? void 0 : _a.length]);\n  // Side effect: scroll position update when message updated\n  useDidMountEffect(function () {\n    handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll(true);\n  }, [message === null || message === void 0 ? void 0 : message.updatedAt, message === null || message === void 0 ? void 0 : message.message]);\n  // Side effect: scroll position update when suggested replies are rendered or hidden\n  var prevShouldRenderSuggestedReplies = useRef(shouldRenderSuggestedReplies);\n  useEffect(function () {\n    if (prevShouldRenderSuggestedReplies.current !== shouldRenderSuggestedReplies) {\n      handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll();\n    } else {\n      prevShouldRenderSuggestedReplies.current = shouldRenderSuggestedReplies;\n    }\n  }, [shouldRenderSuggestedReplies]);\n  useLayoutEffect(function () {\n    // Keep the scrollBottom value after fetching new message list (but GroupChannel module is not needed.)\n    if (usedInLegacy) handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll(true);\n  }, []);\n  useLayoutEffect(function () {\n    var timeouts = [];\n    if (animatedMessageId === message.messageId && (messageScrollRef === null || messageScrollRef === void 0 ? void 0 : messageScrollRef.current)) {\n      timeouts.push(setTimeout(function () {\n        setIsAnimated(true);\n      }, 500));\n      timeouts.push(setTimeout(function () {\n        setAnimatedMessageId(null);\n        onMessageAnimated === null || onMessageAnimated === void 0 ? void 0 : onMessageAnimated();\n      }, 1600));\n    } else {\n      setIsAnimated(false);\n    }\n    return function () {\n      timeouts.forEach(function (it) {\n        return clearTimeout(it);\n      });\n    };\n  }, [animatedMessageId, messageScrollRef.current, message.messageId]);\n  var renderedCustomSeparator = useMemo(function () {\n    var _a;\n    return (_a = renderCustomSeparator === null || renderCustomSeparator === void 0 ? void 0 : renderCustomSeparator({\n      message: message\n    })) !== null && _a !== void 0 ? _a : null;\n  }, [message, renderCustomSeparator]);\n  var renderChildren = function () {\n    if (children) {\n      return children;\n    }\n    if (renderMessage) {\n      var messageProps = __assign(__assign({}, props), {\n        renderMessage: undefined\n      });\n      return renderMessage(messageProps);\n    }\n    return React__default.createElement(React__default.Fragment, null, renderMessageContent({\n      className: 'sendbird-message-hoc__message-content',\n      userId: userId,\n      scrollToMessage: scrollToMessage,\n      channel: channel,\n      message: message,\n      disabled: !isOnline,\n      chainTop: chainTop,\n      chainBottom: chainBottom,\n      isReactionEnabled: isReactionEnabled,\n      replyType: replyType,\n      threadReplySelectType: threadReplySelectType,\n      nicknamesMap: nicknamesMap,\n      emojiContainer: emojiContainer,\n      showEdit: setShowEdit,\n      showRemove: setShowRemove,\n      showFileViewer: setShowFileViewer,\n      resendMessage: resendMessage,\n      deleteMessage: deleteMessage,\n      toggleReaction: toggleReaction,\n      setQuoteMessage: setQuoteMessage,\n      onReplyInThread: onReplyInThreadClick,\n      onQuoteMessageClick: onQuoteMessageClick,\n      onMessageHeightChange: handleScroll,\n      onBeforeDownloadFileMessage: onBeforeDownloadFileMessage\n    }), shouldRenderSuggestedReplies && renderSuggestedReplies({\n      replyOptions: getSuggestedReplies(message),\n      onSendMessage: sendUserMessage,\n      type: groupChannel === null || groupChannel === void 0 ? void 0 : groupChannel.suggestedRepliesDirection\n    }), showRemove && (renderRemoveMessageModal === null || renderRemoveMessageModal === void 0 ? void 0 : renderRemoveMessageModal({\n      message: message,\n      onCancel: function () {\n        return setShowRemove(false);\n      }\n    })), showFileViewer && renderFileViewer({\n      message: message,\n      onCancel: function () {\n        return setShowFileViewer(false);\n      }\n    }));\n  };\n  if (showEdit && ((_b = message === null || message === void 0 ? void 0 : message.isUserMessage) === null || _b === void 0 ? void 0 : _b.call(message))) {\n    return (renderEditInput === null || renderEditInput === void 0 ? void 0 : renderEditInput()) || React__default.createElement(React__default.Fragment, null, displaySuggestedMentionList && React__default.createElement(SuggestedMentionListView, {\n      currentChannel: channel,\n      targetNickname: mentionNickname,\n      inputEvent: messageInputEvent !== null && messageInputEvent !== void 0 ? messageInputEvent : undefined,\n      renderUserMentionItem: renderUserMentionItem,\n      onUserItemClick: function (user) {\n        if (user) {\n          setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));\n        }\n        setMentionNickname('');\n        setSelectedUser(user);\n        setMessageInputEvent(null);\n      },\n      onFocusItemChange: function () {\n        setMessageInputEvent(null);\n      },\n      onFetchUsers: function (users) {\n        setMentionSuggestedUsers(users);\n      },\n      ableAddMention: ableMention,\n      maxMentionCount: maxUserMentionCount,\n      maxSuggestionCount: maxUserSuggestionCount\n    }), React__default.createElement(MessageInput, {\n      isEdit: true,\n      channel: channel,\n      disabled: editInputDisabled,\n      ref: editMessageInputRef,\n      mentionSelectedUser: selectedUser,\n      isMentionEnabled: groupChannel.enableMention,\n      message: message,\n      onStartTyping: function () {\n        var _a;\n        (_a = channel === null || channel === void 0 ? void 0 : channel.startTyping) === null || _a === void 0 ? void 0 : _a.call(channel);\n      },\n      onUpdateMessage: function (_a) {\n        var _b;\n        var messageId = _a.messageId,\n          message = _a.message,\n          mentionTemplate = _a.mentionTemplate;\n        updateUserMessage(messageId, {\n          message: message,\n          mentionedUsers: mentionedUsers,\n          mentionedMessageTemplate: mentionTemplate\n        });\n        setShowEdit(false);\n        (_b = channel === null || channel === void 0 ? void 0 : channel.endTyping) === null || _b === void 0 ? void 0 : _b.call(channel);\n      },\n      onCancelEdit: function () {\n        var _a;\n        setMentionNickname('');\n        setMentionedUsers([]);\n        setMentionedUserIds([]);\n        setMentionSuggestedUsers([]);\n        setShowEdit(false);\n        (_a = channel === null || channel === void 0 ? void 0 : channel.endTyping) === null || _a === void 0 ? void 0 : _a.call(channel);\n      },\n      onUserMentioned: function (user) {\n        if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {\n          setSelectedUser(null);\n          setMentionNickname('');\n        }\n      },\n      onMentionStringChange: function (mentionText) {\n        setMentionNickname(mentionText);\n      },\n      onMentionedUserIdsUpdated: function (userIds) {\n        setMentionedUserIds(userIds);\n      },\n      onKeyDown: function (e) {\n        if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0 && (e.key === MessageInputKeys.Enter && ableMention || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)) {\n          setMessageInputEvent(e);\n          return true;\n        }\n        return false;\n      }\n    }));\n  }\n  return React__default.createElement(\"div\", {\n    className: classnames('sendbird-msg-hoc sendbird-msg--scroll-ref', isAnimated && 'sendbird-msg-hoc__animated'),\n    \"data-testid\": \"sendbird-message-view\",\n    style: children || renderMessage ? undefined : {\n      marginBottom: '2px'\n    },\n    \"data-sb-message-id\": message.messageId,\n    \"data-sb-created-at\": message.createdAt,\n    ref: messageScrollRef\n  }, hasSeparator && (renderedCustomSeparator || React__default.createElement(DateSeparator, null, React__default.createElement(Label, {\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, format(message.createdAt, stringSet.DATE_FORMAT__MESSAGE_LIST__DATE_SEPARATOR, {\n    locale: dateLocale\n  })))), renderChildren());\n};\nexport { MessageView as M };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { c as __spreadArray, _ as __assign } from './bundle-BQi9-O76.js';\nimport React__default, { useState, useEffect, useRef, useLayoutEffect, useMemo } from 'react';\nimport { f as format } from './bundle-CAdqcqOm.js';\nimport { u as useLocalization } from './bundle-cQZ3UZoG.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { M as MAX_USER_MENTION_COUNT, a as MAX_USER_SUGGESTION_COUNT } from './bundle-CveCFQYP.js';\nimport { i as isDisabledBecauseFrozen, a as isDisabledBecauseMuted } from './bundle-C3ktHDOc.js';\nimport { useDirtyGetMentions } from '../Message/hooks/useDirtyGetMentions.js';\nimport { g as getSuggestedReplies } from './bundle-DxTN4_0p.js';\nimport DateSeparator from '../ui/DateSeparator.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from './bundle-DhKQeIfP.js';\nimport MessageInput from '../ui/MessageInput.js';\nimport { M as MessageInputKeys } from './bundle-0qSTzMXb.js';\nimport MessageContent from '../ui/MessageContent.js';\nimport SuggestedReplies from '../GroupChannel/components/SuggestedReplies.js';\nimport { S as SuggestedMentionListView } from './bundle-Due9yzp6.js';\nimport { d as deleteNullish, c as classnames } from './bundle-BgwzpLeQ.js';\n\nvar useDidMountEffect = function (func, deps) {\n    var _a = useState(false), didMount = _a[0], setDidmount = _a[1];\n    useEffect(function () {\n        if (didMount) {\n            func();\n        }\n        else {\n            setDidmount(true);\n        }\n    }, deps);\n};\n\n// TODO: Refactor this component, is too complex now\nvar MessageView = function (props) {\n    var _a, _b;\n    var \n    // MessageProps\n    message = props.message, children = props.children, hasSeparator = props.hasSeparator, chainTop = props.chainTop, chainBottom = props.chainBottom, handleScroll = props.handleScroll, \n    // MessageViewProps\n    channel = props.channel, emojiContainer = props.emojiContainer, editInputDisabled = props.editInputDisabled, shouldRenderSuggestedReplies = props.shouldRenderSuggestedReplies, isReactionEnabled = props.isReactionEnabled, replyType = props.replyType, threadReplySelectType = props.threadReplySelectType, nicknamesMap = props.nicknamesMap, scrollToMessage = props.scrollToMessage, toggleReaction = props.toggleReaction, setQuoteMessage = props.setQuoteMessage, onQuoteMessageClick = props.onQuoteMessageClick, onReplyInThreadClick = props.onReplyInThreadClick, onBeforeDownloadFileMessage = props.onBeforeDownloadFileMessage, sendUserMessage = props.sendUserMessage, updateUserMessage = props.updateUserMessage, resendMessage = props.resendMessage, deleteMessage = props.deleteMessage, setAnimatedMessageId = props.setAnimatedMessageId, animatedMessageId = props.animatedMessageId, onMessageAnimated = props.onMessageAnimated, _c = props.usedInLegacy, usedInLegacy = _c === void 0 ? true : _c;\n    var _d = deleteNullish(props), renderUserMentionItem = _d.renderUserMentionItem, renderMessage = _d.renderMessage, _e = _d.renderMessageContent, renderMessageContent = _e === void 0 ? function (props) { return React__default.createElement(MessageContent, __assign({}, props)); } : _e, _f = _d.renderSuggestedReplies, renderSuggestedReplies = _f === void 0 ? function (props) { return React__default.createElement(SuggestedReplies, __assign({}, props)); } : _f, renderCustomSeparator = _d.renderCustomSeparator, renderEditInput = _d.renderEditInput, renderFileViewer = _d.renderFileViewer, renderRemoveMessageModal = _d.renderRemoveMessageModal;\n    var _g = useLocalization(), dateLocale = _g.dateLocale, stringSet = _g.stringSet;\n    var globalStore = useSendbirdStateContext();\n    var _h = globalStore.config, userId = _h.userId, isOnline = _h.isOnline, userMention = _h.userMention, logger = _h.logger, groupChannel = _h.groupChannel;\n    var maxUserMentionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount) || MAX_USER_MENTION_COUNT;\n    var maxUserSuggestionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount) || MAX_USER_SUGGESTION_COUNT;\n    var _j = useState(false), showEdit = _j[0], setShowEdit = _j[1];\n    var _k = useState(false), showRemove = _k[0], setShowRemove = _k[1];\n    var _l = useState(false), showFileViewer = _l[0], setShowFileViewer = _l[1];\n    var _m = useState(false), isAnimated = _m[0], setIsAnimated = _m[1];\n    var _o = useState(''), mentionNickname = _o[0], setMentionNickname = _o[1];\n    var _p = useState([]), mentionedUsers = _p[0], setMentionedUsers = _p[1];\n    var _q = useState([]), mentionedUserIds = _q[0], setMentionedUserIds = _q[1];\n    var _r = useState(null), messageInputEvent = _r[0], setMessageInputEvent = _r[1];\n    var _s = useState(null), selectedUser = _s[0], setSelectedUser = _s[1];\n    var _t = useState([]), mentionSuggestedUsers = _t[0], setMentionSuggestedUsers = _t[1];\n    var editMessageInputRef = useRef(null);\n    var messageScrollRef = useRef(null);\n    var displaySuggestedMentionList = isOnline\n        && groupChannel.enableMention && mentionNickname.length > 0\n        && !isDisabledBecauseFrozen(channel)\n        && !isDisabledBecauseMuted(channel);\n    var mentionNodes = useDirtyGetMentions({ ref: editMessageInputRef }, { logger: logger });\n    var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < maxUserMentionCount;\n    useEffect(function () {\n        setMentionedUsers(mentionedUsers.filter(function (_a) {\n            var userId = _a.userId;\n            var i = mentionedUserIds.indexOf(userId);\n            if (i < 0) {\n                return false;\n            }\n            else {\n                mentionedUserIds.splice(i, 1);\n                return true;\n            }\n        }));\n    }, [mentionedUserIds]);\n    // Side effect: scroll position update when showEdit is toggled or reactions updated\n    useDidMountEffect(function () {\n        handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll();\n    }, [showEdit, (_a = message === null || message === void 0 ? void 0 : message.reactions) === null || _a === void 0 ? void 0 : _a.length]);\n    // Side effect: scroll position update when message updated\n    useDidMountEffect(function () {\n        handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll(true);\n    }, [message === null || message === void 0 ? void 0 : message.updatedAt, message === null || message === void 0 ? void 0 : message.message]);\n    // Side effect: scroll position update when suggested replies are rendered or hidden\n    var prevShouldRenderSuggestedReplies = useRef(shouldRenderSuggestedReplies);\n    useEffect(function () {\n        if (prevShouldRenderSuggestedReplies.current !== shouldRenderSuggestedReplies) {\n            handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll();\n        }\n        else {\n            prevShouldRenderSuggestedReplies.current = shouldRenderSuggestedReplies;\n        }\n    }, [shouldRenderSuggestedReplies]);\n    useLayoutEffect(function () {\n        // Keep the scrollBottom value after fetching new message list (but GroupChannel module is not needed.)\n        if (usedInLegacy)\n            handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll(true);\n    }, []);\n    useLayoutEffect(function () {\n        var timeouts = [];\n        if (animatedMessageId === message.messageId && (messageScrollRef === null || messageScrollRef === void 0 ? void 0 : messageScrollRef.current)) {\n            timeouts.push(setTimeout(function () {\n                setIsAnimated(true);\n            }, 500));\n            timeouts.push(setTimeout(function () {\n                setAnimatedMessageId(null);\n                onMessageAnimated === null || onMessageAnimated === void 0 ? void 0 : onMessageAnimated();\n            }, 1600));\n        }\n        else {\n            setIsAnimated(false);\n        }\n        return function () {\n            timeouts.forEach(function (it) { return clearTimeout(it); });\n        };\n    }, [animatedMessageId, messageScrollRef.current, message.messageId]);\n    var renderedCustomSeparator = useMemo(function () { var _a; return (_a = renderCustomSeparator === null || renderCustomSeparator === void 0 ? void 0 : renderCustomSeparator({ message: message })) !== null && _a !== void 0 ? _a : null; }, [message, renderCustomSeparator]);\n    var renderChildren = function () {\n        if (children) {\n            return children;\n        }\n        if (renderMessage) {\n            var messageProps = __assign(__assign({}, props), { renderMessage: undefined });\n            return renderMessage(messageProps);\n        }\n        return (React__default.createElement(React__default.Fragment, null,\n            renderMessageContent({\n                className: 'sendbird-message-hoc__message-content',\n                userId: userId,\n                scrollToMessage: scrollToMessage,\n                channel: channel,\n                message: message,\n                disabled: !isOnline,\n                chainTop: chainTop,\n                chainBottom: chainBottom,\n                isReactionEnabled: isReactionEnabled,\n                replyType: replyType,\n                threadReplySelectType: threadReplySelectType,\n                nicknamesMap: nicknamesMap,\n                emojiContainer: emojiContainer,\n                showEdit: setShowEdit,\n                showRemove: setShowRemove,\n                showFileViewer: setShowFileViewer,\n                resendMessage: resendMessage,\n                deleteMessage: deleteMessage,\n                toggleReaction: toggleReaction,\n                setQuoteMessage: setQuoteMessage,\n                onReplyInThread: onReplyInThreadClick,\n                onQuoteMessageClick: onQuoteMessageClick,\n                onMessageHeightChange: handleScroll,\n                onBeforeDownloadFileMessage: onBeforeDownloadFileMessage,\n            }),\n            shouldRenderSuggestedReplies && renderSuggestedReplies({\n                replyOptions: getSuggestedReplies(message),\n                onSendMessage: sendUserMessage,\n                type: groupChannel === null || groupChannel === void 0 ? void 0 : groupChannel.suggestedRepliesDirection,\n            }),\n            showRemove && (renderRemoveMessageModal === null || renderRemoveMessageModal === void 0 ? void 0 : renderRemoveMessageModal({ message: message, onCancel: function () { return setShowRemove(false); } })),\n            showFileViewer && renderFileViewer({ message: message, onCancel: function () { return setShowFileViewer(false); } })));\n    };\n    if (showEdit && ((_b = message === null || message === void 0 ? void 0 : message.isUserMessage) === null || _b === void 0 ? void 0 : _b.call(message))) {\n        return ((renderEditInput === null || renderEditInput === void 0 ? void 0 : renderEditInput()) || (React__default.createElement(React__default.Fragment, null,\n            displaySuggestedMentionList && (React__default.createElement(SuggestedMentionListView, { currentChannel: channel, targetNickname: mentionNickname, inputEvent: messageInputEvent !== null && messageInputEvent !== void 0 ? messageInputEvent : undefined, renderUserMentionItem: renderUserMentionItem, onUserItemClick: function (user) {\n                    if (user) {\n                        setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));\n                    }\n                    setMentionNickname('');\n                    setSelectedUser(user);\n                    setMessageInputEvent(null);\n                }, onFocusItemChange: function () {\n                    setMessageInputEvent(null);\n                }, onFetchUsers: function (users) {\n                    setMentionSuggestedUsers(users);\n                }, ableAddMention: ableMention, maxMentionCount: maxUserMentionCount, maxSuggestionCount: maxUserSuggestionCount })),\n            React__default.createElement(MessageInput, { isEdit: true, channel: channel, disabled: editInputDisabled, ref: editMessageInputRef, mentionSelectedUser: selectedUser, isMentionEnabled: groupChannel.enableMention, message: message, onStartTyping: function () {\n                    var _a;\n                    (_a = channel === null || channel === void 0 ? void 0 : channel.startTyping) === null || _a === void 0 ? void 0 : _a.call(channel);\n                }, onUpdateMessage: function (_a) {\n                    var _b;\n                    var messageId = _a.messageId, message = _a.message, mentionTemplate = _a.mentionTemplate;\n                    updateUserMessage(messageId, {\n                        message: message,\n                        mentionedUsers: mentionedUsers,\n                        mentionedMessageTemplate: mentionTemplate,\n                    });\n                    setShowEdit(false);\n                    (_b = channel === null || channel === void 0 ? void 0 : channel.endTyping) === null || _b === void 0 ? void 0 : _b.call(channel);\n                }, onCancelEdit: function () {\n                    var _a;\n                    setMentionNickname('');\n                    setMentionedUsers([]);\n                    setMentionedUserIds([]);\n                    setMentionSuggestedUsers([]);\n                    setShowEdit(false);\n                    (_a = channel === null || channel === void 0 ? void 0 : channel.endTyping) === null || _a === void 0 ? void 0 : _a.call(channel);\n                }, onUserMentioned: function (user) {\n                    if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {\n                        setSelectedUser(null);\n                        setMentionNickname('');\n                    }\n                }, onMentionStringChange: function (mentionText) {\n                    setMentionNickname(mentionText);\n                }, onMentionedUserIdsUpdated: function (userIds) {\n                    setMentionedUserIds(userIds);\n                }, onKeyDown: function (e) {\n                    if (displaySuggestedMentionList\n                        && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0\n                        && ((e.key === MessageInputKeys.Enter && ableMention)\n                            || e.key === MessageInputKeys.ArrowUp\n                            || e.key === MessageInputKeys.ArrowDown)) {\n                        setMessageInputEvent(e);\n                        return true;\n                    }\n                    return false;\n                } }))));\n    }\n    return (React__default.createElement(\"div\", { className: classnames('sendbird-msg-hoc sendbird-msg--scroll-ref', isAnimated && 'sendbird-msg-hoc__animated'), \"data-testid\": \"sendbird-message-view\", style: children || renderMessage ? undefined : { marginBottom: '2px' }, \"data-sb-message-id\": message.messageId, \"data-sb-created-at\": message.createdAt, ref: messageScrollRef },\n        hasSeparator\n            && (renderedCustomSeparator || (React__default.createElement(DateSeparator, null,\n                React__default.createElement(Label, { type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, format(message.createdAt, stringSet.DATE_FORMAT__MESSAGE_LIST__DATE_SEPARATOR, {\n                    locale: dateLocale,\n                }))))),\n        renderChildren()));\n};\n\nexport { MessageView as M };\n//# sourceMappingURL=bundle-Dnj0fmAf.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}