{"ast":null,"code":"import { _ as __assign, c as __spreadArray } from '../chunks/bundle-BQi9-O76.js';\nimport React__default, { useRef, useState, useCallback, useEffect } from 'react';\nimport { M as MessageInputKeys, N as NodeTypes } from '../chunks/bundle-0qSTzMXb.js';\nimport { U as USER_MENTION_TEMP_CHAR } from '../chunks/bundle-CveCFQYP.js';\nimport IconButton from './IconButton.js';\nimport Button, { ButtonTypes, ButtonSizes } from './Button.js';\nimport { r as renderToString, s as sanitizeString, n as nodeListToArray, u as usePaste, i as isChannelTypeSupportsMultipleFilesMessage, e as extractTextAndMentions } from '../chunks/bundle-TZQ6dJCG.js';\nimport Icon, { IconTypes, IconColors } from './Icon.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../chunks/bundle-DhKQeIfP.js';\nimport { u as useLocalization } from '../chunks/bundle-cQZ3UZoG.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { K, G as arrayEqual, H as getMimeTypesUIKitAccepts } from '../chunks/bundle-DxTN4_0p.js';\nimport { t as tokenizeMessage, T as TOKEN_TYPES, U as USER_MENTION_PREFIX } from '../chunks/bundle-GUbI4JcD.js';\nimport { c as classnames } from '../chunks/bundle-BgwzpLeQ.js';\nimport { i as isMobileIOS } from '../chunks/bundle-CNWAfTVw.js';\nimport 'dompurify';\nimport '../chunks/bundle-0nQK2G2O.js';\nimport '../chunks/bundle-B6edg1g0.js';\nimport '../chunks/bundle-DhGZA5UP.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport '../withSendbird.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CA85nVxp.js';\n\n/**\n * FIXME:\n * Import this ChannelType enum from @sendbird/chat\n * once MessageInput.spec unit tests can be run \\wo jest <-> ESM issue\n */\nvar ChannelType;\n(function (ChannelType) {\n  ChannelType[\"BASE\"] = \"base\";\n  ChannelType[\"GROUP\"] = \"group\";\n  ChannelType[\"OPEN\"] = \"open\";\n})(ChannelType || (ChannelType = {}));\n/**\n * FIXME: Simplify this in UIKit@v4\n * If customer is using MessageInput inside our modules(ie: Channel, Thread, etc),\n * we should use the config from the module.\n * If customer is using MessageInput outside our modules(ie: custom UI),\n * we expect Channel to be undefined and customer gets control to show/hide file-upload.\n * @param {*} channel GroupChannel | OpenChannel\n * @param {*} config SendBirdStateConfig\n * @returns boolean\n */\nvar checkIfFileUploadEnabled = function (_a) {\n  var channel = _a.channel,\n    config = _a.config;\n  var isEnabled = K(channel === null || channel === void 0 ? void 0 : channel.channelType).with(ChannelType.GROUP, function () {\n    var _a;\n    return (_a = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _a === void 0 ? void 0 : _a.enableDocument;\n  }).with(ChannelType.OPEN, function () {\n    var _a;\n    return (_a = config === null || config === void 0 ? void 0 : config.openChannel) === null || _a === void 0 ? void 0 : _a.enableDocument;\n  }).otherwise(function () {\n    return true;\n  });\n  return isEnabled;\n};\nvar TEXT_FIELD_ID = 'sendbird-message-input-text-field';\nvar LINE_HEIGHT = 76;\nvar DEFAULT_CHAT_VIEW_HEIGHT = 600;\nvar noop = function () {\n  return null;\n};\nvar displayCaret = function (element, position) {\n  var range = document.createRange();\n  var sel = window.getSelection();\n  range.setStart(element.childNodes[0], position);\n  range.collapse(true);\n  sel === null || sel === void 0 ? void 0 : sel.removeAllRanges();\n  sel === null || sel === void 0 ? void 0 : sel.addRange(range);\n  element.focus();\n};\nvar resetInput = function (ref) {\n  if (ref && ref.current) {\n    ref.current.innerHTML = '';\n  }\n};\nvar initialTargetStringInfo = {\n  targetString: '',\n  startNodeIndex: null,\n  startOffsetIndex: null,\n  endNodeIndex: null,\n  endOffsetIndex: null\n};\nvar MessageInput = React__default.forwardRef(function (props, externalRef) {\n  var _a, _b, _c, _d, _e;\n  var channel = props.channel,\n    _f = props.className,\n    className = _f === void 0 ? '' : _f,\n    _g = props.messageFieldId,\n    messageFieldId = _g === void 0 ? '' : _g,\n    _h = props.isEdit,\n    isEdit = _h === void 0 ? false : _h,\n    _j = props.isMobile,\n    isMobile = _j === void 0 ? false : _j,\n    _k = props.isMentionEnabled,\n    isMentionEnabled = _k === void 0 ? false : _k,\n    _l = props.isVoiceMessageEnabled,\n    isVoiceMessageEnabled = _l === void 0 ? true : _l,\n    _m = props.isSelectingMultipleFilesEnabled,\n    isSelectingMultipleFilesEnabled = _m === void 0 ? false : _m,\n    _o = props.disabled,\n    disabled = _o === void 0 ? false : _o,\n    _p = props.message,\n    message = _p === void 0 ? null : _p,\n    _q = props.placeholder,\n    placeholder = _q === void 0 ? '' : _q,\n    _r = props.maxLength,\n    maxLength = _r === void 0 ? 5000 : _r,\n    _s = props.onFileUpload,\n    onFileUpload = _s === void 0 ? noop : _s,\n    _t = props.onSendMessage,\n    onSendMessage = _t === void 0 ? noop : _t,\n    _u = props.onUpdateMessage,\n    onUpdateMessage = _u === void 0 ? noop : _u,\n    _v = props.onCancelEdit,\n    onCancelEdit = _v === void 0 ? noop : _v,\n    _w = props.onStartTyping,\n    onStartTyping = _w === void 0 ? noop : _w,\n    _x = props.channelUrl,\n    channelUrl = _x === void 0 ? '' : _x,\n    _y = props.mentionSelectedUser,\n    mentionSelectedUser = _y === void 0 ? null : _y,\n    _z = props.onUserMentioned,\n    onUserMentioned = _z === void 0 ? noop : _z,\n    _0 = props.onMentionStringChange,\n    onMentionStringChange = _0 === void 0 ? noop : _0,\n    _1 = props.onMentionedUserIdsUpdated,\n    onMentionedUserIdsUpdated = _1 === void 0 ? noop : _1,\n    _2 = props.onVoiceMessageIconClick,\n    onVoiceMessageIconClick = _2 === void 0 ? noop : _2,\n    _3 = props.onKeyUp,\n    onKeyUp = _3 === void 0 ? noop : _3,\n    _4 = props.onKeyDown,\n    onKeyDown = _4 === void 0 ? noop : _4,\n    _5 = props.renderFileUploadIcon,\n    renderFileUploadIcon = _5 === void 0 ? noop : _5,\n    _6 = props.renderVoiceMessageIcon,\n    renderVoiceMessageIcon = _6 === void 0 ? noop : _6,\n    _7 = props.renderSendMessageIcon,\n    renderSendMessageIcon = _7 === void 0 ? noop : _7,\n    _8 = props.setMentionedUsers,\n    setMentionedUsers = _8 === void 0 ? noop : _8,\n    acceptableMimeTypes = props.acceptableMimeTypes;\n  var internalRef = externalRef && 'current' in externalRef ? externalRef : null;\n  var ghostInputRef = useRef(null);\n  var textFieldId = messageFieldId || TEXT_FIELD_ID;\n  var stringSet = useLocalization().stringSet;\n  var config = useSendbirdStateContext().config;\n  var isFileUploadEnabled = checkIfFileUploadEnabled({\n    channel: channel,\n    config: config\n  });\n  var fileInputRef = useRef();\n  var _9 = useState(false),\n    isInput = _9[0],\n    setIsInput = _9[1];\n  var _10 = useState([]),\n    mentionedUserIds = _10[0],\n    setMentionedUserIds = _10[1];\n  var _11 = useState(__assign({}, initialTargetStringInfo)),\n    targetStringInfo = _11[0],\n    setTargetStringInfo = _11[1];\n  var setHeight = useCallback(function () {\n    var elem = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;\n    if (!elem) return;\n    try {\n      var estimatedChatViewHeight = window.document.body.offsetHeight || DEFAULT_CHAT_VIEW_HEIGHT;\n      var MAX_HEIGHT = estimatedChatViewHeight * 0.6;\n      if (elem.scrollHeight >= LINE_HEIGHT) {\n        if (MAX_HEIGHT < elem.scrollHeight) {\n          elem.style.height = 'auto';\n          elem.style.height = \"\".concat(MAX_HEIGHT, \"px\");\n        } else {\n          elem.style.height = '';\n        }\n      }\n    } catch (error) {\n      // error\n    }\n  }, []);\n  // #Edit mode\n  // for easilly initialize input value from outside, but\n  // useEffect(_, [channelUrl]) erase it\n  var initialValue = props === null || props === void 0 ? void 0 : props.value;\n  useEffect(function () {\n    var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;\n    try {\n      if (textField && initialValue) {\n        textField.innerHTML = initialValue;\n        displayCaret(textField, initialValue === null || initialValue === void 0 ? void 0 : initialValue.length);\n      }\n    } catch (_a) {\n      //\n    }\n    setMentionedUserIds([]);\n    setIsInput((textField === null || textField === void 0 ? void 0 : textField.textContent) ? textField.textContent.trim().length > 0 : false);\n    setHeight();\n  }, [initialValue]);\n  // #Mention | Clear input value when channel changes\n  useEffect(function () {\n    if (!isEdit) {\n      setIsInput(false);\n      resetInput(internalRef);\n    }\n  }, [channelUrl]);\n  // #Mention & #Edit | Fill message input values\n  useEffect(function () {\n    var _a, _b;\n    if (isEdit && (message === null || message === void 0 ? void 0 : message.messageId)) {\n      // const textField = document.getElementById(textFieldId);\n      var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;\n      if (isMentionEnabled && (message === null || message === void 0 ? void 0 : message.mentionedUsers) && message.mentionedUsers.length > 0 && (message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate) && message.mentionedMessageTemplate.length > 0) {\n        /* mention enabled */\n        var _c = message.mentionedUsers,\n          mentionedUsers_1 = _c === void 0 ? [] : _c;\n        var tokens = tokenizeMessage({\n          messageText: message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate,\n          mentionedUsers: mentionedUsers_1,\n          includeMarkdown: channel.isGroupChannel() && config.groupChannel.enableMarkdownForUserMessage\n        });\n        if (textField) {\n          textField.innerHTML = tokens.map(function (token) {\n            if (token.type === TOKEN_TYPES.mention) {\n              var mentionedUser = mentionedUsers_1.find(function (user) {\n                return user.userId === token.userId;\n              });\n              var nickname = \"\".concat(USER_MENTION_PREFIX).concat((mentionedUser === null || mentionedUser === void 0 ? void 0 : mentionedUser.nickname) || token.value || stringSet.MENTION_NAME__NO_NAME);\n              return renderToString({\n                userId: token.userId,\n                nickname: nickname\n              });\n            }\n            return sanitizeString(token.value);\n          }).join('');\n        }\n      } else {\n        /* mention disabled */\n        try {\n          if (textField) {\n            textField.innerHTML = (_a = sanitizeString(message === null || message === void 0 ? void 0 : message.message)) !== null && _a !== void 0 ? _a : '';\n          }\n        } catch (_d) {\n          //\n        }\n        setMentionedUserIds([]);\n      }\n      setIsInput((textField === null || textField === void 0 ? void 0 : textField.textContent) ? ((_b = textField === null || textField === void 0 ? void 0 : textField.textContent) === null || _b === void 0 ? void 0 : _b.trim().length) > 0 : false);\n      setHeight();\n    }\n  }, [isEdit, message]);\n  // #Mention | Detect MentionedLabel modified\n  var useMentionedLabelDetection = useCallback(function () {\n    var _a;\n    var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;\n    if (isMentionEnabled && textField) {\n      var newMentionedUserIds = Array.from(textField.getElementsByClassName('sendbird-mention-user-label')).map(\n      // @ts-ignore\n      function (node) {\n        var _a;\n        return (_a = node === null || node === void 0 ? void 0 : node.dataset) === null || _a === void 0 ? void 0 : _a.userid;\n      });\n      if (!arrayEqual(mentionedUserIds, newMentionedUserIds) || newMentionedUserIds.length === 0) {\n        onMentionedUserIdsUpdated(newMentionedUserIds);\n        setMentionedUserIds(newMentionedUserIds);\n      }\n    }\n    setIsInput((textField === null || textField === void 0 ? void 0 : textField.textContent) ? ((_a = textField.textContent) === null || _a === void 0 ? void 0 : _a.trim().length) > 0 : false);\n  }, [targetStringInfo, isMentionEnabled]);\n  // #Mention | Replace selected user nickname to the MentionedUserLabel\n  useEffect(function () {\n    var _a, _b, _c, _d;\n    if (isMentionEnabled && mentionSelectedUser) {\n      var targetString = targetStringInfo.targetString,\n        startNodeIndex = targetStringInfo.startNodeIndex,\n        startOffsetIndex = targetStringInfo.startOffsetIndex,\n        endNodeIndex = targetStringInfo.endNodeIndex,\n        endOffsetIndex = targetStringInfo.endOffsetIndex;\n      var textField_1 = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;\n      if (targetString && startNodeIndex !== null && startOffsetIndex !== null && endOffsetIndex !== null && endNodeIndex !== null && textField_1) {\n        // const textField = document.getElementById(textFieldId);\n        var childNodes = nodeListToArray(textField_1 === null || textField_1 === void 0 ? void 0 : textField_1.childNodes);\n        var startNodeTextContent = (_b = (_a = childNodes[startNodeIndex]) === null || _a === void 0 ? void 0 : _a.textContent) !== null && _b !== void 0 ? _b : '';\n        var frontTextNode = document.createTextNode(startNodeTextContent.slice(0, startOffsetIndex));\n        var endNodeTextContent = (_d = (_c = childNodes[endNodeIndex]) === null || _c === void 0 ? void 0 : _c.textContent) !== null && _d !== void 0 ? _d : '';\n        var backTextNode = endOffsetIndex && document.createTextNode(\"\\u00A0\".concat(endNodeTextContent.slice(endOffsetIndex)));\n        var mentionLabel = renderToString({\n          userId: mentionSelectedUser === null || mentionSelectedUser === void 0 ? void 0 : mentionSelectedUser.userId,\n          nickname: \"\".concat(USER_MENTION_TEMP_CHAR).concat((mentionSelectedUser === null || mentionSelectedUser === void 0 ? void 0 : mentionSelectedUser.nickname) || stringSet.MENTION_NAME__NO_NAME)\n        });\n        var div = document.createElement('div');\n        div.innerHTML = mentionLabel;\n        var newNodes = __spreadArray(__spreadArray(__spreadArray([], childNodes.slice(0, startNodeIndex), true), [frontTextNode, div.childNodes[0], backTextNode], false), childNodes.slice(endNodeIndex + 1), true);\n        if (textField_1) {\n          textField_1.innerHTML = '';\n          newNodes.forEach(function (newNode) {\n            if (newNode) {\n              textField_1.appendChild(newNode);\n            }\n          });\n        }\n        onUserMentioned(mentionSelectedUser);\n        if (window.getSelection || document.getSelection) {\n          // set caret postion\n          var selection = window.getSelection() || document.getSelection();\n          selection === null || selection === void 0 ? void 0 : selection.removeAllRanges();\n          var range = new Range();\n          range.selectNodeContents(textField_1);\n          range.setStart(textField_1.childNodes[startNodeIndex + 2], 1);\n          range.setEnd(textField_1.childNodes[startNodeIndex + 2], 1);\n          range.collapse(false);\n          selection === null || selection === void 0 ? void 0 : selection.addRange(range);\n          textField_1.focus();\n        }\n        setTargetStringInfo(__assign({}, initialTargetStringInfo));\n        setHeight();\n        useMentionedLabelDetection();\n      }\n    }\n  }, [mentionSelectedUser, isMentionEnabled]);\n  // #Mention | Detect mentioning user nickname\n  var useMentionInputDetection = useCallback(function () {\n    var _a, _b;\n    var selection = ((_a = window === null || window === void 0 ? void 0 : window.getSelection) === null || _a === void 0 ? void 0 : _a.call(window)) || ((_b = document === null || document === void 0 ? void 0 : document.getSelection) === null || _b === void 0 ? void 0 : _b.call(document));\n    var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;\n    if ((selection === null || selection === void 0 ? void 0 : selection.anchorNode) === textField) {\n      onMentionStringChange('');\n    }\n    if (isMentionEnabled && textField && selection && selection.anchorNode === selection.focusNode && selection.anchorOffset === selection.focusOffset) {\n      var textStack = '';\n      var startNodeIndex = null;\n      var startOffsetIndex = null;\n      var _loop_1 = function (index) {\n        var currentNode = textField.childNodes[index];\n        if (currentNode.nodeType === NodeTypes.TextNode) {\n          /* text node */\n          var textContent = function () {\n            var _a;\n            if (currentNode === selection.anchorNode) {\n              return (currentNode === null || currentNode === void 0 ? void 0 : currentNode.textContent) ? currentNode === null || currentNode === void 0 ? void 0 : currentNode.textContent.slice(0, selection.anchorOffset) : '';\n            }\n            return (_a = currentNode === null || currentNode === void 0 ? void 0 : currentNode.textContent) !== null && _a !== void 0 ? _a : '';\n          }();\n          if (textStack.length > 0) {\n            textStack += textContent;\n          } else {\n            var charLastIndex = textContent.lastIndexOf(USER_MENTION_TEMP_CHAR);\n            for (var i = charLastIndex - 1; i > -1; i -= 1) {\n              if (textContent[i] === USER_MENTION_TEMP_CHAR) {\n                charLastIndex = i;\n              } else {\n                break;\n              }\n            }\n            if (charLastIndex > -1) {\n              textStack = textContent;\n              startNodeIndex = index;\n              startOffsetIndex = charLastIndex;\n            }\n          }\n        } else {\n          /* other nodes */\n          textStack = '';\n          startNodeIndex = null;\n          startOffsetIndex = null;\n        }\n        if (currentNode === selection.anchorNode) {\n          /**\n           * targetString could be ''\n           * startNodeIndex and startOffsetIndex could be null\n           */\n          var targetString = textStack && startOffsetIndex !== null ? textStack.slice(startOffsetIndex) : ''; // include template character\n          setTargetStringInfo({\n            targetString: targetString,\n            startNodeIndex: startNodeIndex,\n            startOffsetIndex: startOffsetIndex,\n            endNodeIndex: index,\n            endOffsetIndex: selection.anchorOffset\n          });\n          onMentionStringChange(targetString);\n          return {\n            value: void 0\n          };\n        }\n      };\n      for (var index = 0; index < textField.childNodes.length; index += 1) {\n        var state_1 = _loop_1(index);\n        if (typeof state_1 === \"object\") return state_1.value;\n      }\n    }\n  }, [isMentionEnabled]);\n  var sendMessage = function () {\n    var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;\n    if (!isEdit && (textField === null || textField === void 0 ? void 0 : textField.textContent)) {\n      var _a = extractTextAndMentions(textField.childNodes),\n        messageText = _a.messageText,\n        mentionTemplate = _a.mentionTemplate;\n      var params = {\n        message: messageText,\n        mentionTemplate: mentionTemplate\n      };\n      onSendMessage(params);\n      resetInput(internalRef);\n      /**\n       * Note: contentEditable does not work as expected in mobile WebKit (Safari).\n       * @see https://github.com/sendbird/sendbird-uikit-react/pull/1108\n       */\n      if (isMobileIOS(navigator.userAgent)) {\n        if (ghostInputRef.current) ghostInputRef.current.focus();\n        requestAnimationFrame(function () {\n          return textField.focus();\n        });\n      } else {\n        // important: keeps the keyboard open -> must add test on refactor\n        textField.focus();\n      }\n      setIsInput(false);\n      setHeight();\n    }\n  };\n  var isEditDisabled = !((_b = (_a = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.trim());\n  var editMessage = function () {\n    var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;\n    var messageId = message === null || message === void 0 ? void 0 : message.messageId;\n    if (isEdit && messageId && textField) {\n      var _a = extractTextAndMentions(textField.childNodes),\n        messageText = _a.messageText,\n        mentionTemplate = _a.mentionTemplate;\n      var params = {\n        messageId: messageId,\n        message: messageText,\n        mentionTemplate: mentionTemplate\n      };\n      onUpdateMessage(params);\n      resetInput(internalRef);\n    }\n  };\n  var onPaste = usePaste({\n    ref: internalRef,\n    setMentionedUsers: setMentionedUsers,\n    channel: channel,\n    setIsInput: setIsInput,\n    setHeight: setHeight\n  });\n  return React__default.createElement(\"form\", {\n    className: classnames.apply(void 0, __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], false), [isEdit && 'sendbird-message-input__edit', disabled && 'sendbird-message-input-form__disabled'], false))\n  }, React__default.createElement(\"div\", {\n    className: classnames('sendbird-message-input', disabled && 'sendbird-message-input__disabled'),\n    \"data-testid\": \"sendbird-message-input\"\n  }, isMobileIOS(navigator.userAgent) && React__default.createElement(\"input\", {\n    id: 'ghost-input-reset-ime-cjk',\n    ref: ghostInputRef,\n    style: {\n      opacity: 0,\n      padding: 0,\n      margin: 0,\n      height: 0,\n      border: 'none',\n      position: 'absolute',\n      top: -9999\n    },\n    defaultValue: '_'\n  }), React__default.createElement(\"div\", {\n    id: \"\".concat(textFieldId).concat(isEdit ? message === null || message === void 0 ? void 0 : message.messageId : ''),\n    className: \"sendbird-message-input--textarea \".concat(textFieldId),\n    contentEditable: !disabled,\n    role: \"textbox\",\n    \"aria-label\": \"Text Input\",\n    ref: externalRef,\n    // @ts-ignore\n    disabled: disabled,\n    maxLength: maxLength,\n    onKeyDown: function (e) {\n      var _a, _b, _c, _d;\n      var preventEvent = onKeyDown(e);\n      if (preventEvent) {\n        e.preventDefault();\n      } else {\n        if (!e.shiftKey && e.key === MessageInputKeys.Enter && !isMobile && ((_a = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current) === null || _a === void 0 ? void 0 : _a.textContent) && internalRef.current.textContent.trim().length > 0 && ((_b = e === null || e === void 0 ? void 0 : e.nativeEvent) === null || _b === void 0 ? void 0 : _b.isComposing) !== true\n        /**\n         * NOTE: What isComposing does?\n         * Check if the user has finished composing characters\n         * (e.g., for languages like Korean, Japanese, where characters are composed from multiple keystrokes)\n         * Prevents executing the code while the user is still composing characters.\n         */) {\n          e.preventDefault();\n          sendMessage();\n        }\n        if (e.key === MessageInputKeys.Backspace && ((_d = (_c = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current) === null || _c === void 0 ? void 0 : _c.childNodes) === null || _d === void 0 ? void 0 : _d.length) === 2 && !internalRef.current.childNodes[0].textContent && internalRef.current.childNodes[1].nodeType === NodeTypes.ElementNode) {\n          internalRef.current.removeChild(internalRef.current.childNodes[1]);\n        }\n      }\n    },\n    onKeyUp: function (e) {\n      var preventEvent = onKeyUp(e);\n      if (preventEvent) {\n        e.preventDefault();\n      } else {\n        useMentionInputDetection();\n      }\n    },\n    onClick: function () {\n      useMentionInputDetection();\n    },\n    onInput: function () {\n      var _a;\n      setHeight();\n      onStartTyping();\n      setIsInput(((_a = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current) === null || _a === void 0 ? void 0 : _a.textContent) ? internalRef.current.textContent.trim().length > 0 : false);\n      useMentionedLabelDetection();\n    },\n    onPaste: onPaste\n  }), ((_e = (_d = (_c = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current) === null || _c === void 0 ? void 0 : _c.textContent) === null || _d === void 0 ? void 0 : _d.length) !== null && _e !== void 0 ? _e : 0) === 0 && React__default.createElement(Label, {\n    className: \"sendbird-message-input--placeholder\",\n    type: LabelTypography.BODY_1,\n    color: disabled ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_3\n  }, placeholder || stringSet.MESSAGE_INPUT__PLACE_HOLDER), !isEdit && isInput && React__default.createElement(IconButton, {\n    className: \"sendbird-message-input--send\",\n    height: \"32px\",\n    width: \"32px\",\n    onClick: function () {\n      return sendMessage();\n    },\n    testID: \"sendbird-message-input-send-button\"\n  }, (renderSendMessageIcon === null || renderSendMessageIcon === void 0 ? void 0 : renderSendMessageIcon()) || React__default.createElement(Icon, {\n    type: IconTypes.SEND,\n    fillColor: disabled ? IconColors.ON_BACKGROUND_4 : IconColors.PRIMARY,\n    width: \"20px\",\n    height: \"20px\"\n  })), !isEdit && !isInput && ((renderFileUploadIcon === null || renderFileUploadIcon === void 0 ? void 0 : renderFileUploadIcon()\n  // UIKit Dashboard configuration should have lower priority than\n  // renderFileUploadIcon which is set in code level\n  ) || isFileUploadEnabled && React__default.createElement(IconButton, {\n    className: classnames('sendbird-message-input--attach', isVoiceMessageEnabled && 'is-voice-message-enabled'),\n    height: \"32px\",\n    width: \"32px\",\n    onClick: function () {\n      var _a, _b;\n      // todo: clear previous input\n      (_b = (_a = fileInputRef === null || fileInputRef === void 0 ? void 0 : fileInputRef.current) === null || _a === void 0 ? void 0 : _a.click) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n  }, React__default.createElement(Icon, {\n    type: IconTypes.ATTACH,\n    fillColor: disabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT_INVERSE,\n    width: \"20px\",\n    height: \"20px\"\n  }), React__default.createElement(\"input\", {\n    className: \"sendbird-message-input--attach-input\",\n    type: \"file\",\n    ref: fileInputRef,\n    // It will affect to <Channel /> and <Thread />\n    onChange: function (event) {\n      var files = event.currentTarget.files;\n      if (files) {\n        onFileUpload(files && files.length === 1 ? [files[0]] : Array.from(files));\n      }\n      event.target.value = '';\n    },\n    accept: getMimeTypesUIKitAccepts(acceptableMimeTypes),\n    multiple: isSelectingMultipleFilesEnabled && isChannelTypeSupportsMultipleFilesMessage(channel)\n  }))), isVoiceMessageEnabled && !isEdit && !isInput && React__default.createElement(IconButton, {\n    className: \"sendbird-message-input--voice-message\",\n    width: \"32px\",\n    height: \"32px\",\n    onClick: onVoiceMessageIconClick\n  }, (renderVoiceMessageIcon === null || renderVoiceMessageIcon === void 0 ? void 0 : renderVoiceMessageIcon()) || React__default.createElement(Icon, {\n    type: IconTypes.AUDIO_ON_LINED,\n    fillColor: disabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT_INVERSE,\n    width: \"20px\",\n    height: \"20px\"\n  }))), isEdit && React__default.createElement(\"div\", {\n    className: \"sendbird-message-input--edit-action\",\n    \"data-testid\": \"sendbird-message-input--edit-action\"\n  }, React__default.createElement(Button, {\n    className: \"sendbird-message-input--edit-action__cancel\",\n    type: ButtonTypes.SECONDARY,\n    size: ButtonSizes.SMALL,\n    onClick: onCancelEdit\n  }, stringSet.BUTTON__CANCEL), React__default.createElement(Button, {\n    className: \"sendbird-message-input--edit-action__save\",\n    type: ButtonTypes.PRIMARY,\n    size: ButtonSizes.SMALL,\n    disabled: isEditDisabled,\n    onClick: function () {\n      return editMessage();\n    }\n  }, stringSet.BUTTON__SAVE)));\n});\nexport { MessageInput as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { _ as __assign, c as __spreadArray } from '../chunks/bundle-BQi9-O76.js';\nimport React__default, { useRef, useState, useCallback, useEffect } from 'react';\nimport { M as MessageInputKeys, N as NodeTypes } from '../chunks/bundle-0qSTzMXb.js';\nimport { U as USER_MENTION_TEMP_CHAR } from '../chunks/bundle-CveCFQYP.js';\nimport IconButton from './IconButton.js';\nimport Button, { ButtonTypes, ButtonSizes } from './Button.js';\nimport { r as renderToString, s as sanitizeString, n as nodeListToArray, u as usePaste, i as isChannelTypeSupportsMultipleFilesMessage, e as extractTextAndMentions } from '../chunks/bundle-TZQ6dJCG.js';\nimport Icon, { IconTypes, IconColors } from './Icon.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../chunks/bundle-DhKQeIfP.js';\nimport { u as useLocalization } from '../chunks/bundle-cQZ3UZoG.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { K, G as arrayEqual, H as getMimeTypesUIKitAccepts } from '../chunks/bundle-DxTN4_0p.js';\nimport { t as tokenizeMessage, T as TOKEN_TYPES, U as USER_MENTION_PREFIX } from '../chunks/bundle-GUbI4JcD.js';\nimport { c as classnames } from '../chunks/bundle-BgwzpLeQ.js';\nimport { i as isMobileIOS } from '../chunks/bundle-CNWAfTVw.js';\nimport 'dompurify';\nimport '../chunks/bundle-0nQK2G2O.js';\nimport '../chunks/bundle-B6edg1g0.js';\nimport '../chunks/bundle-DhGZA5UP.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport '../withSendbird.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CA85nVxp.js';\n\n/**\n * FIXME:\n * Import this ChannelType enum from @sendbird/chat\n * once MessageInput.spec unit tests can be run \\wo jest <-> ESM issue\n */\nvar ChannelType;\n(function (ChannelType) {\n    ChannelType[\"BASE\"] = \"base\";\n    ChannelType[\"GROUP\"] = \"group\";\n    ChannelType[\"OPEN\"] = \"open\";\n})(ChannelType || (ChannelType = {}));\n/**\n * FIXME: Simplify this in UIKit@v4\n * If customer is using MessageInput inside our modules(ie: Channel, Thread, etc),\n * we should use the config from the module.\n * If customer is using MessageInput outside our modules(ie: custom UI),\n * we expect Channel to be undefined and customer gets control to show/hide file-upload.\n * @param {*} channel GroupChannel | OpenChannel\n * @param {*} config SendBirdStateConfig\n * @returns boolean\n */\nvar checkIfFileUploadEnabled = function (_a) {\n    var channel = _a.channel, config = _a.config;\n    var isEnabled = K(channel === null || channel === void 0 ? void 0 : channel.channelType)\n        .with(ChannelType.GROUP, function () { var _a; return (_a = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _a === void 0 ? void 0 : _a.enableDocument; })\n        .with(ChannelType.OPEN, function () { var _a; return (_a = config === null || config === void 0 ? void 0 : config.openChannel) === null || _a === void 0 ? void 0 : _a.enableDocument; })\n        .otherwise(function () { return true; });\n    return isEnabled;\n};\n\nvar TEXT_FIELD_ID = 'sendbird-message-input-text-field';\nvar LINE_HEIGHT = 76;\nvar DEFAULT_CHAT_VIEW_HEIGHT = 600;\nvar noop = function () {\n    return null;\n};\nvar displayCaret = function (element, position) {\n    var range = document.createRange();\n    var sel = window.getSelection();\n    range.setStart(element.childNodes[0], position);\n    range.collapse(true);\n    sel === null || sel === void 0 ? void 0 : sel.removeAllRanges();\n    sel === null || sel === void 0 ? void 0 : sel.addRange(range);\n    element.focus();\n};\nvar resetInput = function (ref) {\n    if (ref && ref.current) {\n        ref.current.innerHTML = '';\n    }\n};\nvar initialTargetStringInfo = {\n    targetString: '',\n    startNodeIndex: null,\n    startOffsetIndex: null,\n    endNodeIndex: null,\n    endOffsetIndex: null,\n};\nvar MessageInput = React__default.forwardRef(function (props, externalRef) {\n    var _a, _b, _c, _d, _e;\n    var channel = props.channel, _f = props.className, className = _f === void 0 ? '' : _f, _g = props.messageFieldId, messageFieldId = _g === void 0 ? '' : _g, _h = props.isEdit, isEdit = _h === void 0 ? false : _h, _j = props.isMobile, isMobile = _j === void 0 ? false : _j, _k = props.isMentionEnabled, isMentionEnabled = _k === void 0 ? false : _k, _l = props.isVoiceMessageEnabled, isVoiceMessageEnabled = _l === void 0 ? true : _l, _m = props.isSelectingMultipleFilesEnabled, isSelectingMultipleFilesEnabled = _m === void 0 ? false : _m, _o = props.disabled, disabled = _o === void 0 ? false : _o, _p = props.message, message = _p === void 0 ? null : _p, _q = props.placeholder, placeholder = _q === void 0 ? '' : _q, _r = props.maxLength, maxLength = _r === void 0 ? 5000 : _r, _s = props.onFileUpload, onFileUpload = _s === void 0 ? noop : _s, _t = props.onSendMessage, onSendMessage = _t === void 0 ? noop : _t, _u = props.onUpdateMessage, onUpdateMessage = _u === void 0 ? noop : _u, _v = props.onCancelEdit, onCancelEdit = _v === void 0 ? noop : _v, _w = props.onStartTyping, onStartTyping = _w === void 0 ? noop : _w, _x = props.channelUrl, channelUrl = _x === void 0 ? '' : _x, _y = props.mentionSelectedUser, mentionSelectedUser = _y === void 0 ? null : _y, _z = props.onUserMentioned, onUserMentioned = _z === void 0 ? noop : _z, _0 = props.onMentionStringChange, onMentionStringChange = _0 === void 0 ? noop : _0, _1 = props.onMentionedUserIdsUpdated, onMentionedUserIdsUpdated = _1 === void 0 ? noop : _1, _2 = props.onVoiceMessageIconClick, onVoiceMessageIconClick = _2 === void 0 ? noop : _2, _3 = props.onKeyUp, onKeyUp = _3 === void 0 ? noop : _3, _4 = props.onKeyDown, onKeyDown = _4 === void 0 ? noop : _4, _5 = props.renderFileUploadIcon, renderFileUploadIcon = _5 === void 0 ? noop : _5, _6 = props.renderVoiceMessageIcon, renderVoiceMessageIcon = _6 === void 0 ? noop : _6, _7 = props.renderSendMessageIcon, renderSendMessageIcon = _7 === void 0 ? noop : _7, _8 = props.setMentionedUsers, setMentionedUsers = _8 === void 0 ? noop : _8, acceptableMimeTypes = props.acceptableMimeTypes;\n    var internalRef = (externalRef && 'current' in externalRef) ? externalRef : null;\n    var ghostInputRef = useRef(null);\n    var textFieldId = messageFieldId || TEXT_FIELD_ID;\n    var stringSet = useLocalization().stringSet;\n    var config = useSendbirdStateContext().config;\n    var isFileUploadEnabled = checkIfFileUploadEnabled({\n        channel: channel,\n        config: config,\n    });\n    var fileInputRef = useRef();\n    var _9 = useState(false), isInput = _9[0], setIsInput = _9[1];\n    var _10 = useState([]), mentionedUserIds = _10[0], setMentionedUserIds = _10[1];\n    var _11 = useState(__assign({}, initialTargetStringInfo)), targetStringInfo = _11[0], setTargetStringInfo = _11[1];\n    var setHeight = useCallback(function () {\n        var elem = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;\n        if (!elem)\n            return;\n        try {\n            var estimatedChatViewHeight = window.document.body.offsetHeight || DEFAULT_CHAT_VIEW_HEIGHT;\n            var MAX_HEIGHT = estimatedChatViewHeight * 0.6;\n            if (elem.scrollHeight >= LINE_HEIGHT) {\n                if (MAX_HEIGHT < elem.scrollHeight) {\n                    elem.style.height = 'auto';\n                    elem.style.height = \"\".concat(MAX_HEIGHT, \"px\");\n                }\n                else {\n                    elem.style.height = '';\n                }\n            }\n        }\n        catch (error) {\n            // error\n        }\n    }, []);\n    // #Edit mode\n    // for easilly initialize input value from outside, but\n    // useEffect(_, [channelUrl]) erase it\n    var initialValue = props === null || props === void 0 ? void 0 : props.value;\n    useEffect(function () {\n        var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;\n        try {\n            if (textField && initialValue) {\n                textField.innerHTML = initialValue;\n                displayCaret(textField, initialValue === null || initialValue === void 0 ? void 0 : initialValue.length);\n            }\n        }\n        catch (_a) {\n            //\n        }\n        setMentionedUserIds([]);\n        setIsInput((textField === null || textField === void 0 ? void 0 : textField.textContent) ? textField.textContent.trim().length > 0 : false);\n        setHeight();\n    }, [initialValue]);\n    // #Mention | Clear input value when channel changes\n    useEffect(function () {\n        if (!isEdit) {\n            setIsInput(false);\n            resetInput(internalRef);\n        }\n    }, [channelUrl]);\n    // #Mention & #Edit | Fill message input values\n    useEffect(function () {\n        var _a, _b;\n        if (isEdit && (message === null || message === void 0 ? void 0 : message.messageId)) {\n            // const textField = document.getElementById(textFieldId);\n            var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;\n            if (isMentionEnabled\n                && (message === null || message === void 0 ? void 0 : message.mentionedUsers)\n                && message.mentionedUsers.length > 0\n                && (message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate)\n                && message.mentionedMessageTemplate.length > 0) {\n                /* mention enabled */\n                var _c = message.mentionedUsers, mentionedUsers_1 = _c === void 0 ? [] : _c;\n                var tokens = tokenizeMessage({\n                    messageText: message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate,\n                    mentionedUsers: mentionedUsers_1,\n                    includeMarkdown: channel.isGroupChannel() && config.groupChannel.enableMarkdownForUserMessage,\n                });\n                if (textField) {\n                    textField.innerHTML = tokens\n                        .map(function (token) {\n                        if (token.type === TOKEN_TYPES.mention) {\n                            var mentionedUser = mentionedUsers_1.find(function (user) { return user.userId === token.userId; });\n                            var nickname = \"\".concat(USER_MENTION_PREFIX).concat((mentionedUser === null || mentionedUser === void 0 ? void 0 : mentionedUser.nickname) || token.value || stringSet.MENTION_NAME__NO_NAME);\n                            return renderToString({\n                                userId: token.userId,\n                                nickname: nickname,\n                            });\n                        }\n                        return sanitizeString(token.value);\n                    })\n                        .join('');\n                }\n            }\n            else {\n                /* mention disabled */\n                try {\n                    if (textField) {\n                        textField.innerHTML = (_a = sanitizeString(message === null || message === void 0 ? void 0 : message.message)) !== null && _a !== void 0 ? _a : '';\n                    }\n                }\n                catch (_d) {\n                    //\n                }\n                setMentionedUserIds([]);\n            }\n            setIsInput((textField === null || textField === void 0 ? void 0 : textField.textContent) ? ((_b = textField === null || textField === void 0 ? void 0 : textField.textContent) === null || _b === void 0 ? void 0 : _b.trim().length) > 0 : false);\n            setHeight();\n        }\n    }, [isEdit, message]);\n    // #Mention | Detect MentionedLabel modified\n    var useMentionedLabelDetection = useCallback(function () {\n        var _a;\n        var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;\n        if (isMentionEnabled && textField) {\n            var newMentionedUserIds = Array.from(textField.getElementsByClassName('sendbird-mention-user-label')).map(\n            // @ts-ignore\n            function (node) { var _a; return (_a = node === null || node === void 0 ? void 0 : node.dataset) === null || _a === void 0 ? void 0 : _a.userid; });\n            if (!arrayEqual(mentionedUserIds, newMentionedUserIds) || newMentionedUserIds.length === 0) {\n                onMentionedUserIdsUpdated(newMentionedUserIds);\n                setMentionedUserIds(newMentionedUserIds);\n            }\n        }\n        setIsInput((textField === null || textField === void 0 ? void 0 : textField.textContent) ? ((_a = textField.textContent) === null || _a === void 0 ? void 0 : _a.trim().length) > 0 : false);\n    }, [targetStringInfo, isMentionEnabled]);\n    // #Mention | Replace selected user nickname to the MentionedUserLabel\n    useEffect(function () {\n        var _a, _b, _c, _d;\n        if (isMentionEnabled && mentionSelectedUser) {\n            var targetString = targetStringInfo.targetString, startNodeIndex = targetStringInfo.startNodeIndex, startOffsetIndex = targetStringInfo.startOffsetIndex, endNodeIndex = targetStringInfo.endNodeIndex, endOffsetIndex = targetStringInfo.endOffsetIndex;\n            var textField_1 = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;\n            if (targetString && startNodeIndex !== null && startOffsetIndex !== null && endOffsetIndex !== null && endNodeIndex !== null && textField_1) {\n                // const textField = document.getElementById(textFieldId);\n                var childNodes = nodeListToArray(textField_1 === null || textField_1 === void 0 ? void 0 : textField_1.childNodes);\n                var startNodeTextContent = (_b = (_a = childNodes[startNodeIndex]) === null || _a === void 0 ? void 0 : _a.textContent) !== null && _b !== void 0 ? _b : '';\n                var frontTextNode = document.createTextNode(startNodeTextContent.slice(0, startOffsetIndex));\n                var endNodeTextContent = (_d = (_c = childNodes[endNodeIndex]) === null || _c === void 0 ? void 0 : _c.textContent) !== null && _d !== void 0 ? _d : '';\n                var backTextNode = endOffsetIndex && document.createTextNode(\"\\u00A0\".concat(endNodeTextContent.slice(endOffsetIndex)));\n                var mentionLabel = renderToString({\n                    userId: mentionSelectedUser === null || mentionSelectedUser === void 0 ? void 0 : mentionSelectedUser.userId,\n                    nickname: \"\".concat(USER_MENTION_TEMP_CHAR).concat((mentionSelectedUser === null || mentionSelectedUser === void 0 ? void 0 : mentionSelectedUser.nickname) || stringSet.MENTION_NAME__NO_NAME),\n                });\n                var div = document.createElement('div');\n                div.innerHTML = mentionLabel;\n                var newNodes = __spreadArray(__spreadArray(__spreadArray([], childNodes.slice(0, startNodeIndex), true), [\n                    frontTextNode,\n                    div.childNodes[0],\n                    backTextNode\n                ], false), childNodes.slice(endNodeIndex + 1), true);\n                if (textField_1) {\n                    textField_1.innerHTML = '';\n                    newNodes.forEach(function (newNode) {\n                        if (newNode) {\n                            textField_1.appendChild(newNode);\n                        }\n                    });\n                }\n                onUserMentioned(mentionSelectedUser);\n                if (window.getSelection || document.getSelection) {\n                    // set caret postion\n                    var selection = window.getSelection() || document.getSelection();\n                    selection === null || selection === void 0 ? void 0 : selection.removeAllRanges();\n                    var range = new Range();\n                    range.selectNodeContents(textField_1);\n                    range.setStart(textField_1.childNodes[startNodeIndex + 2], 1);\n                    range.setEnd(textField_1.childNodes[startNodeIndex + 2], 1);\n                    range.collapse(false);\n                    selection === null || selection === void 0 ? void 0 : selection.addRange(range);\n                    textField_1.focus();\n                }\n                setTargetStringInfo(__assign({}, initialTargetStringInfo));\n                setHeight();\n                useMentionedLabelDetection();\n            }\n        }\n    }, [mentionSelectedUser, isMentionEnabled]);\n    // #Mention | Detect mentioning user nickname\n    var useMentionInputDetection = useCallback(function () {\n        var _a, _b;\n        var selection = ((_a = window === null || window === void 0 ? void 0 : window.getSelection) === null || _a === void 0 ? void 0 : _a.call(window)) || ((_b = document === null || document === void 0 ? void 0 : document.getSelection) === null || _b === void 0 ? void 0 : _b.call(document));\n        var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;\n        if ((selection === null || selection === void 0 ? void 0 : selection.anchorNode) === textField) {\n            onMentionStringChange('');\n        }\n        if (isMentionEnabled\n            && textField\n            && selection\n            && selection.anchorNode === selection.focusNode\n            && selection.anchorOffset === selection.focusOffset) {\n            var textStack = '';\n            var startNodeIndex = null;\n            var startOffsetIndex = null;\n            var _loop_1 = function (index) {\n                var currentNode = textField.childNodes[index];\n                if (currentNode.nodeType === NodeTypes.TextNode) {\n                    /* text node */\n                    var textContent = (function () {\n                        var _a;\n                        if (currentNode === selection.anchorNode) {\n                            return (currentNode === null || currentNode === void 0 ? void 0 : currentNode.textContent) ? currentNode === null || currentNode === void 0 ? void 0 : currentNode.textContent.slice(0, selection.anchorOffset) : '';\n                        }\n                        return (_a = currentNode === null || currentNode === void 0 ? void 0 : currentNode.textContent) !== null && _a !== void 0 ? _a : '';\n                    })();\n                    if (textStack.length > 0) {\n                        textStack += textContent;\n                    }\n                    else {\n                        var charLastIndex = textContent.lastIndexOf(USER_MENTION_TEMP_CHAR);\n                        for (var i = charLastIndex - 1; i > -1; i -= 1) {\n                            if (textContent[i] === USER_MENTION_TEMP_CHAR) {\n                                charLastIndex = i;\n                            }\n                            else {\n                                break;\n                            }\n                        }\n                        if (charLastIndex > -1) {\n                            textStack = textContent;\n                            startNodeIndex = index;\n                            startOffsetIndex = charLastIndex;\n                        }\n                    }\n                }\n                else {\n                    /* other nodes */\n                    textStack = '';\n                    startNodeIndex = null;\n                    startOffsetIndex = null;\n                }\n                if (currentNode === selection.anchorNode) {\n                    /**\n                     * targetString could be ''\n                     * startNodeIndex and startOffsetIndex could be null\n                     */\n                    var targetString = textStack && startOffsetIndex !== null ? textStack.slice(startOffsetIndex) : ''; // include template character\n                    setTargetStringInfo({\n                        targetString: targetString,\n                        startNodeIndex: startNodeIndex,\n                        startOffsetIndex: startOffsetIndex,\n                        endNodeIndex: index,\n                        endOffsetIndex: selection.anchorOffset,\n                    });\n                    onMentionStringChange(targetString);\n                    return { value: void 0 };\n                }\n            };\n            for (var index = 0; index < textField.childNodes.length; index += 1) {\n                var state_1 = _loop_1(index);\n                if (typeof state_1 === \"object\")\n                    return state_1.value;\n            }\n        }\n    }, [isMentionEnabled]);\n    var sendMessage = function () {\n        var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;\n        if (!isEdit && (textField === null || textField === void 0 ? void 0 : textField.textContent)) {\n            var _a = extractTextAndMentions(textField.childNodes), messageText = _a.messageText, mentionTemplate = _a.mentionTemplate;\n            var params = { message: messageText, mentionTemplate: mentionTemplate };\n            onSendMessage(params);\n            resetInput(internalRef);\n            /**\n             * Note: contentEditable does not work as expected in mobile WebKit (Safari).\n             * @see https://github.com/sendbird/sendbird-uikit-react/pull/1108\n             */\n            if (isMobileIOS(navigator.userAgent)) {\n                if (ghostInputRef.current)\n                    ghostInputRef.current.focus();\n                requestAnimationFrame(function () { return textField.focus(); });\n            }\n            else {\n                // important: keeps the keyboard open -> must add test on refactor\n                textField.focus();\n            }\n            setIsInput(false);\n            setHeight();\n        }\n    };\n    var isEditDisabled = !((_b = (_a = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.trim());\n    var editMessage = function () {\n        var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;\n        var messageId = message === null || message === void 0 ? void 0 : message.messageId;\n        if (isEdit && messageId && textField) {\n            var _a = extractTextAndMentions(textField.childNodes), messageText = _a.messageText, mentionTemplate = _a.mentionTemplate;\n            var params = { messageId: messageId, message: messageText, mentionTemplate: mentionTemplate };\n            onUpdateMessage(params);\n            resetInput(internalRef);\n        }\n    };\n    var onPaste = usePaste({\n        ref: internalRef,\n        setMentionedUsers: setMentionedUsers,\n        channel: channel,\n        setIsInput: setIsInput,\n        setHeight: setHeight,\n    });\n    return (React__default.createElement(\"form\", { className: classnames.apply(void 0, __spreadArray(__spreadArray([], (Array.isArray(className) ? className : [className]), false), [isEdit && 'sendbird-message-input__edit',\n            disabled && 'sendbird-message-input-form__disabled'], false)) },\n        React__default.createElement(\"div\", { className: classnames('sendbird-message-input', disabled && 'sendbird-message-input__disabled'), \"data-testid\": \"sendbird-message-input\" },\n            isMobileIOS(navigator.userAgent) && (React__default.createElement(\"input\", { id: 'ghost-input-reset-ime-cjk', ref: ghostInputRef, style: { opacity: 0, padding: 0, margin: 0, height: 0, border: 'none', position: 'absolute', top: -9999 }, defaultValue: '_' })),\n            React__default.createElement(\"div\", { id: \"\".concat(textFieldId).concat(isEdit ? message === null || message === void 0 ? void 0 : message.messageId : ''), className: \"sendbird-message-input--textarea \".concat(textFieldId), contentEditable: !disabled, role: \"textbox\", \"aria-label\": \"Text Input\", ref: externalRef, \n                // @ts-ignore\n                disabled: disabled, maxLength: maxLength, onKeyDown: function (e) {\n                    var _a, _b, _c, _d;\n                    var preventEvent = onKeyDown(e);\n                    if (preventEvent) {\n                        e.preventDefault();\n                    }\n                    else {\n                        if (!e.shiftKey\n                            && e.key === MessageInputKeys.Enter\n                            && !isMobile\n                            && ((_a = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current) === null || _a === void 0 ? void 0 : _a.textContent)\n                            && internalRef.current.textContent.trim().length > 0\n                            && ((_b = e === null || e === void 0 ? void 0 : e.nativeEvent) === null || _b === void 0 ? void 0 : _b.isComposing) !== true\n                        /**\n                         * NOTE: What isComposing does?\n                         * Check if the user has finished composing characters\n                         * (e.g., for languages like Korean, Japanese, where characters are composed from multiple keystrokes)\n                         * Prevents executing the code while the user is still composing characters.\n                         */\n                        ) {\n                            e.preventDefault();\n                            sendMessage();\n                        }\n                        if (e.key === MessageInputKeys.Backspace\n                            && ((_d = (_c = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current) === null || _c === void 0 ? void 0 : _c.childNodes) === null || _d === void 0 ? void 0 : _d.length) === 2\n                            && !internalRef.current.childNodes[0].textContent\n                            && internalRef.current.childNodes[1].nodeType === NodeTypes.ElementNode) {\n                            internalRef.current.removeChild(internalRef.current.childNodes[1]);\n                        }\n                    }\n                }, onKeyUp: function (e) {\n                    var preventEvent = onKeyUp(e);\n                    if (preventEvent) {\n                        e.preventDefault();\n                    }\n                    else {\n                        useMentionInputDetection();\n                    }\n                }, onClick: function () {\n                    useMentionInputDetection();\n                }, onInput: function () {\n                    var _a;\n                    setHeight();\n                    onStartTyping();\n                    setIsInput(((_a = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current) === null || _a === void 0 ? void 0 : _a.textContent) ? internalRef.current.textContent.trim().length > 0 : false);\n                    useMentionedLabelDetection();\n                }, onPaste: onPaste }),\n            ((_e = (_d = (_c = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current) === null || _c === void 0 ? void 0 : _c.textContent) === null || _d === void 0 ? void 0 : _d.length) !== null && _e !== void 0 ? _e : 0) === 0 && (React__default.createElement(Label, { className: \"sendbird-message-input--placeholder\", type: LabelTypography.BODY_1, color: disabled ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_3 }, placeholder || stringSet.MESSAGE_INPUT__PLACE_HOLDER)),\n            !isEdit && isInput && (React__default.createElement(IconButton, { className: \"sendbird-message-input--send\", height: \"32px\", width: \"32px\", onClick: function () { return sendMessage(); }, testID: \"sendbird-message-input-send-button\" }, (renderSendMessageIcon === null || renderSendMessageIcon === void 0 ? void 0 : renderSendMessageIcon()) || (React__default.createElement(Icon, { type: IconTypes.SEND, fillColor: disabled ? IconColors.ON_BACKGROUND_4 : IconColors.PRIMARY, width: \"20px\", height: \"20px\" })))),\n            !isEdit\n                && !isInput\n                && ((renderFileUploadIcon === null || renderFileUploadIcon === void 0 ? void 0 : renderFileUploadIcon())\n                    // UIKit Dashboard configuration should have lower priority than\n                    // renderFileUploadIcon which is set in code level\n                    || (isFileUploadEnabled && (React__default.createElement(IconButton, { className: classnames('sendbird-message-input--attach', isVoiceMessageEnabled && 'is-voice-message-enabled'), height: \"32px\", width: \"32px\", onClick: function () {\n                            var _a, _b;\n                            // todo: clear previous input\n                            (_b = (_a = fileInputRef === null || fileInputRef === void 0 ? void 0 : fileInputRef.current) === null || _a === void 0 ? void 0 : _a.click) === null || _b === void 0 ? void 0 : _b.call(_a);\n                        } },\n                        React__default.createElement(Icon, { type: IconTypes.ATTACH, fillColor: disabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT_INVERSE, width: \"20px\", height: \"20px\" }),\n                        React__default.createElement(\"input\", { className: \"sendbird-message-input--attach-input\", type: \"file\", ref: fileInputRef, \n                            // It will affect to <Channel /> and <Thread />\n                            onChange: function (event) {\n                                var files = event.currentTarget.files;\n                                if (files) {\n                                    onFileUpload(files && files.length === 1 ? [files[0]] : Array.from(files));\n                                }\n                                event.target.value = '';\n                            }, accept: getMimeTypesUIKitAccepts(acceptableMimeTypes), multiple: isSelectingMultipleFilesEnabled && isChannelTypeSupportsMultipleFilesMessage(channel) }))))),\n            isVoiceMessageEnabled && !isEdit && !isInput && (React__default.createElement(IconButton, { className: \"sendbird-message-input--voice-message\", width: \"32px\", height: \"32px\", onClick: onVoiceMessageIconClick }, (renderVoiceMessageIcon === null || renderVoiceMessageIcon === void 0 ? void 0 : renderVoiceMessageIcon()) || (React__default.createElement(Icon, { type: IconTypes.AUDIO_ON_LINED, fillColor: disabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT_INVERSE, width: \"20px\", height: \"20px\" }))))),\n        isEdit && (React__default.createElement(\"div\", { className: \"sendbird-message-input--edit-action\", \"data-testid\": \"sendbird-message-input--edit-action\" },\n            React__default.createElement(Button, { className: \"sendbird-message-input--edit-action__cancel\", type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: onCancelEdit }, stringSet.BUTTON__CANCEL),\n            React__default.createElement(Button, { className: \"sendbird-message-input--edit-action__save\", type: ButtonTypes.PRIMARY, size: ButtonSizes.SMALL, disabled: isEditDisabled, onClick: function () { return editMessage(); } }, stringSet.BUTTON__SAVE)))));\n});\n\nexport { MessageInput as default };\n//# sourceMappingURL=MessageInput.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}