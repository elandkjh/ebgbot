{"ast":null,"code":"import { c as __spreadArray, _ as __assign } from '../../chunks/bundle-BQi9-O76.js';\nimport React__default, { useState, useContext, useEffect } from 'react';\nimport { L as LocalizationContext } from '../../chunks/bundle-cQZ3UZoG.js';\nimport { u as useCreateChannelContext } from '../../chunks/bundle-CBUfFuFR.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport { u as useMediaQueryContext } from '../../chunks/bundle-f-SpnOx2.js';\nimport { M as Modal } from '../../chunks/bundle-CXdo2kR_.js';\nimport { L as Label, b as LabelColors, a as LabelTypography } from '../../chunks/bundle-DhKQeIfP.js';\nimport { ButtonTypes } from '../../ui/Button.js';\nimport { UserListItem } from '../../ui/UserListItem.js';\nimport { n as noop } from '../../chunks/bundle-BgwzpLeQ.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../sendbirdSelectors.js';\nimport '../../chunks/bundle-b6TpX_JP.js';\nimport '../../withSendbird.js';\nimport '../../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport 'react-dom';\nimport '../../ui/IconButton.js';\nimport '../../ui/Icon.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '@sendbird/chat/openChannel';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport '../../ui/SortByRow.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '../../chunks/bundle-CFosTNce.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/Checkbox.js';\nimport '../../ui/UserProfile.js';\nvar filterUser = function (idsToFilter) {\n  return function (currentId) {\n    return idsToFilter === null || idsToFilter === void 0 ? void 0 : idsToFilter.includes(currentId);\n  };\n};\nvar setChannelType = function (params, type) {\n  if (type === 'broadcast') {\n    // eslint-disable-next-line no-param-reassign\n    params.isBroadcast = true;\n  }\n  if (type === 'supergroup') {\n    // eslint-disable-next-line no-param-reassign\n    params.isSuper = true;\n  }\n  return params;\n};\nvar createDefaultUserListQuery = function (_a) {\n  var sdk = _a.sdk,\n    userFilledApplicationUserListQuery = _a.userFilledApplicationUserListQuery;\n  var params = sdk.createApplicationUserListQuery();\n  if (userFilledApplicationUserListQuery) {\n    Object.keys(userFilledApplicationUserListQuery).forEach(function (key) {\n      // @ts-ignore\n      params[key] = userFilledApplicationUserListQuery[key];\n    });\n  }\n  return params;\n};\nvar BUFFER = 50;\nvar InviteUsers = function (_a) {\n  var _b, _c, _d;\n  var onCancel = _a.onCancel,\n    userListQuery = _a.userListQuery;\n  var _e = useCreateChannelContext(),\n    onCreateChannelClick = _e.onCreateChannelClick,\n    onBeforeCreateChannel = _e.onBeforeCreateChannel,\n    onChannelCreated = _e.onChannelCreated,\n    createChannel = _e.createChannel,\n    onCreateChannel = _e.onCreateChannel,\n    overrideInviteUser = _e.overrideInviteUser,\n    type = _e.type;\n  var globalStore = useSendbirdStateContext();\n  var userId = (_b = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config) === null || _b === void 0 ? void 0 : _b.userId;\n  var sdk = (_d = (_c = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _c === void 0 ? void 0 : _c.sdkStore) === null || _d === void 0 ? void 0 : _d.sdk;\n  var idsToFilter = [userId];\n  var _f = useState([]),\n    users = _f[0],\n    setUsers = _f[1];\n  var _g = useState({}),\n    selectedUsers = _g[0],\n    setSelectedUsers = _g[1];\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var _h = useState(null),\n    usersDataSource = _h[0],\n    setUsersDataSource = _h[1];\n  var selectedCount = Object.keys(selectedUsers).length;\n  var titleText = stringSet.MODAL__CREATE_CHANNEL__TITLE;\n  var submitText = stringSet.BUTTON__CREATE;\n  var isMobile = useMediaQueryContext().isMobile;\n  var _j = useState(window.innerHeight),\n    scrollableAreaHeight = _j[0],\n    setScrollableAreaHeight = _j[1];\n  useEffect(function () {\n    var applicationUserListQuery = userListQuery ? userListQuery() : createDefaultUserListQuery({\n      sdk: sdk\n    });\n    setUsersDataSource(applicationUserListQuery);\n    if (!(applicationUserListQuery === null || applicationUserListQuery === void 0 ? void 0 : applicationUserListQuery.isLoading)) {\n      applicationUserListQuery.next().then(function (it) {\n        setUsers(it);\n      });\n    }\n  }, []);\n  // To fix navbar break in mobile we set dynamic height to the scrollable area\n  useEffect(function () {\n    var scrollableAreaHeight = function () {\n      setScrollableAreaHeight(window.innerHeight);\n    };\n    window.addEventListener('resize', scrollableAreaHeight);\n    return function () {\n      window.removeEventListener('resize', scrollableAreaHeight);\n    };\n  }, []);\n  return React__default.createElement(Modal, {\n    isFullScreenOnMobile: true,\n    titleText: titleText,\n    submitText: submitText,\n    type: ButtonTypes.PRIMARY,\n    // Disable the create button if no users are selected,\n    // but if there's only the logged-in user in the user list,\n    // then the create button should be enabled\n    disabled: users.length > 1 && Object.keys(selectedUsers).length === 0,\n    onCancel: onCancel,\n    onSubmit: function () {\n      var selectedUserList = Object.keys(selectedUsers).length > 0 ? Object.keys(selectedUsers) : [userId];\n      var _onChannelCreated = onChannelCreated !== null && onChannelCreated !== void 0 ? onChannelCreated : onCreateChannel;\n      var _onCreateChannelClick = onCreateChannelClick !== null && onCreateChannelClick !== void 0 ? onCreateChannelClick : overrideInviteUser;\n      if (typeof _onCreateChannelClick === 'function') {\n        _onCreateChannelClick({\n          users: selectedUserList,\n          onClose: onCancel !== null && onCancel !== void 0 ? onCancel : noop,\n          channelType: type\n        });\n        return;\n      }\n      if (onBeforeCreateChannel) {\n        var params = onBeforeCreateChannel(selectedUserList);\n        setChannelType(params, type);\n        createChannel(params).then(function (channel) {\n          return _onChannelCreated === null || _onChannelCreated === void 0 ? void 0 : _onChannelCreated(channel);\n        });\n      } else {\n        var params = {};\n        params.invitedUserIds = selectedUserList;\n        params.isDistinct = false;\n        if (userId) {\n          params.operatorUserIds = [userId];\n        }\n        setChannelType(params, type);\n        // do not have custom params\n        createChannel(params).then(function (channel) {\n          return _onChannelCreated === null || _onChannelCreated === void 0 ? void 0 : _onChannelCreated(channel);\n        });\n      }\n      onCancel === null || onCancel === void 0 ? void 0 : onCancel();\n    }\n  }, React__default.createElement(\"div\", null, React__default.createElement(Label, {\n    color: selectedCount > 0 ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3,\n    type: LabelTypography.CAPTION_1\n  }, \"\".concat(selectedCount, \" \").concat(stringSet.MODAL__INVITE_MEMBER__SELECTED)), React__default.createElement(\"div\", {\n    className: \"sendbird-create-channel--scroll\",\n    style: isMobile ? {\n      height: \"calc(\".concat(scrollableAreaHeight, \"px - 200px)\")\n    } : {},\n    onScroll: function (e) {\n      if (!usersDataSource) return;\n      var eventTarget = e.target;\n      var hasNext = usersDataSource.hasNext,\n        isLoading = usersDataSource.isLoading;\n      var fetchMore = eventTarget.clientHeight + eventTarget.scrollTop + BUFFER > eventTarget.scrollHeight;\n      if (hasNext && fetchMore && !isLoading) {\n        usersDataSource.next().then(function (usersBatch) {\n          setUsers(__spreadArray(__spreadArray([], users, true), usersBatch, true));\n        });\n      }\n    }\n  }, users.map(function (user) {\n    return !filterUser(idsToFilter)(user.userId) && React__default.createElement(UserListItem, {\n      key: user.userId,\n      user: user,\n      checkBox: true,\n      checked: selectedUsers[user.userId],\n      onChange: function (event) {\n        var _a;\n        var modifiedSelectedUsers = __assign(__assign({}, selectedUsers), (_a = {}, _a[event.target.id] = event.target.checked, _a));\n        if (!event.target.checked) {\n          delete modifiedSelectedUsers[event.target.id];\n        }\n        setSelectedUsers(modifiedSelectedUsers);\n      }\n    });\n  }))));\n};\nexport { InviteUsers as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { c as __spreadArray, _ as __assign } from '../../chunks/bundle-BQi9-O76.js';\nimport React__default, { useState, useContext, useEffect } from 'react';\nimport { L as LocalizationContext } from '../../chunks/bundle-cQZ3UZoG.js';\nimport { u as useCreateChannelContext } from '../../chunks/bundle-CBUfFuFR.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport { u as useMediaQueryContext } from '../../chunks/bundle-f-SpnOx2.js';\nimport { M as Modal } from '../../chunks/bundle-CXdo2kR_.js';\nimport { L as Label, b as LabelColors, a as LabelTypography } from '../../chunks/bundle-DhKQeIfP.js';\nimport { ButtonTypes } from '../../ui/Button.js';\nimport { UserListItem } from '../../ui/UserListItem.js';\nimport { n as noop } from '../../chunks/bundle-BgwzpLeQ.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../sendbirdSelectors.js';\nimport '../../chunks/bundle-b6TpX_JP.js';\nimport '../../withSendbird.js';\nimport '../../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport 'react-dom';\nimport '../../ui/IconButton.js';\nimport '../../ui/Icon.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '@sendbird/chat/openChannel';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport '../../ui/SortByRow.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '../../chunks/bundle-CFosTNce.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/Checkbox.js';\nimport '../../ui/UserProfile.js';\n\nvar filterUser = function (idsToFilter) { return function (currentId) { return idsToFilter === null || idsToFilter === void 0 ? void 0 : idsToFilter.includes(currentId); }; };\nvar setChannelType = function (params, type) {\n    if (type === 'broadcast') {\n        // eslint-disable-next-line no-param-reassign\n        params.isBroadcast = true;\n    }\n    if (type === 'supergroup') {\n        // eslint-disable-next-line no-param-reassign\n        params.isSuper = true;\n    }\n    return params;\n};\nvar createDefaultUserListQuery = function (_a) {\n    var sdk = _a.sdk, userFilledApplicationUserListQuery = _a.userFilledApplicationUserListQuery;\n    var params = sdk.createApplicationUserListQuery();\n    if (userFilledApplicationUserListQuery) {\n        Object.keys(userFilledApplicationUserListQuery).forEach(function (key) {\n            // @ts-ignore\n            params[key] = userFilledApplicationUserListQuery[key];\n        });\n    }\n    return params;\n};\n\nvar BUFFER = 50;\nvar InviteUsers = function (_a) {\n    var _b, _c, _d;\n    var onCancel = _a.onCancel, userListQuery = _a.userListQuery;\n    var _e = useCreateChannelContext(), onCreateChannelClick = _e.onCreateChannelClick, onBeforeCreateChannel = _e.onBeforeCreateChannel, onChannelCreated = _e.onChannelCreated, createChannel = _e.createChannel, onCreateChannel = _e.onCreateChannel, overrideInviteUser = _e.overrideInviteUser, type = _e.type;\n    var globalStore = useSendbirdStateContext();\n    var userId = (_b = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config) === null || _b === void 0 ? void 0 : _b.userId;\n    var sdk = (_d = (_c = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _c === void 0 ? void 0 : _c.sdkStore) === null || _d === void 0 ? void 0 : _d.sdk;\n    var idsToFilter = [userId];\n    var _f = useState([]), users = _f[0], setUsers = _f[1];\n    var _g = useState({}), selectedUsers = _g[0], setSelectedUsers = _g[1];\n    var stringSet = useContext(LocalizationContext).stringSet;\n    var _h = useState(null), usersDataSource = _h[0], setUsersDataSource = _h[1];\n    var selectedCount = Object.keys(selectedUsers).length;\n    var titleText = stringSet.MODAL__CREATE_CHANNEL__TITLE;\n    var submitText = stringSet.BUTTON__CREATE;\n    var isMobile = useMediaQueryContext().isMobile;\n    var _j = useState(window.innerHeight), scrollableAreaHeight = _j[0], setScrollableAreaHeight = _j[1];\n    useEffect(function () {\n        var applicationUserListQuery = userListQuery ? userListQuery() : createDefaultUserListQuery({ sdk: sdk });\n        setUsersDataSource(applicationUserListQuery);\n        if (!(applicationUserListQuery === null || applicationUserListQuery === void 0 ? void 0 : applicationUserListQuery.isLoading)) {\n            applicationUserListQuery.next().then(function (it) {\n                setUsers(it);\n            });\n        }\n    }, []);\n    // To fix navbar break in mobile we set dynamic height to the scrollable area\n    useEffect(function () {\n        var scrollableAreaHeight = function () {\n            setScrollableAreaHeight(window.innerHeight);\n        };\n        window.addEventListener('resize', scrollableAreaHeight);\n        return function () {\n            window.removeEventListener('resize', scrollableAreaHeight);\n        };\n    }, []);\n    return (React__default.createElement(Modal, { isFullScreenOnMobile: true, titleText: titleText, submitText: submitText, type: ButtonTypes.PRIMARY, \n        // Disable the create button if no users are selected,\n        // but if there's only the logged-in user in the user list,\n        // then the create button should be enabled\n        disabled: users.length > 1 && Object.keys(selectedUsers).length === 0, onCancel: onCancel, onSubmit: function () {\n            var selectedUserList = Object.keys(selectedUsers).length > 0\n                ? Object.keys(selectedUsers)\n                : [userId];\n            var _onChannelCreated = onChannelCreated !== null && onChannelCreated !== void 0 ? onChannelCreated : onCreateChannel;\n            var _onCreateChannelClick = onCreateChannelClick !== null && onCreateChannelClick !== void 0 ? onCreateChannelClick : overrideInviteUser;\n            if (typeof _onCreateChannelClick === 'function') {\n                _onCreateChannelClick({\n                    users: selectedUserList,\n                    onClose: onCancel !== null && onCancel !== void 0 ? onCancel : noop,\n                    channelType: type,\n                });\n                return;\n            }\n            if (onBeforeCreateChannel) {\n                var params = onBeforeCreateChannel(selectedUserList);\n                setChannelType(params, type);\n                createChannel(params).then(function (channel) { return _onChannelCreated === null || _onChannelCreated === void 0 ? void 0 : _onChannelCreated(channel); });\n            }\n            else {\n                var params = {};\n                params.invitedUserIds = selectedUserList;\n                params.isDistinct = false;\n                if (userId) {\n                    params.operatorUserIds = [userId];\n                }\n                setChannelType(params, type);\n                // do not have custom params\n                createChannel(params).then(function (channel) { return _onChannelCreated === null || _onChannelCreated === void 0 ? void 0 : _onChannelCreated(channel); });\n            }\n            onCancel === null || onCancel === void 0 ? void 0 : onCancel();\n        } },\n        React__default.createElement(\"div\", null,\n            React__default.createElement(Label, { color: (selectedCount > 0) ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3, type: LabelTypography.CAPTION_1 }, \"\".concat(selectedCount, \" \").concat(stringSet.MODAL__INVITE_MEMBER__SELECTED)),\n            React__default.createElement(\"div\", { className: \"sendbird-create-channel--scroll\", style: isMobile ? { height: \"calc(\".concat(scrollableAreaHeight, \"px - 200px)\") } : {}, onScroll: function (e) {\n                    if (!usersDataSource)\n                        return;\n                    var eventTarget = e.target;\n                    var hasNext = usersDataSource.hasNext, isLoading = usersDataSource.isLoading;\n                    var fetchMore = ((eventTarget.clientHeight + eventTarget.scrollTop + BUFFER) > eventTarget.scrollHeight);\n                    if (hasNext && fetchMore && !isLoading) {\n                        usersDataSource.next().then(function (usersBatch) {\n                            setUsers(__spreadArray(__spreadArray([], users, true), usersBatch, true));\n                        });\n                    }\n                } }, users.map(function (user) { return (!filterUser(idsToFilter)(user.userId)) && (React__default.createElement(UserListItem, { key: user.userId, user: user, checkBox: true, checked: selectedUsers[user.userId], onChange: function (event) {\n                    var _a;\n                    var modifiedSelectedUsers = __assign(__assign({}, selectedUsers), (_a = {}, _a[event.target.id] = event.target.checked, _a));\n                    if (!event.target.checked) {\n                        delete modifiedSelectedUsers[event.target.id];\n                    }\n                    setSelectedUsers(modifiedSelectedUsers);\n                } })); })))));\n};\n\nexport { InviteUsers as default };\n//# sourceMappingURL=InviteUsers.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}