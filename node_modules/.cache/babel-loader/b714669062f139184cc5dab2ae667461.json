{"ast":null,"code":"import { c as __spreadArray, _ as __assign } from '../chunks/bundle-BQi9-O76.js';\nimport React__default, { useContext, useRef, useState, useEffect } from 'react';\nimport { f as format } from '../chunks/bundle-CAdqcqOm.js';\nimport { A as Avatar } from '../chunks/bundle-CFosTNce.js';\nimport { C as ContextMenu, b as MenuItems, c as MenuItem } from '../chunks/bundle-CwKZj-B6.js';\nimport Icon, { IconTypes, IconColors } from './Icon.js';\nimport IconButton from './IconButton.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../chunks/bundle-DhKQeIfP.js';\nimport Loader from './Loader.js';\nimport UserProfile from './UserProfile.js';\nimport { a as UserProfileContext } from '../chunks/bundle-BrTJ5Zbd.js';\nimport { u as useLocalization } from '../chunks/bundle-cQZ3UZoG.js';\nimport { c as copyToClipboard } from '../chunks/bundle-6BuULgEc.js';\nimport { u as uuidv4 } from '../chunks/bundle-etuaqevl.js';\nimport { g as getSenderFromMessage, s as showMenuTrigger, i as isFineCopy, a as isFineEdit, b as isFineResend, c as isFineDelete, O as OpenChannelMobileMenu, d as checkIsPending, e as checkIsFailed } from '../chunks/bundle-BdZytjCG.js';\nimport { u as useMediaQueryContext } from '../chunks/bundle-f-SpnOx2.js';\nimport { u as useLongPress } from '../chunks/bundle-AfQS5DGf.js';\nimport { d as isEditedMessage } from '../chunks/bundle-DxTN4_0p.js';\nimport '../chunks/bundle-CA85nVxp.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport './ImageRenderer.js';\nimport '../chunks/bundle-BgwzpLeQ.js';\nimport '../chunks/bundle-DXRRGizV.js';\nimport 'react-dom';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport './SortByRow.js';\nimport '../withSendbird.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport '../sendbirdSelectors.js';\nimport '../chunks/bundle-b6TpX_JP.js';\nimport './Button.js';\nimport '../useSendbirdStateContext.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CNWAfTVw.js';\nfunction OpenchannelUserMessage(_a) {\n  var className = _a.className,\n    message = _a.message,\n    isOperator = _a.isOperator,\n    _b = _a.isEphemeral,\n    isEphemeral = _b === void 0 ? false : _b,\n    userId = _a.userId,\n    resendMessage = _a.resendMessage,\n    disabled = _a.disabled,\n    showEdit = _a.showEdit,\n    showRemove = _a.showRemove,\n    chainTop = _a.chainTop;\n  // hooks\n  var _c = useLocalization(),\n    stringSet = _c.stringSet,\n    dateLocale = _c.dateLocale;\n  var _d = useContext(UserProfileContext),\n    disableUserProfile = _d.disableUserProfile,\n    renderUserProfile = _d.renderUserProfile;\n  var messageRef = useRef();\n  var avatarRef = useRef();\n  var contextMenuRef = useRef();\n  var mobileMenuRef = useRef();\n  var _e = useState({}),\n    contextStyle = _e[0],\n    setContextStyle = _e[1];\n  var _f = useState(false),\n    contextMenu = _f[0],\n    setContextMenu = _f[1];\n  // consts\n  var status = message === null || message === void 0 ? void 0 : message.sendingStatus;\n  var isPending = checkIsPending(status);\n  var isFailed = checkIsFailed(status);\n  var sender = getSenderFromMessage(message);\n  // place context menu top depending clientHeight of message component\n  useEffect(function () {\n    var _a;\n    if (((_a = messageRef === null || messageRef === void 0 ? void 0 : messageRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight) && messageRef.current.clientHeight > 36) {\n      setContextStyle({\n        top: '8px '\n      });\n    } else {\n      setContextStyle({\n        top: '2px'\n      });\n    }\n  }, [window.innerWidth]);\n  var onLongPress = useLongPress({\n    onLongPress: function () {\n      setContextMenu(true);\n    }\n  });\n  var isMobile = useMediaQueryContext().isMobile;\n  if (!message || message.messageType !== 'user') {\n    return React__default.createElement(React__default.Fragment, null);\n  }\n  return React__default.createElement(React__default.Fragment, null, React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-user-message'], false).join(' '),\n    ref: messageRef\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__left\"\n  }, !chainTop && React__default.createElement(ContextMenu, {\n    menuTrigger: function (toggleDropdown) {\n      return React__default.createElement(Avatar, {\n        className: \"sendbird-openchannel-user-message__left__avatar\",\n        src: sender.profileUrl || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function () {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function (closeDropdown) {\n      return renderUserProfile ? renderUserProfile({\n        user: sender,\n        close: closeDropdown,\n        currentUserId: userId,\n        avatarRef: avatarRef\n      }) : React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: '0px',\n          paddingBottom: '0px'\n        }\n      }, React__default.createElement(UserProfile, {\n        user: sender,\n        onSuccess: closeDropdown,\n        disableMessaging: true\n      }));\n    }\n  })), React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__right\"\n  }, !chainTop && React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__right__top\"\n  }, React__default.createElement(Label, {\n    className: \"sendbird-openchannel-user-message__right__top__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: isOperator ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2\n  }, sender && (sender.friendName || sender.nickname || sender.userId)), React__default.createElement(Label, {\n    className: \"sendbird-openchannel-user-message__right__top__sent-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_3\n  }, (message === null || message === void 0 ? void 0 : message.createdAt) && format(message === null || message === void 0 ? void 0 : message.createdAt, 'p', {\n    locale: dateLocale\n  }))), React__default.createElement(\"div\", __assign({}, isMobile ? __assign({}, onLongPress) : {}, {\n    className: \"sendbird-openchannel-user-message__right__bottom\",\n    ref: mobileMenuRef\n  }), React__default.createElement(Label, {\n    className: \"sendbird-openchannel-user-message__right__bottom__message\",\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, message === null || message === void 0 ? void 0 : message.message, isEditedMessage(message) && React__default.createElement(Label, {\n    key: uuidv4(),\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_2,\n    className: \"sendbird-openchannel-user-message-word\"\n  }, \" \".concat(stringSet.MESSAGE_EDITED, \" \")))), (isPending || isFailed) && React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__right__tail\"\n  }, isPending && React__default.createElement(Loader, {\n    width: \"16px\",\n    height: \"16px\"\n  }, React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-user-message__right__tail__pending\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })), isFailed && React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-user-message__right__tail__failed\",\n    type: IconTypes.ERROR,\n    fillColor: IconColors.ERROR,\n    width: \"16px\",\n    height: \"16px\"\n  }))), !isMobile && React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__context-menu\",\n    ref: contextMenuRef,\n    style: contextStyle\n  }, React__default.createElement(ContextMenu, {\n    menuTrigger: function (toggleDropdown) {\n      return showMenuTrigger({\n        message: message,\n        userId: userId,\n        status: status\n      }) && React__default.createElement(IconButton, {\n        className: \"sendbird-openchannel-user-message__context-menu--icon\",\n        width: \"32px\",\n        height: \"32px\",\n        onClick: function () {\n          toggleDropdown();\n        }\n      }, React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.CONTENT_INVERSE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function (closeDropdown) {\n      return React__default.createElement(MenuItems, {\n        parentRef: contextMenuRef,\n        parentContainRef: contextMenuRef,\n        closeDropdown: closeDropdown,\n        openLeft: true\n      }, isFineCopy({\n        message: message,\n        userId: userId,\n        status: status\n      }) && React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-user-message__context-menu__copy\",\n        onClick: function () {\n          copyToClipboard(message.message);\n          closeDropdown();\n        },\n        testID: \"open_channel_user_message_menu_copy\"\n      }, stringSet.CONTEXT_MENU_DROPDOWN__COPY), !isEphemeral && isFineEdit({\n        message: message,\n        userId: userId,\n        status: status\n      }) && React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-user-message__context-menu__edit\",\n        onClick: function () {\n          if (disabled) {\n            return;\n          }\n          showEdit(true);\n          closeDropdown();\n        },\n        testID: \"open_channel_user_message_menu_edit\"\n      }, stringSet.CONTEXT_MENU_DROPDOWN__EDIT), isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-user-message__context-menu__resend\",\n        onClick: function () {\n          resendMessage(message);\n          closeDropdown();\n        },\n        testID: \"open_channel_user_message_menu_resend\"\n      }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND), !isEphemeral && isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-user-message__context-menu__delete\",\n        onClick: function () {\n          if (disabled) {\n            return;\n          }\n          showRemove(true);\n          closeDropdown();\n        },\n        testID: \"open_channel_user_message_menu_delete\"\n      }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE));\n    }\n  }))), contextMenu && React__default.createElement(OpenChannelMobileMenu, {\n    message: message,\n    parentRef: mobileMenuRef,\n    hideMenu: function () {\n      setContextMenu(false);\n    },\n    showRemove: function () {\n      setContextMenu(false);\n      showRemove(true);\n    },\n    showEdit: function () {\n      setContextMenu(false);\n      showEdit(true);\n    },\n    copyToClipboard: function () {\n      setContextMenu(false);\n      copyToClipboard(message === null || message === void 0 ? void 0 : message.message);\n    },\n    resendMessage: function () {\n      setContextMenu(false);\n      resendMessage(message);\n    }\n  }));\n}\nexport { OpenchannelUserMessage as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { c as __spreadArray, _ as __assign } from '../chunks/bundle-BQi9-O76.js';\nimport React__default, { useContext, useRef, useState, useEffect } from 'react';\nimport { f as format } from '../chunks/bundle-CAdqcqOm.js';\nimport { A as Avatar } from '../chunks/bundle-CFosTNce.js';\nimport { C as ContextMenu, b as MenuItems, c as MenuItem } from '../chunks/bundle-CwKZj-B6.js';\nimport Icon, { IconTypes, IconColors } from './Icon.js';\nimport IconButton from './IconButton.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../chunks/bundle-DhKQeIfP.js';\nimport Loader from './Loader.js';\nimport UserProfile from './UserProfile.js';\nimport { a as UserProfileContext } from '../chunks/bundle-BrTJ5Zbd.js';\nimport { u as useLocalization } from '../chunks/bundle-cQZ3UZoG.js';\nimport { c as copyToClipboard } from '../chunks/bundle-6BuULgEc.js';\nimport { u as uuidv4 } from '../chunks/bundle-etuaqevl.js';\nimport { g as getSenderFromMessage, s as showMenuTrigger, i as isFineCopy, a as isFineEdit, b as isFineResend, c as isFineDelete, O as OpenChannelMobileMenu, d as checkIsPending, e as checkIsFailed } from '../chunks/bundle-BdZytjCG.js';\nimport { u as useMediaQueryContext } from '../chunks/bundle-f-SpnOx2.js';\nimport { u as useLongPress } from '../chunks/bundle-AfQS5DGf.js';\nimport { d as isEditedMessage } from '../chunks/bundle-DxTN4_0p.js';\nimport '../chunks/bundle-CA85nVxp.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport './ImageRenderer.js';\nimport '../chunks/bundle-BgwzpLeQ.js';\nimport '../chunks/bundle-DXRRGizV.js';\nimport 'react-dom';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport './SortByRow.js';\nimport '../withSendbird.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport '../sendbirdSelectors.js';\nimport '../chunks/bundle-b6TpX_JP.js';\nimport './Button.js';\nimport '../useSendbirdStateContext.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CNWAfTVw.js';\n\nfunction OpenchannelUserMessage(_a) {\n    var className = _a.className, message = _a.message, isOperator = _a.isOperator, _b = _a.isEphemeral, isEphemeral = _b === void 0 ? false : _b, userId = _a.userId, resendMessage = _a.resendMessage, disabled = _a.disabled, showEdit = _a.showEdit, showRemove = _a.showRemove, chainTop = _a.chainTop;\n    // hooks\n    var _c = useLocalization(), stringSet = _c.stringSet, dateLocale = _c.dateLocale;\n    var _d = useContext(UserProfileContext), disableUserProfile = _d.disableUserProfile, renderUserProfile = _d.renderUserProfile;\n    var messageRef = useRef();\n    var avatarRef = useRef();\n    var contextMenuRef = useRef();\n    var mobileMenuRef = useRef();\n    var _e = useState({}), contextStyle = _e[0], setContextStyle = _e[1];\n    var _f = useState(false), contextMenu = _f[0], setContextMenu = _f[1];\n    // consts\n    var status = message === null || message === void 0 ? void 0 : message.sendingStatus;\n    var isPending = checkIsPending(status);\n    var isFailed = checkIsFailed(status);\n    var sender = getSenderFromMessage(message);\n    // place context menu top depending clientHeight of message component\n    useEffect(function () {\n        var _a;\n        if (((_a = messageRef === null || messageRef === void 0 ? void 0 : messageRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight) && messageRef.current.clientHeight > 36) {\n            setContextStyle({ top: '8px ' });\n        }\n        else {\n            setContextStyle({ top: '2px' });\n        }\n    }, [window.innerWidth]);\n    var onLongPress = useLongPress({\n        onLongPress: function () {\n            setContextMenu(true);\n        },\n    });\n    var isMobile = useMediaQueryContext().isMobile;\n    if (!message || message.messageType !== 'user') {\n        return React__default.createElement(React__default.Fragment, null);\n    }\n    return (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(\"div\", { className: __spreadArray(__spreadArray([], (Array.isArray(className) ? className : [className]), true), [\n                'sendbird-openchannel-user-message',\n            ], false).join(' '), ref: messageRef },\n            React__default.createElement(\"div\", { className: \"sendbird-openchannel-user-message__left\" }, !chainTop && (React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) { return (React__default.createElement(Avatar, { className: \"sendbird-openchannel-user-message__left__avatar\", src: sender.profileUrl || '', ref: avatarRef, width: \"28px\", height: \"28px\", onClick: function () {\n                        if (!disableUserProfile) {\n                            toggleDropdown();\n                        }\n                    } })); }, menuItems: function (closeDropdown) { return (renderUserProfile\n                    ? (renderUserProfile({\n                        user: sender,\n                        close: closeDropdown,\n                        currentUserId: userId,\n                        avatarRef: avatarRef,\n                    }))\n                    : (React__default.createElement(MenuItems, { parentRef: avatarRef, parentContainRef: avatarRef, closeDropdown: closeDropdown, style: { paddingTop: '0px', paddingBottom: '0px' } },\n                        React__default.createElement(UserProfile, { user: sender, onSuccess: closeDropdown, disableMessaging: true })))); } }))),\n            React__default.createElement(\"div\", { className: \"sendbird-openchannel-user-message__right\" },\n                !chainTop && (React__default.createElement(\"div\", { className: \"sendbird-openchannel-user-message__right__top\" },\n                    React__default.createElement(Label, { className: \"sendbird-openchannel-user-message__right__top__sender-name\", type: LabelTypography.CAPTION_2, color: isOperator ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2 }, sender && (sender.friendName\n                        || sender.nickname\n                        || sender.userId)),\n                    React__default.createElement(Label, { className: \"sendbird-openchannel-user-message__right__top__sent-at\", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_3 }, (message === null || message === void 0 ? void 0 : message.createdAt) && (format(message === null || message === void 0 ? void 0 : message.createdAt, 'p', {\n                        locale: dateLocale,\n                    }))))),\n                React__default.createElement(\"div\", __assign({}, (isMobile ? __assign({}, onLongPress) : {}), { className: \"sendbird-openchannel-user-message__right__bottom\", ref: mobileMenuRef }),\n                    React__default.createElement(Label, { className: \"sendbird-openchannel-user-message__right__bottom__message\", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_1 }, message === null || message === void 0 ? void 0 :\n                        message.message,\n                        isEditedMessage(message) && (React__default.createElement(Label, { key: uuidv4(), type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_2, className: \"sendbird-openchannel-user-message-word\" }, \" \".concat(stringSet.MESSAGE_EDITED, \" \"))))),\n                (isPending || isFailed) && (React__default.createElement(\"div\", { className: \"sendbird-openchannel-user-message__right__tail\" },\n                    isPending && (React__default.createElement(Loader, { width: \"16px\", height: \"16px\" },\n                        React__default.createElement(Icon, { className: \"sendbird-openchannel-user-message__right__tail__pending\", type: IconTypes.SPINNER, fillColor: IconColors.PRIMARY, width: \"16px\", height: \"16px\" }))),\n                    isFailed && (React__default.createElement(Icon, { className: \"sendbird-openchannel-user-message__right__tail__failed\", type: IconTypes.ERROR, fillColor: IconColors.ERROR, width: \"16px\", height: \"16px\" }))))),\n            !isMobile && (React__default.createElement(\"div\", { className: \"sendbird-openchannel-user-message__context-menu\", ref: contextMenuRef, style: contextStyle },\n                React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) { return (showMenuTrigger({ message: message, userId: userId, status: status }) && (React__default.createElement(IconButton, { className: \"sendbird-openchannel-user-message__context-menu--icon\", width: \"32px\", height: \"32px\", onClick: function () {\n                            toggleDropdown();\n                        } },\n                        React__default.createElement(Icon, { type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE, width: \"24px\", height: \"24px\" })))); }, menuItems: function (closeDropdown) { return (React__default.createElement(MenuItems, { parentRef: contextMenuRef, parentContainRef: contextMenuRef, closeDropdown: closeDropdown, openLeft: true },\n                        isFineCopy({ message: message, userId: userId, status: status }) && (React__default.createElement(MenuItem, { className: \"sendbird-openchannel-user-message__context-menu__copy\", onClick: function () {\n                                copyToClipboard(message.message);\n                                closeDropdown();\n                            }, testID: \"open_channel_user_message_menu_copy\" }, stringSet.CONTEXT_MENU_DROPDOWN__COPY)),\n                        (!isEphemeral && isFineEdit({ message: message, userId: userId, status: status })) && (React__default.createElement(MenuItem, { className: \"sendbird-openchannel-user-message__context-menu__edit\", onClick: function () {\n                                if (disabled) {\n                                    return;\n                                }\n                                showEdit(true);\n                                closeDropdown();\n                            }, testID: \"open_channel_user_message_menu_edit\" }, stringSet.CONTEXT_MENU_DROPDOWN__EDIT)),\n                        isFineResend({ message: message, userId: userId, status: status }) && (React__default.createElement(MenuItem, { className: \"sendbird-openchannel-user-message__context-menu__resend\", onClick: function () {\n                                resendMessage(message);\n                                closeDropdown();\n                            }, testID: \"open_channel_user_message_menu_resend\" }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND)),\n                        (!isEphemeral && isFineDelete({ message: message, userId: userId, status: status })) && (React__default.createElement(MenuItem, { className: \"sendbird-openchannel-user-message__context-menu__delete\", onClick: function () {\n                                if (disabled) {\n                                    return;\n                                }\n                                showRemove(true);\n                                closeDropdown();\n                            }, testID: \"open_channel_user_message_menu_delete\" }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE)))); } })))),\n        contextMenu && (React__default.createElement(OpenChannelMobileMenu, { message: message, parentRef: mobileMenuRef, hideMenu: function () {\n                setContextMenu(false);\n            }, showRemove: function () {\n                setContextMenu(false);\n                showRemove(true);\n            }, showEdit: function () {\n                setContextMenu(false);\n                showEdit(true);\n            }, copyToClipboard: function () {\n                setContextMenu(false);\n                copyToClipboard(message === null || message === void 0 ? void 0 : message.message);\n            }, resendMessage: function () {\n                setContextMenu(false);\n                resendMessage(message);\n            } }))));\n}\n\nexport { OpenchannelUserMessage as default };\n//# sourceMappingURL=OpenchannelUserMessage.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}