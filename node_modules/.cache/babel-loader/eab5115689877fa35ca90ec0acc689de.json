{"ast":null,"code":"import React__default, { useState, useEffect } from 'react';\nimport { OpenChannelHandler } from '@sendbird/chat/openChannel';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { U as UserProfileProvider } from '../chunks/bundle-BrTJ5Zbd.js';\nimport { u as uuidv4 } from '../chunks/bundle-etuaqevl.js';\nimport '../withSendbird.js';\nimport '../chunks/bundle-BQi9-O76.js';\nvar OpenChannelSettingsContext = React__default.createContext(null);\nvar OpenChannelSettingsProvider = function (props) {\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n  var children = props.children,\n    channelUrl = props.channelUrl,\n    onCloseClick = props.onCloseClick,\n    onChannelModified = props.onChannelModified,\n    onBeforeUpdateChannel = props.onBeforeUpdateChannel,\n    onDeleteChannel = props.onDeleteChannel;\n  // fetch store from <SendbirdProvider />\n  var globalStore = useSendbirdStateContext();\n  var sdk = (_b = (_a = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _a === void 0 ? void 0 : _a.sdkStore) === null || _b === void 0 ? void 0 : _b.sdk;\n  var isSDKInitialized = (_d = (_c = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _c === void 0 ? void 0 : _c.sdkStore) === null || _d === void 0 ? void 0 : _d.initialized;\n  var logger = (_e = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config) === null || _e === void 0 ? void 0 : _e.logger;\n  var currentUserId = (_f = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _f === void 0 ? void 0 : _f.userId;\n  var _j = useState(null),\n    currentChannel = _j[0],\n    setChannel = _j[1];\n  var _k = useState(false),\n    isChannelInitialized = _k[0],\n    setChannelInitialized = _k[1];\n  useEffect(function () {\n    if (!channelUrl || !sdk.openChannel) {\n      setChannel(null);\n      return;\n    }\n    sdk.openChannel.getChannel(channelUrl).then(function (channel) {\n      logger.info('open channel setting: fetched', channel);\n      // TODO: Add pending status\n      channel.enter().then(function () {\n        setChannel(channel);\n        logger.info('OpenChannelSettings | Succeeded to enter channel', channel === null || channel === void 0 ? void 0 : channel.url);\n        setChannelInitialized(true);\n      }).catch(function (error) {\n        setChannel(null);\n        logger.warning('OpenChannelSettings | Failed to enter channel', error);\n      });\n    }).catch(function (error) {\n      logger.error('open channel setting: error fetching', error);\n      setChannel(null);\n    });\n    return function () {\n      if (currentChannel && currentChannel.exit) {\n        currentChannel.exit().then(function () {\n          logger.info('OpenChannelSettings | Succeeded to exit channel', currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url);\n        }).catch(function (error) {\n          logger.warning('OpenChannelSettings | Failed to exit channel', error);\n        });\n      }\n    };\n  }, [channelUrl, isSDKInitialized]);\n  useEffect(function () {\n    var _a;\n    var channelHandlerId = uuidv4();\n    if (currentChannel !== null && ((_a = sdk === null || sdk === void 0 ? void 0 : sdk.openChannel) === null || _a === void 0 ? void 0 : _a.addOpenChannelHandler)) {\n      var channelHandlerParams = new OpenChannelHandler({\n        onOperatorUpdated: function (channel) {\n          if ((channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url)) {\n            setChannel(channel);\n          }\n        },\n        onUserMuted: function (channel, user) {\n          if ((channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) && (user === null || user === void 0 ? void 0 : user.userId) === currentUserId) {\n            setChannel(channel);\n          }\n        },\n        onUserUnmuted: function (channel, user) {\n          if ((channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) && (user === null || user === void 0 ? void 0 : user.userId) === currentUserId) {\n            setChannel(channel);\n          }\n        },\n        onUserBanned: function (channel, user) {\n          if ((channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) && (user === null || user === void 0 ? void 0 : user.userId) === currentUserId) {\n            setChannel(null);\n          }\n        },\n        onUserUnbanned: function (channel, user) {\n          if ((user === null || user === void 0 ? void 0 : user.userId) === currentUserId) {\n            setChannel(channel);\n          }\n        },\n        onChannelChanged: function (channel) {\n          if ((channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url)) {\n            setChannel(channel);\n          }\n        },\n        onChannelDeleted: function (channelUrl) {\n          if (channelUrl === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url)) {\n            setChannel(null);\n          }\n        }\n      });\n      sdk.openChannel.addOpenChannelHandler(channelHandlerId, channelHandlerParams);\n    }\n    return function () {\n      var _a, _b, _c;\n      if (((_a = sdk === null || sdk === void 0 ? void 0 : sdk.openChannel) === null || _a === void 0 ? void 0 : _a.removeOpenChannelHandler) && channelHandlerId) {\n        logger.info('OpenChannelSettings | Removing channel handlers', channelHandlerId);\n        (_c = (_b = sdk.openChannel).removeOpenChannelHandler) === null || _c === void 0 ? void 0 : _c.call(_b, channelHandlerId);\n      }\n    };\n  }, [channelUrl]);\n  return React__default.createElement(OpenChannelSettingsContext.Provider, {\n    value: {\n      channelUrl: channelUrl,\n      channel: currentChannel,\n      isChannelInitialized: isChannelInitialized,\n      setChannel: setChannel,\n      onCloseClick: onCloseClick,\n      onChannelModified: onChannelModified,\n      onBeforeUpdateChannel: onBeforeUpdateChannel,\n      onDeleteChannel: onDeleteChannel\n    }\n  }, React__default.createElement(UserProfileProvider, {\n    isOpenChannel: true,\n    renderUserProfile: props === null || props === void 0 ? void 0 : props.renderUserProfile,\n    disableUserProfile: (_g = props === null || props === void 0 ? void 0 : props.disableUserProfile) !== null && _g !== void 0 ? _g : (_h = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config) === null || _h === void 0 ? void 0 : _h.disableUserProfile\n  }, children));\n};\nvar useOpenChannelSettingsContext = function () {\n  var context = React__default.useContext(OpenChannelSettingsContext);\n  if (!context) throw new Error('OpenChannelSettingsContext not found. Use within the OpenChannelSettings module.');\n  return context;\n};\nexport { OpenChannelSettingsProvider, useOpenChannelSettingsContext };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { useState, useEffect } from 'react';\nimport { OpenChannelHandler } from '@sendbird/chat/openChannel';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { U as UserProfileProvider } from '../chunks/bundle-BrTJ5Zbd.js';\nimport { u as uuidv4 } from '../chunks/bundle-etuaqevl.js';\nimport '../withSendbird.js';\nimport '../chunks/bundle-BQi9-O76.js';\n\nvar OpenChannelSettingsContext = React__default.createContext(null);\nvar OpenChannelSettingsProvider = function (props) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    var children = props.children, channelUrl = props.channelUrl, onCloseClick = props.onCloseClick, onChannelModified = props.onChannelModified, onBeforeUpdateChannel = props.onBeforeUpdateChannel, onDeleteChannel = props.onDeleteChannel;\n    // fetch store from <SendbirdProvider />\n    var globalStore = useSendbirdStateContext();\n    var sdk = (_b = (_a = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _a === void 0 ? void 0 : _a.sdkStore) === null || _b === void 0 ? void 0 : _b.sdk;\n    var isSDKInitialized = (_d = (_c = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _c === void 0 ? void 0 : _c.sdkStore) === null || _d === void 0 ? void 0 : _d.initialized;\n    var logger = (_e = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config) === null || _e === void 0 ? void 0 : _e.logger;\n    var currentUserId = (_f = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _f === void 0 ? void 0 : _f.userId;\n    var _j = useState(null), currentChannel = _j[0], setChannel = _j[1];\n    var _k = useState(false), isChannelInitialized = _k[0], setChannelInitialized = _k[1];\n    useEffect(function () {\n        if (!channelUrl || !sdk.openChannel) {\n            setChannel(null);\n            return;\n        }\n        sdk.openChannel.getChannel(channelUrl)\n            .then(function (channel) {\n            logger.info('open channel setting: fetched', channel);\n            // TODO: Add pending status\n            channel.enter()\n                .then(function () {\n                setChannel(channel);\n                logger.info('OpenChannelSettings | Succeeded to enter channel', channel === null || channel === void 0 ? void 0 : channel.url);\n                setChannelInitialized(true);\n            })\n                .catch(function (error) {\n                setChannel(null);\n                logger.warning('OpenChannelSettings | Failed to enter channel', error);\n            });\n        })\n            .catch(function (error) {\n            logger.error('open channel setting: error fetching', error);\n            setChannel(null);\n        });\n        return function () {\n            if (currentChannel && currentChannel.exit) {\n                currentChannel.exit()\n                    .then(function () {\n                    logger.info('OpenChannelSettings | Succeeded to exit channel', currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url);\n                })\n                    .catch(function (error) {\n                    logger.warning('OpenChannelSettings | Failed to exit channel', error);\n                });\n            }\n        };\n    }, [channelUrl, isSDKInitialized]);\n    useEffect(function () {\n        var _a;\n        var channelHandlerId = uuidv4();\n        if (currentChannel !== null && ((_a = sdk === null || sdk === void 0 ? void 0 : sdk.openChannel) === null || _a === void 0 ? void 0 : _a.addOpenChannelHandler)) {\n            var channelHandlerParams = new OpenChannelHandler({\n                onOperatorUpdated: function (channel) {\n                    if ((channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url)) {\n                        setChannel(channel);\n                    }\n                },\n                onUserMuted: function (channel, user) {\n                    if ((channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) && (user === null || user === void 0 ? void 0 : user.userId) === currentUserId) {\n                        setChannel(channel);\n                    }\n                },\n                onUserUnmuted: function (channel, user) {\n                    if ((channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) && (user === null || user === void 0 ? void 0 : user.userId) === currentUserId) {\n                        setChannel(channel);\n                    }\n                },\n                onUserBanned: function (channel, user) {\n                    if ((channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) && (user === null || user === void 0 ? void 0 : user.userId) === currentUserId) {\n                        setChannel(null);\n                    }\n                },\n                onUserUnbanned: function (channel, user) {\n                    if ((user === null || user === void 0 ? void 0 : user.userId) === currentUserId) {\n                        setChannel(channel);\n                    }\n                },\n                onChannelChanged: function (channel) {\n                    if ((channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url)) {\n                        setChannel(channel);\n                    }\n                },\n                onChannelDeleted: function (channelUrl) {\n                    if (channelUrl === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url)) {\n                        setChannel(null);\n                    }\n                },\n            });\n            sdk.openChannel.addOpenChannelHandler(channelHandlerId, channelHandlerParams);\n        }\n        return function () {\n            var _a, _b, _c;\n            if (((_a = sdk === null || sdk === void 0 ? void 0 : sdk.openChannel) === null || _a === void 0 ? void 0 : _a.removeOpenChannelHandler) && channelHandlerId) {\n                logger.info('OpenChannelSettings | Removing channel handlers', channelHandlerId);\n                (_c = (_b = sdk.openChannel).removeOpenChannelHandler) === null || _c === void 0 ? void 0 : _c.call(_b, channelHandlerId);\n            }\n        };\n    }, [channelUrl]);\n    return (React__default.createElement(OpenChannelSettingsContext.Provider, { value: {\n            channelUrl: channelUrl,\n            channel: currentChannel,\n            isChannelInitialized: isChannelInitialized,\n            setChannel: setChannel,\n            onCloseClick: onCloseClick,\n            onChannelModified: onChannelModified,\n            onBeforeUpdateChannel: onBeforeUpdateChannel,\n            onDeleteChannel: onDeleteChannel,\n        } },\n        React__default.createElement(UserProfileProvider, { isOpenChannel: true, renderUserProfile: props === null || props === void 0 ? void 0 : props.renderUserProfile, disableUserProfile: (_g = props === null || props === void 0 ? void 0 : props.disableUserProfile) !== null && _g !== void 0 ? _g : (_h = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config) === null || _h === void 0 ? void 0 : _h.disableUserProfile }, children)));\n};\nvar useOpenChannelSettingsContext = function () {\n    var context = React__default.useContext(OpenChannelSettingsContext);\n    if (!context)\n        throw new Error('OpenChannelSettingsContext not found. Use within the OpenChannelSettings module.');\n    return context;\n};\n\nexport { OpenChannelSettingsProvider, useOpenChannelSettingsContext };\n//# sourceMappingURL=context.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}