{"ast":null,"code":"import { _ as __assign } from './bundle-BQi9-O76.js';\nimport React__default, { useState } from 'react';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { u as useLongPress } from './bundle-AfQS5DGf.js';\nimport { u as useLocalization } from './bundle-cQZ3UZoG.js';\nimport { u as useMediaQueryContext } from './bundle-f-SpnOx2.js';\nimport { n as noop } from './bundle-BgwzpLeQ.js';\nimport { i as isVoiceMessage } from './bundle-DxTN4_0p.js';\nimport { a as getTotalMembers, M as MessageStatus, b as getLastMessageCreatedAt, c as getLastMessage, d as getChannelUnreadMessageCount } from './bundle-vuBlPTsL.js';\nimport { TypingIndicatorText } from '../GroupChannel/components/TypingIndicator.js';\nimport Badge from '../ui/Badge.js';\nimport ChannelAvatar from '../ui/ChannelAvatar.js';\nimport Icon, { IconTypes, IconColors } from '../ui/Icon.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from './bundle-DhKQeIfP.js';\nimport MentionUserLabel from '../ui/MentionUserLabel.js';\nimport { M as Modal } from './bundle-CXdo2kR_.js';\nimport TextButton from '../ui/TextButton.js';\nvar GroupChannelListItemView = function (_a) {\n  var channel = _a.channel,\n    tabIndex = _a.tabIndex,\n    isTyping = _a.isTyping,\n    isSelected = _a.isSelected,\n    channelName = _a.channelName,\n    _b = _a.isMessageStatusEnabled,\n    isMessageStatusEnabled = _b === void 0 ? true : _b,\n    _c = _a.onClick,\n    onClick = _c === void 0 ? noop : _c,\n    _d = _a.onLeaveChannel,\n    onLeaveChannel = _d === void 0 ? function () {\n      return Promise.resolve();\n    } : _d,\n    renderChannelAction = _a.renderChannelAction;\n  var config = useSendbirdStateContext().config;\n  var theme = config.theme,\n    userId = config.userId;\n  var _e = useLocalization(),\n    dateLocale = _e.dateLocale,\n    stringSet = _e.stringSet;\n  var isMobile = useMediaQueryContext().isMobile;\n  var isMentionEnabled = config.groupChannel.enableMention;\n  var _f = useState(false),\n    showMobileLeave = _f[0],\n    setShowMobileLeave = _f[1];\n  var onLongPress = useLongPress({\n    onLongPress: function () {\n      if (isMobile) {\n        setShowMobileLeave(true);\n      }\n    },\n    onClick: onClick\n  }, {\n    delay: 1000\n  });\n  return React__default.createElement(React__default.Fragment, null, React__default.createElement(\"div\", __assign({\n    className: ['sendbird-channel-preview', isSelected ? 'sendbird-channel-preview--active' : ''].join(' '),\n    role: \"link\",\n    tabIndex: tabIndex\n  }, isMobile ? __assign({}, onLongPress) : {\n    onClick: onClick\n  }), React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__avatar\"\n  }, React__default.createElement(ChannelAvatar, {\n    channel: channel,\n    userId: userId,\n    theme: theme\n  })), React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content\"\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper\"\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper__header\"\n  }, (channel.isBroadcast || false) && React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper__header__broadcast-icon\"\n  }, React__default.createElement(Icon, {\n    type: IconTypes.BROADCAST,\n    fillColor: IconColors.SECONDARY,\n    height: \"16px\",\n    width: \"16px\"\n  })), React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__header__channel-name\",\n    testID: \"sendbird-channel-preview__content__upper__header__channel-name\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, channelName), React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__header__total-members\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, getTotalMembers(channel)), channel.isFrozen && React__default.createElement(\"div\", {\n    title: \"Frozen\",\n    className: \"sendbird-channel-preview__content__upper__header__frozen-icon\"\n  }, React__default.createElement(Icon, {\n    type: IconTypes.FREEZE,\n    fillColor: IconColors.PRIMARY,\n    height: 12,\n    width: 12\n  }))), !channel.isEphemeral && isMessageStatusEnabled && React__default.createElement(MessageStatus, {\n    className: \"sendbird-channel-preview__content__upper__last-message-at\",\n    channel: channel,\n    message: channel.lastMessage,\n    isDateSeparatorConsidered: false\n  }), !channel.isEphemeral && !isMessageStatusEnabled && React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__last-message-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, getLastMessageCreatedAt({\n    channel: channel,\n    locale: dateLocale,\n    stringSet: stringSet\n  }))), React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__lower\"\n  }, React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__lower__last-message\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, isTyping && React__default.createElement(TypingIndicatorText, {\n    members: channel.getTypingUsers()\n  }), !isTyping && !isVoiceMessage(channel.lastMessage) && getLastMessage(channel, stringSet), !isTyping && isVoiceMessage(channel.lastMessage) && stringSet.VOICE_MESSAGE),\n  /**\n   * Do not show unread count for focused channel. This is because of the limitation where\n   * isScrollBottom and hasNext states needs to be added globally but they are from channel context\n   * so channel list cannot see them with the current architecture.\n   */\n  !isSelected && !channel.isEphemeral && React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__lower__unread-message-count\"\n  }, isMentionEnabled && channel.unreadMentionCount > 0 ? React__default.createElement(MentionUserLabel, {\n    className: \"sendbird-channel-preview__content__lower__unread-message-count__mention\",\n    color: \"purple\"\n  }, '@') : null, getChannelUnreadMessageCount(channel) ?\n  // return number\n  React__default.createElement(Badge, {\n    count: getChannelUnreadMessageCount(channel)\n  }) : null))), !isMobile && React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__action\"\n  }, renderChannelAction({\n    channel: channel\n  }))), showMobileLeave && isMobile && React__default.createElement(Modal, {\n    className: \"sendbird-channel-preview__leave--mobile\",\n    titleText: channelName,\n    hideFooter: true,\n    isCloseOnClickOutside: true,\n    onCancel: function () {\n      return setShowMobileLeave(false);\n    }\n  }, React__default.createElement(TextButton, {\n    onClick: function () {\n      onLeaveChannel();\n      setShowMobileLeave(false);\n    },\n    className: \"sendbird-channel-preview__leave-label--mobile\"\n  }, React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.CHANNEL_PREVIEW_MOBILE_LEAVE))));\n};\nexport { GroupChannelListItemView as G };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { _ as __assign } from './bundle-BQi9-O76.js';\nimport React__default, { useState } from 'react';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { u as useLongPress } from './bundle-AfQS5DGf.js';\nimport { u as useLocalization } from './bundle-cQZ3UZoG.js';\nimport { u as useMediaQueryContext } from './bundle-f-SpnOx2.js';\nimport { n as noop } from './bundle-BgwzpLeQ.js';\nimport { i as isVoiceMessage } from './bundle-DxTN4_0p.js';\nimport { a as getTotalMembers, M as MessageStatus, b as getLastMessageCreatedAt, c as getLastMessage, d as getChannelUnreadMessageCount } from './bundle-vuBlPTsL.js';\nimport { TypingIndicatorText } from '../GroupChannel/components/TypingIndicator.js';\nimport Badge from '../ui/Badge.js';\nimport ChannelAvatar from '../ui/ChannelAvatar.js';\nimport Icon, { IconTypes, IconColors } from '../ui/Icon.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from './bundle-DhKQeIfP.js';\nimport MentionUserLabel from '../ui/MentionUserLabel.js';\nimport { M as Modal } from './bundle-CXdo2kR_.js';\nimport TextButton from '../ui/TextButton.js';\n\nvar GroupChannelListItemView = function (_a) {\n    var channel = _a.channel, tabIndex = _a.tabIndex, isTyping = _a.isTyping, isSelected = _a.isSelected, channelName = _a.channelName, _b = _a.isMessageStatusEnabled, isMessageStatusEnabled = _b === void 0 ? true : _b, _c = _a.onClick, onClick = _c === void 0 ? noop : _c, _d = _a.onLeaveChannel, onLeaveChannel = _d === void 0 ? function () { return Promise.resolve(); } : _d, renderChannelAction = _a.renderChannelAction;\n    var config = useSendbirdStateContext().config;\n    var theme = config.theme, userId = config.userId;\n    var _e = useLocalization(), dateLocale = _e.dateLocale, stringSet = _e.stringSet;\n    var isMobile = useMediaQueryContext().isMobile;\n    var isMentionEnabled = config.groupChannel.enableMention;\n    var _f = useState(false), showMobileLeave = _f[0], setShowMobileLeave = _f[1];\n    var onLongPress = useLongPress({\n        onLongPress: function () {\n            if (isMobile) {\n                setShowMobileLeave(true);\n            }\n        },\n        onClick: onClick,\n    }, {\n        delay: 1000,\n    });\n    return (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(\"div\", __assign({ className: [\n                'sendbird-channel-preview',\n                isSelected ? 'sendbird-channel-preview--active' : '',\n            ].join(' '), role: \"link\", tabIndex: tabIndex }, (isMobile ? __assign({}, onLongPress) : { onClick: onClick })),\n            React__default.createElement(\"div\", { className: \"sendbird-channel-preview__avatar\" },\n                React__default.createElement(ChannelAvatar, { channel: channel, userId: userId, theme: theme })),\n            React__default.createElement(\"div\", { className: \"sendbird-channel-preview__content\" },\n                React__default.createElement(\"div\", { className: \"sendbird-channel-preview__content__upper\" },\n                    React__default.createElement(\"div\", { className: \"sendbird-channel-preview__content__upper__header\" },\n                        (channel.isBroadcast || false) && (React__default.createElement(\"div\", { className: \"sendbird-channel-preview__content__upper__header__broadcast-icon\" },\n                            React__default.createElement(Icon, { type: IconTypes.BROADCAST, fillColor: IconColors.SECONDARY, height: \"16px\", width: \"16px\" }))),\n                        React__default.createElement(Label, { className: \"sendbird-channel-preview__content__upper__header__channel-name\", testID: \"sendbird-channel-preview__content__upper__header__channel-name\", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_1 }, channelName),\n                        React__default.createElement(Label, { className: \"sendbird-channel-preview__content__upper__header__total-members\", type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, getTotalMembers(channel)),\n                        (channel.isFrozen) && (React__default.createElement(\"div\", { title: \"Frozen\", className: \"sendbird-channel-preview__content__upper__header__frozen-icon\" },\n                            React__default.createElement(Icon, { type: IconTypes.FREEZE, fillColor: IconColors.PRIMARY, height: 12, width: 12 })))),\n                    !channel.isEphemeral && isMessageStatusEnabled && (React__default.createElement(MessageStatus, { className: \"sendbird-channel-preview__content__upper__last-message-at\", channel: channel, message: channel.lastMessage, isDateSeparatorConsidered: false })),\n                    !channel.isEphemeral && !isMessageStatusEnabled && (React__default.createElement(Label, { className: \"sendbird-channel-preview__content__upper__last-message-at\", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_2 }, getLastMessageCreatedAt({\n                        channel: channel,\n                        locale: dateLocale,\n                        stringSet: stringSet,\n                    })))),\n                React__default.createElement(\"div\", { className: \"sendbird-channel-preview__content__lower\" },\n                    React__default.createElement(Label, { className: \"sendbird-channel-preview__content__lower__last-message\", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_3 },\n                        isTyping && (React__default.createElement(TypingIndicatorText, { members: channel.getTypingUsers() })),\n                        !isTyping\n                            && !isVoiceMessage(channel.lastMessage)\n                            && getLastMessage(channel, stringSet),\n                        !isTyping\n                            && isVoiceMessage(channel.lastMessage)\n                            && stringSet.VOICE_MESSAGE),\n                    /**\n                     * Do not show unread count for focused channel. This is because of the limitation where\n                     * isScrollBottom and hasNext states needs to be added globally but they are from channel context\n                     * so channel list cannot see them with the current architecture.\n                     */\n                    !isSelected && !channel.isEphemeral && (React__default.createElement(\"div\", { className: \"sendbird-channel-preview__content__lower__unread-message-count\" },\n                        isMentionEnabled && channel.unreadMentionCount > 0 ? (React__default.createElement(MentionUserLabel, { className: \"sendbird-channel-preview__content__lower__unread-message-count__mention\", color: \"purple\" }, '@')) : null,\n                        getChannelUnreadMessageCount(channel) ? ( // return number\n                        React__default.createElement(Badge, { count: getChannelUnreadMessageCount(channel) })) : null)))),\n            !isMobile && (React__default.createElement(\"div\", { className: \"sendbird-channel-preview__action\" }, renderChannelAction({ channel: channel })))),\n        showMobileLeave && isMobile && (React__default.createElement(Modal, { className: \"sendbird-channel-preview__leave--mobile\", titleText: channelName, hideFooter: true, isCloseOnClickOutside: true, onCancel: function () { return setShowMobileLeave(false); } },\n            React__default.createElement(TextButton, { onClick: function () {\n                    onLeaveChannel();\n                    setShowMobileLeave(false);\n                }, className: \"sendbird-channel-preview__leave-label--mobile\" },\n                React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.CHANNEL_PREVIEW_MOBILE_LEAVE))))));\n};\n\nexport { GroupChannelListItemView as G };\n//# sourceMappingURL=bundle-C3GXmMjX.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}