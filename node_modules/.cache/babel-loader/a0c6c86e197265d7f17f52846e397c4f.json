{"ast":null,"code":"import React__default, { useState, useContext, useMemo, useRef } from 'react';\nimport ReactionBadge from './ReactionBadge.js';\nimport ReactionButton from './ReactionButton.js';\nimport ImageRenderer from './ImageRenderer.js';\nimport Icon, { IconTypes, IconColors } from './Icon.js';\nimport { C as ContextMenu, f as EmojiListItems } from '../chunks/bundle-CwKZj-B6.js';\nimport { V as getEmojiUrl, W as isReactedBy, X as getEmojiTooltipString, x as getEmojiListAll, Y as getEmojiMapAll, w as getClassName } from '../chunks/bundle-DxTN4_0p.js';\nimport BottomSheet from './BottomSheet.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../chunks/bundle-DhKQeIfP.js';\nimport { UserListItem } from './UserListItem.js';\nimport { c as classnames } from '../chunks/bundle-BgwzpLeQ.js';\nimport { _ as __assign } from '../chunks/bundle-BQi9-O76.js';\nimport Tooltip from './Tooltip.js';\nimport TooltipWrapper from './TooltipWrapper.js';\nimport { u as useMediaQueryContext } from '../chunks/bundle-f-SpnOx2.js';\nimport { u as useLongPress } from '../chunks/bundle-AfQS5DGf.js';\nimport { L as LocalizationContext } from '../chunks/bundle-cQZ3UZoG.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { useMessageContext } from '../Message/context.js';\nimport { g as getIsReactionEnabled } from '../chunks/bundle-BNDaXsLn.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport 'react-dom';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport './SortByRow.js';\nimport '../chunks/bundle-etuaqevl.js';\nimport '../withSendbird.js';\nimport './IconButton.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CNWAfTVw.js';\nimport '../chunks/bundle-CA85nVxp.js';\nimport '../chunks/bundle-CXdo2kR_.js';\nimport './Button.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '../chunks/bundle-DDeWOERD.js';\nimport '../chunks/bundle-DCMGp6rH.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport '../chunks/bundle-BrTJ5Zbd.js';\nimport '../chunks/bundle-CFosTNce.js';\nimport '../chunks/bundle-DXRRGizV.js';\nimport './MutedAvatarOverlay.js';\nimport './Checkbox.js';\nimport './UserProfile.js';\nimport '../sendbirdSelectors.js';\nimport '../chunks/bundle-b6TpX_JP.js';\nvar ReactedMembersBottomSheet = function (_a) {\n  var _b, _c, _d;\n  var message = _a.message,\n    channel = _a.channel,\n    _e = _a.emojiKey,\n    emojiKey = _e === void 0 ? '' : _e,\n    hideMenu = _a.hideMenu,\n    emojiContainer = _a.emojiContainer,\n    onPressUserProfileHandler = _a.onPressUserProfileHandler;\n  var _f = channel.members,\n    members = _f === void 0 ? [] : _f;\n  var _g = useState(emojiKey),\n    selectedEmoji = _g[0],\n    setSelectedEmoji = _g[1];\n  function onPressUserProfileCallBack() {\n    if (onPressUserProfileHandler && message) {\n      var sender = message === null || message === void 0 ? void 0 : message.sender;\n      onPressUserProfileHandler(sender);\n    }\n  }\n  return React__default.createElement(BottomSheet, {\n    onBackdropClick: hideMenu\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-message__bottomsheet\"\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-message__bottomsheet__reacted-members\"\n  }, (_b = message.reactions) === null || _b === void 0 ? void 0 : _b.map(function (reaction) {\n    var emojiUrl = getEmojiUrl(emojiContainer, reaction.key);\n    return React__default.createElement(\"div\", {\n      key: reaction.key,\n      className: classnames('sendbird-message__bottomsheet__reacted-members__item', selectedEmoji === reaction.key && 'sendbird-message__bottomsheet__reacted-members__item__selected'),\n      onClick: function () {\n        setSelectedEmoji(reaction.key);\n      }\n    }, React__default.createElement(ImageRenderer, {\n      url: emojiUrl,\n      width: \"28px\",\n      height: \"28px\",\n      placeHolder: function (_a) {\n        var style = _a.style;\n        return React__default.createElement(\"div\", {\n          style: style\n        }, React__default.createElement(Icon, {\n          type: IconTypes.QUESTION,\n          fillColor: IconColors.ON_BACKGROUND_3,\n          width: \"28px\",\n          height: \"28px\"\n        }));\n      }\n    }), React__default.createElement(Label, {\n      type: LabelTypography.BUTTON_2,\n      color: selectedEmoji === reaction.key ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3\n    }, reaction.userIds.length));\n  })), React__default.createElement(\"div\", {\n    className: \"sendbird-message__bottomsheet__reactor-list\"\n  },\n  // making a member list who reacted to the message with the `selectedEmoji`\n  ((_d = (_c = message.reactions) === null || _c === void 0 ? void 0 : _c.find(function (reaction) {\n    return reaction.key === selectedEmoji;\n  })) === null || _d === void 0 ? void 0 : _d.userIds.map(function (userId) {\n    return members.find(function (member) {\n      return member.userId === userId;\n    });\n  }).filter(function (member) {\n    return member !== undefined;\n  })).map(function (member) {\n    return React__default.createElement(UserListItem, {\n      key: member.userId,\n      className: \"sendbird-message__bottomsheet__reactor-list__item\",\n      user: member,\n      avatarSize: \"36px\",\n      onUserAvatarClick: onPressUserProfileCallBack\n    });\n  }))));\n};\nfunction ReactionItem(_a) {\n  var _b;\n  var reaction = _a.reaction,\n    memberNicknamesMap = _a.memberNicknamesMap,\n    setEmojiKey = _a.setEmojiKey,\n    toggleReaction = _a.toggleReaction,\n    emojisMap = _a.emojisMap,\n    channel = _a.channel,\n    message = _a.message;\n  var store = useSendbirdStateContext();\n  var isMobile = useMediaQueryContext().isMobile;\n  var messageStore = useMessageContext();\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var userId = store.config.userId;\n  var reactedByMe = isReactedBy(userId, reaction);\n  var showHoverTooltip = reaction.userIds.length > 0 && (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && !channel.isSuper;\n  var handleOnClick = function () {\n    setEmojiKey('');\n    toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message !== null && message !== void 0 ? message : messageStore === null || messageStore === void 0 ? void 0 : messageStore.message, reaction.key, reactedByMe);\n  };\n  var longPress = useLongPress({\n    onLongPress: function () {\n      setEmojiKey(reaction.key);\n    },\n    onClick: handleOnClick\n  }, {\n    shouldPreventDefault: true,\n    shouldStopPropagation: true\n  });\n  return React__default.createElement(TooltipWrapper, {\n    className: \"sendbird-emoji-reactions__reaction-badge\",\n    hoverTooltip: showHoverTooltip ? React__default.createElement(Tooltip, null, getEmojiTooltipString(reaction, userId, memberNicknamesMap, stringSet)) : React__default.createElement(React__default.Fragment, null)\n  }, React__default.createElement(\"div\", __assign({}, isMobile ? longPress : {\n    onClick: handleOnClick\n  }), React__default.createElement(ReactionBadge, {\n    count: reaction.userIds.length,\n    selected: reactedByMe\n  }, React__default.createElement(ImageRenderer, {\n    circle: true,\n    url: ((_b = emojisMap.get(reaction === null || reaction === void 0 ? void 0 : reaction.key)) === null || _b === void 0 ? void 0 : _b.url) || '',\n    width: \"20px\",\n    height: \"20px\",\n    defaultComponent: React__default.createElement(Icon, {\n      width: \"20px\",\n      height: \"20px\",\n      type: IconTypes.QUESTION\n    })\n  }))));\n}\nvar AddReactionBadgeItem = function (_a) {\n  var onClick = _a.onClick;\n  var onlyClick = useLongPress({\n    onLongPress: function () {},\n    onClick: onClick\n  }, {\n    shouldPreventDefault: true,\n    shouldStopPropagation: true\n  });\n  return React__default.createElement(\"div\", __assign({\n    className: \"sendbird-emoji-reactions__add-reaction-badge\",\n    \"data-testid\": \"sendbird-emoji-reactions__add-reaction-badge\"\n  }, onlyClick), React__default.createElement(ReactionBadge, {\n    isAdd: true\n  }, React__default.createElement(Icon, {\n    type: IconTypes.EMOJI_MORE,\n    fillColor: IconColors.ON_BACKGROUND_3,\n    width: \"20px\",\n    height: \"20px\"\n  })));\n};\nvar MobileEmojisBottomSheet = function (_a) {\n  var userId = _a.userId,\n    message = _a.message,\n    emojiContainer = _a.emojiContainer,\n    hideMenu = _a.hideMenu,\n    toggleReaction = _a.toggleReaction;\n  var emojiAllList = useMemo(function () {\n    return getEmojiListAll(emojiContainer);\n  }, [emojiContainer]);\n  return React__default.createElement(BottomSheet, {\n    onBackdropClick: hideMenu\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-message__bottomsheet sendbird-message__emojis-bottomsheet\"\n  }, emojiAllList.map(function (emoji) {\n    var _a, _b, _c, _d;\n    var isReacted = (_d = (_c = (_b = (_a = message === null || message === void 0 ? void 0 : message.reactions) === null || _a === void 0 ? void 0 : _a.find(function (reaction) {\n      return reaction.key === emoji.key;\n    })) === null || _b === void 0 ? void 0 : _b.userIds) === null || _c === void 0 ? void 0 : _c.some(function (reactorId) {\n      return reactorId === userId;\n    })) !== null && _d !== void 0 ? _d : false;\n    return React__default.createElement(ReactionButton, {\n      key: emoji.key,\n      width: \"44px\",\n      height: \"44px\",\n      selected: isReacted,\n      onClick: function (e) {\n        e === null || e === void 0 ? void 0 : e.stopPropagation();\n        toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message, emoji.key, isReacted);\n        hideMenu();\n      },\n      testID: \"ui_mobile_emoji_reactions_menu_\".concat(emoji.key)\n    }, React__default.createElement(ImageRenderer, {\n      url: emoji.url,\n      width: \"38px\",\n      height: \"38px\",\n      placeHolder: function (_a) {\n        var style = _a.style;\n        return React__default.createElement(\"div\", {\n          style: style\n        }, React__default.createElement(Icon, {\n          type: IconTypes.QUESTION,\n          fillColor: IconColors.ON_BACKGROUND_3,\n          width: \"28px\",\n          height: \"28px\"\n        }));\n      }\n    }));\n  })));\n};\nvar EmojiReactions = function (_a) {\n  var _b, _c, _d, _e, _f;\n  var _g = _a.className,\n    className = _g === void 0 ? '' : _g,\n    userId = _a.userId,\n    message = _a.message,\n    channel = _a.channel,\n    emojiContainer = _a.emojiContainer,\n    memberNicknamesMap = _a.memberNicknamesMap,\n    _h = _a.spaceFromTrigger,\n    spaceFromTrigger = _h === void 0 ? {\n      x: 0,\n      y: 0\n    } : _h,\n    _j = _a.isByMe,\n    isByMe = _j === void 0 ? false : _j,\n    toggleReaction = _a.toggleReaction,\n    onPressUserProfile = _a.onPressUserProfile;\n  var showTheReactedMembers = false;\n  try {\n    var config = useSendbirdStateContext().config;\n    showTheReactedMembers = channel ? getIsReactionEnabled({\n      channel: channel,\n      config: config\n    }) : false;\n  } catch (err) {\n    // TODO: Handle error\n  }\n  var isMobile = useMediaQueryContext().isMobile;\n  var addReactionRef = useRef(null);\n  var _k = useState(false),\n    showEmojiList = _k[0],\n    setShowEmojiList = _k[1];\n  var _l = useState(''),\n    selectedEmojiKey = _l[0],\n    setSelectedEmojiKey = _l[1];\n  var emojisMap = getEmojiMapAll(emojiContainer);\n  var showAddReactionBadge = ((_c = (_b = message.reactions) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0) < emojisMap.size;\n  return React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-emoji-reactions', isByMe ? 'outgoing' : 'incoming'])\n  }, ((_e = (_d = message.reactions) === null || _d === void 0 ? void 0 : _d.length) !== null && _e !== void 0 ? _e : 0) > 0 && ((_f = message.reactions) === null || _f === void 0 ? void 0 : _f.map(function (reaction) {\n    return React__default.createElement(ReactionItem, {\n      key: reaction === null || reaction === void 0 ? void 0 : reaction.key,\n      reaction: reaction,\n      memberNicknamesMap: memberNicknamesMap,\n      setEmojiKey: setSelectedEmojiKey,\n      toggleReaction: toggleReaction,\n      emojisMap: emojisMap,\n      channel: channel,\n      message: message\n    });\n  })), !isMobile && showAddReactionBadge && React__default.createElement(ContextMenu, {\n    menuTrigger: function (toggleDropdown) {\n      return React__default.createElement(ReactionBadge, {\n        className: \"sendbird-emoji-reactions__add-reaction-badge\",\n        testID: \"sendbird-emoji-reactions__add-reaction-badge\",\n        ref: addReactionRef,\n        isAdd: true,\n        onClick: function (e) {\n          var _a;\n          toggleDropdown();\n          (_a = e === null || e === void 0 ? void 0 : e.stopPropagation) === null || _a === void 0 ? void 0 : _a.call(e);\n        }\n      }, React__default.createElement(Icon, {\n        type: IconTypes.EMOJI_MORE,\n        fillColor: IconColors.ON_BACKGROUND_3,\n        width: \"20px\",\n        height: \"20px\"\n      }));\n    },\n    menuItems: function (closeDropdown) {\n      return React__default.createElement(EmojiListItems, {\n        parentRef: addReactionRef,\n        parentContainRef: addReactionRef,\n        closeDropdown: closeDropdown,\n        spaceFromTrigger: spaceFromTrigger\n      }, getEmojiListAll(emojiContainer).map(function (emoji) {\n        var _a, _b, _c;\n        var isReacted = ((_c = (_b = (_a = message === null || message === void 0 ? void 0 : message.reactions) === null || _a === void 0 ? void 0 : _a.find(function (reaction) {\n          return reaction.key === emoji.key;\n        })) === null || _b === void 0 ? void 0 : _b.userIds) === null || _c === void 0 ? void 0 : _c.some(function (reactorId) {\n          return reactorId === userId;\n        })) || false;\n        return React__default.createElement(ReactionButton, {\n          key: emoji.key,\n          width: \"36px\",\n          height: \"36px\",\n          selected: isReacted,\n          onClick: function (e) {\n            closeDropdown();\n            toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message, emoji.key, isReacted);\n            e === null || e === void 0 ? void 0 : e.stopPropagation();\n          },\n          testID: \"ui_emoji_reactions_menu_\".concat(emoji.key)\n        }, React__default.createElement(ImageRenderer, {\n          url: (emoji === null || emoji === void 0 ? void 0 : emoji.url) || '',\n          width: \"28px\",\n          height: \"28px\",\n          placeHolder: function (_a) {\n            var style = _a.style;\n            return React__default.createElement(\"div\", {\n              style: style\n            }, React__default.createElement(Icon, {\n              type: IconTypes.QUESTION,\n              fillColor: IconColors.ON_BACKGROUND_3,\n              width: \"28px\",\n              height: \"28px\"\n            }));\n          }\n        }));\n      }));\n    }\n  }), isMobile && showAddReactionBadge && React__default.createElement(AddReactionBadgeItem, {\n    onClick: function () {\n      setShowEmojiList(true);\n    }\n  }), isMobile && showEmojiList && React__default.createElement(MobileEmojisBottomSheet, {\n    userId: userId,\n    message: message,\n    emojiContainer: emojiContainer,\n    hideMenu: function () {\n      setShowEmojiList(false);\n    },\n    toggleReaction: toggleReaction\n  }), isMobile && selectedEmojiKey && channel !== null && showTheReactedMembers && React__default.createElement(ReactedMembersBottomSheet, {\n    message: message,\n    channel: channel,\n    emojiKey: selectedEmojiKey,\n    hideMenu: function () {\n      setSelectedEmojiKey('');\n    },\n    emojiContainer: emojiContainer,\n    onPressUserProfileHandler: onPressUserProfile\n  }));\n};\nexport { EmojiReactions as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { useState, useContext, useMemo, useRef } from 'react';\nimport ReactionBadge from './ReactionBadge.js';\nimport ReactionButton from './ReactionButton.js';\nimport ImageRenderer from './ImageRenderer.js';\nimport Icon, { IconTypes, IconColors } from './Icon.js';\nimport { C as ContextMenu, f as EmojiListItems } from '../chunks/bundle-CwKZj-B6.js';\nimport { V as getEmojiUrl, W as isReactedBy, X as getEmojiTooltipString, x as getEmojiListAll, Y as getEmojiMapAll, w as getClassName } from '../chunks/bundle-DxTN4_0p.js';\nimport BottomSheet from './BottomSheet.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../chunks/bundle-DhKQeIfP.js';\nimport { UserListItem } from './UserListItem.js';\nimport { c as classnames } from '../chunks/bundle-BgwzpLeQ.js';\nimport { _ as __assign } from '../chunks/bundle-BQi9-O76.js';\nimport Tooltip from './Tooltip.js';\nimport TooltipWrapper from './TooltipWrapper.js';\nimport { u as useMediaQueryContext } from '../chunks/bundle-f-SpnOx2.js';\nimport { u as useLongPress } from '../chunks/bundle-AfQS5DGf.js';\nimport { L as LocalizationContext } from '../chunks/bundle-cQZ3UZoG.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { useMessageContext } from '../Message/context.js';\nimport { g as getIsReactionEnabled } from '../chunks/bundle-BNDaXsLn.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport 'react-dom';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport './SortByRow.js';\nimport '../chunks/bundle-etuaqevl.js';\nimport '../withSendbird.js';\nimport './IconButton.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CNWAfTVw.js';\nimport '../chunks/bundle-CA85nVxp.js';\nimport '../chunks/bundle-CXdo2kR_.js';\nimport './Button.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '../chunks/bundle-DDeWOERD.js';\nimport '../chunks/bundle-DCMGp6rH.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport '../chunks/bundle-BrTJ5Zbd.js';\nimport '../chunks/bundle-CFosTNce.js';\nimport '../chunks/bundle-DXRRGizV.js';\nimport './MutedAvatarOverlay.js';\nimport './Checkbox.js';\nimport './UserProfile.js';\nimport '../sendbirdSelectors.js';\nimport '../chunks/bundle-b6TpX_JP.js';\n\nvar ReactedMembersBottomSheet = function (_a) {\n    var _b, _c, _d;\n    var message = _a.message, channel = _a.channel, _e = _a.emojiKey, emojiKey = _e === void 0 ? '' : _e, hideMenu = _a.hideMenu, emojiContainer = _a.emojiContainer, onPressUserProfileHandler = _a.onPressUserProfileHandler;\n    var _f = channel.members, members = _f === void 0 ? [] : _f;\n    var _g = useState(emojiKey), selectedEmoji = _g[0], setSelectedEmoji = _g[1];\n    function onPressUserProfileCallBack() {\n        if (onPressUserProfileHandler && message) {\n            var sender = message === null || message === void 0 ? void 0 : message.sender;\n            onPressUserProfileHandler(sender);\n        }\n    }\n    return (React__default.createElement(BottomSheet, { onBackdropClick: hideMenu },\n        React__default.createElement(\"div\", { className: \"sendbird-message__bottomsheet\" },\n            React__default.createElement(\"div\", { className: \"sendbird-message__bottomsheet__reacted-members\" }, (_b = message.reactions) === null || _b === void 0 ? void 0 : _b.map(function (reaction) {\n                var emojiUrl = getEmojiUrl(emojiContainer, reaction.key);\n                return (React__default.createElement(\"div\", { key: reaction.key, className: classnames('sendbird-message__bottomsheet__reacted-members__item', selectedEmoji === reaction.key && 'sendbird-message__bottomsheet__reacted-members__item__selected'), onClick: function () {\n                        setSelectedEmoji(reaction.key);\n                    } },\n                    React__default.createElement(ImageRenderer, { url: emojiUrl, width: \"28px\", height: \"28px\", placeHolder: function (_a) {\n                            var style = _a.style;\n                            return (React__default.createElement(\"div\", { style: style },\n                                React__default.createElement(Icon, { type: IconTypes.QUESTION, fillColor: IconColors.ON_BACKGROUND_3, width: \"28px\", height: \"28px\" })));\n                        } }),\n                    React__default.createElement(Label, { type: LabelTypography.BUTTON_2, color: selectedEmoji === reaction.key ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3 }, reaction.userIds.length)));\n            })),\n            React__default.createElement(\"div\", { className: \"sendbird-message__bottomsheet__reactor-list\" }, // making a member list who reacted to the message with the `selectedEmoji`\n            ((_d = (_c = message.reactions) === null || _c === void 0 ? void 0 : _c.find(function (reaction) { return reaction.key === selectedEmoji; })) === null || _d === void 0 ? void 0 : _d.userIds.map(function (userId) { return members.find(function (member) { return member.userId === userId; }); }).filter(function (member) { return member !== undefined; }))\n                .map(function (member) { return (React__default.createElement(UserListItem, { key: member.userId, className: \"sendbird-message__bottomsheet__reactor-list__item\", user: member, avatarSize: \"36px\", onUserAvatarClick: onPressUserProfileCallBack })); })))));\n};\n\nfunction ReactionItem(_a) {\n    var _b;\n    var reaction = _a.reaction, memberNicknamesMap = _a.memberNicknamesMap, setEmojiKey = _a.setEmojiKey, toggleReaction = _a.toggleReaction, emojisMap = _a.emojisMap, channel = _a.channel, message = _a.message;\n    var store = useSendbirdStateContext();\n    var isMobile = useMediaQueryContext().isMobile;\n    var messageStore = useMessageContext();\n    var stringSet = useContext(LocalizationContext).stringSet;\n    var userId = store.config.userId;\n    var reactedByMe = isReactedBy(userId, reaction);\n    var showHoverTooltip = (reaction.userIds.length > 0)\n        && ((channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && !channel.isSuper);\n    var handleOnClick = function () {\n        setEmojiKey('');\n        toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction((message !== null && message !== void 0 ? message : messageStore === null || messageStore === void 0 ? void 0 : messageStore.message), reaction.key, reactedByMe);\n    };\n    var longPress = useLongPress({\n        onLongPress: function () {\n            setEmojiKey(reaction.key);\n        },\n        onClick: handleOnClick,\n    }, {\n        shouldPreventDefault: true,\n        shouldStopPropagation: true,\n    });\n    return (React__default.createElement(TooltipWrapper, { className: \"sendbird-emoji-reactions__reaction-badge\", hoverTooltip: showHoverTooltip ? (React__default.createElement(Tooltip, null, getEmojiTooltipString(reaction, userId, memberNicknamesMap, stringSet))) : React__default.createElement(React__default.Fragment, null) },\n        React__default.createElement(\"div\", __assign({}, (isMobile\n            ? longPress\n            : { onClick: handleOnClick })),\n            React__default.createElement(ReactionBadge, { count: reaction.userIds.length, selected: reactedByMe },\n                React__default.createElement(ImageRenderer, { circle: true, url: ((_b = emojisMap.get(reaction === null || reaction === void 0 ? void 0 : reaction.key)) === null || _b === void 0 ? void 0 : _b.url) || '', width: \"20px\", height: \"20px\", defaultComponent: (React__default.createElement(Icon, { width: \"20px\", height: \"20px\", type: IconTypes.QUESTION })) })))));\n}\n\nvar AddReactionBadgeItem = function (_a) {\n    var onClick = _a.onClick;\n    var onlyClick = useLongPress({\n        onLongPress: function () { },\n        onClick: onClick,\n    }, {\n        shouldPreventDefault: true,\n        shouldStopPropagation: true,\n    });\n    return (React__default.createElement(\"div\", __assign({ className: \"sendbird-emoji-reactions__add-reaction-badge\", \"data-testid\": \"sendbird-emoji-reactions__add-reaction-badge\" }, onlyClick),\n        React__default.createElement(ReactionBadge, { isAdd: true },\n            React__default.createElement(Icon, { type: IconTypes.EMOJI_MORE, fillColor: IconColors.ON_BACKGROUND_3, width: \"20px\", height: \"20px\" }))));\n};\n\nvar MobileEmojisBottomSheet = function (_a) {\n    var userId = _a.userId, message = _a.message, emojiContainer = _a.emojiContainer, hideMenu = _a.hideMenu, toggleReaction = _a.toggleReaction;\n    var emojiAllList = useMemo(function () {\n        return getEmojiListAll(emojiContainer);\n    }, [emojiContainer]);\n    return (React__default.createElement(BottomSheet, { onBackdropClick: hideMenu },\n        React__default.createElement(\"div\", { className: \"sendbird-message__bottomsheet sendbird-message__emojis-bottomsheet\" }, emojiAllList.map(function (emoji) {\n            var _a, _b, _c, _d;\n            var isReacted = (_d = ((_c = (_b = (_a = message === null || message === void 0 ? void 0 : message.reactions) === null || _a === void 0 ? void 0 : _a.find(function (reaction) { return reaction.key === emoji.key; })) === null || _b === void 0 ? void 0 : _b.userIds) === null || _c === void 0 ? void 0 : _c.some(function (reactorId) { return reactorId === userId; }))) !== null && _d !== void 0 ? _d : false;\n            return (React__default.createElement(ReactionButton, { key: emoji.key, width: \"44px\", height: \"44px\", selected: isReacted, onClick: function (e) {\n                    e === null || e === void 0 ? void 0 : e.stopPropagation();\n                    toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message, emoji.key, isReacted);\n                    hideMenu();\n                }, testID: \"ui_mobile_emoji_reactions_menu_\".concat(emoji.key) },\n                React__default.createElement(ImageRenderer, { url: emoji.url, width: \"38px\", height: \"38px\", placeHolder: function (_a) {\n                        var style = _a.style;\n                        return (React__default.createElement(\"div\", { style: style },\n                            React__default.createElement(Icon, { type: IconTypes.QUESTION, fillColor: IconColors.ON_BACKGROUND_3, width: \"28px\", height: \"28px\" })));\n                    } })));\n        }))));\n};\n\nvar EmojiReactions = function (_a) {\n    var _b, _c, _d, _e, _f;\n    var _g = _a.className, className = _g === void 0 ? '' : _g, userId = _a.userId, message = _a.message, channel = _a.channel, emojiContainer = _a.emojiContainer, memberNicknamesMap = _a.memberNicknamesMap, _h = _a.spaceFromTrigger, spaceFromTrigger = _h === void 0 ? { x: 0, y: 0 } : _h, _j = _a.isByMe, isByMe = _j === void 0 ? false : _j, toggleReaction = _a.toggleReaction, onPressUserProfile = _a.onPressUserProfile;\n    var showTheReactedMembers = false;\n    try {\n        var config = useSendbirdStateContext().config;\n        showTheReactedMembers = channel ? getIsReactionEnabled({\n            channel: channel,\n            config: config,\n        }) : false;\n    }\n    catch (err) {\n        // TODO: Handle error\n    }\n    var isMobile = useMediaQueryContext().isMobile;\n    var addReactionRef = useRef(null);\n    var _k = useState(false), showEmojiList = _k[0], setShowEmojiList = _k[1];\n    var _l = useState(''), selectedEmojiKey = _l[0], setSelectedEmojiKey = _l[1];\n    var emojisMap = getEmojiMapAll(emojiContainer);\n    var showAddReactionBadge = ((_c = (_b = message.reactions) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0) < emojisMap.size;\n    return (React__default.createElement(\"div\", { className: getClassName([\n            className, 'sendbird-emoji-reactions',\n            isByMe ? 'outgoing' : 'incoming',\n        ]) },\n        (((_e = (_d = message.reactions) === null || _d === void 0 ? void 0 : _d.length) !== null && _e !== void 0 ? _e : 0) > 0) && ((_f = message.reactions) === null || _f === void 0 ? void 0 : _f.map(function (reaction) {\n            return (React__default.createElement(ReactionItem, { key: reaction === null || reaction === void 0 ? void 0 : reaction.key, reaction: reaction, memberNicknamesMap: memberNicknamesMap, setEmojiKey: setSelectedEmojiKey, toggleReaction: toggleReaction, emojisMap: emojisMap, channel: channel, message: message }));\n        })),\n        (!isMobile && showAddReactionBadge) && (React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) { return (React__default.createElement(ReactionBadge, { className: \"sendbird-emoji-reactions__add-reaction-badge\", testID: \"sendbird-emoji-reactions__add-reaction-badge\", ref: addReactionRef, isAdd: true, onClick: function (e) {\n                    var _a;\n                    toggleDropdown();\n                    (_a = e === null || e === void 0 ? void 0 : e.stopPropagation) === null || _a === void 0 ? void 0 : _a.call(e);\n                } },\n                React__default.createElement(Icon, { type: IconTypes.EMOJI_MORE, fillColor: IconColors.ON_BACKGROUND_3, width: \"20px\", height: \"20px\" }))); }, menuItems: function (closeDropdown) { return (React__default.createElement(EmojiListItems, { parentRef: addReactionRef, parentContainRef: addReactionRef, closeDropdown: closeDropdown, spaceFromTrigger: spaceFromTrigger }, getEmojiListAll(emojiContainer).map(function (emoji) {\n                var _a, _b, _c;\n                var isReacted = ((_c = (_b = (_a = message === null || message === void 0 ? void 0 : message.reactions) === null || _a === void 0 ? void 0 : _a.find(function (reaction) { return reaction.key === emoji.key; })) === null || _b === void 0 ? void 0 : _b.userIds) === null || _c === void 0 ? void 0 : _c.some(function (reactorId) { return reactorId === userId; })) || false;\n                return (React__default.createElement(ReactionButton, { key: emoji.key, width: \"36px\", height: \"36px\", selected: isReacted, onClick: function (e) {\n                        closeDropdown();\n                        toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message, emoji.key, isReacted);\n                        e === null || e === void 0 ? void 0 : e.stopPropagation();\n                    }, testID: \"ui_emoji_reactions_menu_\".concat(emoji.key) },\n                    React__default.createElement(ImageRenderer, { url: (emoji === null || emoji === void 0 ? void 0 : emoji.url) || '', width: \"28px\", height: \"28px\", placeHolder: function (_a) {\n                            var style = _a.style;\n                            return (React__default.createElement(\"div\", { style: style },\n                                React__default.createElement(Icon, { type: IconTypes.QUESTION, fillColor: IconColors.ON_BACKGROUND_3, width: \"28px\", height: \"28px\" })));\n                        } })));\n            }))); } })),\n        (isMobile && showAddReactionBadge) && (React__default.createElement(AddReactionBadgeItem, { onClick: function () {\n                setShowEmojiList(true);\n            } })),\n        (isMobile && showEmojiList) && (React__default.createElement(MobileEmojisBottomSheet, { userId: userId, message: message, emojiContainer: emojiContainer, hideMenu: function () {\n                setShowEmojiList(false);\n            }, toggleReaction: toggleReaction })),\n        (isMobile && selectedEmojiKey && channel !== null && showTheReactedMembers) && (React__default.createElement(ReactedMembersBottomSheet, { message: message, channel: channel, emojiKey: selectedEmojiKey, hideMenu: function () {\n                setSelectedEmojiKey('');\n            }, emojiContainer: emojiContainer, onPressUserProfileHandler: onPressUserProfile }))));\n};\n\nexport { EmojiReactions as default };\n//# sourceMappingURL=EmojiReactions.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}