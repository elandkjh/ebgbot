{"ast":null,"code":"import { c as __spreadArray, _ as __assign } from '../chunks/bundle-BQi9-O76.js';\nimport React__default, { useMemo, useState, useLayoutEffect, useRef } from 'react';\nimport { n as noop } from '../chunks/bundle-BgwzpLeQ.js';\nvar numberToPx = function (value) {\n  if (value === null) return undefined;\n  return typeof value === 'number' ? \"\".concat(value, \"px\") : value;\n};\nfunction getDynamicMinLengthInPx(sideLength, maxSideLength, defaultMinLength) {\n  var _a;\n  return \"min(\".concat(maxSideLength !== null && maxSideLength !== void 0 ? maxSideLength : defaultMinLength, \", \").concat((_a = numberToPx(sideLength)) !== null && _a !== void 0 ? _a : defaultMinLength, \")\");\n}\nfunction useDynamicSideLength(_a) {\n  var width = _a.width,\n    height = _a.height,\n    maxSideLength = _a.maxSideLength,\n    defaultMinLength = _a.defaultMinLength;\n  var dynamicMinWidth = useMemo(function () {\n    return getDynamicMinLengthInPx(width, maxSideLength, defaultMinLength);\n  }, [width]);\n  var dynamicMinHeight = useMemo(function () {\n    return getDynamicMinLengthInPx(height, maxSideLength, defaultMinLength);\n  }, [height]);\n  return [dynamicMinWidth, dynamicMinHeight];\n}\nvar useIsElementInViewport = function (elementRef) {\n  var _a = useState(false),\n    isVisible = _a[0],\n    setIsVisible = _a[1];\n  useLayoutEffect(function () {\n    var observer = new IntersectionObserver(function (entries) {\n      var entry = entries[0];\n      if (entry) setIsVisible(entry.isIntersecting);\n    });\n    if (elementRef.current) observer.observe(elementRef.current);\n    return function () {\n      return observer.disconnect();\n    };\n  }, [elementRef.current]);\n  return isVisible;\n};\nvar useLazyImageLoader = function (elementRef) {\n  var isLoaded = useRef(false);\n  var isVisible = useIsElementInViewport(elementRef);\n  if (isVisible) isLoaded.current = true;\n  return isLoaded.current;\n};\nfunction getBorderRadiusForImageRenderer(circle, borderRadius) {\n  if (circle === void 0) {\n    circle = false;\n  }\n  if (borderRadius === void 0) {\n    borderRadius = null;\n  }\n  return circle ? '50%' : numberToPx(borderRadius);\n}\nfunction getBorderRadiusForMultipleImageRenderer(borderRadius, index, totalCount) {\n  var value = typeof borderRadius === 'string' ? parseInt(borderRadius, 10) : borderRadius;\n  var lastIndex = totalCount - 1;\n  var topLeft = index === 0 ? value * 2 : value;\n  var topRight = index === 1 ? value * 2 : value;\n  var bottomRight = index === lastIndex ? value * 2 : value;\n  var bottomLeft = index === lastIndex - 1 ? value * 2 : value;\n  return \"\".concat(topLeft, \"px \").concat(topRight, \"px \").concat(bottomRight, \"px \").concat(bottomLeft, \"px\");\n}\n/*\n  ImageRenderer displays image with url or source\n  it checks if the source exist with img tag first\n  if it exists onLoad is called, if not onError is called\n  and those properties switch img tag to real purposing element\n*/\nvar ImageRenderer = function (_a) {\n  var _b = _a.className,\n    className = _b === void 0 ? '' : _b,\n    url = _a.url,\n    _c = _a.alt,\n    alt = _c === void 0 ? '' : _c,\n    _d = _a.width,\n    width = _d === void 0 ? null : _d,\n    _e = _a.maxSideLength,\n    maxSideLength = _e === void 0 ? null : _e,\n    _f = _a.height,\n    height = _f === void 0 ? null : _f,\n    _g = _a.circle,\n    circle = _g === void 0 ? false : _g,\n    _h = _a.fixedSize,\n    fixedSize = _h === void 0 ? false : _h,\n    _j = _a.placeHolder,\n    placeHolder = _j === void 0 ? null : _j,\n    _k = _a.defaultComponent,\n    defaultComponent = _k === void 0 ? null : _k,\n    _l = _a.borderRadius,\n    borderRadius = _l === void 0 ? null : _l,\n    _m = _a.onLoad,\n    onLoad = _m === void 0 ? noop : _m,\n    _o = _a.onError,\n    onError = _o === void 0 ? noop : _o,\n    shadeOnHover = _a.shadeOnHover,\n    _p = _a.isUploaded,\n    isUploaded = _p === void 0 ? true : _p;\n  var ref = useRef(null);\n  var isLoaded = useLazyImageLoader(ref);\n  var internalUrl = isLoaded ? url : null;\n  var _q = useState(false),\n    defaultComponentVisible = _q[0],\n    setDefaultComponentVisible = _q[1];\n  var _r = useState(true),\n    placeholderVisible = _r[0],\n    setPlaceholderVisible = _r[1];\n  var _s = useDynamicSideLength({\n      width: width,\n      height: height,\n      maxSideLength: maxSideLength,\n      defaultMinLength: '400px'\n    }),\n    dynamicMinWidth = _s[0],\n    dynamicMinHeight = _s[1];\n  var renderPlaceholder = function () {\n    if (typeof placeHolder === 'function') {\n      return placeHolder({\n        style: {\n          width: '100%',\n          minWidth: dynamicMinWidth,\n          maxWidth: fixedSize ? dynamicMinWidth : '400px',\n          height: dynamicMinHeight,\n          position: 'absolute',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center'\n        }\n      });\n    }\n    return placeHolder;\n  };\n  var renderDefault = function () {\n    if (typeof defaultComponent === 'function') return defaultComponent();\n    return defaultComponent;\n  };\n  var renderImage = function () {\n    var backgroundStyle = internalUrl ? {\n      backgroundRepeat: 'no-repeat',\n      backgroundPosition: 'center',\n      backgroundSize: 'cover',\n      backgroundImage: \"url(\".concat(internalUrl, \")\")\n    } : {};\n    return React__default.createElement(\"div\", {\n      className: \"sendbird-image-renderer__image\",\n      style: __assign({\n        width: '100%',\n        minWidth: dynamicMinWidth,\n        maxWidth: fixedSize ? dynamicMinWidth : '400px',\n        height: dynamicMinHeight,\n        position: 'absolute',\n        borderRadius: getBorderRadiusForImageRenderer(circle, borderRadius)\n      }, backgroundStyle)\n    });\n  };\n  return dynamicMinWidth && dynamicMinHeight && React__default.createElement(\"div\", {\n    ref: ref,\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-image-renderer'], false).join(' '),\n    style: {\n      width: '100%',\n      minWidth: dynamicMinWidth,\n      maxWidth: fixedSize ? dynamicMinWidth : '400px',\n      height: dynamicMinHeight\n    }\n  }, placeholderVisible && renderPlaceholder(), !internalUrl || defaultComponentVisible ? renderDefault() : renderImage(), shadeOnHover && React__default.createElement(\"div\", {\n    className: \"sendbird-multiple-files-image-renderer__image-cover\",\n    style: __assign({\n      borderRadius: getBorderRadiusForImageRenderer(circle, borderRadius)\n    }, isUploaded ? {} : {\n      display: 'inline-flex'\n    })\n  }), internalUrl && React__default.createElement(HiddenImageLoader, {\n    src: internalUrl,\n    alt: alt,\n    onLoadStart: function () {\n      setPlaceholderVisible(true);\n      setDefaultComponentVisible(false);\n    },\n    onLoad: function () {\n      setPlaceholderVisible(false);\n      setDefaultComponentVisible(false);\n      onLoad();\n    },\n    onError: function () {\n      setPlaceholderVisible(false);\n      setDefaultComponentVisible(true);\n      onError();\n    }\n  }));\n};\n// Image is loaded as a background-image, but this component serves as a hidden component to receive events indicating whether the image has actually been loaded.\nvar HiddenImageLoader = function (props) {\n  var src = props.src,\n    alt = props.alt,\n    _a = props.onLoadStart,\n    onLoadStart = _a === void 0 ? noop : _a,\n    _b = props.onLoad,\n    onLoad = _b === void 0 ? noop : _b,\n    _c = props.onError,\n    onError = _c === void 0 ? noop : _c;\n  var reloadCtx = useRef({\n    currSrc: src,\n    prevSrc: src,\n    loadFailure: false\n  });\n  if (reloadCtx.current.currSrc !== src) {\n    reloadCtx.current.prevSrc = reloadCtx.current.currSrc;\n    reloadCtx.current.currSrc = src;\n  }\n  // SideEffect: If the image URL has changed or loading has failed, please try again\n  useLayoutEffect(function () {\n    if (src) {\n      var sourceChanged = reloadCtx.current.prevSrc !== reloadCtx.current.currSrc;\n      var loadFailure = reloadCtx.current.loadFailure;\n      if (sourceChanged || loadFailure) {\n        onLoadStart();\n      }\n    }\n  }, [src, navigator.onLine]);\n  return React__default.createElement(\"img\", {\n    className: \"sendbird-image-renderer__hidden-image-loader\",\n    src: src,\n    alt: alt,\n    onLoad: function () {\n      reloadCtx.current.loadFailure = false;\n      onLoad();\n    },\n    onError: function () {\n      reloadCtx.current.loadFailure = true;\n      onError();\n    }\n  });\n};\nexport { ImageRenderer as default, getBorderRadiusForImageRenderer, getBorderRadiusForMultipleImageRenderer };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { c as __spreadArray, _ as __assign } from '../chunks/bundle-BQi9-O76.js';\nimport React__default, { useMemo, useState, useLayoutEffect, useRef } from 'react';\nimport { n as noop } from '../chunks/bundle-BgwzpLeQ.js';\n\nvar numberToPx = (function (value) {\n    if (value === null)\n        return undefined;\n    return typeof value === 'number' ? \"\".concat(value, \"px\") : value;\n});\n\nfunction getDynamicMinLengthInPx(sideLength, maxSideLength, defaultMinLength) {\n    var _a;\n    return \"min(\".concat(maxSideLength !== null && maxSideLength !== void 0 ? maxSideLength : defaultMinLength, \", \").concat((_a = numberToPx(sideLength)) !== null && _a !== void 0 ? _a : defaultMinLength, \")\");\n}\n\nfunction useDynamicSideLength(_a) {\n    var width = _a.width, height = _a.height, maxSideLength = _a.maxSideLength, defaultMinLength = _a.defaultMinLength;\n    var dynamicMinWidth = useMemo(function () {\n        return getDynamicMinLengthInPx(width, maxSideLength, defaultMinLength);\n    }, [width]);\n    var dynamicMinHeight = useMemo(function () {\n        return getDynamicMinLengthInPx(height, maxSideLength, defaultMinLength);\n    }, [height]);\n    return [dynamicMinWidth, dynamicMinHeight];\n}\n\nvar useIsElementInViewport = function (elementRef) {\n    var _a = useState(false), isVisible = _a[0], setIsVisible = _a[1];\n    useLayoutEffect(function () {\n        var observer = new IntersectionObserver(function (entries) {\n            var entry = entries[0];\n            if (entry)\n                setIsVisible(entry.isIntersecting);\n        });\n        if (elementRef.current)\n            observer.observe(elementRef.current);\n        return function () { return observer.disconnect(); };\n    }, [elementRef.current]);\n    return isVisible;\n};\n\nvar useLazyImageLoader = function (elementRef) {\n    var isLoaded = useRef(false);\n    var isVisible = useIsElementInViewport(elementRef);\n    if (isVisible)\n        isLoaded.current = true;\n    return isLoaded.current;\n};\n\nfunction getBorderRadiusForImageRenderer(circle, borderRadius) {\n    if (circle === void 0) { circle = false; }\n    if (borderRadius === void 0) { borderRadius = null; }\n    return circle ? '50%' : numberToPx(borderRadius);\n}\nfunction getBorderRadiusForMultipleImageRenderer(borderRadius, index, totalCount) {\n    var value = typeof borderRadius === 'string' ? parseInt(borderRadius, 10) : borderRadius;\n    var lastIndex = totalCount - 1;\n    var topLeft = index === 0 ? value * 2 : value;\n    var topRight = index === 1 ? value * 2 : value;\n    var bottomRight = index === lastIndex ? value * 2 : value;\n    var bottomLeft = index === lastIndex - 1 ? value * 2 : value;\n    return \"\".concat(topLeft, \"px \").concat(topRight, \"px \").concat(bottomRight, \"px \").concat(bottomLeft, \"px\");\n}\n/*\n  ImageRenderer displays image with url or source\n  it checks if the source exist with img tag first\n  if it exists onLoad is called, if not onError is called\n  and those properties switch img tag to real purposing element\n*/\nvar ImageRenderer = function (_a) {\n    var _b = _a.className, className = _b === void 0 ? '' : _b, url = _a.url, _c = _a.alt, alt = _c === void 0 ? '' : _c, _d = _a.width, width = _d === void 0 ? null : _d, _e = _a.maxSideLength, maxSideLength = _e === void 0 ? null : _e, _f = _a.height, height = _f === void 0 ? null : _f, _g = _a.circle, circle = _g === void 0 ? false : _g, _h = _a.fixedSize, fixedSize = _h === void 0 ? false : _h, _j = _a.placeHolder, placeHolder = _j === void 0 ? null : _j, _k = _a.defaultComponent, defaultComponent = _k === void 0 ? null : _k, _l = _a.borderRadius, borderRadius = _l === void 0 ? null : _l, _m = _a.onLoad, onLoad = _m === void 0 ? noop : _m, _o = _a.onError, onError = _o === void 0 ? noop : _o, shadeOnHover = _a.shadeOnHover, _p = _a.isUploaded, isUploaded = _p === void 0 ? true : _p;\n    var ref = useRef(null);\n    var isLoaded = useLazyImageLoader(ref);\n    var internalUrl = isLoaded ? url : null;\n    var _q = useState(false), defaultComponentVisible = _q[0], setDefaultComponentVisible = _q[1];\n    var _r = useState(true), placeholderVisible = _r[0], setPlaceholderVisible = _r[1];\n    var _s = useDynamicSideLength({\n        width: width,\n        height: height,\n        maxSideLength: maxSideLength,\n        defaultMinLength: '400px',\n    }), dynamicMinWidth = _s[0], dynamicMinHeight = _s[1];\n    var renderPlaceholder = function () {\n        if (typeof placeHolder === 'function') {\n            return placeHolder({\n                style: {\n                    width: '100%',\n                    minWidth: dynamicMinWidth,\n                    maxWidth: fixedSize ? dynamicMinWidth : '400px',\n                    height: dynamicMinHeight,\n                    position: 'absolute',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                },\n            });\n        }\n        return placeHolder;\n    };\n    var renderDefault = function () {\n        if (typeof defaultComponent === 'function')\n            return defaultComponent();\n        return defaultComponent;\n    };\n    var renderImage = function () {\n        var backgroundStyle = internalUrl ? {\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundSize: 'cover',\n            backgroundImage: \"url(\".concat(internalUrl, \")\"),\n        } : {};\n        return (React__default.createElement(\"div\", { className: \"sendbird-image-renderer__image\", style: __assign({ width: '100%', minWidth: dynamicMinWidth, maxWidth: fixedSize ? dynamicMinWidth : '400px', height: dynamicMinHeight, position: 'absolute', borderRadius: getBorderRadiusForImageRenderer(circle, borderRadius) }, backgroundStyle) }));\n    };\n    return (dynamicMinWidth\n        && dynamicMinHeight && (React__default.createElement(\"div\", { ref: ref, className: __spreadArray(__spreadArray([], (Array.isArray(className) ? className : [className]), true), ['sendbird-image-renderer'], false).join(' '), style: {\n            width: '100%',\n            minWidth: dynamicMinWidth,\n            maxWidth: fixedSize ? dynamicMinWidth : '400px',\n            height: dynamicMinHeight,\n        } },\n        placeholderVisible && renderPlaceholder(),\n        (!internalUrl || defaultComponentVisible) ? renderDefault() : renderImage(),\n        shadeOnHover && (React__default.createElement(\"div\", { className: \"sendbird-multiple-files-image-renderer__image-cover\", style: __assign({ borderRadius: getBorderRadiusForImageRenderer(circle, borderRadius) }, (isUploaded ? {} : { display: 'inline-flex' })) })),\n        internalUrl && React__default.createElement(HiddenImageLoader, { src: internalUrl, alt: alt, onLoadStart: function () {\n                setPlaceholderVisible(true);\n                setDefaultComponentVisible(false);\n            }, onLoad: function () {\n                setPlaceholderVisible(false);\n                setDefaultComponentVisible(false);\n                onLoad();\n            }, onError: function () {\n                setPlaceholderVisible(false);\n                setDefaultComponentVisible(true);\n                onError();\n            } }))));\n};\n// Image is loaded as a background-image, but this component serves as a hidden component to receive events indicating whether the image has actually been loaded.\nvar HiddenImageLoader = function (props) {\n    var src = props.src, alt = props.alt, _a = props.onLoadStart, onLoadStart = _a === void 0 ? noop : _a, _b = props.onLoad, onLoad = _b === void 0 ? noop : _b, _c = props.onError, onError = _c === void 0 ? noop : _c;\n    var reloadCtx = useRef({\n        currSrc: src,\n        prevSrc: src,\n        loadFailure: false,\n    });\n    if (reloadCtx.current.currSrc !== src) {\n        reloadCtx.current.prevSrc = reloadCtx.current.currSrc;\n        reloadCtx.current.currSrc = src;\n    }\n    // SideEffect: If the image URL has changed or loading has failed, please try again\n    useLayoutEffect(function () {\n        if (src) {\n            var sourceChanged = reloadCtx.current.prevSrc !== reloadCtx.current.currSrc;\n            var loadFailure = reloadCtx.current.loadFailure;\n            if (sourceChanged || loadFailure) {\n                onLoadStart();\n            }\n        }\n    }, [src, navigator.onLine]);\n    return (React__default.createElement(\"img\", { className: \"sendbird-image-renderer__hidden-image-loader\", src: src, alt: alt, onLoad: function () {\n            reloadCtx.current.loadFailure = false;\n            onLoad();\n        }, onError: function () {\n            reloadCtx.current.loadFailure = true;\n            onError();\n        } }));\n};\n\nexport { ImageRenderer as default, getBorderRadiusForImageRenderer, getBorderRadiusForMultipleImageRenderer };\n//# sourceMappingURL=ImageRenderer.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}