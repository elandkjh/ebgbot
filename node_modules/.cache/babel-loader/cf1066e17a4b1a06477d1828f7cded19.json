{"ast":null,"code":"import React__default, { useState, useMemo, useCallback } from 'react';\nimport { PlaybackTime } from '../ui/PlaybackTime.js';\nimport { ProgressBar } from '../ui/ProgressBar.js';\nimport TextButton from '../ui/TextButton.js';\nimport Icon, { IconTypes, IconColors } from '../ui/Icon.js';\nimport { b as LabelColors, L as Label, a as LabelTypography } from './bundle-DhKQeIfP.js';\nimport { u as useLocalization } from './bundle-cQZ3UZoG.js';\nimport { h as VOICE_RECORDER_CLICK_BUFFER_TIME, i as VOICE_RECORDER_DEFAULT_MIN } from './bundle-DCMGp6rH.js';\nimport { c as classnames } from './bundle-BgwzpLeQ.js';\n\n/* eslint-disable no-redeclare */\nvar VoiceMessageInputStatus = {\n  READY_TO_RECORD: 'READY_TO_RECORD',\n  RECORDING: 'RECORDING',\n  READY_TO_PLAY: 'READY_TO_PLAY',\n  PLAYING: 'PLAYING'\n};\nvar ControlerIcon = function (_a) {\n  var inputState = _a.inputState;\n  switch (inputState) {\n    case VoiceMessageInputStatus.READY_TO_RECORD:\n      {\n        return React__default.createElement(\"div\", {\n          className: \"sendbird-controler-icon record-icon\"\n        });\n      }\n    case VoiceMessageInputStatus.RECORDING:\n      {\n        return React__default.createElement(\"div\", {\n          className: \"sendbird-controler-icon stop-icon\"\n        });\n      }\n    case VoiceMessageInputStatus.READY_TO_PLAY:\n      {\n        return React__default.createElement(Icon, {\n          className: \"sendbird-controler-icon play-icon\",\n          width: \"20px\",\n          height: \"20px\",\n          type: IconTypes.PLAY,\n          fillColor: IconColors.ON_BACKGROUND_1\n        });\n      }\n    case VoiceMessageInputStatus.PLAYING:\n      {\n        return React__default.createElement(\"div\", {\n          className: \"sendbird-controler-icon pause-icon\"\n        }, React__default.createElement(\"div\", {\n          className: \"sendbird-controler-icon pause-icon-inner\"\n        }), React__default.createElement(\"div\", {\n          className: \"sendbird-controler-icon pause-icon-inner\"\n        }));\n      }\n    default:\n      return React__default.createElement(React__default.Fragment, null);\n  }\n};\nvar VoiceMessageInput = function (_a) {\n  var _b = _a.minRecordTime,\n    minRecordTime = _b === void 0 ? VOICE_RECORDER_DEFAULT_MIN : _b,\n    maximumValue = _a.maximumValue,\n    _c = _a.currentValue,\n    currentValue = _c === void 0 ? 0 : _c,\n    currentType = _a.currentType,\n    onCancelClick = _a.onCancelClick,\n    onControlClick = _a.onControlClick,\n    onSubmitClick = _a.onSubmitClick,\n    renderCancelButton = _a.renderCancelButton,\n    renderControlButton = _a.renderControlButton,\n    renderSubmitButton = _a.renderSubmitButton;\n  var _d = useState(0),\n    lastClickTime = _d[0],\n    setLastClickTime = _d[1];\n  var isReadyToRecord = useMemo(function () {\n    return currentType === VoiceMessageInputStatus.READY_TO_RECORD;\n  }, [currentType]);\n  var isRecording = useMemo(function () {\n    return currentType === VoiceMessageInputStatus.RECORDING;\n  }, [currentType]);\n  var isSendButtonDisabled = useMemo(function () {\n    if (currentType === VoiceMessageInputStatus.READY_TO_RECORD || currentType === VoiceMessageInputStatus.RECORDING) {\n      return minRecordTime > currentValue;\n    }\n    return false;\n  }, [currentType, minRecordTime, currentValue]);\n  var isPlayMode = useMemo(function () {\n    return currentType === VoiceMessageInputStatus.READY_TO_PLAY || currentType === VoiceMessageInputStatus.PLAYING;\n  }, [currentType]);\n  var stringSet = useLocalization().stringSet;\n  var handleOnCancelClick = function () {\n    var currentTime = Date.now();\n    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {\n      onCancelClick === null || onCancelClick === void 0 ? void 0 : onCancelClick();\n      setLastClickTime(currentTime);\n    }\n  };\n  var handleOnControlClick = useCallback(function () {\n    var currentTime = Date.now();\n    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {\n      onControlClick === null || onControlClick === void 0 ? void 0 : onControlClick(currentType);\n      setLastClickTime(currentTime);\n    }\n  }, [currentType]);\n  var handleOnSubmitClick = function () {\n    var currentTime = Date.now();\n    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {\n      if (!isSendButtonDisabled) {\n        onSubmitClick === null || onSubmitClick === void 0 ? void 0 : onSubmitClick();\n      }\n      setLastClickTime(currentTime);\n    }\n  };\n  return React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-input\"\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-input__indicator\"\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-input__indicator__progress-bar\"\n  }, React__default.createElement(ProgressBar, {\n    className: \"sendbird-voice-message-input__indicator__progress-bar__bar\",\n    disabled: isReadyToRecord,\n    maxSize: maximumValue,\n    currentSize: currentValue\n  })), isRecording ? React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-input__indicator__on-rec\"\n  }) : null, React__default.createElement(PlaybackTime, {\n    className: \"sendbird-voice-message-input__indicator__playback-time\",\n    time: isPlayMode ? maximumValue - currentValue : currentValue,\n    labelColor: isReadyToRecord ? LabelColors.ONBACKGROUND_4 : LabelColors.ONCONTENT_1\n  })), React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-input__controler\"\n  }, (renderCancelButton === null || renderCancelButton === void 0 ? void 0 : renderCancelButton()) || React__default.createElement(TextButton, {\n    className: \"sendbird-voice-message-input__controler__cancel\",\n    onClick: handleOnCancelClick,\n    disableUnderline: true\n  }, React__default.createElement(Label, {\n    type: LabelTypography.BUTTON_1,\n    color: LabelColors.PRIMARY\n  }, stringSet.BUTTON__CANCEL)), (renderControlButton === null || renderControlButton === void 0 ? void 0 : renderControlButton(currentType)) || React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-input__controler__main\",\n    onClick: handleOnControlClick\n  }, React__default.createElement(ControlerIcon, {\n    inputState: currentType\n  })), (renderSubmitButton === null || renderSubmitButton === void 0 ? void 0 : renderSubmitButton()) || React__default.createElement(\"div\", {\n    className: classnames('sendbird-voice-message-input__controler__submit', isSendButtonDisabled && 'voice-message--disabled'),\n    onClick: handleOnSubmitClick\n  }, React__default.createElement(Icon, {\n    width: \"19px\",\n    height: \"19px\",\n    type: IconTypes.SEND,\n    fillColor: isSendButtonDisabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT\n  }))));\n};\nexport { VoiceMessageInputStatus as V, VoiceMessageInput as a };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { useState, useMemo, useCallback } from 'react';\nimport { PlaybackTime } from '../ui/PlaybackTime.js';\nimport { ProgressBar } from '../ui/ProgressBar.js';\nimport TextButton from '../ui/TextButton.js';\nimport Icon, { IconTypes, IconColors } from '../ui/Icon.js';\nimport { b as LabelColors, L as Label, a as LabelTypography } from './bundle-DhKQeIfP.js';\nimport { u as useLocalization } from './bundle-cQZ3UZoG.js';\nimport { h as VOICE_RECORDER_CLICK_BUFFER_TIME, i as VOICE_RECORDER_DEFAULT_MIN } from './bundle-DCMGp6rH.js';\nimport { c as classnames } from './bundle-BgwzpLeQ.js';\n\n/* eslint-disable no-redeclare */\nvar VoiceMessageInputStatus = {\n    READY_TO_RECORD: 'READY_TO_RECORD',\n    RECORDING: 'RECORDING',\n    READY_TO_PLAY: 'READY_TO_PLAY',\n    PLAYING: 'PLAYING',\n};\n\nvar ControlerIcon = function (_a) {\n    var inputState = _a.inputState;\n    switch (inputState) {\n        case VoiceMessageInputStatus.READY_TO_RECORD: {\n            return (React__default.createElement(\"div\", { className: \"sendbird-controler-icon record-icon\" }));\n        }\n        case VoiceMessageInputStatus.RECORDING: {\n            return (React__default.createElement(\"div\", { className: \"sendbird-controler-icon stop-icon\" }));\n        }\n        case VoiceMessageInputStatus.READY_TO_PLAY: {\n            return (React__default.createElement(Icon, { className: \"sendbird-controler-icon play-icon\", width: \"20px\", height: \"20px\", type: IconTypes.PLAY, fillColor: IconColors.ON_BACKGROUND_1 }));\n        }\n        case VoiceMessageInputStatus.PLAYING: {\n            return (React__default.createElement(\"div\", { className: \"sendbird-controler-icon pause-icon\" },\n                React__default.createElement(\"div\", { className: \"sendbird-controler-icon pause-icon-inner\" }),\n                React__default.createElement(\"div\", { className: \"sendbird-controler-icon pause-icon-inner\" })));\n        }\n        default:\n            return React__default.createElement(React__default.Fragment, null);\n    }\n};\n\nvar VoiceMessageInput = function (_a) {\n    var _b = _a.minRecordTime, minRecordTime = _b === void 0 ? VOICE_RECORDER_DEFAULT_MIN : _b, maximumValue = _a.maximumValue, _c = _a.currentValue, currentValue = _c === void 0 ? 0 : _c, currentType = _a.currentType, onCancelClick = _a.onCancelClick, onControlClick = _a.onControlClick, onSubmitClick = _a.onSubmitClick, renderCancelButton = _a.renderCancelButton, renderControlButton = _a.renderControlButton, renderSubmitButton = _a.renderSubmitButton;\n    var _d = useState(0), lastClickTime = _d[0], setLastClickTime = _d[1];\n    var isReadyToRecord = useMemo(function () { return currentType === VoiceMessageInputStatus.READY_TO_RECORD; }, [currentType]);\n    var isRecording = useMemo(function () { return currentType === VoiceMessageInputStatus.RECORDING; }, [currentType]);\n    var isSendButtonDisabled = useMemo(function () {\n        if (currentType === VoiceMessageInputStatus.READY_TO_RECORD\n            || currentType === VoiceMessageInputStatus.RECORDING) {\n            return minRecordTime > currentValue;\n        }\n        return false;\n    }, [currentType, minRecordTime, currentValue]);\n    var isPlayMode = useMemo(function () {\n        return (currentType === VoiceMessageInputStatus.READY_TO_PLAY\n            || currentType === VoiceMessageInputStatus.PLAYING);\n    }, [currentType]);\n    var stringSet = useLocalization().stringSet;\n    var handleOnCancelClick = function () {\n        var currentTime = Date.now();\n        if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {\n            onCancelClick === null || onCancelClick === void 0 ? void 0 : onCancelClick();\n            setLastClickTime(currentTime);\n        }\n    };\n    var handleOnControlClick = useCallback(function () {\n        var currentTime = Date.now();\n        if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {\n            onControlClick === null || onControlClick === void 0 ? void 0 : onControlClick(currentType);\n            setLastClickTime(currentTime);\n        }\n    }, [currentType]);\n    var handleOnSubmitClick = function () {\n        var currentTime = Date.now();\n        if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {\n            if (!isSendButtonDisabled) {\n                onSubmitClick === null || onSubmitClick === void 0 ? void 0 : onSubmitClick();\n            }\n            setLastClickTime(currentTime);\n        }\n    };\n    return (React__default.createElement(\"div\", { className: \"sendbird-voice-message-input\" },\n        React__default.createElement(\"div\", { className: \"sendbird-voice-message-input__indicator\" },\n            React__default.createElement(\"div\", { className: \"sendbird-voice-message-input__indicator__progress-bar\" },\n                React__default.createElement(ProgressBar, { className: \"sendbird-voice-message-input__indicator__progress-bar__bar\", disabled: isReadyToRecord, maxSize: maximumValue, currentSize: currentValue })),\n            (isRecording) ? (React__default.createElement(\"div\", { className: \"sendbird-voice-message-input__indicator__on-rec\" })) : null,\n            React__default.createElement(PlaybackTime, { className: \"sendbird-voice-message-input__indicator__playback-time\", time: isPlayMode ? maximumValue - currentValue : currentValue, labelColor: isReadyToRecord ? LabelColors.ONBACKGROUND_4 : LabelColors.ONCONTENT_1 })),\n        React__default.createElement(\"div\", { className: \"sendbird-voice-message-input__controler\" },\n            (renderCancelButton === null || renderCancelButton === void 0 ? void 0 : renderCancelButton()) || (React__default.createElement(TextButton, { className: \"sendbird-voice-message-input__controler__cancel\", onClick: handleOnCancelClick, disableUnderline: true },\n                React__default.createElement(Label, { type: LabelTypography.BUTTON_1, color: LabelColors.PRIMARY }, stringSet.BUTTON__CANCEL))),\n            (renderControlButton === null || renderControlButton === void 0 ? void 0 : renderControlButton(currentType)) || (React__default.createElement(\"div\", { className: \"sendbird-voice-message-input__controler__main\", onClick: handleOnControlClick },\n                React__default.createElement(ControlerIcon, { inputState: currentType }))),\n            (renderSubmitButton === null || renderSubmitButton === void 0 ? void 0 : renderSubmitButton()) || (React__default.createElement(\"div\", { className: classnames('sendbird-voice-message-input__controler__submit', isSendButtonDisabled && 'voice-message--disabled'), onClick: handleOnSubmitClick },\n                React__default.createElement(Icon, { width: \"19px\", height: \"19px\", type: IconTypes.SEND, fillColor: isSendButtonDisabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT }))))));\n};\n\nexport { VoiceMessageInputStatus as V, VoiceMessageInput as a };\n//# sourceMappingURL=bundle-B2SAqHzx.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}