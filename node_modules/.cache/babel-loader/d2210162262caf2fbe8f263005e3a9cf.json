{"ast":null,"code":"import { a as __awaiter, b as __generator, d as __rest, _ as __assign } from './bundle-BQi9-O76.js';\nimport React__default, { useState, useRef, useCallback, createContext, useContext } from 'react';\nimport { Role } from '@sendbird/chat';\nimport { OpenChannel } from '@sendbird/chat/openChannel';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport '../withSendbird.js';\nimport { a as MenuItem, b as MenuItems } from './bundle-CwKZj-B6.js';\nimport 'react-dom';\nimport IconButton from '../ui/IconButton.js';\nimport './bundle-DxTN4_0p.js';\nimport { u as useLocalization } from './bundle-cQZ3UZoG.js';\nimport { c as classnames } from './bundle-BgwzpLeQ.js';\nimport Icon, { IconTypes, IconColors } from '../ui/Icon.js';\n\n// Utility function to handle processing state and promise execution\nvar processToggleAction = function (isProcessing, action, errorHandler) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var error_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (isProcessing.current) {\n            errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(new Error('Processing in progress'));\n            return [2 /*return*/];\n          }\n          isProcessing.current = true;\n          _a.label = 1;\n        case 1:\n          _a.trys.push([1, 3, 4, 5]);\n          return [4 /*yield*/, action()];\n        case 2:\n          _a.sent();\n          return [3 /*break*/, 5];\n        case 3:\n          error_1 = _a.sent();\n          errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error_1);\n          return [3 /*break*/, 5];\n        case 4:\n          isProcessing.current = false;\n          return [7 /*endfinally*/];\n        case 5:\n          return [2 /*return*/];\n      }\n    });\n  });\n};\nvar getInitialIsOperator = function (channel, user) {\n  if (!channel) return false;\n  if (channel instanceof OpenChannel) {\n    return channel.isOperator(user);\n  }\n  return (user === null || user === void 0 ? void 0 : user.role) === Role.OPERATOR;\n};\nvar getInitialIsMuted = function (channel, user) {\n  return channel ? user === null || user === void 0 ? void 0 : user.isMuted : false;\n};\nvar useToggleOperator = function (_a) {\n  var channel = _a.channel,\n    user = _a.user,\n    onToggleOperatorState = _a.onToggleOperatorState,\n    _isOperator = _a.isOperator;\n  var _b = useState(_isOperator !== null && _isOperator !== void 0 ? _isOperator : getInitialIsOperator(channel, user)),\n    isOperator = _b[0],\n    setIsOperator = _b[1];\n  var isProcessing = useRef(false);\n  var toggleOperator = useCallback(function () {\n    // If channel is undefined, resolve immediately\n    if (!channel) return Promise.resolve();\n    return processToggleAction(isProcessing, function () {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var togglePromise, newStatus;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              togglePromise = isOperator ? channel.removeOperators([user.userId]) : channel.addOperators([user.userId]);\n              return [4 /*yield*/, togglePromise];\n            case 1:\n              _a.sent();\n              newStatus = !isOperator;\n              setIsOperator(newStatus);\n              onToggleOperatorState === null || onToggleOperatorState === void 0 ? void 0 : onToggleOperatorState({\n                user: user,\n                newStatus: newStatus\n              });\n              return [2 /*return*/];\n          }\n        });\n      });\n    }, function (error) {\n      onToggleOperatorState === null || onToggleOperatorState === void 0 ? void 0 : onToggleOperatorState({\n        user: user,\n        newStatus: isOperator,\n        error: error\n      });\n    });\n  }, [isOperator, channel.url, user.userId, onToggleOperatorState]);\n  return {\n    isOperator: isOperator,\n    toggleOperator: toggleOperator\n  };\n};\nvar useToggleMute = function (_a) {\n  var channel = _a.channel,\n    user = _a.user,\n    onToggleMuteState = _a.onToggleMuteState,\n    _isMuted = _a.isMuted;\n  var _b = useState(_isMuted !== null && _isMuted !== void 0 ? _isMuted : getInitialIsMuted(channel, user)),\n    isMuted = _b[0],\n    setIsMuted = _b[1];\n  var isProcessing = useRef(false);\n  var toggleMute = useCallback(function () {\n    // If channel is undefined, resolve immediately\n    if (!channel) return Promise.resolve();\n    return processToggleAction(isProcessing, function () {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var togglePromise, newStatus;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              togglePromise = isMuted ? channel.unmuteUser(user) : channel.muteUser(user);\n              return [4 /*yield*/, togglePromise];\n            case 1:\n              _a.sent();\n              newStatus = !isMuted;\n              setIsMuted(newStatus);\n              onToggleMuteState === null || onToggleMuteState === void 0 ? void 0 : onToggleMuteState({\n                user: user,\n                newStatus: newStatus\n              });\n              return [2 /*return*/];\n          }\n        });\n      });\n    }, function (error) {\n      onToggleMuteState === null || onToggleMuteState === void 0 ? void 0 : onToggleMuteState({\n        user: user,\n        newStatus: isMuted,\n        error: error\n      });\n    });\n  }, [isMuted, channel.url, user.userId, onToggleMuteState]);\n  return {\n    isMuted: isMuted,\n    toggleMute: toggleMute\n  };\n};\nvar useToggleBan = function (_a) {\n  var channel = _a.channel,\n    user = _a.user,\n    onToggleBanState = _a.onToggleBanState,\n    _isBanned = _a.isBanned;\n  var _b = useState(_isBanned !== null && _isBanned !== void 0 ? _isBanned : false),\n    isBanned = _b[0],\n    setIsBanned = _b[1]; // Initially starting with false\n  var isProcessing = useRef(false);\n  var toggleBan = useCallback(function () {\n    // If channel is undefined, resolve immediately\n    if (!channel) return Promise.resolve();\n    return processToggleAction(isProcessing, function () {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var togglePromise, newStatus;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              togglePromise = isBanned ? channel.unbanUser(user) : channel.banUser(user);\n              return [4 /*yield*/, togglePromise];\n            case 1:\n              _a.sent();\n              newStatus = !isBanned;\n              setIsBanned(newStatus);\n              onToggleBanState === null || onToggleBanState === void 0 ? void 0 : onToggleBanState({\n                user: user,\n                newStatus: newStatus\n              });\n              return [2 /*return*/];\n          }\n        });\n      });\n    }, function (error) {\n      onToggleBanState === null || onToggleBanState === void 0 ? void 0 : onToggleBanState({\n        user: user,\n        newStatus: isBanned,\n        error: error\n      });\n    });\n  }, [isBanned, channel.url, user.userId, onToggleBanState]);\n  return {\n    isBanned: isBanned,\n    toggleBan: toggleBan\n  };\n};\nvar UserListItemMenuContext = createContext(undefined);\nvar UserListItemMenuProvider = function (_a) {\n  var children = _a.children,\n    values = __rest(_a, [\"children\"]);\n  var config = useSendbirdStateContext().config;\n  var currentUserId = config.userId;\n  var channel = values.channel,\n    user = values.user;\n  var isCurrentUser = user.userId === currentUserId;\n  var isCurrentUserOperator = function () {\n    if (!channel) return false;\n    return channel instanceof OpenChannel ? channel.isOperator(currentUserId) : channel.myRole === Role.OPERATOR;\n  }();\n  var operatorState = useToggleOperator(values);\n  var muteState = useToggleMute(values);\n  var banState = useToggleBan(values);\n  return React__default.createElement(UserListItemMenuContext.Provider, {\n    value: __assign(__assign(__assign(__assign(__assign({}, values), operatorState), muteState), banState), {\n      isCurrentUser: isCurrentUser,\n      isCurrentUserOperator: isCurrentUserOperator\n    })\n  }, children);\n};\nvar useUserListItemMenuContext = function () {\n  var context = useContext(UserListItemMenuContext);\n  if (!context) {\n    throw new Error('useUserListItemMenuContext must be used within a UserListItemMenuProvider.');\n  }\n  return context;\n};\nvar OperatorToggleMenuItem = function (props) {\n  var _a;\n  var stringSet = useLocalization().stringSet;\n  var _b = useUserListItemMenuContext(),\n    isOperator = _b.isOperator,\n    toggleOperator = _b.toggleOperator,\n    isCurrentUser = _b.isCurrentUser,\n    isCurrentUserOperator = _b.isCurrentUserOperator,\n    hideMenu = _b.hideMenu;\n  if (!isCurrentUserOperator) return React__default.createElement(React__default.Fragment, null);\n  return React__default.createElement(MenuItem, __assign({}, props, {\n    onClick: function (e) {\n      var _a;\n      (_a = props === null || props === void 0 ? void 0 : props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n      toggleOperator();\n      hideMenu();\n    },\n    disabled: isCurrentUser\n  }), (_a = props === null || props === void 0 ? void 0 : props.children) !== null && _a !== void 0 ? _a : isOperator ? stringSet.CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR : stringSet.CHANNEL_SETTING__MODERATION__REGISTER_AS_OPERATOR);\n};\nvar MuteToggleMenuItem = function (props) {\n  var _a;\n  var stringSet = useLocalization().stringSet;\n  var _b = useUserListItemMenuContext(),\n    isMuted = _b.isMuted,\n    toggleMute = _b.toggleMute,\n    isCurrentUserOperator = _b.isCurrentUserOperator,\n    hideMenu = _b.hideMenu,\n    channel = _b.channel;\n  if (!isCurrentUserOperator || (channel === null || channel === void 0 ? void 0 : channel.isBroadcast)) return React__default.createElement(React__default.Fragment, null);\n  return React__default.createElement(MenuItem, __assign({}, props, {\n    onClick: function (e) {\n      var _a;\n      (_a = props === null || props === void 0 ? void 0 : props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n      toggleMute();\n      hideMenu();\n    }\n  }), (_a = props === null || props === void 0 ? void 0 : props.children) !== null && _a !== void 0 ? _a : isMuted ? stringSet.CHANNEL_SETTING__MODERATION__UNMUTE : stringSet.CHANNEL_SETTING__MODERATION__MUTE);\n};\nvar BanToggleMenuItem = function (props) {\n  var _a;\n  var stringSet = useLocalization().stringSet;\n  var _b = useUserListItemMenuContext(),\n    isBanned = _b.isBanned,\n    toggleBan = _b.toggleBan,\n    isCurrentUserOperator = _b.isCurrentUserOperator,\n    hideMenu = _b.hideMenu;\n  if (!isCurrentUserOperator) return React__default.createElement(React__default.Fragment, null);\n  return React__default.createElement(MenuItem, __assign({}, props, {\n    onClick: function (e) {\n      var _a;\n      (_a = props === null || props === void 0 ? void 0 : props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n      toggleBan();\n      hideMenu();\n    }\n  }), (_a = props === null || props === void 0 ? void 0 : props.children) !== null && _a !== void 0 ? _a : isBanned ? stringSet.CHANNEL_SETTING__MODERATION__UNBAN : stringSet.CHANNEL_SETTING__MODERATION__BAN);\n};\nvar TriggerIcon = function (_a) {\n  var toggleMenu = _a.toggleMenu,\n    ref = _a.ref;\n  return React__default.createElement(IconButton, {\n    ref: ref,\n    className: \"sendbird-user-message__more__menu\",\n    width: \"32px\",\n    height: \"32px\",\n    onClick: toggleMenu\n  }, React__default.createElement(Icon, {\n    width: \"24px\",\n    height: \"24px\",\n    type: IconTypes.MORE,\n    fillColor: IconColors.CONTENT_INVERSE\n  }));\n};\nvar DefaultMenuItems = function (_a) {\n  var items = _a.items;\n  var OperatorToggleMenuItem = items.OperatorToggleMenuItem,\n    MuteToggleMenuItem = items.MuteToggleMenuItem,\n    BanToggleMenuItem = items.BanToggleMenuItem;\n  return React__default.createElement(React__default.Fragment, null, React__default.createElement(OperatorToggleMenuItem, null), React__default.createElement(MuteToggleMenuItem, null), React__default.createElement(BanToggleMenuItem, null));\n};\nvar UserListItemMenu = function (props) {\n  var user = props.user,\n    className = props.className,\n    _a = props.renderTrigger,\n    renderTrigger = _a === void 0 ? TriggerIcon : _a,\n    _b = props.renderMenuItems,\n    renderMenuItems = _b === void 0 ? DefaultMenuItems : _b;\n  var _c = useState(false),\n    isMenuVisible = _c[0],\n    setMenuVisibility = _c[1];\n  var containerRef = useRef(null);\n  var triggerRef = useRef(null);\n  var config = useSendbirdStateContext().config;\n  var currentUserId = config.userId;\n  var toggleMenu = function () {\n    setMenuVisibility(function (prev) {\n      return !prev;\n    });\n  };\n  var hideMenu = function () {\n    setMenuVisibility(false);\n  };\n  if (user.userId === currentUserId) {\n    return null;\n  }\n  return React__default.createElement(\"div\", {\n    className: classnames('sendbird-user-list-item-menu', className),\n    ref: containerRef\n  }, React__default.createElement(UserListItemMenuProvider, __assign({}, props, {\n    hideMenu: hideMenu,\n    toggleMenu: toggleMenu\n  }), renderTrigger({\n    ref: triggerRef,\n    toggleMenu: toggleMenu\n  }), isMenuVisible && React__default.createElement(MenuItems\n  // TODO: Add id using getObservingId for useElementObserver\n  , {\n    // TODO: Add id using getObservingId for useElementObserver\n    parentRef: triggerRef,\n    parentContainRef: containerRef,\n    closeDropdown: hideMenu\n  }, renderMenuItems({\n    items: {\n      OperatorToggleMenuItem: OperatorToggleMenuItem,\n      MuteToggleMenuItem: MuteToggleMenuItem,\n      BanToggleMenuItem: BanToggleMenuItem\n    }\n  }))));\n};\nexport { UserListItemMenu as U, UserListItemMenuProvider as a, useUserListItemMenuContext as u };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { a as __awaiter, b as __generator, d as __rest, _ as __assign } from './bundle-BQi9-O76.js';\nimport React__default, { useState, useRef, useCallback, createContext, useContext } from 'react';\nimport { Role } from '@sendbird/chat';\nimport { OpenChannel } from '@sendbird/chat/openChannel';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport '../withSendbird.js';\nimport { a as MenuItem, b as MenuItems } from './bundle-CwKZj-B6.js';\nimport 'react-dom';\nimport IconButton from '../ui/IconButton.js';\nimport './bundle-DxTN4_0p.js';\nimport { u as useLocalization } from './bundle-cQZ3UZoG.js';\nimport { c as classnames } from './bundle-BgwzpLeQ.js';\nimport Icon, { IconTypes, IconColors } from '../ui/Icon.js';\n\n// Utility function to handle processing state and promise execution\nvar processToggleAction = function (isProcessing, action, errorHandler) { return __awaiter(void 0, void 0, void 0, function () {\n    var error_1;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (isProcessing.current) {\n                    errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(new Error('Processing in progress'));\n                    return [2 /*return*/];\n                }\n                isProcessing.current = true;\n                _a.label = 1;\n            case 1:\n                _a.trys.push([1, 3, 4, 5]);\n                return [4 /*yield*/, action()];\n            case 2:\n                _a.sent();\n                return [3 /*break*/, 5];\n            case 3:\n                error_1 = _a.sent();\n                errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error_1);\n                return [3 /*break*/, 5];\n            case 4:\n                isProcessing.current = false;\n                return [7 /*endfinally*/];\n            case 5: return [2 /*return*/];\n        }\n    });\n}); };\nvar getInitialIsOperator = function (channel, user) {\n    if (!channel)\n        return false;\n    if (channel instanceof OpenChannel) {\n        return channel.isOperator(user);\n    }\n    return (user === null || user === void 0 ? void 0 : user.role) === Role.OPERATOR;\n};\nvar getInitialIsMuted = function (channel, user) {\n    return channel ? user === null || user === void 0 ? void 0 : user.isMuted : false;\n};\nvar useToggleOperator = function (_a) {\n    var channel = _a.channel, user = _a.user, onToggleOperatorState = _a.onToggleOperatorState, _isOperator = _a.isOperator;\n    var _b = useState(_isOperator !== null && _isOperator !== void 0 ? _isOperator : getInitialIsOperator(channel, user)), isOperator = _b[0], setIsOperator = _b[1];\n    var isProcessing = useRef(false);\n    var toggleOperator = useCallback(function () {\n        // If channel is undefined, resolve immediately\n        if (!channel)\n            return Promise.resolve();\n        return processToggleAction(isProcessing, function () { return __awaiter(void 0, void 0, void 0, function () {\n            var togglePromise, newStatus;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        togglePromise = isOperator\n                            ? channel.removeOperators([user.userId])\n                            : channel.addOperators([user.userId]);\n                        return [4 /*yield*/, togglePromise];\n                    case 1:\n                        _a.sent();\n                        newStatus = !isOperator;\n                        setIsOperator(newStatus);\n                        onToggleOperatorState === null || onToggleOperatorState === void 0 ? void 0 : onToggleOperatorState({ user: user, newStatus: newStatus });\n                        return [2 /*return*/];\n                }\n            });\n        }); }, function (error) {\n            onToggleOperatorState === null || onToggleOperatorState === void 0 ? void 0 : onToggleOperatorState({ user: user, newStatus: isOperator, error: error });\n        });\n    }, [isOperator, channel.url, user.userId, onToggleOperatorState]);\n    return {\n        isOperator: isOperator,\n        toggleOperator: toggleOperator,\n    };\n};\nvar useToggleMute = function (_a) {\n    var channel = _a.channel, user = _a.user, onToggleMuteState = _a.onToggleMuteState, _isMuted = _a.isMuted;\n    var _b = useState(_isMuted !== null && _isMuted !== void 0 ? _isMuted : getInitialIsMuted(channel, user)), isMuted = _b[0], setIsMuted = _b[1];\n    var isProcessing = useRef(false);\n    var toggleMute = useCallback(function () {\n        // If channel is undefined, resolve immediately\n        if (!channel)\n            return Promise.resolve();\n        return processToggleAction(isProcessing, function () { return __awaiter(void 0, void 0, void 0, function () {\n            var togglePromise, newStatus;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        togglePromise = isMuted\n                            ? channel.unmuteUser(user)\n                            : channel.muteUser(user);\n                        return [4 /*yield*/, togglePromise];\n                    case 1:\n                        _a.sent();\n                        newStatus = !isMuted;\n                        setIsMuted(newStatus);\n                        onToggleMuteState === null || onToggleMuteState === void 0 ? void 0 : onToggleMuteState({ user: user, newStatus: newStatus });\n                        return [2 /*return*/];\n                }\n            });\n        }); }, function (error) {\n            onToggleMuteState === null || onToggleMuteState === void 0 ? void 0 : onToggleMuteState({ user: user, newStatus: isMuted, error: error });\n        });\n    }, [isMuted, channel.url, user.userId, onToggleMuteState]);\n    return {\n        isMuted: isMuted,\n        toggleMute: toggleMute,\n    };\n};\nvar useToggleBan = function (_a) {\n    var channel = _a.channel, user = _a.user, onToggleBanState = _a.onToggleBanState, _isBanned = _a.isBanned;\n    var _b = useState(_isBanned !== null && _isBanned !== void 0 ? _isBanned : false), isBanned = _b[0], setIsBanned = _b[1]; // Initially starting with false\n    var isProcessing = useRef(false);\n    var toggleBan = useCallback(function () {\n        // If channel is undefined, resolve immediately\n        if (!channel)\n            return Promise.resolve();\n        return processToggleAction(isProcessing, function () { return __awaiter(void 0, void 0, void 0, function () {\n            var togglePromise, newStatus;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        togglePromise = isBanned\n                            ? channel.unbanUser(user)\n                            : channel.banUser(user);\n                        return [4 /*yield*/, togglePromise];\n                    case 1:\n                        _a.sent();\n                        newStatus = !isBanned;\n                        setIsBanned(newStatus);\n                        onToggleBanState === null || onToggleBanState === void 0 ? void 0 : onToggleBanState({ user: user, newStatus: newStatus });\n                        return [2 /*return*/];\n                }\n            });\n        }); }, function (error) {\n            onToggleBanState === null || onToggleBanState === void 0 ? void 0 : onToggleBanState({ user: user, newStatus: isBanned, error: error });\n        });\n    }, [isBanned, channel.url, user.userId, onToggleBanState]);\n    return {\n        isBanned: isBanned,\n        toggleBan: toggleBan,\n    };\n};\n\nvar UserListItemMenuContext = createContext(undefined);\nvar UserListItemMenuProvider = function (_a) {\n    var children = _a.children, values = __rest(_a, [\"children\"]);\n    var config = useSendbirdStateContext().config;\n    var currentUserId = config.userId;\n    var channel = values.channel, user = values.user;\n    var isCurrentUser = user.userId === currentUserId;\n    var isCurrentUserOperator = (function () {\n        if (!channel)\n            return false;\n        return channel instanceof OpenChannel\n            ? channel.isOperator(currentUserId)\n            : channel.myRole === Role.OPERATOR;\n    })();\n    var operatorState = useToggleOperator(values);\n    var muteState = useToggleMute(values);\n    var banState = useToggleBan(values);\n    return (React__default.createElement(UserListItemMenuContext.Provider, { value: __assign(__assign(__assign(__assign(__assign({}, values), operatorState), muteState), banState), { isCurrentUser: isCurrentUser, isCurrentUserOperator: isCurrentUserOperator }) }, children));\n};\nvar useUserListItemMenuContext = function () {\n    var context = useContext(UserListItemMenuContext);\n    if (!context) {\n        throw new Error('useUserListItemMenuContext must be used within a UserListItemMenuProvider.');\n    }\n    return context;\n};\n\nvar OperatorToggleMenuItem = function (props) {\n    var _a;\n    var stringSet = useLocalization().stringSet;\n    var _b = useUserListItemMenuContext(), isOperator = _b.isOperator, toggleOperator = _b.toggleOperator, isCurrentUser = _b.isCurrentUser, isCurrentUserOperator = _b.isCurrentUserOperator, hideMenu = _b.hideMenu;\n    if (!isCurrentUserOperator)\n        return React__default.createElement(React__default.Fragment, null);\n    return (React__default.createElement(MenuItem, __assign({}, props, { onClick: function (e) {\n            var _a;\n            (_a = props === null || props === void 0 ? void 0 : props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n            toggleOperator();\n            hideMenu();\n        }, disabled: isCurrentUser }), (_a = props === null || props === void 0 ? void 0 : props.children) !== null && _a !== void 0 ? _a : (isOperator\n        ? stringSet.CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR\n        : stringSet.CHANNEL_SETTING__MODERATION__REGISTER_AS_OPERATOR)));\n};\nvar MuteToggleMenuItem = function (props) {\n    var _a;\n    var stringSet = useLocalization().stringSet;\n    var _b = useUserListItemMenuContext(), isMuted = _b.isMuted, toggleMute = _b.toggleMute, isCurrentUserOperator = _b.isCurrentUserOperator, hideMenu = _b.hideMenu, channel = _b.channel;\n    if (!isCurrentUserOperator || (channel === null || channel === void 0 ? void 0 : channel.isBroadcast))\n        return React__default.createElement(React__default.Fragment, null);\n    return (React__default.createElement(MenuItem, __assign({}, props, { onClick: function (e) {\n            var _a;\n            (_a = props === null || props === void 0 ? void 0 : props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n            toggleMute();\n            hideMenu();\n        } }), (_a = props === null || props === void 0 ? void 0 : props.children) !== null && _a !== void 0 ? _a : (isMuted\n        ? stringSet.CHANNEL_SETTING__MODERATION__UNMUTE\n        : stringSet.CHANNEL_SETTING__MODERATION__MUTE)));\n};\nvar BanToggleMenuItem = function (props) {\n    var _a;\n    var stringSet = useLocalization().stringSet;\n    var _b = useUserListItemMenuContext(), isBanned = _b.isBanned, toggleBan = _b.toggleBan, isCurrentUserOperator = _b.isCurrentUserOperator, hideMenu = _b.hideMenu;\n    if (!isCurrentUserOperator)\n        return React__default.createElement(React__default.Fragment, null);\n    return (React__default.createElement(MenuItem, __assign({}, props, { onClick: function (e) {\n            var _a;\n            (_a = props === null || props === void 0 ? void 0 : props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n            toggleBan();\n            hideMenu();\n        } }), (_a = props === null || props === void 0 ? void 0 : props.children) !== null && _a !== void 0 ? _a : (isBanned\n        ? stringSet.CHANNEL_SETTING__MODERATION__UNBAN\n        : stringSet.CHANNEL_SETTING__MODERATION__BAN)));\n};\n\nvar TriggerIcon = function (_a) {\n    var toggleMenu = _a.toggleMenu, ref = _a.ref;\n    return (React__default.createElement(IconButton, { ref: ref, className: \"sendbird-user-message__more__menu\", width: \"32px\", height: \"32px\", onClick: toggleMenu },\n        React__default.createElement(Icon, { width: \"24px\", height: \"24px\", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE })));\n};\nvar DefaultMenuItems = function (_a) {\n    var items = _a.items;\n    var OperatorToggleMenuItem = items.OperatorToggleMenuItem, MuteToggleMenuItem = items.MuteToggleMenuItem, BanToggleMenuItem = items.BanToggleMenuItem;\n    return (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(OperatorToggleMenuItem, null),\n        React__default.createElement(MuteToggleMenuItem, null),\n        React__default.createElement(BanToggleMenuItem, null)));\n};\n\nvar UserListItemMenu = function (props) {\n    var user = props.user, className = props.className, _a = props.renderTrigger, renderTrigger = _a === void 0 ? TriggerIcon : _a, _b = props.renderMenuItems, renderMenuItems = _b === void 0 ? DefaultMenuItems : _b;\n    var _c = useState(false), isMenuVisible = _c[0], setMenuVisibility = _c[1];\n    var containerRef = useRef(null);\n    var triggerRef = useRef(null);\n    var config = useSendbirdStateContext().config;\n    var currentUserId = config.userId;\n    var toggleMenu = function () {\n        setMenuVisibility(function (prev) { return !prev; });\n    };\n    var hideMenu = function () {\n        setMenuVisibility(false);\n    };\n    if (user.userId === currentUserId) {\n        return null;\n    }\n    return (React__default.createElement(\"div\", { className: classnames('sendbird-user-list-item-menu', className), ref: containerRef },\n        React__default.createElement(UserListItemMenuProvider, __assign({}, props, { hideMenu: hideMenu, toggleMenu: toggleMenu }),\n            renderTrigger({ ref: triggerRef, toggleMenu: toggleMenu }),\n            isMenuVisible && (React__default.createElement(MenuItems\n            // TODO: Add id using getObservingId for useElementObserver\n            , { \n                // TODO: Add id using getObservingId for useElementObserver\n                parentRef: triggerRef, parentContainRef: containerRef, closeDropdown: hideMenu }, renderMenuItems({\n                items: {\n                    OperatorToggleMenuItem: OperatorToggleMenuItem,\n                    MuteToggleMenuItem: MuteToggleMenuItem,\n                    BanToggleMenuItem: BanToggleMenuItem,\n                },\n            }))))));\n};\n\nexport { UserListItemMenu as U, UserListItemMenuProvider as a, useUserListItemMenuContext as u };\n//# sourceMappingURL=bundle-BjjAXlnY.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}