{"ast":null,"code":"import { c as __spreadArray, _ as __assign } from '../chunks/bundle-BQi9-O76.js';\nimport React__default, { useContext, useState, useRef, useMemo, useEffect } from 'react';\nimport { f as format } from '../chunks/bundle-CAdqcqOm.js';\nimport { u as useLocalization } from '../chunks/bundle-cQZ3UZoG.js';\nimport { A as Avatar } from '../chunks/bundle-CFosTNce.js';\nimport { C as ContextMenu, b as MenuItems, c as MenuItem } from '../chunks/bundle-CwKZj-B6.js';\nimport Icon, { IconColors, IconTypes } from './Icon.js';\nimport IconButton from './IconButton.js';\nimport ImageRenderer from './ImageRenderer.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../chunks/bundle-DhKQeIfP.js';\nimport Loader from './Loader.js';\nimport UserProfile from './UserProfile.js';\nimport { a as UserProfileContext } from '../chunks/bundle-BrTJ5Zbd.js';\nimport { g as getSenderFromMessage, b as isFineResend, s as showMenuTrigger, c as isFineDelete, O as OpenChannelMobileMenu, f as checkIsSent, d as checkIsPending, e as checkIsFailed } from '../chunks/bundle-BdZytjCG.js';\nimport { u as useMediaQueryContext } from '../chunks/bundle-f-SpnOx2.js';\nimport { u as useLongPress } from '../chunks/bundle-AfQS5DGf.js';\nimport '../chunks/bundle-CA85nVxp.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport '../chunks/bundle-DXRRGizV.js';\nimport '../chunks/bundle-BgwzpLeQ.js';\nimport 'react-dom';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport './SortByRow.js';\nimport '../chunks/bundle-etuaqevl.js';\nimport '../withSendbird.js';\nimport '../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CNWAfTVw.js';\nimport '../sendbirdSelectors.js';\nimport '../chunks/bundle-b6TpX_JP.js';\nimport './Button.js';\nimport '../useSendbirdStateContext.js';\nvar SUPPORTING_TYPES = {\n  IMAGE: 'IMAGE',\n  VIDEO: 'VIDEO',\n  UNSUPPORTED: 'UNSUPPORTED'\n};\nvar SUPPORTED_MIMES = {\n  IMAGE: ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'],\n  VIDEO: ['video/mpeg', 'video/ogg', 'video/webm', 'video/mp4']\n};\nvar getSupportingFileType = function (type) {\n  if (SUPPORTED_MIMES.IMAGE.indexOf(type) >= 0) {\n    return SUPPORTING_TYPES.IMAGE;\n  }\n  if (SUPPORTED_MIMES.VIDEO.indexOf(type) >= 0) {\n    return SUPPORTING_TYPES.VIDEO;\n  }\n  return SUPPORTING_TYPES.UNSUPPORTED;\n};\nfunction OpenchannelThumbnailMessage(_a) {\n  var _b;\n  var className = _a.className,\n    message = _a.message,\n    isOperator = _a.isOperator,\n    _c = _a.isEphemeral,\n    isEphemeral = _c === void 0 ? false : _c,\n    disabled = _a.disabled,\n    userId = _a.userId,\n    chainTop = _a.chainTop,\n    onClick = _a.onClick,\n    showRemove = _a.showRemove,\n    resendMessage = _a.resendMessage;\n  var type = message.type,\n    url = message.url,\n    thumbnails = message.thumbnails,\n    localUrl = message.localUrl;\n  var status = message === null || message === void 0 ? void 0 : message.sendingStatus;\n  var thumbnailUrl = thumbnails && thumbnails.length > 0 && thumbnails[0].url || null;\n  var _d = useLocalization(),\n    stringSet = _d.stringSet,\n    dateLocale = _d.dateLocale;\n  var _e = useContext(UserProfileContext),\n    disableUserProfile = _e.disableUserProfile,\n    renderUserProfile = _e.renderUserProfile;\n  var _f = useState(360),\n    messageWidth = _f[0],\n    setMessageWidth = _f[1];\n  var _g = useState(false),\n    contextMenu = _g[0],\n    setContextMenu = _g[1];\n  var messageRef = useRef(null);\n  var mobileMenuRef = useRef(null);\n  var contextMenuRef = useRef(null);\n  var avatarRef = useRef(null);\n  var onLongPress = useLongPress({\n    onLongPress: function () {\n      setContextMenu(true);\n    },\n    onClick: function () {\n      onClick(true);\n    }\n  });\n  var isMobile = useMediaQueryContext().isMobile;\n  var memorizedThumbnailPlaceHolder = useMemo(function () {\n    return function (type) {\n      return function (_a) {\n        var style = _a.style;\n        return (\n          // eslint-disable-line\n          React__default.createElement(\"div\", {\n            style: style\n          }, React__default.createElement(Icon, {\n            type: type,\n            fillColor: IconColors.ON_BACKGROUND_2,\n            width: \"56px\",\n            height: \"56px\"\n          }))\n        );\n      };\n    };\n  }, []);\n  var isMessageSent = checkIsSent(status);\n  var isPending = checkIsPending(status);\n  var isFailed = checkIsFailed(status);\n  var sender = getSenderFromMessage(message);\n  useEffect(function () {\n    var _a, _b;\n    var thumbnailWidth = ((_b = (_a = messageRef === null || messageRef === void 0 ? void 0 : messageRef.current) === null || _a === void 0 ? void 0 : _a.clientWidth) !== null && _b !== void 0 ? _b : 0) - 80;\n    setMessageWidth(thumbnailWidth > 360 ? 360 : thumbnailWidth);\n  }, []);\n  return React__default.createElement(React__default.Fragment, null, React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-thumbnail-message'], false).join(' '),\n    ref: messageRef\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__left\"\n  }, !chainTop && React__default.createElement(ContextMenu, {\n    menuTrigger: function (toggleDropdown) {\n      return React__default.createElement(Avatar, {\n        className: \"sendbird-openchannel-thumbnail-message__left__avatar\",\n        src: sender.profileUrl || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function () {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function (closeDropdown) {\n      return renderUserProfile ? renderUserProfile({\n        user: sender,\n        close: closeDropdown,\n        currentUserId: userId,\n        avatarRef: avatarRef\n      }) : React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: '0px',\n          paddingBottom: '0px'\n        }\n      }, React__default.createElement(UserProfile, {\n        user: sender,\n        onSuccess: closeDropdown,\n        disableMessaging: true\n      }));\n    }\n  })), React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right\"\n  }, !chainTop && React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__title\"\n  }, React__default.createElement(Label, {\n    className: \"sendbird-openchannel-thumbnail-message__right__title__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: isOperator ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2\n  }, sender && (sender.friendName || sender.nickname || sender.userId)), React__default.createElement(Label, {\n    className: \"sendbird-openchannel-thumbnail-message__right__title__sent-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_3\n  }, (message === null || message === void 0 ? void 0 : message.createdAt) && format(message.createdAt, 'p', {\n    locale: dateLocale\n  }))), React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body\",\n    ref: mobileMenuRef\n  }, React__default.createElement(\"div\", __assign({\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap\",\n    role: \"button\",\n    onClick: function () {\n      if (isMessageSent) {\n        onClick(true);\n      }\n    },\n    onKeyDown: function () {\n      if (isMessageSent) {\n        onClick(true);\n      }\n    },\n    tabIndex: 0\n  }, isMobile ? __assign({}, onLongPress) : {}), React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__overlay\"\n  }), (_b = {}, _b[SUPPORTING_TYPES.VIDEO] = url || localUrl ? React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video\"\n  }, thumbnailUrl ? React__default.createElement(ImageRenderer, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video\",\n    url: thumbnailUrl,\n    width: messageWidth,\n    height: \"270px\",\n    alt: \"image\",\n    placeHolder: memorizedThumbnailPlaceHolder(IconTypes.PLAY)\n  }) : React__default.createElement(\"video\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video__video\"\n  }, React__default.createElement(\"source\", {\n    src: url || localUrl,\n    type: type\n  })), React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video__icon\",\n    type: IconTypes.PLAY,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"56px\",\n    height: \"56px\"\n  })) : React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video--icon\",\n    type: IconTypes.PHOTO,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"56px\",\n    height: \"56px\"\n  }), _b[SUPPORTING_TYPES.IMAGE] = url || localUrl ? React__default.createElement(ImageRenderer, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__image\",\n    url: thumbnailUrl || url || localUrl || '',\n    alt: \"image\",\n    width: messageWidth,\n    height: \"270px\",\n    placeHolder: memorizedThumbnailPlaceHolder(IconTypes.PHOTO)\n  }) : React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__image--icon\",\n    type: IconTypes.PHOTO,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"56px\",\n    height: \"56px\"\n  }), _b[SUPPORTING_TYPES.UNSUPPORTED] = React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__unknown\",\n    type: IconTypes.PHOTO,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"56px\",\n    height: \"56px\"\n  }), _b)[getSupportingFileType(type)])), (isPending || isFailed) && React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__tail\"\n  }, isPending && React__default.createElement(Loader, {\n    width: \"16px\",\n    height: \"16px\"\n  }, React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__tail__pending\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })), isFailed && React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__tail__failed\",\n    type: IconTypes.ERROR,\n    fillColor: IconColors.ERROR,\n    width: \"16px\",\n    height: \"16px\"\n  }))), !isMobile && React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__context-menu\",\n    ref: contextMenuRef\n  }, (isFineResend({\n    message: message,\n    userId: userId,\n    status: status\n  }) || !isEphemeral) && React__default.createElement(ContextMenu, {\n    menuTrigger: function (toggleDropdown) {\n      return showMenuTrigger({\n        message: message,\n        userId: userId,\n        status: status\n      }) && React__default.createElement(IconButton, {\n        className: \"sendbird-openchannel-thumbnail-message__context-menu--icon\",\n        width: \"32px\",\n        height: \"32px\",\n        onClick: toggleDropdown\n      }, React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.CONTENT_INVERSE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function (closeDropdown) {\n      return React__default.createElement(MenuItems, {\n        parentRef: contextMenuRef,\n        parentContainRef: contextMenuRef,\n        closeDropdown: closeDropdown,\n        openLeft: true\n      }, isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && React__default.createElement(MenuItem, {\n        onClick: function () {\n          resendMessage(message);\n          closeDropdown();\n        },\n        testID: \"open_channel_thumbnail_message_menu_resend\"\n      }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND), !isEphemeral && isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && React__default.createElement(MenuItem, {\n        onClick: function () {\n          if (disabled) {\n            return;\n          }\n          showRemove(true);\n          closeDropdown();\n        },\n        testID: \"open_channel_thumbnail_message_menu_delete\"\n      }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE));\n    }\n  }))), contextMenu && React__default.createElement(OpenChannelMobileMenu, {\n    message: message,\n    parentRef: mobileMenuRef,\n    hideMenu: function () {\n      setContextMenu(false);\n    },\n    showRemove: function () {\n      setContextMenu(false);\n      showRemove(true);\n    },\n    resendMessage: function () {\n      setContextMenu(false);\n      resendMessage(message);\n    }\n  }));\n}\nexport { OpenchannelThumbnailMessage as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { c as __spreadArray, _ as __assign } from '../chunks/bundle-BQi9-O76.js';\nimport React__default, { useContext, useState, useRef, useMemo, useEffect } from 'react';\nimport { f as format } from '../chunks/bundle-CAdqcqOm.js';\nimport { u as useLocalization } from '../chunks/bundle-cQZ3UZoG.js';\nimport { A as Avatar } from '../chunks/bundle-CFosTNce.js';\nimport { C as ContextMenu, b as MenuItems, c as MenuItem } from '../chunks/bundle-CwKZj-B6.js';\nimport Icon, { IconColors, IconTypes } from './Icon.js';\nimport IconButton from './IconButton.js';\nimport ImageRenderer from './ImageRenderer.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../chunks/bundle-DhKQeIfP.js';\nimport Loader from './Loader.js';\nimport UserProfile from './UserProfile.js';\nimport { a as UserProfileContext } from '../chunks/bundle-BrTJ5Zbd.js';\nimport { g as getSenderFromMessage, b as isFineResend, s as showMenuTrigger, c as isFineDelete, O as OpenChannelMobileMenu, f as checkIsSent, d as checkIsPending, e as checkIsFailed } from '../chunks/bundle-BdZytjCG.js';\nimport { u as useMediaQueryContext } from '../chunks/bundle-f-SpnOx2.js';\nimport { u as useLongPress } from '../chunks/bundle-AfQS5DGf.js';\nimport '../chunks/bundle-CA85nVxp.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport '../chunks/bundle-DXRRGizV.js';\nimport '../chunks/bundle-BgwzpLeQ.js';\nimport 'react-dom';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport './SortByRow.js';\nimport '../chunks/bundle-etuaqevl.js';\nimport '../withSendbird.js';\nimport '../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CNWAfTVw.js';\nimport '../sendbirdSelectors.js';\nimport '../chunks/bundle-b6TpX_JP.js';\nimport './Button.js';\nimport '../useSendbirdStateContext.js';\n\nvar SUPPORTING_TYPES = {\n    IMAGE: 'IMAGE',\n    VIDEO: 'VIDEO',\n    UNSUPPORTED: 'UNSUPPORTED',\n};\nvar SUPPORTED_MIMES = {\n    IMAGE: [\n        'image/jpeg',\n        'image/jpg',\n        'image/png',\n        'image/gif',\n        'image/webp',\n    ],\n    VIDEO: [\n        'video/mpeg',\n        'video/ogg',\n        'video/webm',\n        'video/mp4',\n    ],\n};\nvar getSupportingFileType = function (type) {\n    if (SUPPORTED_MIMES.IMAGE.indexOf(type) >= 0) {\n        return SUPPORTING_TYPES.IMAGE;\n    }\n    if (SUPPORTED_MIMES.VIDEO.indexOf(type) >= 0) {\n        return SUPPORTING_TYPES.VIDEO;\n    }\n    return SUPPORTING_TYPES.UNSUPPORTED;\n};\n\nfunction OpenchannelThumbnailMessage(_a) {\n    var _b;\n    var className = _a.className, message = _a.message, isOperator = _a.isOperator, _c = _a.isEphemeral, isEphemeral = _c === void 0 ? false : _c, disabled = _a.disabled, userId = _a.userId, chainTop = _a.chainTop, onClick = _a.onClick, showRemove = _a.showRemove, resendMessage = _a.resendMessage;\n    var type = message.type, url = message.url, thumbnails = message.thumbnails, localUrl = message.localUrl;\n    var status = message === null || message === void 0 ? void 0 : message.sendingStatus;\n    var thumbnailUrl = (thumbnails && thumbnails.length > 0 && thumbnails[0].url) || null;\n    var _d = useLocalization(), stringSet = _d.stringSet, dateLocale = _d.dateLocale;\n    var _e = useContext(UserProfileContext), disableUserProfile = _e.disableUserProfile, renderUserProfile = _e.renderUserProfile;\n    var _f = useState(360), messageWidth = _f[0], setMessageWidth = _f[1];\n    var _g = useState(false), contextMenu = _g[0], setContextMenu = _g[1];\n    var messageRef = useRef(null);\n    var mobileMenuRef = useRef(null);\n    var contextMenuRef = useRef(null);\n    var avatarRef = useRef(null);\n    var onLongPress = useLongPress({\n        onLongPress: function () { setContextMenu(true); },\n        onClick: function () { onClick(true); },\n    });\n    var isMobile = useMediaQueryContext().isMobile;\n    var memorizedThumbnailPlaceHolder = useMemo(function () { return function (type) { return function (_a) {\n        var style = _a.style;\n        return ( // eslint-disable-line\n        React__default.createElement(\"div\", { style: style },\n            React__default.createElement(Icon, { type: type, fillColor: IconColors.ON_BACKGROUND_2, width: \"56px\", height: \"56px\" })));\n    }; }; }, []);\n    var isMessageSent = checkIsSent(status);\n    var isPending = checkIsPending(status);\n    var isFailed = checkIsFailed(status);\n    var sender = getSenderFromMessage(message);\n    useEffect(function () {\n        var _a, _b;\n        var thumbnailWidth = ((_b = (_a = messageRef === null || messageRef === void 0 ? void 0 : messageRef.current) === null || _a === void 0 ? void 0 : _a.clientWidth) !== null && _b !== void 0 ? _b : 0) - 80;\n        setMessageWidth(thumbnailWidth > 360 ? 360 : thumbnailWidth);\n    }, []);\n    return (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(\"div\", { className: __spreadArray(__spreadArray([], (Array.isArray(className) ? className : [className]), true), [\n                'sendbird-openchannel-thumbnail-message',\n            ], false).join(' '), ref: messageRef },\n            React__default.createElement(\"div\", { className: \"sendbird-openchannel-thumbnail-message__left\" }, !chainTop && (React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) { return (React__default.createElement(Avatar, { className: \"sendbird-openchannel-thumbnail-message__left__avatar\", src: sender.profileUrl || '', ref: avatarRef, width: \"28px\", height: \"28px\", onClick: function () {\n                        if (!disableUserProfile) {\n                            toggleDropdown();\n                        }\n                    } })); }, menuItems: function (closeDropdown) { return (renderUserProfile\n                    ? (renderUserProfile({\n                        user: sender,\n                        close: closeDropdown,\n                        currentUserId: userId,\n                        avatarRef: avatarRef,\n                    }))\n                    : (React__default.createElement(MenuItems, { parentRef: avatarRef, parentContainRef: avatarRef, closeDropdown: closeDropdown, style: { paddingTop: '0px', paddingBottom: '0px' } },\n                        React__default.createElement(UserProfile, { user: sender, onSuccess: closeDropdown, disableMessaging: true })))); } }))),\n            React__default.createElement(\"div\", { className: \"sendbird-openchannel-thumbnail-message__right\" },\n                !chainTop && (React__default.createElement(\"div\", { className: \"sendbird-openchannel-thumbnail-message__right__title\" },\n                    React__default.createElement(Label, { className: \"sendbird-openchannel-thumbnail-message__right__title__sender-name\", type: LabelTypography.CAPTION_2, color: isOperator ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2 }, sender && (sender.friendName\n                        || sender.nickname\n                        || sender.userId)),\n                    React__default.createElement(Label, { className: \"sendbird-openchannel-thumbnail-message__right__title__sent-at\", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_3 }, (message === null || message === void 0 ? void 0 : message.createdAt) && (format(message.createdAt, 'p', {\n                        locale: dateLocale,\n                    }))))),\n                React__default.createElement(\"div\", { className: \"sendbird-openchannel-thumbnail-message__right__body\", ref: mobileMenuRef },\n                    React__default.createElement(\"div\", __assign({ className: \"sendbird-openchannel-thumbnail-message__right__body__wrap\", role: \"button\", onClick: function () {\n                            if (isMessageSent) {\n                                onClick(true);\n                            }\n                        }, onKeyDown: function () {\n                            if (isMessageSent) {\n                                onClick(true);\n                            }\n                        }, tabIndex: 0 }, (isMobile ? __assign({}, onLongPress) : {})),\n                        React__default.createElement(\"div\", { className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__overlay\" }),\n                        (_b = {},\n                            _b[SUPPORTING_TYPES.VIDEO] = ((url || localUrl)\n                                ? (React__default.createElement(\"div\", { className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video\" },\n                                    (thumbnailUrl)\n                                        ? (React__default.createElement(ImageRenderer, { className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video\", url: thumbnailUrl, width: messageWidth, height: \"270px\", alt: \"image\", placeHolder: memorizedThumbnailPlaceHolder(IconTypes.PLAY) }))\n                                        : (React__default.createElement(\"video\", { className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video__video\" },\n                                            React__default.createElement(\"source\", { src: url || localUrl, type: type }))),\n                                    React__default.createElement(Icon, { className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video__icon\", type: IconTypes.PLAY, fillColor: IconColors.ON_BACKGROUND_2, width: \"56px\", height: \"56px\" })))\n                                : (React__default.createElement(Icon, { className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video--icon\", type: IconTypes.PHOTO, fillColor: IconColors.ON_BACKGROUND_2, width: \"56px\", height: \"56px\" }))),\n                            _b[SUPPORTING_TYPES.IMAGE] = ((url || localUrl)\n                                ? (React__default.createElement(ImageRenderer, { className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__image\", url: thumbnailUrl || url || localUrl || '', alt: \"image\", width: messageWidth, height: \"270px\", placeHolder: memorizedThumbnailPlaceHolder(IconTypes.PHOTO) }))\n                                : (React__default.createElement(Icon, { className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__image--icon\", type: IconTypes.PHOTO, fillColor: IconColors.ON_BACKGROUND_2, width: \"56px\", height: \"56px\" }))),\n                            _b[SUPPORTING_TYPES.UNSUPPORTED] = (React__default.createElement(Icon, { className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__unknown\", type: IconTypes.PHOTO, fillColor: IconColors.ON_BACKGROUND_2, width: \"56px\", height: \"56px\" })),\n                            _b)[getSupportingFileType(type)])),\n                (isPending || isFailed) && (React__default.createElement(\"div\", { className: \"sendbird-openchannel-thumbnail-message__right__tail\" },\n                    isPending && (React__default.createElement(Loader, { width: \"16px\", height: \"16px\" },\n                        React__default.createElement(Icon, { className: \"sendbird-openchannel-thumbnail-message__right__tail__pending\", type: IconTypes.SPINNER, fillColor: IconColors.PRIMARY, width: \"16px\", height: \"16px\" }))),\n                    isFailed && (React__default.createElement(Icon, { className: \"sendbird-openchannel-thumbnail-message__right__tail__failed\", type: IconTypes.ERROR, fillColor: IconColors.ERROR, width: \"16px\", height: \"16px\" }))))),\n            !isMobile && (React__default.createElement(\"div\", { className: \"sendbird-openchannel-thumbnail-message__context-menu\", ref: contextMenuRef }, (isFineResend({ message: message, userId: userId, status: status }) || !isEphemeral) && (React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) { return (showMenuTrigger({ message: message, userId: userId, status: status }) && (React__default.createElement(IconButton, { className: \"sendbird-openchannel-thumbnail-message__context-menu--icon\", width: \"32px\", height: \"32px\", onClick: toggleDropdown },\n                    React__default.createElement(Icon, { type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE, width: \"24px\", height: \"24px\" })))); }, menuItems: function (closeDropdown) { return (React__default.createElement(MenuItems, { parentRef: contextMenuRef, parentContainRef: contextMenuRef, closeDropdown: closeDropdown, openLeft: true },\n                    isFineResend({ message: message, userId: userId, status: status }) && (React__default.createElement(MenuItem, { onClick: function () {\n                            resendMessage(message);\n                            closeDropdown();\n                        }, testID: \"open_channel_thumbnail_message_menu_resend\" }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND)),\n                    (!isEphemeral && isFineDelete({ message: message, userId: userId, status: status })) && (React__default.createElement(MenuItem, { onClick: function () {\n                            if (disabled) {\n                                return;\n                            }\n                            showRemove(true);\n                            closeDropdown();\n                        }, testID: \"open_channel_thumbnail_message_menu_delete\" }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE)))); } }))))),\n        contextMenu && (React__default.createElement(OpenChannelMobileMenu, { message: message, parentRef: mobileMenuRef, hideMenu: function () {\n                setContextMenu(false);\n            }, showRemove: function () {\n                setContextMenu(false);\n                showRemove(true);\n            }, resendMessage: function () {\n                setContextMenu(false);\n                resendMessage(message);\n            } }))));\n}\n\nexport { OpenchannelThumbnailMessage as default };\n//# sourceMappingURL=OpenchannelThumbnailMessage.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}