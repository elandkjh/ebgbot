{"ast":null,"code":"import { c as __spreadArray } from './bundle-BQi9-O76.js';\nimport React__default, { useContext, useState, useEffect, useRef, useCallback } from 'react';\nimport Button, { ButtonTypes, ButtonSizes } from '../ui/Button.js';\nimport { C as ContextMenu, b as MenuItems, O as OperatorMenuItem, h as MuteMenuItem, c as MenuItem } from './bundle-CwKZj-B6.js';\nimport Icon, { IconTypes, IconColors } from '../ui/Icon.js';\nimport IconButton from '../ui/IconButton.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from './bundle-DhKQeIfP.js';\nimport { Participant } from '@sendbird/chat';\nimport { L as LocalizationContext } from './bundle-cQZ3UZoG.js';\nimport { a as UserProfileContext } from './bundle-BrTJ5Zbd.js';\nimport '../ui/AccordionGroup.js';\nimport { A as Avatar } from './bundle-CFosTNce.js';\nimport 'react-dom';\nimport './bundle-f-SpnOx2.js';\nimport '@sendbird/uikit-tools';\nimport '../withSendbird.js';\nimport { M as Modal } from './bundle-CXdo2kR_.js';\nimport 'css-vars-ponyfill';\nimport './bundle-DxTN4_0p.js';\nimport '@sendbird/chat/openChannel';\nimport '@sendbird/chat/groupChannel';\nimport './bundle-DDeWOERD.js';\nimport MutedAvatarOverlay from '../ui/MutedAvatarOverlay.js';\nimport UserProfile from '../ui/UserProfile.js';\nimport { useOpenChannelSettingsContext } from '../OpenChannelSettings/context.js';\nimport { UserListItem as UserListItem$1 } from '../ui/UserListItem.js';\nimport { n as noop } from './bundle-BgwzpLeQ.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nfunction ParticipantsModal(_a) {\n  var _b, _c, _d;\n  var onCancel = _a.onCancel;\n  var state = useSendbirdStateContext();\n  var channel = useOpenChannelSettingsContext().channel;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var _e = useState([]),\n    participants = _e[0],\n    setParticipants = _e[1];\n  var _f = useState(null),\n    participantListQuery = _f[0],\n    setParticipantListQuery = _f[1];\n  var userId = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.userId;\n  var sdk = (_d = (_c = state === null || state === void 0 ? void 0 : state.stores) === null || _c === void 0 ? void 0 : _c.sdkStore) === null || _d === void 0 ? void 0 : _d.sdk;\n  var isOperatorView = channel === null || channel === void 0 ? void 0 : channel.isOperator(userId);\n  useEffect(function () {\n    if (!channel || !(channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery)) {\n      return;\n    }\n    var participantListQuery = channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery({});\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next().then(function (participantList) {\n      setParticipants(participantList);\n    });\n  }, []);\n  return React__default.createElement(\"div\", null, React__default.createElement(Modal, {\n    hideFooter: true,\n    isFullScreenOnMobile: true,\n    onCancel: function () {\n      return onCancel();\n    },\n    onSubmit: noop,\n    titleText: stringSet.OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-more-members__popup-scroll\",\n    onScroll: function (e) {\n      if (participantListQuery) {\n        var hasNext = participantListQuery.hasNext;\n        var target = e.target;\n        var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n        if (hasNext && fetchMore) {\n          participantListQuery.next().then(function (fetchedParticipants) {\n            setParticipants(__spreadArray(__spreadArray([], participants !== null && participants !== void 0 ? participants : [], true), fetchedParticipants, true));\n          });\n        }\n      }\n    }\n  }, participants === null || participants === void 0 ? void 0 : participants.map(function (p) {\n    var _a;\n    var isOperator = channel === null || channel === void 0 ? void 0 : channel.isOperator(p.userId);\n    return React__default.createElement(UserListItem$1, {\n      user: p,\n      key: p.userId,\n      currentUser: (_a = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _a === void 0 ? void 0 : _a.userId,\n      action: userId !== p.userId && isOperatorView ? function (_a) {\n        var actionRef = _a.actionRef,\n          parentRef = _a.parentRef;\n        return React__default.createElement(ContextMenu, {\n          menuTrigger: function (toggleDropdown) {\n            return React__default.createElement(IconButton, {\n              className: \"sendbird-user-message__more__menu\",\n              width: \"32px\",\n              height: \"32px\",\n              onClick: toggleDropdown\n            }, React__default.createElement(Icon, {\n              width: \"24px\",\n              height: \"24px\",\n              type: IconTypes.MORE,\n              fillColor: IconColors.CONTENT_INVERSE\n            }));\n          },\n          menuItems: function (closeDropdown) {\n            return React__default.createElement(MenuItems, {\n              parentContainRef: parentRef,\n              parentRef: actionRef,\n              closeDropdown: closeDropdown,\n              openLeft: true\n            }, React__default.createElement(OperatorMenuItem, {\n              channel: channel,\n              user: p,\n              onChange: function () {\n                return closeDropdown();\n              },\n              onError: function () {\n                // FIXME: handle error later\n                closeDropdown();\n              },\n              testID: \"open_channel_setting_participant_context_menu_\".concat(isOperator ? 'unregister_operator' : 'register_as_operator')\n            }, isOperator ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR : stringSet.OPEN_CHANNEL_SETTING__MODERATION__REGISTER_AS_OPERATOR), React__default.createElement(MuteMenuItem, {\n              channel: channel,\n              user: p,\n              onChange: function () {\n                return closeDropdown();\n              },\n              onError: function () {\n                // FIXME: handle error later\n                closeDropdown();\n              },\n              testID: \"open_channel_setting_participant_context_menu_\".concat(p.isMuted ? 'unmute' : 'mute')\n            }, p.isMuted ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE : stringSet.OPEN_CHANNEL_SETTING__MODERATION__MUTE), React__default.createElement(MenuItem, {\n              onClick: function () {\n                channel === null || channel === void 0 ? void 0 : channel.banUser(p).then(function () {\n                  closeDropdown();\n                });\n              },\n              testID: \"open_channel_setting_participant_context_menu_ban\"\n            }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__BAN));\n          }\n        });\n      } : function () {\n        return React__default.createElement(React__default.Fragment, null);\n      }\n    });\n  }))));\n}\nvar UserListItem = function (_a) {\n  var user = _a.user,\n    currentUser = _a.currentUser,\n    isOperator = _a.isOperator,\n    action = _a.action;\n  var avatarRef = useRef(null);\n  var actionRef = useRef(null);\n  var _b = useContext(UserProfileContext),\n    disableUserProfile = _b.disableUserProfile,\n    renderUserProfile = _b.renderUserProfile;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return React__default.createElement(\"div\", {\n    className: \"sendbird-participants-accordion__member\"\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-participants-accordion__member-avatar\"\n  }, React__default.createElement(ContextMenu, {\n    menuTrigger: function (toggleDropdown) {\n      return React__default.createElement(React__default.Fragment, null, React__default.createElement(Avatar, {\n        className: \"sendbird-participants-accordion__member-avatar__avatar\",\n        onClick: function () {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        },\n        ref: avatarRef,\n        src: user.profileUrl,\n        width: 24,\n        height: 24\n      }), user instanceof Participant && user.isMuted ? React__default.createElement(MutedAvatarOverlay, null) : '');\n    },\n    menuItems: function (closeDropdown) {\n      return renderUserProfile ? renderUserProfile({\n        user: user,\n        currentUserId: currentUser !== null && currentUser !== void 0 ? currentUser : '',\n        close: closeDropdown,\n        avatarRef: avatarRef\n      }) : React__default.createElement(MenuItems, {\n        openLeft: true,\n        parentRef: avatarRef,\n        // for catching location(x, y) of MenuItems\n        parentContainRef: avatarRef,\n        // for toggling more options(menus & reactions)\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: '0px',\n          paddingBottom: '0px'\n        }\n      }, React__default.createElement(UserProfile, {\n        disableMessaging: true,\n        user: user,\n        currentUserId: currentUser,\n        onSuccess: closeDropdown\n      }));\n    }\n  })), React__default.createElement(Label, {\n    className: \"sendbird-participants-accordion__member__title\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, user.nickname || stringSet.NO_NAME, currentUser === user.userId && stringSet.OPEN_CHANNEL_SETTINGS__MEMBERS__YOU),\n  // if there is now nickname, display userId\n  !user.nickname && React__default.createElement(Label, {\n    className: \"sendbird-participants-accordion__member__title user-id\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, user.userId), isOperator && React__default.createElement(Label, {\n    className: \"sendbird-participants-accordion__member__title\\n                \".concat((user === null || user === void 0 ? void 0 : user.userId) !== currentUser ? 'operator' : '', \"\\n                \").concat((user === null || user === void 0 ? void 0 : user.userId) === currentUser ? 'self-operator' : '', \"\\n              \"),\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, stringSet.OPEN_CHANNEL_SETTINGS__MEMBERS__OPERATOR), action && React__default.createElement(\"div\", {\n    className: \"sendbird-participants-accordion__member__action\",\n    ref: actionRef\n  }, action({\n    actionRef: actionRef\n  })));\n};\nfunction ParticipantList(_a) {\n  var _b;\n  var _c = _a.isOperatorView,\n    isOperatorView = _c === void 0 ? false : _c;\n  var globalState = useSendbirdStateContext();\n  var currentUserId = (_b = globalState === null || globalState === void 0 ? void 0 : globalState.config) === null || _b === void 0 ? void 0 : _b.userId;\n  var channel = useOpenChannelSettingsContext().channel;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var _d = useState(null),\n    participants = _d[0],\n    setParticipants = _d[1];\n  var _e = useState(null),\n    participantListQuery = _e[0],\n    setParticipantListQuery = _e[1];\n  var _f = useState(false),\n    showParticipantsModal = _f[0],\n    setShowParticipantsModal = _f[1];\n  useEffect(function () {\n    if (!channel || !(channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery)) {\n      return;\n    }\n    var participantListQuery = channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery({\n      limit: 10\n    });\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next().then(function (participants) {\n      setParticipants(participants);\n    });\n  }, [channel]);\n  var refreshList = useCallback(function () {\n    if (!channel) {\n      setParticipants([]);\n      return;\n    }\n    var participantListQuery = channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery({\n      limit: 10\n    });\n    participantListQuery.next().then(function (participants) {\n      setParticipants(participants);\n    });\n  }, [channel]);\n  return React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__participant-list\",\n    onScroll: function (e) {\n      if (participantListQuery) {\n        var hasNext = participantListQuery.hasNext;\n        var target = e.target;\n        var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n        if (hasNext && fetchMore) {\n          participantListQuery.next().then(function (fetchedParticipants) {\n            setParticipants(__spreadArray(__spreadArray([], participants !== null && participants !== void 0 ? participants : [], true), fetchedParticipants, true));\n          });\n        }\n      }\n    }\n  }, React__default.createElement(\"div\", null, participants === null || participants === void 0 ? void 0 : participants.map(function (p) {\n    var isOperator = channel === null || channel === void 0 ? void 0 : channel.isOperator(p.userId);\n    return React__default.createElement(UserListItem, {\n      user: p,\n      currentUser: currentUserId,\n      key: p.userId,\n      isOperator: isOperator,\n      action: function (_a) {\n        var actionRef = _a.actionRef;\n        return isOperatorView && currentUserId !== (p === null || p === void 0 ? void 0 : p.userId) ? React__default.createElement(ContextMenu, {\n          menuTrigger: function (toggleDropdown) {\n            return React__default.createElement(IconButton, {\n              className: \"sendbird-openchannel-participant-list__menu\",\n              width: \"32px\",\n              height: \"32px\",\n              onClick: toggleDropdown\n            }, React__default.createElement(Icon, {\n              width: \"24px\",\n              height: \"24px\",\n              type: IconTypes.MORE,\n              fillColor: IconColors.CONTENT_INVERSE\n            }));\n          },\n          menuItems: function (closeDropdown) {\n            return React__default.createElement(MenuItems, {\n              parentRef: actionRef,\n              closeDropdown: closeDropdown,\n              openLeft: true\n            }, React__default.createElement(OperatorMenuItem, {\n              channel: channel,\n              user: p,\n              onChange: function () {\n                closeDropdown();\n                refreshList();\n              },\n              onError: function () {\n                // FIXME: handle error later\n                closeDropdown();\n              },\n              testID: \"open_channel_setting_partitipant_conext_menu_\".concat(isOperator ? 'unregister_operator' : 'register_as_operator')\n            }, isOperator ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR : stringSet.OPEN_CHANNEL_SETTING__MODERATION__REGISTER_AS_OPERATOR), React__default.createElement(MuteMenuItem, {\n              channel: channel,\n              user: p,\n              onChange: function () {\n                closeDropdown();\n                refreshList();\n              },\n              onError: function () {\n                // FIXME: handle error later\n                closeDropdown();\n              },\n              testID: \"open_channel_setting_partitipant_conext_menu_\".concat(p.isMuted ? 'unmute' : 'mute')\n            }, p.isMuted ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE : stringSet.OPEN_CHANNEL_SETTING__MODERATION__MUTE), React__default.createElement(MenuItem, {\n              onClick: function () {\n                channel === null || channel === void 0 ? void 0 : channel.banUser(p).then(function () {\n                  closeDropdown();\n                  refreshList();\n                });\n              },\n              testID: \"open_channel_setting_partitipant_conext_menu_ban\"\n            }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__BAN));\n          }\n        }) : null;\n      }\n    });\n  }), participants && participants.length === 0 ? React__default.createElement(Label, {\n    className: \"sendbird-channel-settings__empty-list\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST) : null, React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-participant-list__footer\"\n  }, (participantListQuery === null || participantListQuery === void 0 ? void 0 : participantListQuery.hasNext) && React__default.createElement(Button, {\n    type: ButtonTypes.SECONDARY,\n    size: ButtonSizes.SMALL,\n    onClick: function () {\n      return setShowParticipantsModal(true);\n    }\n  }, stringSet.OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE)), showParticipantsModal && React__default.createElement(ParticipantsModal, {\n    onCancel: function () {\n      setShowParticipantsModal(false);\n      refreshList();\n    }\n  })));\n}\nexport { ParticipantList as P, UserListItem as U };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { c as __spreadArray } from './bundle-BQi9-O76.js';\nimport React__default, { useContext, useState, useEffect, useRef, useCallback } from 'react';\nimport Button, { ButtonTypes, ButtonSizes } from '../ui/Button.js';\nimport { C as ContextMenu, b as MenuItems, O as OperatorMenuItem, h as MuteMenuItem, c as MenuItem } from './bundle-CwKZj-B6.js';\nimport Icon, { IconTypes, IconColors } from '../ui/Icon.js';\nimport IconButton from '../ui/IconButton.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from './bundle-DhKQeIfP.js';\nimport { Participant } from '@sendbird/chat';\nimport { L as LocalizationContext } from './bundle-cQZ3UZoG.js';\nimport { a as UserProfileContext } from './bundle-BrTJ5Zbd.js';\nimport '../ui/AccordionGroup.js';\nimport { A as Avatar } from './bundle-CFosTNce.js';\nimport 'react-dom';\nimport './bundle-f-SpnOx2.js';\nimport '@sendbird/uikit-tools';\nimport '../withSendbird.js';\nimport { M as Modal } from './bundle-CXdo2kR_.js';\nimport 'css-vars-ponyfill';\nimport './bundle-DxTN4_0p.js';\nimport '@sendbird/chat/openChannel';\nimport '@sendbird/chat/groupChannel';\nimport './bundle-DDeWOERD.js';\nimport MutedAvatarOverlay from '../ui/MutedAvatarOverlay.js';\nimport UserProfile from '../ui/UserProfile.js';\nimport { useOpenChannelSettingsContext } from '../OpenChannelSettings/context.js';\nimport { UserListItem as UserListItem$1 } from '../ui/UserListItem.js';\nimport { n as noop } from './bundle-BgwzpLeQ.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\n\nfunction ParticipantsModal(_a) {\n    var _b, _c, _d;\n    var onCancel = _a.onCancel;\n    var state = useSendbirdStateContext();\n    var channel = useOpenChannelSettingsContext().channel;\n    var stringSet = useContext(LocalizationContext).stringSet;\n    var _e = useState([]), participants = _e[0], setParticipants = _e[1];\n    var _f = useState(null), participantListQuery = _f[0], setParticipantListQuery = _f[1];\n    var userId = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.userId;\n    var sdk = (_d = (_c = state === null || state === void 0 ? void 0 : state.stores) === null || _c === void 0 ? void 0 : _c.sdkStore) === null || _d === void 0 ? void 0 : _d.sdk;\n    var isOperatorView = channel === null || channel === void 0 ? void 0 : channel.isOperator(userId);\n    useEffect(function () {\n        if (!channel || !(channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery)) {\n            return;\n        }\n        var participantListQuery = channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery({});\n        setParticipantListQuery(participantListQuery);\n        participantListQuery.next().then(function (participantList) {\n            setParticipants(participantList);\n        });\n    }, []);\n    return (React__default.createElement(\"div\", null,\n        React__default.createElement(Modal, { hideFooter: true, isFullScreenOnMobile: true, onCancel: function () { return onCancel(); }, onSubmit: noop, titleText: stringSet.OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE },\n            React__default.createElement(\"div\", { className: \"sendbird-more-members__popup-scroll\", onScroll: function (e) {\n                    if (participantListQuery) {\n                        var hasNext = participantListQuery.hasNext;\n                        var target = e.target;\n                        var fetchMore = (target.clientHeight + target.scrollTop === target.scrollHeight);\n                        if (hasNext && fetchMore) {\n                            participantListQuery.next().then(function (fetchedParticipants) {\n                                setParticipants(__spreadArray(__spreadArray([], (participants !== null && participants !== void 0 ? participants : []), true), fetchedParticipants, true));\n                            });\n                        }\n                    }\n                } }, participants === null || participants === void 0 ? void 0 : participants.map(function (p) {\n                var _a;\n                var isOperator = channel === null || channel === void 0 ? void 0 : channel.isOperator(p.userId);\n                return (React__default.createElement(UserListItem$1, { user: p, key: p.userId, currentUser: (_a = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _a === void 0 ? void 0 : _a.userId, action: (userId !== p.userId && isOperatorView)\n                        ? function (_a) {\n                            var actionRef = _a.actionRef, parentRef = _a.parentRef;\n                            return (React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) { return (React__default.createElement(IconButton, { className: \"sendbird-user-message__more__menu\", width: \"32px\", height: \"32px\", onClick: toggleDropdown },\n                                    React__default.createElement(Icon, { width: \"24px\", height: \"24px\", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE }))); }, menuItems: function (closeDropdown) { return (React__default.createElement(MenuItems, { parentContainRef: parentRef, parentRef: actionRef, closeDropdown: closeDropdown, openLeft: true },\n                                    React__default.createElement(OperatorMenuItem, { channel: channel, user: p, onChange: function () { return closeDropdown(); }, onError: function () {\n                                            // FIXME: handle error later\n                                            closeDropdown();\n                                        }, testID: \"open_channel_setting_participant_context_menu_\".concat((isOperator) ? 'unregister_operator' : 'register_as_operator') }, isOperator\n                                        ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR\n                                        : stringSet.OPEN_CHANNEL_SETTING__MODERATION__REGISTER_AS_OPERATOR),\n                                    React__default.createElement(MuteMenuItem, { channel: channel, user: p, onChange: function () { return closeDropdown(); }, onError: function () {\n                                            // FIXME: handle error later\n                                            closeDropdown();\n                                        }, testID: \"open_channel_setting_participant_context_menu_\".concat(p.isMuted ? 'unmute' : 'mute') }, p.isMuted\n                                        ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE\n                                        : stringSet.OPEN_CHANNEL_SETTING__MODERATION__MUTE),\n                                    React__default.createElement(MenuItem, { onClick: function () {\n                                            channel === null || channel === void 0 ? void 0 : channel.banUser(p).then(function () {\n                                                closeDropdown();\n                                            });\n                                        }, testID: \"open_channel_setting_participant_context_menu_ban\" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__BAN))); } }));\n                        }\n                        : function () { return React__default.createElement(React__default.Fragment, null); } }));\n            })))));\n}\n\nvar UserListItem = function (_a) {\n    var user = _a.user, currentUser = _a.currentUser, isOperator = _a.isOperator, action = _a.action;\n    var avatarRef = useRef(null);\n    var actionRef = useRef(null);\n    var _b = useContext(UserProfileContext), disableUserProfile = _b.disableUserProfile, renderUserProfile = _b.renderUserProfile;\n    var stringSet = useContext(LocalizationContext).stringSet;\n    return (React__default.createElement(\"div\", { className: \"sendbird-participants-accordion__member\" },\n        React__default.createElement(\"div\", { className: \"sendbird-participants-accordion__member-avatar\" },\n            React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) { return (React__default.createElement(React__default.Fragment, null,\n                    React__default.createElement(Avatar, { className: \"sendbird-participants-accordion__member-avatar__avatar\", onClick: function () {\n                            if (!disableUserProfile) {\n                                toggleDropdown();\n                            }\n                        }, ref: avatarRef, src: user.profileUrl, width: 24, height: 24 }),\n                    user instanceof Participant && user.isMuted ? (React__default.createElement(MutedAvatarOverlay, null)) : '')); }, menuItems: function (closeDropdown) { return (renderUserProfile\n                    ? renderUserProfile({\n                        user: user,\n                        currentUserId: currentUser !== null && currentUser !== void 0 ? currentUser : '',\n                        close: closeDropdown,\n                        avatarRef: avatarRef,\n                    })\n                    : (React__default.createElement(MenuItems, { openLeft: true, parentRef: avatarRef, \n                        // for catching location(x, y) of MenuItems\n                        parentContainRef: avatarRef, \n                        // for toggling more options(menus & reactions)\n                        closeDropdown: closeDropdown, style: { paddingTop: '0px', paddingBottom: '0px' } },\n                        React__default.createElement(UserProfile, { disableMessaging: true, user: user, currentUserId: currentUser, onSuccess: closeDropdown })))); } })),\n        React__default.createElement(Label, { className: \"sendbird-participants-accordion__member__title\", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_1 },\n            user.nickname || stringSet.NO_NAME,\n            (currentUser === user.userId) && (stringSet.OPEN_CHANNEL_SETTINGS__MEMBERS__YOU)), // if there is now nickname, display userId\n        !user.nickname && (React__default.createElement(Label, { className: \"sendbird-participants-accordion__member__title user-id\", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_2 }, user.userId)),\n        isOperator && (React__default.createElement(Label, { className: \"sendbird-participants-accordion__member__title\\n                \".concat((user === null || user === void 0 ? void 0 : user.userId) !== currentUser ? 'operator' : '', \"\\n                \").concat((user === null || user === void 0 ? void 0 : user.userId) === currentUser ? 'self-operator' : '', \"\\n              \"), type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_2 }, stringSet.OPEN_CHANNEL_SETTINGS__MEMBERS__OPERATOR)),\n        action && (React__default.createElement(\"div\", { className: \"sendbird-participants-accordion__member__action\", ref: actionRef }, action({ actionRef: actionRef })))));\n};\n\nfunction ParticipantList(_a) {\n    var _b;\n    var _c = _a.isOperatorView, isOperatorView = _c === void 0 ? false : _c;\n    var globalState = useSendbirdStateContext();\n    var currentUserId = (_b = globalState === null || globalState === void 0 ? void 0 : globalState.config) === null || _b === void 0 ? void 0 : _b.userId;\n    var channel = useOpenChannelSettingsContext().channel;\n    var stringSet = useContext(LocalizationContext).stringSet;\n    var _d = useState(null), participants = _d[0], setParticipants = _d[1];\n    var _e = useState(null), participantListQuery = _e[0], setParticipantListQuery = _e[1];\n    var _f = useState(false), showParticipantsModal = _f[0], setShowParticipantsModal = _f[1];\n    useEffect(function () {\n        if (!channel || !(channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery)) {\n            return;\n        }\n        var participantListQuery = channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery({ limit: 10 });\n        setParticipantListQuery(participantListQuery);\n        participantListQuery.next().then(function (participants) {\n            setParticipants(participants);\n        });\n    }, [channel]);\n    var refreshList = useCallback(function () {\n        if (!channel) {\n            setParticipants([]);\n            return;\n        }\n        var participantListQuery = channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery({ limit: 10 });\n        participantListQuery.next().then(function (participants) {\n            setParticipants(participants);\n        });\n    }, [channel]);\n    return (React__default.createElement(\"div\", { className: \"sendbird-openchannel-settings__participant-list\", onScroll: function (e) {\n            if (participantListQuery) {\n                var hasNext = participantListQuery.hasNext;\n                var target = e.target;\n                var fetchMore = (target.clientHeight + target.scrollTop === target.scrollHeight);\n                if (hasNext && fetchMore) {\n                    participantListQuery.next().then(function (fetchedParticipants) {\n                        setParticipants(__spreadArray(__spreadArray([], (participants !== null && participants !== void 0 ? participants : []), true), fetchedParticipants, true));\n                    });\n                }\n            }\n        } },\n        React__default.createElement(\"div\", null, participants === null || participants === void 0 ? void 0 :\n            participants.map(function (p) {\n                var isOperator = channel === null || channel === void 0 ? void 0 : channel.isOperator(p.userId);\n                return (React__default.createElement(UserListItem, { user: p, currentUser: currentUserId, key: p.userId, isOperator: isOperator, action: function (_a) {\n                        var actionRef = _a.actionRef;\n                        return ((isOperatorView && currentUserId !== (p === null || p === void 0 ? void 0 : p.userId))\n                            ? (React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) { return (React__default.createElement(IconButton, { className: \"sendbird-openchannel-participant-list__menu\", width: \"32px\", height: \"32px\", onClick: toggleDropdown },\n                                    React__default.createElement(Icon, { width: \"24px\", height: \"24px\", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE }))); }, menuItems: function (closeDropdown) { return (React__default.createElement(MenuItems, { parentRef: actionRef, closeDropdown: closeDropdown, openLeft: true },\n                                    React__default.createElement(OperatorMenuItem, { channel: channel, user: p, onChange: function () {\n                                            closeDropdown();\n                                            refreshList();\n                                        }, onError: function () {\n                                            // FIXME: handle error later\n                                            closeDropdown();\n                                        }, testID: \"open_channel_setting_partitipant_conext_menu_\".concat((isOperator) ? 'unregister_operator' : 'register_as_operator') }, isOperator\n                                        ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR\n                                        : stringSet.OPEN_CHANNEL_SETTING__MODERATION__REGISTER_AS_OPERATOR),\n                                    React__default.createElement(MuteMenuItem, { channel: channel, user: p, onChange: function () {\n                                            closeDropdown();\n                                            refreshList();\n                                        }, onError: function () {\n                                            // FIXME: handle error later\n                                            closeDropdown();\n                                        }, testID: \"open_channel_setting_partitipant_conext_menu_\".concat(p.isMuted ? 'unmute' : 'mute') }, p.isMuted\n                                        ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE\n                                        : stringSet.OPEN_CHANNEL_SETTING__MODERATION__MUTE),\n                                    React__default.createElement(MenuItem, { onClick: function () {\n                                            channel === null || channel === void 0 ? void 0 : channel.banUser(p).then(function () {\n                                                closeDropdown();\n                                                refreshList();\n                                            });\n                                        }, testID: \"open_channel_setting_partitipant_conext_menu_ban\" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__BAN))); } }))\n                            : null);\n                    } }));\n            }),\n            (participants && participants.length === 0)\n                ? (React__default.createElement(Label, { className: \"sendbird-channel-settings__empty-list\", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_3 }, stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST)) : null,\n            React__default.createElement(\"div\", { className: \"sendbird-openchannel-participant-list__footer\" }, (participantListQuery === null || participantListQuery === void 0 ? void 0 : participantListQuery.hasNext) && (React__default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function () { return setShowParticipantsModal(true); } }, stringSet.OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE))),\n            showParticipantsModal && (React__default.createElement(ParticipantsModal, { onCancel: function () {\n                    setShowParticipantsModal(false);\n                    refreshList();\n                } })))));\n}\n\nexport { ParticipantList as P, UserListItem as U };\n//# sourceMappingURL=bundle-B4KMvElm.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}