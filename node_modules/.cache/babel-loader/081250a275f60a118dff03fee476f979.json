{"ast":null,"code":"import React__default, { createContext, useState, useContext } from 'react';\nimport { n as noop } from '../chunks/bundle-BgwzpLeQ.js';\nvar AccordionGroupContext = createContext({\n  openedListKeys: [],\n  addOpenedListKey: noop,\n  removeOpenedListKey: noop,\n  clearOpenedListKeys: noop,\n  allowMultipleOpen: false\n});\nvar AccordionGroupProvider = function (_a) {\n  var className = _a.className,\n    children = _a.children,\n    _b = _a.allowMultipleOpen,\n    allowMultipleOpen = _b === void 0 ? false : _b;\n  var _c = useState([]),\n    openedListKeys = _c[0],\n    setOpenedListKeys = _c[1];\n  var addOpenedListKey = function (key) {\n    setOpenedListKeys(function (prevList) {\n      if (!allowMultipleOpen) {\n        return [key];\n      }\n      prevList.push(key);\n      return prevList;\n    });\n  };\n  var removeOpenedListKey = function (key) {\n    setOpenedListKeys(function (prevList) {\n      return prevList.filter(function (k) {\n        return k !== key;\n      });\n    });\n  };\n  var clearOpenedListKeys = function () {\n    setOpenedListKeys([]);\n  };\n  return React__default.createElement(\"div\", {\n    className: \"sendbird-accordion-group-provider \".concat(className)\n  }, React__default.createElement(AccordionGroupContext.Provider, {\n    value: {\n      openedListKeys: openedListKeys,\n      addOpenedListKey: addOpenedListKey,\n      removeOpenedListKey: removeOpenedListKey,\n      clearOpenedListKeys: clearOpenedListKeys,\n      allowMultipleOpen: allowMultipleOpen\n    }\n  }, children));\n};\nvar useAccordionGroupContext = function () {\n  var context = useContext(AccordionGroupContext);\n  if (!context) throw new Error('No accordion group context available. Make sure you are rending <AccordionGroupContext />.');\n  return context;\n};\nexport { AccordionGroupContext, AccordionGroupProvider, AccordionGroupProvider as default, useAccordionGroupContext };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { createContext, useState, useContext } from 'react';\nimport { n as noop } from '../chunks/bundle-BgwzpLeQ.js';\n\nvar AccordionGroupContext = createContext({\n    openedListKeys: [],\n    addOpenedListKey: noop,\n    removeOpenedListKey: noop,\n    clearOpenedListKeys: noop,\n    allowMultipleOpen: false,\n});\nvar AccordionGroupProvider = function (_a) {\n    var className = _a.className, children = _a.children, _b = _a.allowMultipleOpen, allowMultipleOpen = _b === void 0 ? false : _b;\n    var _c = useState([]), openedListKeys = _c[0], setOpenedListKeys = _c[1];\n    var addOpenedListKey = function (key) {\n        setOpenedListKeys(function (prevList) {\n            if (!allowMultipleOpen) {\n                return [key];\n            }\n            prevList.push(key);\n            return prevList;\n        });\n    };\n    var removeOpenedListKey = function (key) {\n        setOpenedListKeys(function (prevList) { return prevList.filter(function (k) { return k !== key; }); });\n    };\n    var clearOpenedListKeys = function () {\n        setOpenedListKeys([]);\n    };\n    return (React__default.createElement(\"div\", { className: \"sendbird-accordion-group-provider \".concat(className) },\n        React__default.createElement(AccordionGroupContext.Provider, { value: {\n                openedListKeys: openedListKeys,\n                addOpenedListKey: addOpenedListKey,\n                removeOpenedListKey: removeOpenedListKey,\n                clearOpenedListKeys: clearOpenedListKeys,\n                allowMultipleOpen: allowMultipleOpen,\n            } }, children)));\n};\nvar useAccordionGroupContext = function () {\n    var context = useContext(AccordionGroupContext);\n    if (!context)\n        throw new Error('No accordion group context available. Make sure you are rending <AccordionGroupContext />.');\n    return context;\n};\n\nexport { AccordionGroupContext, AccordionGroupProvider, AccordionGroupProvider as default, useAccordionGroupContext };\n//# sourceMappingURL=AccordionGroup.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}