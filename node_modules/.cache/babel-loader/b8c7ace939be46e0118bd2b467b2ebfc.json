{"ast":null,"code":"import React__default from 'react';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { TypingIndicator } from '../GroupChannel/components/TypingIndicator.js';\nimport { T as TypingIndicatorType } from './bundle-DxTN4_0p.js';\nimport ConnectionStatus from '../ui/ConnectionStatus.js';\nimport PlaceHolder, { PlaceHolderTypes } from '../ui/PlaceHolder.js';\nimport { d as deleteNullish } from './bundle-BgwzpLeQ.js';\nvar GroupChannelUIView = function (props) {\n  var _a, _b, _c, _d;\n  var isLoading = props.isLoading,\n    isInvalid = props.isInvalid,\n    channelUrl = props.channelUrl;\n  var _e = deleteNullish(props),\n    renderChannelHeader = _e.renderChannelHeader,\n    renderMessageList = _e.renderMessageList,\n    renderMessageInput = _e.renderMessageInput,\n    renderTypingIndicator = _e.renderTypingIndicator,\n    renderPlaceholderLoader = _e.renderPlaceholderLoader,\n    renderPlaceholderInvalid = _e.renderPlaceholderInvalid;\n  var _f = useSendbirdStateContext(),\n    stores = _f.stores,\n    config = _f.config;\n  var sdkError = (_a = stores === null || stores === void 0 ? void 0 : stores.sdkStore) === null || _a === void 0 ? void 0 : _a.error;\n  var logger = config.logger,\n    isOnline = config.isOnline;\n  // Note: This is not a loading status of the message list.\n  //  It is just for custom props from the Channel module and is not used in the GroupChannel module. (We should remove this in v4)\n  if (isLoading) {\n    return React__default.createElement(\"div\", {\n      className: \"sendbird-conversation\"\n    }, (renderPlaceholderLoader === null || renderPlaceholderLoader === void 0 ? void 0 : renderPlaceholderLoader()) || React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.LOADING\n    }));\n  }\n  if (!channelUrl) {\n    return React__default.createElement(\"div\", {\n      className: \"sendbird-conversation\"\n    }, (renderPlaceholderInvalid === null || renderPlaceholderInvalid === void 0 ? void 0 : renderPlaceholderInvalid()) || React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.NO_CHANNELS\n    }));\n  }\n  if (isInvalid) {\n    return React__default.createElement(\"div\", {\n      className: \"sendbird-conversation\"\n    }, (renderPlaceholderInvalid === null || renderPlaceholderInvalid === void 0 ? void 0 : renderPlaceholderInvalid()) || React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.WRONG\n    }));\n  }\n  if (sdkError) {\n    return React__default.createElement(\"div\", {\n      className: \"sendbird-conversation\"\n    }, (renderPlaceholderInvalid === null || renderPlaceholderInvalid === void 0 ? void 0 : renderPlaceholderInvalid()) || React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.WRONG,\n      retryToConnect: function () {\n        logger.info('Channel: reconnecting');\n        // reconnect();\n      }\n    }));\n  }\n  return React__default.createElement(\"div\", {\n    className: \"sendbird-conversation\"\n  }, renderChannelHeader === null || renderChannelHeader === void 0 ? void 0 : renderChannelHeader({\n    className: 'sendbird-conversation__channel-header'\n  }), renderMessageList === null || renderMessageList === void 0 ? void 0 : renderMessageList(props), React__default.createElement(\"div\", {\n    className: \"sendbird-conversation__footer\"\n  }, renderMessageInput === null || renderMessageInput === void 0 ? void 0 : renderMessageInput(), React__default.createElement(\"div\", {\n    className: \"sendbird-conversation__footer__typing-indicator\"\n  }, (renderTypingIndicator === null || renderTypingIndicator === void 0 ? void 0 : renderTypingIndicator()) || ((_b = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _b === void 0 ? void 0 : _b.enableTypingIndicator) && ((_d = (_c = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _c === void 0 ? void 0 : _c.typingIndicatorTypes) === null || _d === void 0 ? void 0 : _d.has(TypingIndicatorType.Text)) && React__default.createElement(TypingIndicator, {\n    channelUrl: channelUrl\n  }), !isOnline && React__default.createElement(ConnectionStatus, null))));\n};\nexport { GroupChannelUIView as G };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default from 'react';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { TypingIndicator } from '../GroupChannel/components/TypingIndicator.js';\nimport { T as TypingIndicatorType } from './bundle-DxTN4_0p.js';\nimport ConnectionStatus from '../ui/ConnectionStatus.js';\nimport PlaceHolder, { PlaceHolderTypes } from '../ui/PlaceHolder.js';\nimport { d as deleteNullish } from './bundle-BgwzpLeQ.js';\n\nvar GroupChannelUIView = function (props) {\n    var _a, _b, _c, _d;\n    var isLoading = props.isLoading, isInvalid = props.isInvalid, channelUrl = props.channelUrl;\n    var _e = deleteNullish(props), renderChannelHeader = _e.renderChannelHeader, renderMessageList = _e.renderMessageList, renderMessageInput = _e.renderMessageInput, renderTypingIndicator = _e.renderTypingIndicator, renderPlaceholderLoader = _e.renderPlaceholderLoader, renderPlaceholderInvalid = _e.renderPlaceholderInvalid;\n    var _f = useSendbirdStateContext(), stores = _f.stores, config = _f.config;\n    var sdkError = (_a = stores === null || stores === void 0 ? void 0 : stores.sdkStore) === null || _a === void 0 ? void 0 : _a.error;\n    var logger = config.logger, isOnline = config.isOnline;\n    // Note: This is not a loading status of the message list.\n    //  It is just for custom props from the Channel module and is not used in the GroupChannel module. (We should remove this in v4)\n    if (isLoading) {\n        return React__default.createElement(\"div\", { className: \"sendbird-conversation\" }, (renderPlaceholderLoader === null || renderPlaceholderLoader === void 0 ? void 0 : renderPlaceholderLoader()) || React__default.createElement(PlaceHolder, { type: PlaceHolderTypes.LOADING }));\n    }\n    if (!channelUrl) {\n        return (React__default.createElement(\"div\", { className: \"sendbird-conversation\" }, (renderPlaceholderInvalid === null || renderPlaceholderInvalid === void 0 ? void 0 : renderPlaceholderInvalid()) || React__default.createElement(PlaceHolder, { type: PlaceHolderTypes.NO_CHANNELS })));\n    }\n    if (isInvalid) {\n        return React__default.createElement(\"div\", { className: \"sendbird-conversation\" }, (renderPlaceholderInvalid === null || renderPlaceholderInvalid === void 0 ? void 0 : renderPlaceholderInvalid()) || React__default.createElement(PlaceHolder, { type: PlaceHolderTypes.WRONG }));\n    }\n    if (sdkError) {\n        return (React__default.createElement(\"div\", { className: \"sendbird-conversation\" }, (renderPlaceholderInvalid === null || renderPlaceholderInvalid === void 0 ? void 0 : renderPlaceholderInvalid()) || (React__default.createElement(PlaceHolder, { type: PlaceHolderTypes.WRONG, retryToConnect: function () {\n                logger.info('Channel: reconnecting');\n                // reconnect();\n            } }))));\n    }\n    return (React__default.createElement(\"div\", { className: \"sendbird-conversation\" }, renderChannelHeader === null || renderChannelHeader === void 0 ? void 0 :\n        renderChannelHeader({ className: 'sendbird-conversation__channel-header' }), renderMessageList === null || renderMessageList === void 0 ? void 0 :\n        renderMessageList(props),\n        React__default.createElement(\"div\", { className: \"sendbird-conversation__footer\" }, renderMessageInput === null || renderMessageInput === void 0 ? void 0 :\n            renderMessageInput(),\n            React__default.createElement(\"div\", { className: \"sendbird-conversation__footer__typing-indicator\" },\n                (renderTypingIndicator === null || renderTypingIndicator === void 0 ? void 0 : renderTypingIndicator())\n                    || (((_b = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _b === void 0 ? void 0 : _b.enableTypingIndicator) && ((_d = (_c = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _c === void 0 ? void 0 : _c.typingIndicatorTypes) === null || _d === void 0 ? void 0 : _d.has(TypingIndicatorType.Text)) && (React__default.createElement(TypingIndicator, { channelUrl: channelUrl }))),\n                !isOnline && React__default.createElement(ConnectionStatus, null)))));\n};\n\nexport { GroupChannelUIView as G };\n//# sourceMappingURL=bundle-DGZ_h6Q3.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}