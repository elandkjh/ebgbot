{"ast":null,"code":"import { f as format } from '../../chunks/bundle-CAdqcqOm.js';\nimport { a as isReadMessage } from '../../chunks/bundle-DxTN4_0p.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../chunks/bundle-BQi9-O76.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\n\n/**\n * exported, should be backward compatible\n * @returns [chainTop: `boolean`, chainBottom: `boolean`]\n */\nvar compareMessagesForGrouping = function (prevMessage, currMessage, nextMessage, currentChannel, replyType) {\n  if (!currentChannel || currentChannel.channelType !== 'group') {\n    return [isSameGroup(prevMessage, currMessage), isSameGroup(currMessage, nextMessage)];\n  }\n  if (replyType === 'THREAD' && (currMessage === null || currMessage === void 0 ? void 0 : currMessage.threadInfo)) {\n    return [false, false];\n  }\n  var sendingStatus = (currMessage === null || currMessage === void 0 ? void 0 : currMessage.sendingStatus) || '';\n  var isAcceptable = sendingStatus !== 'pending' && sendingStatus !== 'failed';\n  return [isSameGroup(prevMessage, currMessage, currentChannel) && isAcceptable, isSameGroup(currMessage, nextMessage, currentChannel) && isAcceptable];\n};\nvar getMessageCreatedAt = function (message) {\n  return format(message.createdAt, 'p');\n};\nvar isSameGroup = function (message, comparingMessage, currentChannel) {\n  var _a, _b;\n  if (!(message && comparingMessage && message.messageType && message.messageType !== 'admin' && comparingMessage.messageType && (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.messageType) !== 'admin' && 'sender' in message && 'sender' in comparingMessage && message.createdAt && comparingMessage.createdAt && message.sender.userId && comparingMessage.sender.userId)) {\n    return false;\n  }\n  return (message === null || message === void 0 ? void 0 : message.sendingStatus) === (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sendingStatus) && ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId) === ((_b = comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sender) === null || _b === void 0 ? void 0 : _b.userId) && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage) && (currentChannel ? isReadMessage(currentChannel, message) === isReadMessage(currentChannel, comparingMessage) : true);\n};\nvar messages = {\n  compareMessagesForGrouping: compareMessagesForGrouping,\n  getMessageCreatedAt: getMessageCreatedAt,\n  isSameGroup: isSameGroup\n};\nexport { compareMessagesForGrouping, messages as default, getMessageCreatedAt, isSameGroup };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { f as format } from '../../chunks/bundle-CAdqcqOm.js';\nimport { a as isReadMessage } from '../../chunks/bundle-DxTN4_0p.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../chunks/bundle-BQi9-O76.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\n\n/**\n * exported, should be backward compatible\n * @returns [chainTop: `boolean`, chainBottom: `boolean`]\n */\nvar compareMessagesForGrouping = function (prevMessage, currMessage, nextMessage, currentChannel, replyType) {\n    if (!currentChannel || currentChannel.channelType !== 'group') {\n        return [\n            isSameGroup(prevMessage, currMessage),\n            isSameGroup(currMessage, nextMessage),\n        ];\n    }\n    if (replyType === 'THREAD' && (currMessage === null || currMessage === void 0 ? void 0 : currMessage.threadInfo)) {\n        return [false, false];\n    }\n    var sendingStatus = (currMessage === null || currMessage === void 0 ? void 0 : currMessage.sendingStatus) || '';\n    var isAcceptable = sendingStatus !== 'pending' && sendingStatus !== 'failed';\n    return [\n        isSameGroup(prevMessage, currMessage, currentChannel) && isAcceptable,\n        isSameGroup(currMessage, nextMessage, currentChannel) && isAcceptable,\n    ];\n};\nvar getMessageCreatedAt = function (message) { return format(message.createdAt, 'p'); };\nvar isSameGroup = function (message, comparingMessage, currentChannel) {\n    var _a, _b;\n    if (!(message\n        && comparingMessage\n        && message.messageType\n        && message.messageType !== 'admin'\n        && comparingMessage.messageType\n        && (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.messageType) !== 'admin'\n        && 'sender' in message\n        && 'sender' in comparingMessage\n        && message.createdAt\n        && comparingMessage.createdAt\n        && message.sender.userId\n        && comparingMessage.sender.userId)) {\n        return false;\n    }\n    return ((message === null || message === void 0 ? void 0 : message.sendingStatus) === (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sendingStatus)\n        && ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId) === ((_b = comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sender) === null || _b === void 0 ? void 0 : _b.userId)\n        && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage)) && (currentChannel ? isReadMessage(currentChannel, message) === isReadMessage(currentChannel, comparingMessage) : true);\n};\nvar messages = {\n    compareMessagesForGrouping: compareMessagesForGrouping,\n    getMessageCreatedAt: getMessageCreatedAt,\n    isSameGroup: isSameGroup,\n};\n\nexport { compareMessagesForGrouping, messages as default, getMessageCreatedAt, isSameGroup };\n//# sourceMappingURL=compareMessagesForGrouping.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}