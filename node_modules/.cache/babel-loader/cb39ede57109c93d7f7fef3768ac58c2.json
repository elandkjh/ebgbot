{"ast":null,"code":"import { a as __awaiter, b as __generator, c as __spreadArray } from './bundle-BQi9-O76.js';\nimport React__default, { useRef, useState, useEffect, useCallback } from 'react';\nimport { i as isDisabledBecauseFrozen, a as isDisabledBecauseMuted, b as isDisabledBecauseSuggestedReplies } from './bundle-C3ktHDOc.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { u as useLocalization } from './bundle-cQZ3UZoG.js';\nimport { SuggestedMentionList } from '../GroupChannel/components/SuggestedMentionList.js';\nimport { useDirtyGetMentions } from '../Message/hooks/useDirtyGetMentions.js';\nimport QuoteMessageInput from '../ui/QuoteMessageInput.js';\nimport { useVoicePlayer } from '../VoicePlayer/useVoicePlayer.js';\nimport { useVoiceRecorder, VoiceRecorderStatus } from '../VoiceRecorder/useVoiceRecorder.js';\nimport { V as VoiceMessageInputStatus, a as VoiceMessageInput } from './bundle-B2SAqHzx.js';\nimport { M as Modal, b as useGlobalModalContext, c as ModalFooter } from './bundle-CXdo2kR_.js';\nimport Button, { ButtonTypes, ButtonSizes } from '../ui/Button.js';\nimport { V as VOICE_PLAYER_STATUS } from './bundle-DDeWOERD.js';\nimport { u as uuidv4 } from './bundle-etuaqevl.js';\nimport MessageInput from '../ui/MessageInput.js';\nimport { u as useMediaQueryContext } from './bundle-f-SpnOx2.js';\nimport { M as MessageInputKeys } from './bundle-0qSTzMXb.js';\nimport { j as isImage } from './bundle-DxTN4_0p.js';\nimport './bundle-DhKQeIfP.js';\nimport { c as compressImages } from './bundle-DAz5E5O_.js';\nvar VoiceMessageInputWrapper = function (_a) {\n  var channel = _a.channel,\n    onCancelClick = _a.onCancelClick,\n    onSubmitClick = _a.onSubmitClick;\n  var uuid = useRef(uuidv4()).current;\n  var _b = useState(null),\n    audioFile = _b[0],\n    setAudioFile = _b[1];\n  var _c = useState(VoiceMessageInputStatus.READY_TO_RECORD),\n    voiceInputState = _c[0],\n    setVoiceInputState = _c[1];\n  var _d = useState(false),\n    isSubmitted = _d[0],\n    setSubmit = _d[1];\n  var _e = useState(false),\n    isDisabled = _e[0],\n    setDisabled = _e[1];\n  var _f = useState(false),\n    showModal = _f[0],\n    setShowModal = _f[1];\n  var stringSet = useLocalization().stringSet;\n  var config = useSendbirdStateContext().config;\n  var _g = useVoiceRecorder({\n      onRecordingStarted: function () {\n        setVoiceInputState(VoiceMessageInputStatus.RECORDING);\n      },\n      onRecordingEnded: function (audioFile) {\n        setAudioFile(audioFile);\n      }\n    }),\n    start = _g.start,\n    stop = _g.stop,\n    cancel = _g.cancel,\n    recordingTime = _g.recordingTime,\n    recordingStatus = _g.recordingStatus,\n    recordingLimit = _g.recordingLimit;\n  var voicePlayer = useVoicePlayer({\n    channelUrl: channel === null || channel === void 0 ? void 0 : channel.url,\n    key: uuid,\n    audioFile: audioFile !== null && audioFile !== void 0 ? audioFile : undefined\n  });\n  var play = voicePlayer.play,\n    pause = voicePlayer.pause,\n    playbackTime = voicePlayer.playbackTime,\n    playingStatus = voicePlayer.playingStatus;\n  var stopVoicePlayer = voicePlayer.stop;\n  // disabled state: muted & frozen\n  useEffect(function () {\n    if (isDisabledBecauseFrozen(channel) || isDisabledBecauseMuted(channel)) {\n      setDisabled(true);\n    } else {\n      setDisabled(false);\n    }\n  }, [channel === null || channel === void 0 ? void 0 : channel.myRole, channel === null || channel === void 0 ? void 0 : channel.isFrozen, channel === null || channel === void 0 ? void 0 : channel.myMutedState]);\n  // call onSubmitClick when submit button is clicked and recorded audio file is created\n  useEffect(function () {\n    if (isSubmitted && audioFile) {\n      onSubmitClick === null || onSubmitClick === void 0 ? void 0 : onSubmitClick(audioFile, recordingTime);\n      setSubmit(false);\n      setAudioFile(null);\n    }\n  }, [isSubmitted, audioFile, recordingTime]);\n  // operate which control button should be displayed\n  useEffect(function () {\n    if (audioFile) {\n      if (recordingTime < config.voiceRecord.minRecordingTime) {\n        setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);\n        setAudioFile(null);\n      } else if (playingStatus === VOICE_PLAYER_STATUS.PLAYING) {\n        setVoiceInputState(VoiceMessageInputStatus.PLAYING);\n      } else {\n        setVoiceInputState(VoiceMessageInputStatus.READY_TO_PLAY);\n      }\n    }\n  }, [audioFile, recordingTime, playingStatus]);\n  return React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-input-wrapper\"\n  }, React__default.createElement(VoiceMessageInput, {\n    currentValue: recordingStatus === VoiceRecorderStatus.COMPLETED ? playbackTime : recordingTime,\n    maximumValue: recordingStatus === VoiceRecorderStatus.COMPLETED ? recordingTime : recordingLimit,\n    currentType: voiceInputState,\n    onCancelClick: function () {\n      onCancelClick === null || onCancelClick === void 0 ? void 0 : onCancelClick();\n      cancel();\n      stopVoicePlayer();\n    },\n    onSubmitClick: function () {\n      if (isDisabled) {\n        setShowModal(true);\n        setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);\n      } else {\n        stop();\n        pause();\n        setSubmit(true);\n      }\n    },\n    onControlClick: function (type) {\n      switch (type) {\n        case VoiceMessageInputStatus.READY_TO_RECORD:\n          {\n            stopVoicePlayer();\n            start();\n            break;\n          }\n        case VoiceMessageInputStatus.RECORDING:\n          {\n            if (recordingTime >= config.voiceRecord.minRecordingTime && !isDisabled) {\n              stop();\n            } else if (isDisabled) {\n              cancel();\n              setShowModal(true);\n              setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);\n            } else {\n              cancel();\n              setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);\n            }\n            break;\n          }\n        case VoiceMessageInputStatus.READY_TO_PLAY:\n          {\n            play();\n            break;\n          }\n        case VoiceMessageInputStatus.PLAYING:\n          {\n            pause();\n            break;\n          }\n      }\n    }\n  }), showModal && React__default.createElement(Modal, {\n    className: \"sendbird-voice-message-input-wrapper-alert\",\n    titleText: isDisabledBecauseMuted(channel) ? stringSet.MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_MUTED : stringSet.MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_FROZEN,\n    hideFooter: true,\n    isCloseOnClickOutside: true,\n    onClose: function () {\n      setShowModal(false);\n      onCancelClick === null || onCancelClick === void 0 ? void 0 : onCancelClick();\n    }\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-input-wrapper-alert__body\"\n  }, React__default.createElement(Button, {\n    className: \"sendbird-voice-message-input-wrapper-alert__body__ok-button\",\n    type: ButtonTypes.PRIMARY,\n    size: ButtonSizes.BIG,\n    onClick: function () {\n      setShowModal(false);\n      onCancelClick === null || onCancelClick === void 0 ? void 0 : onCancelClick();\n    }\n  }, stringSet.BUTTON__OK))));\n};\nvar useHandleUploadFiles = function (_a, _b) {\n  var sendFileMessage = _a.sendFileMessage,\n    sendMultipleFilesMessage = _a.sendMultipleFilesMessage,\n    quoteMessage = _a.quoteMessage;\n  var logger = _b.logger;\n  var stringSet = useLocalization().stringSet;\n  var config = useSendbirdStateContext().config;\n  var imageCompression = config.imageCompression;\n  var uikitUploadSizeLimit = config === null || config === void 0 ? void 0 : config.uikitUploadSizeLimit;\n  var uikitMultipleFilesMessageLimit = config === null || config === void 0 ? void 0 : config.uikitMultipleFilesMessageLimit;\n  var openModal = useGlobalModalContext().openModal;\n  return useCallback(function (files) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var ONE_MiB, compressedFiles, sendingFiles, file, imageFiles_1, otherFiles_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (files.length === 0) {\n              logger.warning('Channel|useHandleUploadFiles: given file list is empty.', {\n                files: files\n              });\n              return [2 /*return*/];\n            }\n            if (files.length > uikitMultipleFilesMessageLimit) {\n              logger.info(\"Channel|useHandleUploadFiles: Cannot upload files more than \".concat(uikitMultipleFilesMessageLimit));\n              openModal({\n                modalProps: {\n                  titleText: stringSet.FILE_UPLOAD_NOTIFICATION__COUNT_LIMIT.replace('%d', \"\".concat(uikitUploadSizeLimit)),\n                  hideFooter: true\n                },\n                childElement: function (_a) {\n                  var closeModal = _a.closeModal;\n                  return React__default.createElement(ModalFooter, {\n                    type: ButtonTypes.PRIMARY,\n                    submitText: stringSet.BUTTON__OK,\n                    hideCancelButton: true,\n                    onCancel: closeModal,\n                    onSubmit: closeModal\n                  });\n                }\n              });\n              return [2 /*return*/];\n            }\n            // Validate file sizes\n            if (files.some(function (file) {\n              return file.size > uikitUploadSizeLimit;\n            })) {\n              // The default value of uikitUploadSizeLimit is 26MB\n              logger.info(\"Channel|useHandleUploadFiles: Cannot upload file size exceeding \".concat(uikitUploadSizeLimit));\n              ONE_MiB = 1024 * 1024;\n              openModal({\n                modalProps: {\n                  titleText: stringSet.FILE_UPLOAD_NOTIFICATION__SIZE_LIMIT.replace('%d', \"\".concat(Math.floor(uikitUploadSizeLimit / ONE_MiB))),\n                  hideFooter: true\n                },\n                childElement: function (_a) {\n                  var closeModal = _a.closeModal;\n                  return React__default.createElement(ModalFooter, {\n                    type: ButtonTypes.PRIMARY,\n                    submitText: stringSet.BUTTON__OK,\n                    hideCancelButton: true,\n                    onCancel: closeModal,\n                    onSubmit: closeModal\n                  });\n                }\n              });\n              return [2 /*return*/];\n            }\n            return [4 /*yield*/, compressImages({\n              files: files,\n              imageCompression: imageCompression,\n              logger: logger\n            })];\n          case 1:\n            compressedFiles = _a.sent().compressedFiles;\n            sendingFiles = compressedFiles;\n            // Send File Message\n            if (sendingFiles.length === 1) {\n              logger.info('Channel|useHandleUploadFiles: sending one file.');\n              file = sendingFiles[0];\n              return [2 /*return*/, sendFileMessage({\n                file: file,\n                parentMessageId: quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId\n              })];\n            } else if (sendingFiles.length > 1) {\n              logger.info('Channel|useHandleUploadFiles: sending multiple files.');\n              imageFiles_1 = [];\n              otherFiles_1 = [];\n              sendingFiles.forEach(function (file) {\n                if (isImage(file.type)) {\n                  imageFiles_1.push(file);\n                } else {\n                  otherFiles_1.push(file);\n                }\n              });\n              return [2 /*return*/, otherFiles_1.reduce(function (previousPromise, item) {\n                return previousPromise.then(function () {\n                  return sendFileMessage({\n                    file: item,\n                    parentMessageId: quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId\n                  });\n                });\n              }, function () {\n                if (imageFiles_1.length === 0) {\n                  return Promise.resolve();\n                } else if (imageFiles_1.length === 1) {\n                  return sendFileMessage({\n                    file: imageFiles_1[0]\n                  });\n                } else {\n                  return sendMultipleFilesMessage({\n                    fileInfoList: imageFiles_1.map(function (file) {\n                      return {\n                        file: file,\n                        fileName: file.name,\n                        fileSize: file.size,\n                        mimeType: file.type\n                      };\n                    }),\n                    parentMessageId: quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId\n                  });\n                }\n              }())];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  }, [sendFileMessage, sendMultipleFilesMessage, quoteMessage]);\n};\nvar MessageInputWrapperView = React__default.forwardRef(function (props, ref) {\n  var _a;\n  // Props\n  var currentChannel = props.currentChannel,\n    loading = props.loading,\n    quoteMessage = props.quoteMessage,\n    setQuoteMessage = props.setQuoteMessage,\n    messageInputRef = props.messageInputRef,\n    sendUserMessage = props.sendUserMessage,\n    sendFileMessage = props.sendFileMessage,\n    sendVoiceMessage = props.sendVoiceMessage,\n    sendMultipleFilesMessage = props.sendMultipleFilesMessage,\n    // render\n    renderUserMentionItem = props.renderUserMentionItem,\n    renderFileUploadIcon = props.renderFileUploadIcon,\n    renderVoiceMessageIcon = props.renderVoiceMessageIcon,\n    renderSendMessageIcon = props.renderSendMessageIcon,\n    acceptableMimeTypes = props.acceptableMimeTypes,\n    disabled = props.disabled;\n  var stringSet = useLocalization().stringSet;\n  var isMobile = useMediaQueryContext().isMobile;\n  var _b = useSendbirdStateContext(),\n    stores = _b.stores,\n    config = _b.config;\n  var isOnline = config.isOnline,\n    userMention = config.userMention,\n    logger = config.logger,\n    groupChannel = config.groupChannel;\n  var sdk = stores.sdkStore.sdk;\n  var maxMentionCount = userMention.maxMentionCount,\n    maxSuggestionCount = userMention.maxSuggestionCount;\n  var isBroadcast = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isBroadcast;\n  var isOperator = (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) === 'operator';\n  var isMultipleFilesMessageEnabled = (_a = props.isMultipleFilesMessageEnabled) !== null && _a !== void 0 ? _a : config.isMultipleFilesMessageEnabled;\n  var isMentionEnabled = groupChannel.enableMention;\n  var isVoiceMessageEnabled = groupChannel.enableVoiceMessage;\n  // States\n  var _c = useState(''),\n    mentionNickname = _c[0],\n    setMentionNickname = _c[1];\n  var _d = useState([]),\n    mentionedUsers = _d[0],\n    setMentionedUsers = _d[1];\n  var _e = useState([]),\n    mentionedUserIds = _e[0],\n    setMentionedUserIds = _e[1];\n  var _f = useState(null),\n    selectedUser = _f[0],\n    setSelectedUser = _f[1];\n  var _g = useState([]),\n    mentionSuggestedUsers = _g[0],\n    setMentionSuggestedUsers = _g[1];\n  var _h = useState(null),\n    messageInputEvent = _h[0],\n    setMessageInputEvent = _h[1];\n  var _j = useState(false),\n    showVoiceMessageInput = _j[0],\n    setShowVoiceMessageInput = _j[1];\n  // Conditions\n  var isMessageInputDisabled = loading || !currentChannel || !sdk || !sdk.isCacheEnabled && !isOnline || isDisabledBecauseFrozen(currentChannel) || isDisabledBecauseMuted(currentChannel) || isDisabledBecauseSuggestedReplies(currentChannel, config.groupChannel.enableSuggestedReplies) || disabled;\n  var showSuggestedMentionList = !isMessageInputDisabled && isMentionEnabled && mentionNickname.length > 0 && !isBroadcast;\n  var mentionNodes = useDirtyGetMentions({\n    ref: ref || messageInputRef\n  }, {\n    logger: logger\n  });\n  var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < maxMentionCount;\n  // Operate states\n  useEffect(function () {\n    setMentionNickname('');\n    setMentionedUsers([]);\n    setMentionedUserIds([]);\n    setSelectedUser(null);\n    setMentionSuggestedUsers([]);\n    setMessageInputEvent(null);\n    setShowVoiceMessageInput(false);\n  }, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]);\n  useEffect(function () {\n    setMentionedUsers(mentionedUsers.filter(function (_a) {\n      var userId = _a.userId;\n      var i = mentionedUserIds.indexOf(userId);\n      if (i < 0) {\n        return false;\n      } else {\n        mentionedUserIds.splice(i, 1);\n        return true;\n      }\n    }));\n  }, [mentionedUserIds]);\n  // Callbacks\n  var handleUploadFiles = useHandleUploadFiles({\n    sendFileMessage: sendFileMessage,\n    sendMultipleFilesMessage: sendMultipleFilesMessage,\n    quoteMessage: quoteMessage !== null && quoteMessage !== void 0 ? quoteMessage : undefined\n  }, {\n    logger: logger\n  });\n  if (isBroadcast && !isOperator) {\n    /* Only `Operator` can send messages in the Broadcast channel */\n    return null;\n  }\n  // other conditions\n  return React__default.createElement(\"div\", {\n    className: showVoiceMessageInput ? 'sendbird-message-input-wrapper--voice-message' : 'sendbird-message-input-wrapper'\n  }, showSuggestedMentionList && React__default.createElement(SuggestedMentionList, {\n    currentChannel: currentChannel,\n    targetNickname: mentionNickname,\n    inputEvent: messageInputEvent !== null && messageInputEvent !== void 0 ? messageInputEvent : undefined,\n    renderUserMentionItem: renderUserMentionItem,\n    onUserItemClick: function (user) {\n      if (user) {\n        setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));\n      }\n      setMentionNickname('');\n      setSelectedUser(user);\n      setMessageInputEvent(null);\n    },\n    onFocusItemChange: function () {\n      setMessageInputEvent(null);\n    },\n    onFetchUsers: function (users) {\n      setMentionSuggestedUsers(users);\n    },\n    ableAddMention: ableMention,\n    maxMentionCount: maxMentionCount,\n    maxSuggestionCount: maxSuggestionCount\n  }), quoteMessage && React__default.createElement(\"div\", {\n    className: \"sendbird-message-input-wrapper__quote-message-input\"\n  }, React__default.createElement(QuoteMessageInput, {\n    replyingMessage: quoteMessage,\n    onClose: function () {\n      return setQuoteMessage(null);\n    }\n  })), showVoiceMessageInput ? React__default.createElement(VoiceMessageInputWrapper, {\n    channel: currentChannel !== null && currentChannel !== void 0 ? currentChannel : undefined,\n    onSubmitClick: function (recordedFile, duration) {\n      sendVoiceMessage({\n        file: recordedFile,\n        parentMessageId: quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId\n      }, duration);\n      setQuoteMessage(null);\n      setShowVoiceMessageInput(false);\n    },\n    onCancelClick: function () {\n      setShowVoiceMessageInput(false);\n    }\n  }) : React__default.createElement(MessageInput, {\n    className: \"sendbird-message-input-wrapper__message-input\",\n    channel: currentChannel,\n    channelUrl: currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url,\n    isMobile: isMobile,\n    acceptableMimeTypes: acceptableMimeTypes,\n    mentionSelectedUser: selectedUser,\n    isMentionEnabled: isMentionEnabled,\n    isVoiceMessageEnabled: isVoiceMessageEnabled,\n    isSelectingMultipleFilesEnabled: isMultipleFilesMessageEnabled,\n    onVoiceMessageIconClick: function () {\n      setShowVoiceMessageInput(true);\n    },\n    setMentionedUsers: setMentionedUsers,\n    placeholder: quoteMessage && stringSet.MESSAGE_INPUT__QUOTE_REPLY__PLACE_HOLDER || isDisabledBecauseFrozen(currentChannel) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__FROZEN || isDisabledBecauseMuted(currentChannel) && (isMobile ? stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED_SHORT : stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED) || disabled && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED || undefined,\n    ref: ref || messageInputRef,\n    disabled: isMessageInputDisabled,\n    renderFileUploadIcon: renderFileUploadIcon,\n    renderSendMessageIcon: renderSendMessageIcon,\n    renderVoiceMessageIcon: renderVoiceMessageIcon,\n    onStartTyping: function () {\n      currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.startTyping();\n    },\n    onSendMessage: function (_a) {\n      var _b;\n      var message = _a.message,\n        mentionTemplate = _a.mentionTemplate;\n      sendUserMessage({\n        message: message,\n        mentionedUsers: mentionedUsers,\n        mentionedMessageTemplate: mentionTemplate,\n        parentMessageId: quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId\n      });\n      setMentionNickname('');\n      setMentionedUsers([]);\n      setQuoteMessage(null);\n      (_b = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.endTyping) === null || _b === void 0 ? void 0 : _b.call(currentChannel);\n    },\n    onFileUpload: function (fileList) {\n      handleUploadFiles(fileList);\n      setQuoteMessage(null);\n    },\n    onUserMentioned: function (user) {\n      if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {\n        setSelectedUser(null);\n        setMentionNickname('');\n      }\n    },\n    onMentionStringChange: function (mentionText) {\n      setMentionNickname(mentionText);\n    },\n    onMentionedUserIdsUpdated: function (userIds) {\n      setMentionedUserIds(userIds);\n    },\n    onKeyDown: function (e) {\n      if (showSuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0 && (e.key === MessageInputKeys.Enter && ableMention || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)) {\n        setMessageInputEvent(e);\n        return true;\n      }\n      return false;\n    }\n  }));\n});\nexport { MessageInputWrapperView as M, VoiceMessageInputWrapper as V };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { a as __awaiter, b as __generator, c as __spreadArray } from './bundle-BQi9-O76.js';\nimport React__default, { useRef, useState, useEffect, useCallback } from 'react';\nimport { i as isDisabledBecauseFrozen, a as isDisabledBecauseMuted, b as isDisabledBecauseSuggestedReplies } from './bundle-C3ktHDOc.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { u as useLocalization } from './bundle-cQZ3UZoG.js';\nimport { SuggestedMentionList } from '../GroupChannel/components/SuggestedMentionList.js';\nimport { useDirtyGetMentions } from '../Message/hooks/useDirtyGetMentions.js';\nimport QuoteMessageInput from '../ui/QuoteMessageInput.js';\nimport { useVoicePlayer } from '../VoicePlayer/useVoicePlayer.js';\nimport { useVoiceRecorder, VoiceRecorderStatus } from '../VoiceRecorder/useVoiceRecorder.js';\nimport { V as VoiceMessageInputStatus, a as VoiceMessageInput } from './bundle-B2SAqHzx.js';\nimport { M as Modal, b as useGlobalModalContext, c as ModalFooter } from './bundle-CXdo2kR_.js';\nimport Button, { ButtonTypes, ButtonSizes } from '../ui/Button.js';\nimport { V as VOICE_PLAYER_STATUS } from './bundle-DDeWOERD.js';\nimport { u as uuidv4 } from './bundle-etuaqevl.js';\nimport MessageInput from '../ui/MessageInput.js';\nimport { u as useMediaQueryContext } from './bundle-f-SpnOx2.js';\nimport { M as MessageInputKeys } from './bundle-0qSTzMXb.js';\nimport { j as isImage } from './bundle-DxTN4_0p.js';\nimport './bundle-DhKQeIfP.js';\nimport { c as compressImages } from './bundle-DAz5E5O_.js';\n\nvar VoiceMessageInputWrapper = function (_a) {\n    var channel = _a.channel, onCancelClick = _a.onCancelClick, onSubmitClick = _a.onSubmitClick;\n    var uuid = useRef(uuidv4()).current;\n    var _b = useState(null), audioFile = _b[0], setAudioFile = _b[1];\n    var _c = useState(VoiceMessageInputStatus.READY_TO_RECORD), voiceInputState = _c[0], setVoiceInputState = _c[1];\n    var _d = useState(false), isSubmitted = _d[0], setSubmit = _d[1];\n    var _e = useState(false), isDisabled = _e[0], setDisabled = _e[1];\n    var _f = useState(false), showModal = _f[0], setShowModal = _f[1];\n    var stringSet = useLocalization().stringSet;\n    var config = useSendbirdStateContext().config;\n    var _g = useVoiceRecorder({\n        onRecordingStarted: function () {\n            setVoiceInputState(VoiceMessageInputStatus.RECORDING);\n        },\n        onRecordingEnded: function (audioFile) {\n            setAudioFile(audioFile);\n        },\n    }), start = _g.start, stop = _g.stop, cancel = _g.cancel, recordingTime = _g.recordingTime, recordingStatus = _g.recordingStatus, recordingLimit = _g.recordingLimit;\n    var voicePlayer = useVoicePlayer({\n        channelUrl: channel === null || channel === void 0 ? void 0 : channel.url,\n        key: uuid,\n        audioFile: audioFile !== null && audioFile !== void 0 ? audioFile : undefined,\n    });\n    var play = voicePlayer.play, pause = voicePlayer.pause, playbackTime = voicePlayer.playbackTime, playingStatus = voicePlayer.playingStatus;\n    var stopVoicePlayer = voicePlayer.stop;\n    // disabled state: muted & frozen\n    useEffect(function () {\n        if (isDisabledBecauseFrozen(channel) || isDisabledBecauseMuted(channel)) {\n            setDisabled(true);\n        }\n        else {\n            setDisabled(false);\n        }\n    }, [channel === null || channel === void 0 ? void 0 : channel.myRole, channel === null || channel === void 0 ? void 0 : channel.isFrozen, channel === null || channel === void 0 ? void 0 : channel.myMutedState]);\n    // call onSubmitClick when submit button is clicked and recorded audio file is created\n    useEffect(function () {\n        if (isSubmitted && audioFile) {\n            onSubmitClick === null || onSubmitClick === void 0 ? void 0 : onSubmitClick(audioFile, recordingTime);\n            setSubmit(false);\n            setAudioFile(null);\n        }\n    }, [isSubmitted, audioFile, recordingTime]);\n    // operate which control button should be displayed\n    useEffect(function () {\n        if (audioFile) {\n            if (recordingTime < config.voiceRecord.minRecordingTime) {\n                setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);\n                setAudioFile(null);\n            }\n            else if (playingStatus === VOICE_PLAYER_STATUS.PLAYING) {\n                setVoiceInputState(VoiceMessageInputStatus.PLAYING);\n            }\n            else {\n                setVoiceInputState(VoiceMessageInputStatus.READY_TO_PLAY);\n            }\n        }\n    }, [audioFile, recordingTime, playingStatus]);\n    return (React__default.createElement(\"div\", { className: \"sendbird-voice-message-input-wrapper\" },\n        React__default.createElement(VoiceMessageInput, { currentValue: recordingStatus === VoiceRecorderStatus.COMPLETED ? playbackTime : recordingTime, maximumValue: recordingStatus === VoiceRecorderStatus.COMPLETED ? recordingTime : recordingLimit, currentType: voiceInputState, onCancelClick: function () {\n                onCancelClick === null || onCancelClick === void 0 ? void 0 : onCancelClick();\n                cancel();\n                stopVoicePlayer();\n            }, onSubmitClick: function () {\n                if (isDisabled) {\n                    setShowModal(true);\n                    setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);\n                }\n                else {\n                    stop();\n                    pause();\n                    setSubmit(true);\n                }\n            }, onControlClick: function (type) {\n                switch (type) {\n                    case VoiceMessageInputStatus.READY_TO_RECORD: {\n                        stopVoicePlayer();\n                        start();\n                        break;\n                    }\n                    case VoiceMessageInputStatus.RECORDING: {\n                        if (recordingTime >= config.voiceRecord.minRecordingTime && !isDisabled) {\n                            stop();\n                        }\n                        else if (isDisabled) {\n                            cancel();\n                            setShowModal(true);\n                            setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);\n                        }\n                        else {\n                            cancel();\n                            setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);\n                        }\n                        break;\n                    }\n                    case VoiceMessageInputStatus.READY_TO_PLAY: {\n                        play();\n                        break;\n                    }\n                    case VoiceMessageInputStatus.PLAYING: {\n                        pause();\n                        break;\n                    }\n                }\n            } }),\n        showModal && (React__default.createElement(Modal, { className: \"sendbird-voice-message-input-wrapper-alert\", titleText: isDisabledBecauseMuted(channel)\n                ? stringSet.MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_MUTED\n                : stringSet.MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_FROZEN, hideFooter: true, isCloseOnClickOutside: true, onClose: function () {\n                setShowModal(false);\n                onCancelClick === null || onCancelClick === void 0 ? void 0 : onCancelClick();\n            } },\n            React__default.createElement(\"div\", { className: \"sendbird-voice-message-input-wrapper-alert__body\" },\n                React__default.createElement(Button, { className: \"sendbird-voice-message-input-wrapper-alert__body__ok-button\", type: ButtonTypes.PRIMARY, size: ButtonSizes.BIG, onClick: function () {\n                        setShowModal(false);\n                        onCancelClick === null || onCancelClick === void 0 ? void 0 : onCancelClick();\n                    } }, stringSet.BUTTON__OK))))));\n};\n\nvar useHandleUploadFiles = function (_a, _b) {\n    var sendFileMessage = _a.sendFileMessage, sendMultipleFilesMessage = _a.sendMultipleFilesMessage, quoteMessage = _a.quoteMessage;\n    var logger = _b.logger;\n    var stringSet = useLocalization().stringSet;\n    var config = useSendbirdStateContext().config;\n    var imageCompression = config.imageCompression;\n    var uikitUploadSizeLimit = config === null || config === void 0 ? void 0 : config.uikitUploadSizeLimit;\n    var uikitMultipleFilesMessageLimit = config === null || config === void 0 ? void 0 : config.uikitMultipleFilesMessageLimit;\n    var openModal = useGlobalModalContext().openModal;\n    return useCallback(function (files) { return __awaiter(void 0, void 0, void 0, function () {\n        var ONE_MiB, compressedFiles, sendingFiles, file, imageFiles_1, otherFiles_1;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (files.length === 0) {\n                        logger.warning('Channel|useHandleUploadFiles: given file list is empty.', { files: files });\n                        return [2 /*return*/];\n                    }\n                    if (files.length > uikitMultipleFilesMessageLimit) {\n                        logger.info(\"Channel|useHandleUploadFiles: Cannot upload files more than \".concat(uikitMultipleFilesMessageLimit));\n                        openModal({\n                            modalProps: {\n                                titleText: stringSet.FILE_UPLOAD_NOTIFICATION__COUNT_LIMIT.replace('%d', \"\".concat(uikitUploadSizeLimit)),\n                                hideFooter: true,\n                            },\n                            childElement: function (_a) {\n                                var closeModal = _a.closeModal;\n                                return (React__default.createElement(ModalFooter, { type: ButtonTypes.PRIMARY, submitText: stringSet.BUTTON__OK, hideCancelButton: true, onCancel: closeModal, onSubmit: closeModal }));\n                            },\n                        });\n                        return [2 /*return*/];\n                    }\n                    // Validate file sizes\n                    if (files.some(function (file) { return file.size > uikitUploadSizeLimit; })) {\n                        // The default value of uikitUploadSizeLimit is 26MB\n                        logger.info(\"Channel|useHandleUploadFiles: Cannot upload file size exceeding \".concat(uikitUploadSizeLimit));\n                        ONE_MiB = 1024 * 1024;\n                        openModal({\n                            modalProps: {\n                                titleText: stringSet.FILE_UPLOAD_NOTIFICATION__SIZE_LIMIT.replace('%d', \"\".concat(Math.floor(uikitUploadSizeLimit / ONE_MiB))),\n                                hideFooter: true,\n                            },\n                            childElement: function (_a) {\n                                var closeModal = _a.closeModal;\n                                return (React__default.createElement(ModalFooter, { type: ButtonTypes.PRIMARY, submitText: stringSet.BUTTON__OK, hideCancelButton: true, onCancel: closeModal, onSubmit: closeModal }));\n                            },\n                        });\n                        return [2 /*return*/];\n                    }\n                    return [4 /*yield*/, compressImages({\n                            files: files,\n                            imageCompression: imageCompression,\n                            logger: logger,\n                        })];\n                case 1:\n                    compressedFiles = (_a.sent()).compressedFiles;\n                    sendingFiles = compressedFiles;\n                    // Send File Message\n                    if (sendingFiles.length === 1) {\n                        logger.info('Channel|useHandleUploadFiles: sending one file.');\n                        file = sendingFiles[0];\n                        return [2 /*return*/, sendFileMessage({ file: file, parentMessageId: quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId })];\n                    }\n                    else if (sendingFiles.length > 1) {\n                        logger.info('Channel|useHandleUploadFiles: sending multiple files.');\n                        imageFiles_1 = [];\n                        otherFiles_1 = [];\n                        sendingFiles.forEach(function (file) {\n                            if (isImage(file.type)) {\n                                imageFiles_1.push(file);\n                            }\n                            else {\n                                otherFiles_1.push(file);\n                            }\n                        });\n                        return [2 /*return*/, otherFiles_1.reduce(function (previousPromise, item) {\n                                return previousPromise.then(function () {\n                                    return sendFileMessage({ file: item, parentMessageId: quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId });\n                                });\n                            }, (function () {\n                                if (imageFiles_1.length === 0) {\n                                    return Promise.resolve();\n                                }\n                                else if (imageFiles_1.length === 1) {\n                                    return sendFileMessage({ file: imageFiles_1[0] });\n                                }\n                                else {\n                                    return sendMultipleFilesMessage({\n                                        fileInfoList: imageFiles_1.map(function (file) { return ({\n                                            file: file,\n                                            fileName: file.name,\n                                            fileSize: file.size,\n                                            mimeType: file.type,\n                                        }); }),\n                                        parentMessageId: quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId,\n                                    });\n                                }\n                            })())];\n                    }\n                    return [2 /*return*/];\n            }\n        });\n    }); }, [sendFileMessage, sendMultipleFilesMessage, quoteMessage]);\n};\n\nvar MessageInputWrapperView = React__default.forwardRef(function (props, ref) {\n    var _a;\n    // Props\n    var currentChannel = props.currentChannel, loading = props.loading, quoteMessage = props.quoteMessage, setQuoteMessage = props.setQuoteMessage, messageInputRef = props.messageInputRef, sendUserMessage = props.sendUserMessage, sendFileMessage = props.sendFileMessage, sendVoiceMessage = props.sendVoiceMessage, sendMultipleFilesMessage = props.sendMultipleFilesMessage, \n    // render\n    renderUserMentionItem = props.renderUserMentionItem, renderFileUploadIcon = props.renderFileUploadIcon, renderVoiceMessageIcon = props.renderVoiceMessageIcon, renderSendMessageIcon = props.renderSendMessageIcon, acceptableMimeTypes = props.acceptableMimeTypes, disabled = props.disabled;\n    var stringSet = useLocalization().stringSet;\n    var isMobile = useMediaQueryContext().isMobile;\n    var _b = useSendbirdStateContext(), stores = _b.stores, config = _b.config;\n    var isOnline = config.isOnline, userMention = config.userMention, logger = config.logger, groupChannel = config.groupChannel;\n    var sdk = stores.sdkStore.sdk;\n    var maxMentionCount = userMention.maxMentionCount, maxSuggestionCount = userMention.maxSuggestionCount;\n    var isBroadcast = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isBroadcast;\n    var isOperator = (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) === 'operator';\n    var isMultipleFilesMessageEnabled = (_a = props.isMultipleFilesMessageEnabled) !== null && _a !== void 0 ? _a : config.isMultipleFilesMessageEnabled;\n    var isMentionEnabled = groupChannel.enableMention;\n    var isVoiceMessageEnabled = groupChannel.enableVoiceMessage;\n    // States\n    var _c = useState(''), mentionNickname = _c[0], setMentionNickname = _c[1];\n    var _d = useState([]), mentionedUsers = _d[0], setMentionedUsers = _d[1];\n    var _e = useState([]), mentionedUserIds = _e[0], setMentionedUserIds = _e[1];\n    var _f = useState(null), selectedUser = _f[0], setSelectedUser = _f[1];\n    var _g = useState([]), mentionSuggestedUsers = _g[0], setMentionSuggestedUsers = _g[1];\n    var _h = useState(null), messageInputEvent = _h[0], setMessageInputEvent = _h[1];\n    var _j = useState(false), showVoiceMessageInput = _j[0], setShowVoiceMessageInput = _j[1];\n    // Conditions\n    var isMessageInputDisabled = loading\n        || (!currentChannel || !sdk)\n        || (!sdk.isCacheEnabled && !isOnline)\n        || isDisabledBecauseFrozen(currentChannel)\n        || isDisabledBecauseMuted(currentChannel)\n        || isDisabledBecauseSuggestedReplies(currentChannel, config.groupChannel.enableSuggestedReplies)\n        || disabled;\n    var showSuggestedMentionList = !isMessageInputDisabled\n        && isMentionEnabled\n        && mentionNickname.length > 0\n        && !isBroadcast;\n    var mentionNodes = useDirtyGetMentions({ ref: (ref || messageInputRef) }, { logger: logger });\n    var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < maxMentionCount;\n    // Operate states\n    useEffect(function () {\n        setMentionNickname('');\n        setMentionedUsers([]);\n        setMentionedUserIds([]);\n        setSelectedUser(null);\n        setMentionSuggestedUsers([]);\n        setMessageInputEvent(null);\n        setShowVoiceMessageInput(false);\n    }, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]);\n    useEffect(function () {\n        setMentionedUsers(mentionedUsers.filter(function (_a) {\n            var userId = _a.userId;\n            var i = mentionedUserIds.indexOf(userId);\n            if (i < 0) {\n                return false;\n            }\n            else {\n                mentionedUserIds.splice(i, 1);\n                return true;\n            }\n        }));\n    }, [mentionedUserIds]);\n    // Callbacks\n    var handleUploadFiles = useHandleUploadFiles({\n        sendFileMessage: sendFileMessage,\n        sendMultipleFilesMessage: sendMultipleFilesMessage,\n        quoteMessage: quoteMessage !== null && quoteMessage !== void 0 ? quoteMessage : undefined,\n    }, { logger: logger });\n    if (isBroadcast && !isOperator) {\n        /* Only `Operator` can send messages in the Broadcast channel */\n        return null;\n    }\n    // other conditions\n    return (React__default.createElement(\"div\", { className: showVoiceMessageInput ? 'sendbird-message-input-wrapper--voice-message' : 'sendbird-message-input-wrapper' },\n        showSuggestedMentionList && (React__default.createElement(SuggestedMentionList, { currentChannel: currentChannel, targetNickname: mentionNickname, inputEvent: messageInputEvent !== null && messageInputEvent !== void 0 ? messageInputEvent : undefined, renderUserMentionItem: renderUserMentionItem, onUserItemClick: function (user) {\n                if (user) {\n                    setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));\n                }\n                setMentionNickname('');\n                setSelectedUser(user);\n                setMessageInputEvent(null);\n            }, onFocusItemChange: function () {\n                setMessageInputEvent(null);\n            }, onFetchUsers: function (users) {\n                setMentionSuggestedUsers(users);\n            }, ableAddMention: ableMention, maxMentionCount: maxMentionCount, maxSuggestionCount: maxSuggestionCount })),\n        quoteMessage && (React__default.createElement(\"div\", { className: \"sendbird-message-input-wrapper__quote-message-input\" },\n            React__default.createElement(QuoteMessageInput, { replyingMessage: quoteMessage, onClose: function () { return setQuoteMessage(null); } }))),\n        showVoiceMessageInput ? (React__default.createElement(VoiceMessageInputWrapper, { channel: currentChannel !== null && currentChannel !== void 0 ? currentChannel : undefined, onSubmitClick: function (recordedFile, duration) {\n                sendVoiceMessage({ file: recordedFile, parentMessageId: quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId }, duration);\n                setQuoteMessage(null);\n                setShowVoiceMessageInput(false);\n            }, onCancelClick: function () {\n                setShowVoiceMessageInput(false);\n            } })) : (React__default.createElement(MessageInput, { className: \"sendbird-message-input-wrapper__message-input\", channel: currentChannel, channelUrl: currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url, isMobile: isMobile, acceptableMimeTypes: acceptableMimeTypes, mentionSelectedUser: selectedUser, isMentionEnabled: isMentionEnabled, isVoiceMessageEnabled: isVoiceMessageEnabled, isSelectingMultipleFilesEnabled: isMultipleFilesMessageEnabled, onVoiceMessageIconClick: function () {\n                setShowVoiceMessageInput(true);\n            }, setMentionedUsers: setMentionedUsers, placeholder: (quoteMessage && stringSet.MESSAGE_INPUT__QUOTE_REPLY__PLACE_HOLDER)\n                || (isDisabledBecauseFrozen(currentChannel) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__FROZEN)\n                || (isDisabledBecauseMuted(currentChannel) && (isMobile ? stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED_SHORT : stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED))\n                || (disabled && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED)\n                || undefined, ref: (ref || messageInputRef), disabled: isMessageInputDisabled, renderFileUploadIcon: renderFileUploadIcon, renderSendMessageIcon: renderSendMessageIcon, renderVoiceMessageIcon: renderVoiceMessageIcon, onStartTyping: function () {\n                currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.startTyping();\n            }, onSendMessage: function (_a) {\n                var _b;\n                var message = _a.message, mentionTemplate = _a.mentionTemplate;\n                sendUserMessage({\n                    message: message,\n                    mentionedUsers: mentionedUsers,\n                    mentionedMessageTemplate: mentionTemplate,\n                    parentMessageId: quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId,\n                });\n                setMentionNickname('');\n                setMentionedUsers([]);\n                setQuoteMessage(null);\n                (_b = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.endTyping) === null || _b === void 0 ? void 0 : _b.call(currentChannel);\n            }, onFileUpload: function (fileList) {\n                handleUploadFiles(fileList);\n                setQuoteMessage(null);\n            }, onUserMentioned: function (user) {\n                if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {\n                    setSelectedUser(null);\n                    setMentionNickname('');\n                }\n            }, onMentionStringChange: function (mentionText) {\n                setMentionNickname(mentionText);\n            }, onMentionedUserIdsUpdated: function (userIds) {\n                setMentionedUserIds(userIds);\n            }, onKeyDown: function (e) {\n                if (showSuggestedMentionList\n                    && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0\n                    && ((e.key === MessageInputKeys.Enter && ableMention)\n                        || e.key === MessageInputKeys.ArrowUp\n                        || e.key === MessageInputKeys.ArrowDown)) {\n                    setMessageInputEvent(e);\n                    return true;\n                }\n                return false;\n            } }))));\n});\n\nexport { MessageInputWrapperView as M, VoiceMessageInputWrapper as V };\n//# sourceMappingURL=bundle-DX5U-zhB.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}