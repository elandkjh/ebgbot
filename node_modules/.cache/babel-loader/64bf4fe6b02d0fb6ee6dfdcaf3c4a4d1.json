{"ast":null,"code":"import { c as __spreadArray, _ as __assign } from '../chunks/bundle-BQi9-O76.js';\nimport React__default, { useRef, useContext, useState } from 'react';\nimport { f as format } from '../chunks/bundle-CAdqcqOm.js';\nimport { A as Avatar } from '../chunks/bundle-CFosTNce.js';\nimport { C as ContextMenu, b as MenuItems, c as MenuItem } from '../chunks/bundle-CwKZj-B6.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../chunks/bundle-DhKQeIfP.js';\nimport Loader from './Loader.js';\nimport Icon, { IconTypes, IconColors } from './Icon.js';\nimport IconButton from './IconButton.js';\nimport TextButton from './TextButton.js';\nimport UserProfile from './UserProfile.js';\nimport { a as UserProfileContext } from '../chunks/bundle-BrTJ5Zbd.js';\nimport { u as useLocalization } from '../chunks/bundle-cQZ3UZoG.js';\nimport { g as getSenderFromMessage, b as isFineResend, s as showMenuTrigger, c as isFineDelete, O as OpenChannelMobileMenu, d as checkIsPending, e as checkIsFailed } from '../chunks/bundle-BdZytjCG.js';\nimport { u as useMediaQueryContext } from '../chunks/bundle-f-SpnOx2.js';\nimport { u as useLongPress } from '../chunks/bundle-AfQS5DGf.js';\nimport { o as openURL } from '../chunks/bundle-BgwzpLeQ.js';\nimport '../chunks/bundle-CA85nVxp.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport './ImageRenderer.js';\nimport '../chunks/bundle-DXRRGizV.js';\nimport 'react-dom';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport './SortByRow.js';\nimport '../chunks/bundle-etuaqevl.js';\nimport '../withSendbird.js';\nimport '../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CNWAfTVw.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport '../chunks/bundle-rA4afvKU.js';\nimport '../sendbirdSelectors.js';\nimport '../chunks/bundle-b6TpX_JP.js';\nimport './Button.js';\nimport '../useSendbirdStateContext.js';\nvar checkFileType = function (fileUrl) {\n  var audioFile = /(\\.mp3)$/i;\n  var gifFile = /(\\.gif)$/i;\n  if (audioFile.test(fileUrl)) {\n    return IconTypes.FILE_AUDIO;\n  }\n  if (gifFile.test(fileUrl)) {\n    return IconTypes.GIF;\n  }\n  return IconTypes.FILE_DOCUMENT;\n};\nvar truncate = function (fullStr, strLen) {\n  if (fullStr === null || fullStr === undefined) return '';\n  if (fullStr.length <= strLen) return fullStr;\n  var separator = '...';\n  var sepLen = separator.length;\n  var charsToShow = strLen - sepLen;\n  var frontChars = Math.ceil(charsToShow / 2);\n  var backChars = Math.floor(charsToShow / 2);\n  return fullStr.substr(0, frontChars) + separator + fullStr.substr(fullStr.length - backChars);\n};\nfunction OpenChannelFileMessage(_a) {\n  var className = _a.className,\n    message = _a.message,\n    isOperator = _a.isOperator,\n    _b = _a.isEphemeral,\n    isEphemeral = _b === void 0 ? false : _b,\n    userId = _a.userId,\n    disabled = _a.disabled,\n    chainTop = _a.chainTop,\n    showRemove = _a.showRemove,\n    resendMessage = _a.resendMessage;\n  var status = message === null || message === void 0 ? void 0 : message.sendingStatus;\n  var _c = useLocalization(),\n    dateLocale = _c.dateLocale,\n    stringSet = _c.stringSet;\n  var contextMenuRef = useRef(null);\n  var mobileMenuRef = useRef(null);\n  var avatarRef = useRef(null);\n  var _d = useContext(UserProfileContext),\n    disableUserProfile = _d.disableUserProfile,\n    renderUserProfile = _d.renderUserProfile;\n  var isMobile = useMediaQueryContext().isMobile;\n  var openFileUrl = function () {\n    return openURL(message.url);\n  };\n  var isPending = checkIsPending(status);\n  var isFailed = checkIsFailed(status);\n  var sender = getSenderFromMessage(message);\n  var _e = useState(false),\n    contextMenu = _e[0],\n    setContextMenu = _e[1];\n  var longPress = useLongPress({\n    onLongPress: function () {\n      if (isMobile) {\n        setContextMenu(true);\n      }\n    },\n    onClick: openFileUrl\n  }, {\n    delay: 300\n  });\n  return React__default.createElement(React__default.Fragment, null, React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-file-message'], false).join(' '),\n    ref: mobileMenuRef\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__left\"\n  }, !chainTop && React__default.createElement(ContextMenu, {\n    menuTrigger: function (toggleDropdown) {\n      return React__default.createElement(Avatar, {\n        className: \"sendbird-openchannel-file-message__left__avatar\",\n        src: sender.profileUrl || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function () {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function (closeDropdown) {\n      return renderUserProfile ? renderUserProfile({\n        user: sender,\n        close: closeDropdown,\n        currentUserId: userId,\n        avatarRef: avatarRef\n      }) : React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: '0px',\n          paddingBottom: '0px'\n        }\n      }, React__default.createElement(UserProfile, {\n        user: sender,\n        onSuccess: closeDropdown,\n        disableMessaging: true\n      }));\n    }\n  })), React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__right\"\n  }, !chainTop && React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__right__title\"\n  }, React__default.createElement(Label, {\n    className: \"sendbird-openchannel-file-message__right__title__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: isOperator ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2\n  }, sender && (sender.friendName || sender.nickname || sender.userId)), React__default.createElement(Label, {\n    className: \"sendbird-openchannel-file-message__right__title__sent-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_3\n  }, (message === null || message === void 0 ? void 0 : message.createdAt) && format(message.createdAt, 'p', {\n    locale: dateLocale\n  }))), React__default.createElement(\"div\", __assign({\n    className: \"sendbird-openchannel-file-message__right__body\"\n  }, isMobile ? __assign({}, longPress) : {}), checkFileType(message.url) && React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-file-message__right__body__icon\",\n    type: checkFileType(message.url),\n    fillColor: IconColors.PRIMARY,\n    width: \"48px\",\n    height: \"48px\"\n  }), React__default.createElement(TextButton, {\n    className: \"sendbird-openchannel-file-message__right__body__file-name\",\n    onClick: openFileUrl\n  }, React__default.createElement(Label, {\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, truncate(message.name || message.url, 40)))), (isPending || isFailed) && React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__right__tail\"\n  }, isPending && React__default.createElement(Loader, {\n    width: \"16px\",\n    height: \"16px\"\n  }, React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-file-message__right__tail__pending\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })), isFailed && React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-file-message__right__tail__failed\",\n    type: IconTypes.ERROR,\n    fillColor: IconColors.ERROR,\n    width: \"16px\",\n    height: \"16px\"\n  }))), !isMobile && React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__context-menu\",\n    ref: contextMenuRef\n  }, (isFineResend({\n    message: message,\n    userId: userId,\n    status: status\n  }) || !isEphemeral) && React__default.createElement(ContextMenu, {\n    menuTrigger: function (toggleDropdown) {\n      return showMenuTrigger({\n        message: message,\n        userId: userId,\n        status: status\n      }) && React__default.createElement(IconButton, {\n        className: \"sendbird-openchannel-file-message__context-menu__icon\",\n        width: \"32px\",\n        height: \"32px\",\n        onClick: toggleDropdown\n      }, React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function (closeDropdown) {\n      return React__default.createElement(MenuItems, {\n        parentRef: contextMenuRef,\n        parentContainRef: contextMenuRef,\n        closeDropdown: closeDropdown,\n        openLeft: true\n      }, isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && React__default.createElement(MenuItem, {\n        onClick: function () {\n          if (disabled) {\n            return;\n          }\n          resendMessage(message);\n          closeDropdown();\n        },\n        testID: \"open_channel_file_message_context_menu_resend\"\n      }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND), !isEphemeral && isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && React__default.createElement(MenuItem, {\n        onClick: function () {\n          if (disabled) {\n            return;\n          }\n          showRemove(true);\n          closeDropdown();\n        },\n        testID: \"open_channel_file_message_context_menu_delete\"\n      }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE));\n    }\n  }))), contextMenu && React__default.createElement(OpenChannelMobileMenu, {\n    message: message,\n    hideMenu: function () {\n      setContextMenu(false);\n    },\n    parentRef: mobileMenuRef,\n    showRemove: function () {\n      setContextMenu(false);\n      showRemove(true);\n    }\n  }));\n}\nexport { OpenChannelFileMessage as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { c as __spreadArray, _ as __assign } from '../chunks/bundle-BQi9-O76.js';\nimport React__default, { useRef, useContext, useState } from 'react';\nimport { f as format } from '../chunks/bundle-CAdqcqOm.js';\nimport { A as Avatar } from '../chunks/bundle-CFosTNce.js';\nimport { C as ContextMenu, b as MenuItems, c as MenuItem } from '../chunks/bundle-CwKZj-B6.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../chunks/bundle-DhKQeIfP.js';\nimport Loader from './Loader.js';\nimport Icon, { IconTypes, IconColors } from './Icon.js';\nimport IconButton from './IconButton.js';\nimport TextButton from './TextButton.js';\nimport UserProfile from './UserProfile.js';\nimport { a as UserProfileContext } from '../chunks/bundle-BrTJ5Zbd.js';\nimport { u as useLocalization } from '../chunks/bundle-cQZ3UZoG.js';\nimport { g as getSenderFromMessage, b as isFineResend, s as showMenuTrigger, c as isFineDelete, O as OpenChannelMobileMenu, d as checkIsPending, e as checkIsFailed } from '../chunks/bundle-BdZytjCG.js';\nimport { u as useMediaQueryContext } from '../chunks/bundle-f-SpnOx2.js';\nimport { u as useLongPress } from '../chunks/bundle-AfQS5DGf.js';\nimport { o as openURL } from '../chunks/bundle-BgwzpLeQ.js';\nimport '../chunks/bundle-CA85nVxp.js';\nimport '../chunks/bundle-bdDHjHH6.js';\nimport './ImageRenderer.js';\nimport '../chunks/bundle-DXRRGizV.js';\nimport 'react-dom';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport './SortByRow.js';\nimport '../chunks/bundle-etuaqevl.js';\nimport '../withSendbird.js';\nimport '../chunks/bundle-DxTN4_0p.js';\nimport '@sendbird/chat/groupChannel';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../chunks/bundle-CNWAfTVw.js';\nimport '../chunks/bundle-Bwk5KPwK.js';\nimport '../chunks/bundle-rA4afvKU.js';\nimport '../sendbirdSelectors.js';\nimport '../chunks/bundle-b6TpX_JP.js';\nimport './Button.js';\nimport '../useSendbirdStateContext.js';\n\nvar checkFileType = function (fileUrl) {\n    var audioFile = /(\\.mp3)$/i;\n    var gifFile = /(\\.gif)$/i;\n    if (audioFile.test(fileUrl)) {\n        return IconTypes.FILE_AUDIO;\n    }\n    if (gifFile.test(fileUrl)) {\n        return IconTypes.GIF;\n    }\n    return IconTypes.FILE_DOCUMENT;\n};\nvar truncate = function (fullStr, strLen) {\n    if (fullStr === null || fullStr === undefined)\n        return '';\n    if (fullStr.length <= strLen)\n        return fullStr;\n    var separator = '...';\n    var sepLen = separator.length;\n    var charsToShow = strLen - sepLen;\n    var frontChars = Math.ceil(charsToShow / 2);\n    var backChars = Math.floor(charsToShow / 2);\n    return fullStr.substr(0, frontChars) + separator + fullStr.substr(fullStr.length - backChars);\n};\n\nfunction OpenChannelFileMessage(_a) {\n    var className = _a.className, message = _a.message, isOperator = _a.isOperator, _b = _a.isEphemeral, isEphemeral = _b === void 0 ? false : _b, userId = _a.userId, disabled = _a.disabled, chainTop = _a.chainTop, showRemove = _a.showRemove, resendMessage = _a.resendMessage;\n    var status = message === null || message === void 0 ? void 0 : message.sendingStatus;\n    var _c = useLocalization(), dateLocale = _c.dateLocale, stringSet = _c.stringSet;\n    var contextMenuRef = useRef(null);\n    var mobileMenuRef = useRef(null);\n    var avatarRef = useRef(null);\n    var _d = useContext(UserProfileContext), disableUserProfile = _d.disableUserProfile, renderUserProfile = _d.renderUserProfile;\n    var isMobile = useMediaQueryContext().isMobile;\n    var openFileUrl = function () { return openURL(message.url); };\n    var isPending = checkIsPending(status);\n    var isFailed = checkIsFailed(status);\n    var sender = getSenderFromMessage(message);\n    var _e = useState(false), contextMenu = _e[0], setContextMenu = _e[1];\n    var longPress = useLongPress({\n        onLongPress: function () {\n            if (isMobile) {\n                setContextMenu(true);\n            }\n        },\n        onClick: openFileUrl,\n    }, { delay: 300 });\n    return (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(\"div\", { className: __spreadArray(__spreadArray([], (Array.isArray(className) ? className : [className]), true), [\n                'sendbird-openchannel-file-message',\n            ], false).join(' '), ref: mobileMenuRef },\n            React__default.createElement(\"div\", { className: \"sendbird-openchannel-file-message__left\" }, !chainTop && (React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) { return (React__default.createElement(Avatar, { className: \"sendbird-openchannel-file-message__left__avatar\", src: sender.profileUrl || '', ref: avatarRef, width: \"28px\", height: \"28px\", onClick: function () {\n                        if (!disableUserProfile) {\n                            toggleDropdown();\n                        }\n                    } })); }, menuItems: function (closeDropdown) { return (renderUserProfile\n                    ? (renderUserProfile({\n                        user: sender,\n                        close: closeDropdown,\n                        currentUserId: userId,\n                        avatarRef: avatarRef,\n                    }))\n                    : (React__default.createElement(MenuItems, { parentRef: avatarRef, parentContainRef: avatarRef, closeDropdown: closeDropdown, style: { paddingTop: '0px', paddingBottom: '0px' } },\n                        React__default.createElement(UserProfile, { user: sender, onSuccess: closeDropdown, disableMessaging: true })))); } }))),\n            React__default.createElement(\"div\", { className: \"sendbird-openchannel-file-message__right\" },\n                !chainTop && (React__default.createElement(\"div\", { className: \"sendbird-openchannel-file-message__right__title\" },\n                    React__default.createElement(Label, { className: \"sendbird-openchannel-file-message__right__title__sender-name\", type: LabelTypography.CAPTION_2, color: isOperator ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2 }, sender && (sender.friendName\n                        || sender.nickname\n                        || sender.userId)),\n                    React__default.createElement(Label, { className: \"sendbird-openchannel-file-message__right__title__sent-at\", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_3 }, (message === null || message === void 0 ? void 0 : message.createdAt) && (format(message.createdAt, 'p', {\n                        locale: dateLocale,\n                    }))))),\n                React__default.createElement(\"div\", __assign({ className: \"sendbird-openchannel-file-message__right__body\" }, (isMobile ? __assign({}, longPress) : {})),\n                    checkFileType(message.url) && (React__default.createElement(Icon, { className: \"sendbird-openchannel-file-message__right__body__icon\", type: checkFileType(message.url), fillColor: IconColors.PRIMARY, width: \"48px\", height: \"48px\" })),\n                    React__default.createElement(TextButton, { className: \"sendbird-openchannel-file-message__right__body__file-name\", onClick: openFileUrl },\n                        React__default.createElement(Label, { type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_1 }, truncate(message.name || message.url, 40)))),\n                (isPending || isFailed) && (React__default.createElement(\"div\", { className: \"sendbird-openchannel-file-message__right__tail\" },\n                    isPending && (React__default.createElement(Loader, { width: \"16px\", height: \"16px\" },\n                        React__default.createElement(Icon, { className: \"sendbird-openchannel-file-message__right__tail__pending\", type: IconTypes.SPINNER, fillColor: IconColors.PRIMARY, width: \"16px\", height: \"16px\" }))),\n                    isFailed && (React__default.createElement(Icon, { className: \"sendbird-openchannel-file-message__right__tail__failed\", type: IconTypes.ERROR, fillColor: IconColors.ERROR, width: \"16px\", height: \"16px\" }))))),\n            !isMobile && (React__default.createElement(\"div\", { className: \"sendbird-openchannel-file-message__context-menu\", ref: contextMenuRef }, (isFineResend({ message: message, userId: userId, status: status }) || !isEphemeral) && (React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) { return (showMenuTrigger({ message: message, userId: userId, status: status }) && (React__default.createElement(IconButton, { className: \"sendbird-openchannel-file-message__context-menu__icon\", width: \"32px\", height: \"32px\", onClick: toggleDropdown },\n                    React__default.createElement(Icon, { type: IconTypes.MORE, width: \"24px\", height: \"24px\" })))); }, menuItems: function (closeDropdown) { return (React__default.createElement(MenuItems, { parentRef: contextMenuRef, parentContainRef: contextMenuRef, closeDropdown: closeDropdown, openLeft: true },\n                    isFineResend({ message: message, userId: userId, status: status }) && (React__default.createElement(MenuItem, { onClick: function () {\n                            if (disabled) {\n                                return;\n                            }\n                            resendMessage(message);\n                            closeDropdown();\n                        }, testID: \"open_channel_file_message_context_menu_resend\" }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND)),\n                    (!isEphemeral && isFineDelete({ message: message, userId: userId, status: status })) && (React__default.createElement(MenuItem, { onClick: function () {\n                            if (disabled) {\n                                return;\n                            }\n                            showRemove(true);\n                            closeDropdown();\n                        }, testID: \"open_channel_file_message_context_menu_delete\" }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE)))); } }))))),\n        contextMenu && (React__default.createElement(OpenChannelMobileMenu, { message: message, hideMenu: function () {\n                setContextMenu(false);\n            }, parentRef: mobileMenuRef, showRemove: function () {\n                setContextMenu(false);\n                showRemove(true);\n            } }))));\n}\n\nexport { OpenChannelFileMessage as default };\n//# sourceMappingURL=OpenchannelFileMessage.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}