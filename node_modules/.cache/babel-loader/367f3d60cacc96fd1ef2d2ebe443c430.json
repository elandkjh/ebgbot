{"ast":null,"code":"import React__default, { useState, useEffect } from 'react';\nimport { SendbirdProvider } from './SendbirdProvider.js';\nimport { u as useMediaQueryContext } from './chunks/bundle-f-SpnOx2.js';\nimport { _ as __assign } from './chunks/bundle-BQi9-O76.js';\nimport { GroupChannel } from './GroupChannel.js';\nimport { GroupChannelList } from './GroupChannelList.js';\nimport Channel from './Channel.js';\nimport ChannelList from './ChannelList.js';\nimport ChannelSettings from './ChannelSettings.js';\nimport MessageSearchPannel from './MessageSearch.js';\nimport Thread from './Thread.js';\nimport { c as classnames } from './chunks/bundle-BgwzpLeQ.js';\nimport { A as APP_LAYOUT_ROOT } from './chunks/bundle-CwKZj-B6.js';\nimport { GroupChannelHandler } from '@sendbird/chat/groupChannel';\nimport { useSendbirdStateContext } from './useSendbirdStateContext.js';\nimport { u as uuidv4 } from './chunks/bundle-etuaqevl.js';\nimport { u as useVoicePlayerContext, a as ALL } from './chunks/bundle-DDeWOERD.js';\nimport { g as getCaseResolvedReplyType } from './chunks/bundle-fHeMHhND.js';\nimport '@sendbird/uikit-tools';\nimport './withSendbird.js';\nimport './chunks/bundle-CXdo2kR_.js';\nimport './chunks/bundle-DxTN4_0p.js';\nimport './utils/message/getOutgoingMessageState.js';\nimport './chunks/bundle-CNWAfTVw.js';\nimport './chunks/bundle-CA85nVxp.js';\nimport 'react-dom';\nimport './chunks/bundle-cQZ3UZoG.js';\nimport './chunks/bundle-Bwk5KPwK.js';\nimport './chunks/bundle-bdDHjHH6.js';\nimport './ui/IconButton.js';\nimport './ui/Button.js';\nimport './chunks/bundle-DhKQeIfP.js';\nimport './ui/Icon.js';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport './chunks/bundle-DCMGp6rH.js';\nimport './chunks/bundle-B7BfObV1.js';\nimport './chunks/bundle-Soz6sOqr.js';\nimport './chunks/bundle-Df65wuUZ.js';\nimport './GroupChannel/context.js';\nimport '@sendbird/chat/message';\nimport './chunks/bundle-BrTJ5Zbd.js';\nimport './chunks/bundle-y29vL7zu.js';\nimport './chunks/bundle-C3ktHDOc.js';\nimport './chunks/bundle-b6TpX_JP.js';\nimport './chunks/bundle-BNDaXsLn.js';\nimport './GroupChannel/components/GroupChannelUI.js';\nimport './chunks/bundle-DGZ_h6Q3.js';\nimport './GroupChannel/components/TypingIndicator.js';\nimport './ui/ConnectionStatus.js';\nimport './ui/PlaceHolder.js';\nimport './ui/Loader.js';\nimport './GroupChannel/components/GroupChannelHeader.js';\nimport './chunks/bundle-Cx6lYGss.js';\nimport './ui/ChannelAvatar.js';\nimport './chunks/bundle-CFosTNce.js';\nimport './ui/ImageRenderer.js';\nimport './chunks/bundle-DXRRGizV.js';\nimport './chunks/bundle-GMlM2rlV.js';\nimport './chunks/bundle-CVBleWtM.js';\nimport './ui/Header.js';\nimport './ui/TextButton.js';\nimport './chunks/bundle-rA4afvKU.js';\nimport './GroupChannel/components/MessageList.js';\nimport './GroupChannel/components/Message.js';\nimport './chunks/bundle-Dnj0fmAf.js';\nimport './chunks/bundle-CAdqcqOm.js';\nimport './chunks/bundle-CveCFQYP.js';\nimport './Message/hooks/useDirtyGetMentions.js';\nimport './ui/DateSeparator.js';\nimport './ui/MessageInput.js';\nimport './chunks/bundle-0qSTzMXb.js';\nimport './chunks/bundle-TZQ6dJCG.js';\nimport 'dompurify';\nimport './chunks/bundle-0nQK2G2O.js';\nimport './chunks/bundle-B6edg1g0.js';\nimport './chunks/bundle-DhGZA5UP.js';\nimport './chunks/bundle-GUbI4JcD.js';\nimport './ui/MessageContent.js';\nimport './chunks/bundle-vuBlPTsL.js';\nimport './chunks/bundle-BHK1eF5R.js';\nimport './chunks/bundle-F5koPk19.js';\nimport './chunks/bundle-DkBecO3w.js';\nimport './ui/MessageItemReactionMenu.js';\nimport './ui/ReactionButton.js';\nimport './chunks/bundle-AfQS5DGf.js';\nimport './ui/SortByRow.js';\nimport './ui/EmojiReactions.js';\nimport './ui/ReactionBadge.js';\nimport './ui/BottomSheet.js';\nimport './ui/UserListItem.js';\nimport './ui/MutedAvatarOverlay.js';\nimport './ui/Checkbox.js';\nimport './ui/UserProfile.js';\nimport './sendbirdSelectors.js';\nimport './ui/Tooltip.js';\nimport './ui/TooltipWrapper.js';\nimport './Message/context.js';\nimport './ui/AdminMessage.js';\nimport './ui/QuoteMessage.js';\nimport './chunks/bundle-BqMHiKkl.js';\nimport './ui/MobileMenu.js';\nimport './ui/ThreadReplies.js';\nimport './ui/OGMessageItemBody.js';\nimport './chunks/bundle-DofK8ySe.js';\nimport './ui/MentionLabel.js';\nimport './ui/LinkLabel.js';\nimport './ui/TextMessageItemBody.js';\nimport './ui/FileMessageItemBody.js';\nimport './chunks/bundle-ZVq6xGXk.js';\nimport './ui/FileViewer.js';\nimport './chunks/bundle-Gdl-rzQC.js';\nimport './ui/VoiceMessageItemBody.js';\nimport './ui/ProgressBar.js';\nimport './VoicePlayer/useVoicePlayer.js';\nimport './ui/PlaybackTime.js';\nimport './ui/ThumbnailMessageItemBody.js';\nimport './ui/UnknownMessageItemBody.js';\nimport './ui/TemplateMessageItemBody.js';\nimport './chunks/bundle-uLjwqZrR.js';\nimport './ui/FallbackTemplateMessageItemBody.tsx.js';\nimport './ui/LoadingTemplateMessageItemBody.tsx.js';\nimport './ui/FeedbackIconButton.js';\nimport './ui/MobileFeedbackMenu.js';\nimport './ui/MessageFeedbackModal.js';\nimport './ui/Input.js';\nimport './ui/MessageFeedbackFailedModal.js';\nimport './chunks/bundle-Cf0UgZwi.js';\nimport './GroupChannel/components/SuggestedReplies.js';\nimport './chunks/bundle-Due9yzp6.js';\nimport './GroupChannel/components/FileViewer.js';\nimport './chunks/bundle-CqpGyIDR.js';\nimport './GroupChannel/components/RemoveMessageModal.js';\nimport './chunks/bundle-D0TYbkjN.js';\nimport './chunks/bundle-Zvm5CMGT.js';\nimport './GroupChannel/components/UnreadCount.js';\nimport './GroupChannel/components/FrozenNotification.js';\nimport './ui/TypingIndicatorBubble.js';\nimport './Channel/utils/getMessagePartsInfo.js';\nimport './Channel/utils/compareMessagesForGrouping.js';\nimport './chunks/bundle-CMLImr6T.js';\nimport './GroupChannel/components/MessageInputWrapper.js';\nimport './chunks/bundle-DX5U-zhB.js';\nimport './GroupChannel/components/SuggestedMentionList.js';\nimport './ui/QuoteMessageInput.js';\nimport './VoiceRecorder/useVoiceRecorder.js';\nimport './chunks/bundle-B2SAqHzx.js';\nimport './chunks/bundle-DAz5E5O_.js';\nimport './GroupChannelList/context.js';\nimport './GroupChannelList/components/GroupChannelListUI.js';\nimport './chunks/bundle-CRcPMrRq.js';\nimport './GroupChannelList/components/GroupChannelListHeader.js';\nimport './EditUserProfile.js';\nimport './EditUserProfile/context.js';\nimport './EditUserProfile/components/EditUserProfileUI.js';\nimport './chunks/bundle-DvsVgg5f.js';\nimport './chunks/bundle-DSn10d8F.js';\nimport './GroupChannelList/components/GroupChannelPreviewAction.js';\nimport './GroupChannelList/components/GroupChannelListItem.js';\nimport './chunks/bundle-C3GXmMjX.js';\nimport './ui/Badge.js';\nimport './ui/MentionUserLabel.js';\nimport './GroupChannelList/components/AddGroupChannel.js';\nimport './chunks/bundle-Ba2Z_B16.js';\nimport './CreateChannel.js';\nimport './CreateChannel/components/CreateChannelUI.js';\nimport './chunks/bundle-CBUfFuFR.js';\nimport './CreateChannel/components/InviteUsers.js';\nimport './CreateChannel/components/SelectChannelType.js';\nimport './Channel/context.js';\nimport './chunks/bundle-CpjASiz4.js';\nimport './chunks/bundle-CZUYMubi.js';\nimport './chunks/bundle-chiYJ8F8.js';\nimport './chunks/bundle-H8J7tAed.js';\nimport './chunks/bundle-T6fVCCb7.js';\nimport './Channel/components/ChannelUI.js';\nimport './Channel/components/ChannelHeader.js';\nimport './Channel/components/MessageList.js';\nimport './Channel/components/Message.js';\nimport './Channel/components/FileViewer.js';\nimport './Channel/components/RemoveMessageModal.js';\nimport './chunks/bundle-ClMRT1R_.js';\nimport './Channel/components/MessageInput.js';\nimport './chunks/bundle-BeheAFz4.js';\nimport './ChannelList/components/ChannelListUI.js';\nimport './ChannelList/components/ChannelPreview.js';\nimport './ChannelList/components/AddChannel.js';\nimport './ChannelSettings/components/ChannelSettingsUI.js';\nimport './ChannelSettings/context.js';\nimport './ChannelSettings/components/ChannelSettingsHeader.js';\nimport './ChannelSettings/components/ChannelProfile.js';\nimport './ChannelSettings/components/EditDetailsModal.js';\nimport './ChannelSettings/components/LeaveChannel.js';\nimport './ChannelSettings/components/ChannelSettingsMenuItem.js';\nimport './ChannelSettings/components/ChannelSettingMenuList.js';\nimport './ChannelSettings/hooks/useMenuList.js';\nimport './chunks/bundle-DHpCLtwn.js';\nimport './chunks/bundle-BjjAXlnY.js';\nimport './chunks/bundle-DQk06wFZ.js';\nimport './ui/Toggle.js';\nimport './MessageSearch/components/MessageSearchUI.js';\nimport './MessageSearch/context.js';\nimport './ui/MessageSearchItem.js';\nimport './ui/MessageSearchFileItem.js';\nimport './Thread/context.js';\nimport './Thread/context/types.js';\nimport './Thread/components/ThreadUI.js';\nimport './Thread/components/ParentMessageInfo.js';\nimport './chunks/bundle-D6ZpcPbH.js';\nimport './Thread/components/ParentMessageInfoItem.js';\nimport './chunks/bundle-BsAIw_77.js';\nimport './chunks/bundle-C3Ty1Yuy.js';\nimport './Thread/components/ThreadHeader.js';\nimport './Thread/components/ThreadList.js';\nimport './Thread/components/ThreadListItem.js';\nimport 'date-fns';\nimport './Thread/components/ThreadMessageInput.js';\nimport './Channel/hooks/useHandleUploadFiles.js';\nvar DesktopLayout = function (props) {\n  var isReactionEnabled = props.isReactionEnabled,\n    replyType = props.replyType,\n    isMessageGroupingEnabled = props.isMessageGroupingEnabled,\n    isMultipleFilesMessageEnabled = props.isMultipleFilesMessageEnabled,\n    allowProfileEdit = props.allowProfileEdit,\n    showSearchIcon = props.showSearchIcon,\n    onProfileEditSuccess = props.onProfileEditSuccess,\n    disableAutoSelect = props.disableAutoSelect,\n    currentChannel = props.currentChannel,\n    setCurrentChannel = props.setCurrentChannel,\n    showSettings = props.showSettings,\n    setShowSettings = props.setShowSettings,\n    showSearch = props.showSearch,\n    setShowSearch = props.setShowSearch,\n    highlightedMessage = props.highlightedMessage,\n    setHighlightedMessage = props.setHighlightedMessage,\n    startingPoint = props.startingPoint,\n    setStartingPoint = props.setStartingPoint,\n    showThread = props.showThread,\n    setShowThread = props.setShowThread,\n    threadTargetMessage = props.threadTargetMessage,\n    setThreadTargetMessage = props.setThreadTargetMessage,\n    enableLegacyChannelModules = props.enableLegacyChannelModules;\n  var updateFocusedChannel = function (channel) {\n    setStartingPoint === null || setStartingPoint === void 0 ? void 0 : setStartingPoint(null);\n    setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(null);\n    if (channel) {\n      setCurrentChannel(channel);\n    } else {\n      setCurrentChannel(undefined);\n    }\n  };\n  var onClickThreadReply = function (_a) {\n    var message = _a.message;\n    // parent message\n    setShowSettings(false);\n    setShowSearch(false);\n    if (replyType === 'THREAD') {\n      setThreadTargetMessage(message);\n      setShowThread(true);\n    }\n  };\n  var channelListProps = {\n    allowProfileEdit: allowProfileEdit,\n    activeChannelUrl: currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url,\n    onProfileEditSuccess: onProfileEditSuccess,\n    disableAutoSelect: disableAutoSelect,\n    onChannelSelect: updateFocusedChannel,\n    // for GroupChannelList\n    selectedChannelUrl: currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url,\n    onChannelCreated: updateFocusedChannel,\n    onUserProfileUpdated: onProfileEditSuccess\n  };\n  var channelProps = {\n    channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || '',\n    onChatHeaderActionClick: function () {\n      setShowSearch(false);\n      setShowThread(false);\n      setShowSettings(!showSettings);\n    },\n    onSearchClick: function () {\n      setShowSettings(false);\n      setShowThread(false);\n      setShowSearch(!showSearch);\n    },\n    onReplyInThread: onClickThreadReply,\n    onQuoteMessageClick: function (_a) {\n      var message = _a.message;\n      // thread message\n      setShowSettings(false);\n      setShowSearch(false);\n      if (replyType === 'THREAD') {\n        setThreadTargetMessage(message);\n        setShowThread(true);\n      }\n    },\n    animatedMessage: highlightedMessage,\n    onMessageAnimated: function () {\n      return setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(null);\n    },\n    showSearchIcon: showSearchIcon,\n    startingPoint: startingPoint !== null && startingPoint !== void 0 ? startingPoint : undefined,\n    isReactionEnabled: isReactionEnabled,\n    replyType: replyType,\n    isMessageGroupingEnabled: isMessageGroupingEnabled,\n    isMultipleFilesMessageEnabled: isMultipleFilesMessageEnabled,\n    // for GroupChannel\n    animatedMessageId: highlightedMessage,\n    onReplyInThreadClick: onClickThreadReply\n  };\n  return React__default.createElement(\"div\", {\n    className: \"sendbird-app__wrap\",\n    id: APP_LAYOUT_ROOT\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-app__channellist-wrap\"\n  }, enableLegacyChannelModules ? React__default.createElement(ChannelList, __assign({}, channelListProps)) : React__default.createElement(GroupChannelList, __assign({}, channelListProps))), React__default.createElement(\"div\", {\n    className: classnames('sendbird-app__conversation-wrap', showSettings && 'sendbird-app__conversation--settings-open', showSearch && 'sendbird-app__conversation--search-open')\n  }, enableLegacyChannelModules ? React__default.createElement(Channel, __assign({}, channelProps)) : React__default.createElement(GroupChannel, __assign({}, channelProps))), showSettings && React__default.createElement(\"div\", {\n    className: \"sendbird-app__settingspanel-wrap\"\n  }, React__default.createElement(ChannelSettings, {\n    className: \"sendbird-channel-settings\",\n    channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || '',\n    onCloseClick: function () {\n      setShowSettings(false);\n    }\n  })), showSearch && React__default.createElement(\"div\", {\n    className: \"sendbird-app__searchpanel-wrap\"\n  }, React__default.createElement(MessageSearchPannel, {\n    channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || '',\n    onResultClick: function (message) {\n      if (message.messageId === highlightedMessage) {\n        setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(null);\n        setTimeout(function () {\n          setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(message.messageId);\n        });\n      } else {\n        setStartingPoint === null || setStartingPoint === void 0 ? void 0 : setStartingPoint(message.createdAt);\n        setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(message.messageId);\n      }\n    },\n    onCloseClick: function () {\n      setShowSearch(false);\n    }\n  })), showThread && React__default.createElement(Thread, {\n    className: \"sendbird-app__thread\",\n    channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || '',\n    message: threadTargetMessage,\n    onHeaderActionClick: function () {\n      setShowThread(false);\n    },\n    onMoveToParentMessage: function (_a) {\n      var message = _a.message,\n        channel = _a.channel;\n      if ((channel === null || channel === void 0 ? void 0 : channel.url) !== (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url)) {\n        setCurrentChannel(channel);\n      }\n      if ((message === null || message === void 0 ? void 0 : message.messageId) !== highlightedMessage) {\n        setStartingPoint === null || setStartingPoint === void 0 ? void 0 : setStartingPoint(message === null || message === void 0 ? void 0 : message.createdAt);\n      }\n      setTimeout(function () {\n        setStartingPoint === null || setStartingPoint === void 0 ? void 0 : setStartingPoint(null);\n        setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(message === null || message === void 0 ? void 0 : message.messageId);\n      }, 500);\n    }\n  }));\n};\nvar PANELS;\n(function (PANELS) {\n  PANELS[\"CHANNEL_LIST\"] = \"CHANNEL_LIST\";\n  PANELS[\"CHANNEL\"] = \"CHANNEL\";\n  PANELS[\"CHANNEL_SETTINGS\"] = \"CHANNEL_SETTINGS\";\n  PANELS[\"MESSAGE_SEARCH\"] = \"MESSAGE_SEARCH\";\n  PANELS[\"THREAD\"] = \"THREAD\";\n})(PANELS || (PANELS = {}));\nvar MobileLayout = function (props) {\n  var _a, _b, _c;\n  var replyType = props.replyType,\n    isMessageGroupingEnabled = props.isMessageGroupingEnabled,\n    isMultipleFilesMessageEnabled = props.isMultipleFilesMessageEnabled,\n    allowProfileEdit = props.allowProfileEdit,\n    isReactionEnabled = props.isReactionEnabled,\n    showSearchIcon = props.showSearchIcon,\n    onProfileEditSuccess = props.onProfileEditSuccess,\n    currentChannel = props.currentChannel,\n    setCurrentChannel = props.setCurrentChannel,\n    startingPoint = props.startingPoint,\n    setStartingPoint = props.setStartingPoint,\n    threadTargetMessage = props.threadTargetMessage,\n    setThreadTargetMessage = props.setThreadTargetMessage,\n    highlightedMessage = props.highlightedMessage,\n    setHighlightedMessage = props.setHighlightedMessage,\n    enableLegacyChannelModules = props.enableLegacyChannelModules;\n  var _d = useState(PANELS.CHANNEL_LIST),\n    panel = _d[0],\n    setPanel = _d[1];\n  var store = useSendbirdStateContext();\n  var sdk = (_b = (_a = store === null || store === void 0 ? void 0 : store.stores) === null || _a === void 0 ? void 0 : _a.sdkStore) === null || _b === void 0 ? void 0 : _b.sdk;\n  var userId = (_c = store === null || store === void 0 ? void 0 : store.config) === null || _c === void 0 ? void 0 : _c.userId;\n  var pause = useVoicePlayerContext().pause;\n  var goToMessage = function (message, timeoutCb) {\n    setStartingPoint === null || setStartingPoint === void 0 ? void 0 : setStartingPoint((message === null || message === void 0 ? void 0 : message.createdAt) || null);\n    setTimeout(function () {\n      timeoutCb === null || timeoutCb === void 0 ? void 0 : timeoutCb((message === null || message === void 0 ? void 0 : message.messageId) || null);\n    }, 500);\n  };\n  useEffect(function () {\n    if (panel !== PANELS.CHANNEL) {\n      goToMessage(null, function () {\n        return setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(null);\n      });\n    }\n  }, [panel]);\n  useEffect(function () {\n    var _a, _b;\n    var handlerId = uuidv4();\n    if ((_a = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _a === void 0 ? void 0 : _a.addGroupChannelHandler) {\n      var handler = new GroupChannelHandler({\n        onUserBanned: function (groupChannel, user) {\n          if (groupChannel.url === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) && (user === null || user === void 0 ? void 0 : user.userId) === userId) {\n            setPanel(PANELS.CHANNEL_LIST);\n          }\n        },\n        onChannelDeleted: function (channelUrl) {\n          if (channelUrl === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url)) {\n            setPanel(PANELS.CHANNEL_LIST);\n          }\n        },\n        onUserLeft: function (groupChannel, user) {\n          if (groupChannel.url === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) && (user === null || user === void 0 ? void 0 : user.userId) === userId) {\n            setPanel(PANELS.CHANNEL_LIST);\n          }\n        }\n      });\n      (_b = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _b === void 0 ? void 0 : _b.addGroupChannelHandler(handlerId, handler);\n    }\n    return function () {\n      var _a, _b;\n      (_b = (_a = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _a === void 0 ? void 0 : _a.removeGroupChannelHandler) === null || _b === void 0 ? void 0 : _b.call(_a, handlerId);\n    };\n  }, [sdk, currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]);\n  // if currentChannel is changed while on Thread\n  // then change panel type to CHANNEL\n  useEffect(function () {\n    if (panel === PANELS.THREAD) {\n      setPanel(PANELS.CHANNEL);\n    }\n  }, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]);\n  var channelListProps = {\n    allowProfileEdit: allowProfileEdit,\n    onProfileEditSuccess: onProfileEditSuccess,\n    disableAutoSelect: true,\n    onChannelSelect: function (channel) {\n      setCurrentChannel(channel !== null && channel !== void 0 ? channel : undefined);\n      if (channel) {\n        setPanel(PANELS.CHANNEL);\n      } else {\n        setPanel(PANELS.CHANNEL_LIST);\n      }\n    },\n    // for GroupChannelList\n    onChannelCreated: function (channel) {\n      setCurrentChannel(channel);\n      setPanel(PANELS.CHANNEL);\n    },\n    onUserProfileUpdated: onProfileEditSuccess\n  };\n  var channelProps = {\n    channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || '',\n    onChatHeaderActionClick: function () {\n      setPanel(PANELS.CHANNEL_SETTINGS);\n    },\n    onBackClick: function () {\n      setPanel(PANELS.CHANNEL_LIST);\n      pause(ALL);\n    },\n    onSearchClick: function () {\n      setPanel(PANELS.MESSAGE_SEARCH);\n    },\n    onReplyInThread: function (_a) {\n      var message = _a.message;\n      if (replyType === 'THREAD') {\n        setPanel(PANELS.THREAD);\n        setThreadTargetMessage(message);\n      }\n    },\n    onQuoteMessageClick: function (_a) {\n      var message = _a.message;\n      // thread message\n      if (replyType === 'THREAD') {\n        setThreadTargetMessage(message);\n        setPanel(PANELS.THREAD);\n      }\n    },\n    animatedMessage: highlightedMessage,\n    onMessageAnimated: function () {\n      return setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(null);\n    },\n    showSearchIcon: showSearchIcon,\n    startingPoint: startingPoint !== null && startingPoint !== void 0 ? startingPoint : undefined,\n    isReactionEnabled: isReactionEnabled,\n    replyType: replyType,\n    isMessageGroupingEnabled: isMessageGroupingEnabled,\n    isMultipleFilesMessageEnabled: isMultipleFilesMessageEnabled,\n    // for GroupChannel\n    animatedMessageId: highlightedMessage,\n    onReplyInThreadClick: function (_a) {\n      var message = _a.message;\n      if (replyType === 'THREAD') {\n        setPanel(PANELS.THREAD);\n        setThreadTargetMessage(message);\n      }\n    }\n  };\n  return React__default.createElement(\"div\", {\n    className: \"sb_mobile\",\n    id: APP_LAYOUT_ROOT\n  }, panel === PANELS.CHANNEL_LIST && React__default.createElement(\"div\", {\n    className: \"sb_mobile__panelwrap\"\n  }, enableLegacyChannelModules ? React__default.createElement(ChannelList, __assign({}, channelListProps)) : React__default.createElement(GroupChannelList, __assign({}, channelListProps))), panel === PANELS.CHANNEL && React__default.createElement(\"div\", {\n    className: \"sb_mobile__panelwrap\"\n  }, enableLegacyChannelModules ? React__default.createElement(Channel, __assign({}, channelProps)) : React__default.createElement(GroupChannel, __assign({}, channelProps))), panel === PANELS.CHANNEL_SETTINGS && React__default.createElement(\"div\", {\n    className: \"sb_mobile__panelwrap\"\n  }, React__default.createElement(ChannelSettings, {\n    channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || '',\n    onCloseClick: function () {\n      setPanel(PANELS.CHANNEL);\n    },\n    onLeaveChannel: function () {\n      setPanel(PANELS.CHANNEL_LIST);\n    }\n  })), panel === PANELS.MESSAGE_SEARCH && React__default.createElement(\"div\", {\n    className: \"sb_mobile__panelwrap\"\n  }, React__default.createElement(MessageSearchPannel, {\n    channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || '',\n    onCloseClick: function () {\n      setPanel(PANELS.CHANNEL);\n    },\n    onResultClick: function (message) {\n      setPanel(PANELS.CHANNEL);\n      goToMessage(message, function (messageId) {\n        setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(messageId);\n      });\n    }\n  })), panel === PANELS.THREAD && React__default.createElement(\"div\", {\n    className: \"sb_mobile__panelwrap\"\n  }, React__default.createElement(Thread, {\n    channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || '',\n    message: threadTargetMessage,\n    onHeaderActionClick: function () {\n      setPanel(PANELS.CHANNEL);\n      pause(ALL);\n    },\n    onMoveToParentMessage: function (_a) {\n      var message = _a.message,\n        channel = _a.channel;\n      setCurrentChannel(channel);\n      goToMessage(message, function (messageId) {\n        setPanel(PANELS.CHANNEL);\n        setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(messageId);\n      });\n    }\n  })));\n};\nvar AppLayout = function (props) {\n  var _a, _b, _c;\n  var isMessageGroupingEnabled = props.isMessageGroupingEnabled,\n    allowProfileEdit = props.allowProfileEdit,\n    onProfileEditSuccess = props.onProfileEditSuccess,\n    disableAutoSelect = props.disableAutoSelect,\n    currentChannel = props.currentChannel,\n    setCurrentChannel = props.setCurrentChannel,\n    enableLegacyChannelModules = props.enableLegacyChannelModules;\n  var globalStore = useSendbirdStateContext();\n  var globalConfigs = globalStore.config;\n  var _d = useState(false),\n    showThread = _d[0],\n    setShowThread = _d[1];\n  var _e = useState(null),\n    threadTargetMessage = _e[0],\n    setThreadTargetMessage = _e[1];\n  var _f = useState(false),\n    showSettings = _f[0],\n    setShowSettings = _f[1];\n  var _g = useState(false),\n    showSearch = _g[0],\n    setShowSearch = _g[1];\n  var _h = useState(null),\n    highlightedMessage = _h[0],\n    setHighlightedMessage = _h[1];\n  var _j = useState(null),\n    startingPoint = _j[0],\n    setStartingPoint = _j[1];\n  var isMobile = useMediaQueryContext().isMobile;\n  /**\n   * Below configs can be set via Dashboard UIKit config setting but as a lower priority than App props.\n   * So need to be have fallback value \\w global configs even though each prop values are undefined\n   */\n  var replyType = (_a = props.replyType) !== null && _a !== void 0 ? _a : getCaseResolvedReplyType(globalConfigs.groupChannel.replyType).upperCase;\n  var isReactionEnabled = (_b = props.isReactionEnabled) !== null && _b !== void 0 ? _b : globalConfigs.groupChannel.enableReactions;\n  var showSearchIcon = (_c = props.showSearchIcon) !== null && _c !== void 0 ? _c : globalConfigs.groupChannelSettings.enableMessageSearch;\n  return React__default.createElement(React__default.Fragment, null, isMobile ? React__default.createElement(MobileLayout, {\n    replyType: replyType,\n    showSearchIcon: showSearchIcon,\n    isReactionEnabled: isReactionEnabled,\n    isMessageGroupingEnabled: isMessageGroupingEnabled,\n    allowProfileEdit: allowProfileEdit,\n    onProfileEditSuccess: onProfileEditSuccess,\n    currentChannel: currentChannel,\n    setCurrentChannel: setCurrentChannel,\n    highlightedMessage: highlightedMessage,\n    setHighlightedMessage: setHighlightedMessage,\n    startingPoint: startingPoint,\n    setStartingPoint: setStartingPoint,\n    threadTargetMessage: threadTargetMessage,\n    setThreadTargetMessage: setThreadTargetMessage,\n    enableLegacyChannelModules: enableLegacyChannelModules\n  }) : React__default.createElement(DesktopLayout, {\n    replyType: replyType,\n    isReactionEnabled: isReactionEnabled,\n    showSearchIcon: showSearchIcon,\n    isMessageGroupingEnabled: isMessageGroupingEnabled,\n    allowProfileEdit: allowProfileEdit,\n    onProfileEditSuccess: onProfileEditSuccess,\n    disableAutoSelect: disableAutoSelect,\n    currentChannel: currentChannel,\n    setCurrentChannel: setCurrentChannel,\n    showThread: showThread,\n    setShowThread: setShowThread,\n    threadTargetMessage: threadTargetMessage,\n    setThreadTargetMessage: setThreadTargetMessage,\n    showSettings: showSettings,\n    setShowSettings: setShowSettings,\n    showSearch: showSearch,\n    setShowSearch: setShowSearch,\n    highlightedMessage: highlightedMessage,\n    setHighlightedMessage: setHighlightedMessage,\n    startingPoint: startingPoint,\n    setStartingPoint: setStartingPoint,\n    enableLegacyChannelModules: enableLegacyChannelModules\n  }));\n};\n\n/**\n * This is a drop in Chat solution\n * Can also be used as an example for creating\n * default chat apps\n */\nfunction App(props) {\n  var appId = props.appId,\n    userId = props.userId,\n    _a = props.accessToken,\n    accessToken = _a === void 0 ? '' : _a,\n    _b = props.customApiHost,\n    customApiHost = _b === void 0 ? '' : _b,\n    _c = props.customWebSocketHost,\n    customWebSocketHost = _c === void 0 ? '' : _c,\n    breakpoint = props.breakpoint,\n    _d = props.theme,\n    theme = _d === void 0 ? 'light' : _d,\n    userListQuery = props.userListQuery,\n    _e = props.nickname,\n    nickname = _e === void 0 ? '' : _e,\n    _f = props.profileUrl,\n    profileUrl = _f === void 0 ? '' : _f,\n    dateLocale = props.dateLocale,\n    _g = props.config,\n    config = _g === void 0 ? {} : _g,\n    voiceRecord = props.voiceRecord,\n    _h = props.isMessageGroupingEnabled,\n    isMessageGroupingEnabled = _h === void 0 ? true : _h,\n    colorSet = props.colorSet,\n    stringSet = props.stringSet,\n    _j = props.allowProfileEdit,\n    allowProfileEdit = _j === void 0 ? false : _j,\n    _k = props.disableMarkAsDelivered,\n    disableMarkAsDelivered = _k === void 0 ? false : _k,\n    renderUserProfile = props.renderUserProfile,\n    onProfileEditSuccess = props.onProfileEditSuccess,\n    _l = props.imageCompression,\n    imageCompression = _l === void 0 ? {} : _l,\n    _m = props.disableAutoSelect,\n    disableAutoSelect = _m === void 0 ? false : _m,\n    sdkInitParams = props.sdkInitParams,\n    customExtensionParams = props.customExtensionParams,\n    eventHandlers = props.eventHandlers,\n    isMultipleFilesMessageEnabled = props.isMultipleFilesMessageEnabled,\n    _o = props.isUserIdUsedForNickname,\n    isUserIdUsedForNickname = _o === void 0 ? true : _o,\n    _p = props.enableLegacyChannelModules,\n    enableLegacyChannelModules = _p === void 0 ? false : _p,\n    uikitOptions = props.uikitOptions,\n    _q = props.htmlTextDirection,\n    htmlTextDirection = _q === void 0 ? 'ltr' : _q,\n    // The below configs are duplicates of the Dashboard UIKit Configs.\n    // Since their default values will be set in the Sendbird component,\n    // we don't need to set them here.\n    showSearchIcon = props.showSearchIcon,\n    isMentionEnabled = props.isMentionEnabled,\n    isReactionEnabled = props.isReactionEnabled,\n    replyType = props.replyType,\n    disableUserProfile = props.disableUserProfile,\n    isVoiceMessageEnabled = props.isVoiceMessageEnabled,\n    isTypingIndicatorEnabledOnChannelList = props.isTypingIndicatorEnabledOnChannelList,\n    isMessageReceiptStatusEnabledOnChannelList = props.isMessageReceiptStatusEnabledOnChannelList;\n  var _r = useState(),\n    currentChannel = _r[0],\n    setCurrentChannel = _r[1];\n  return React__default.createElement(SendbirdProvider, {\n    stringSet: stringSet,\n    appId: appId,\n    userId: userId,\n    accessToken: accessToken,\n    customApiHost: customApiHost,\n    customWebSocketHost: customWebSocketHost,\n    breakpoint: breakpoint,\n    theme: theme,\n    nickname: nickname,\n    profileUrl: profileUrl,\n    dateLocale: dateLocale,\n    userListQuery: userListQuery,\n    config: config,\n    colorSet: colorSet,\n    disableMarkAsDelivered: disableMarkAsDelivered,\n    renderUserProfile: renderUserProfile,\n    imageCompression: imageCompression,\n    isMultipleFilesMessageEnabled: isMultipleFilesMessageEnabled,\n    voiceRecord: voiceRecord,\n    onUserProfileMessage: function (channel) {\n      setCurrentChannel(channel);\n    },\n    uikitOptions: uikitOptions,\n    isUserIdUsedForNickname: isUserIdUsedForNickname,\n    sdkInitParams: sdkInitParams,\n    customExtensionParams: customExtensionParams,\n    eventHandlers: eventHandlers,\n    isTypingIndicatorEnabledOnChannelList: isTypingIndicatorEnabledOnChannelList,\n    isMessageReceiptStatusEnabledOnChannelList: isMessageReceiptStatusEnabledOnChannelList,\n    replyType: replyType,\n    showSearchIcon: showSearchIcon,\n    disableUserProfile: disableUserProfile,\n    isReactionEnabled: isReactionEnabled,\n    isMentionEnabled: isMentionEnabled,\n    isVoiceMessageEnabled: isVoiceMessageEnabled,\n    htmlTextDirection: htmlTextDirection\n  }, React__default.createElement(AppLayout, {\n    isMessageGroupingEnabled: isMessageGroupingEnabled,\n    allowProfileEdit: allowProfileEdit,\n    onProfileEditSuccess: onProfileEditSuccess,\n    disableAutoSelect: disableAutoSelect,\n    currentChannel: currentChannel,\n    setCurrentChannel: setCurrentChannel,\n    enableLegacyChannelModules: enableLegacyChannelModules,\n    isReactionEnabled: isReactionEnabled,\n    replyType: replyType,\n    showSearchIcon: showSearchIcon\n  }));\n}\nexport { App as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { useState, useEffect } from 'react';\nimport { SendbirdProvider } from './SendbirdProvider.js';\nimport { u as useMediaQueryContext } from './chunks/bundle-f-SpnOx2.js';\nimport { _ as __assign } from './chunks/bundle-BQi9-O76.js';\nimport { GroupChannel } from './GroupChannel.js';\nimport { GroupChannelList } from './GroupChannelList.js';\nimport Channel from './Channel.js';\nimport ChannelList from './ChannelList.js';\nimport ChannelSettings from './ChannelSettings.js';\nimport MessageSearchPannel from './MessageSearch.js';\nimport Thread from './Thread.js';\nimport { c as classnames } from './chunks/bundle-BgwzpLeQ.js';\nimport { A as APP_LAYOUT_ROOT } from './chunks/bundle-CwKZj-B6.js';\nimport { GroupChannelHandler } from '@sendbird/chat/groupChannel';\nimport { useSendbirdStateContext } from './useSendbirdStateContext.js';\nimport { u as uuidv4 } from './chunks/bundle-etuaqevl.js';\nimport { u as useVoicePlayerContext, a as ALL } from './chunks/bundle-DDeWOERD.js';\nimport { g as getCaseResolvedReplyType } from './chunks/bundle-fHeMHhND.js';\nimport '@sendbird/uikit-tools';\nimport './withSendbird.js';\nimport './chunks/bundle-CXdo2kR_.js';\nimport './chunks/bundle-DxTN4_0p.js';\nimport './utils/message/getOutgoingMessageState.js';\nimport './chunks/bundle-CNWAfTVw.js';\nimport './chunks/bundle-CA85nVxp.js';\nimport 'react-dom';\nimport './chunks/bundle-cQZ3UZoG.js';\nimport './chunks/bundle-Bwk5KPwK.js';\nimport './chunks/bundle-bdDHjHH6.js';\nimport './ui/IconButton.js';\nimport './ui/Button.js';\nimport './chunks/bundle-DhKQeIfP.js';\nimport './ui/Icon.js';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport './chunks/bundle-DCMGp6rH.js';\nimport './chunks/bundle-B7BfObV1.js';\nimport './chunks/bundle-Soz6sOqr.js';\nimport './chunks/bundle-Df65wuUZ.js';\nimport './GroupChannel/context.js';\nimport '@sendbird/chat/message';\nimport './chunks/bundle-BrTJ5Zbd.js';\nimport './chunks/bundle-y29vL7zu.js';\nimport './chunks/bundle-C3ktHDOc.js';\nimport './chunks/bundle-b6TpX_JP.js';\nimport './chunks/bundle-BNDaXsLn.js';\nimport './GroupChannel/components/GroupChannelUI.js';\nimport './chunks/bundle-DGZ_h6Q3.js';\nimport './GroupChannel/components/TypingIndicator.js';\nimport './ui/ConnectionStatus.js';\nimport './ui/PlaceHolder.js';\nimport './ui/Loader.js';\nimport './GroupChannel/components/GroupChannelHeader.js';\nimport './chunks/bundle-Cx6lYGss.js';\nimport './ui/ChannelAvatar.js';\nimport './chunks/bundle-CFosTNce.js';\nimport './ui/ImageRenderer.js';\nimport './chunks/bundle-DXRRGizV.js';\nimport './chunks/bundle-GMlM2rlV.js';\nimport './chunks/bundle-CVBleWtM.js';\nimport './ui/Header.js';\nimport './ui/TextButton.js';\nimport './chunks/bundle-rA4afvKU.js';\nimport './GroupChannel/components/MessageList.js';\nimport './GroupChannel/components/Message.js';\nimport './chunks/bundle-Dnj0fmAf.js';\nimport './chunks/bundle-CAdqcqOm.js';\nimport './chunks/bundle-CveCFQYP.js';\nimport './Message/hooks/useDirtyGetMentions.js';\nimport './ui/DateSeparator.js';\nimport './ui/MessageInput.js';\nimport './chunks/bundle-0qSTzMXb.js';\nimport './chunks/bundle-TZQ6dJCG.js';\nimport 'dompurify';\nimport './chunks/bundle-0nQK2G2O.js';\nimport './chunks/bundle-B6edg1g0.js';\nimport './chunks/bundle-DhGZA5UP.js';\nimport './chunks/bundle-GUbI4JcD.js';\nimport './ui/MessageContent.js';\nimport './chunks/bundle-vuBlPTsL.js';\nimport './chunks/bundle-BHK1eF5R.js';\nimport './chunks/bundle-F5koPk19.js';\nimport './chunks/bundle-DkBecO3w.js';\nimport './ui/MessageItemReactionMenu.js';\nimport './ui/ReactionButton.js';\nimport './chunks/bundle-AfQS5DGf.js';\nimport './ui/SortByRow.js';\nimport './ui/EmojiReactions.js';\nimport './ui/ReactionBadge.js';\nimport './ui/BottomSheet.js';\nimport './ui/UserListItem.js';\nimport './ui/MutedAvatarOverlay.js';\nimport './ui/Checkbox.js';\nimport './ui/UserProfile.js';\nimport './sendbirdSelectors.js';\nimport './ui/Tooltip.js';\nimport './ui/TooltipWrapper.js';\nimport './Message/context.js';\nimport './ui/AdminMessage.js';\nimport './ui/QuoteMessage.js';\nimport './chunks/bundle-BqMHiKkl.js';\nimport './ui/MobileMenu.js';\nimport './ui/ThreadReplies.js';\nimport './ui/OGMessageItemBody.js';\nimport './chunks/bundle-DofK8ySe.js';\nimport './ui/MentionLabel.js';\nimport './ui/LinkLabel.js';\nimport './ui/TextMessageItemBody.js';\nimport './ui/FileMessageItemBody.js';\nimport './chunks/bundle-ZVq6xGXk.js';\nimport './ui/FileViewer.js';\nimport './chunks/bundle-Gdl-rzQC.js';\nimport './ui/VoiceMessageItemBody.js';\nimport './ui/ProgressBar.js';\nimport './VoicePlayer/useVoicePlayer.js';\nimport './ui/PlaybackTime.js';\nimport './ui/ThumbnailMessageItemBody.js';\nimport './ui/UnknownMessageItemBody.js';\nimport './ui/TemplateMessageItemBody.js';\nimport './chunks/bundle-uLjwqZrR.js';\nimport './ui/FallbackTemplateMessageItemBody.tsx.js';\nimport './ui/LoadingTemplateMessageItemBody.tsx.js';\nimport './ui/FeedbackIconButton.js';\nimport './ui/MobileFeedbackMenu.js';\nimport './ui/MessageFeedbackModal.js';\nimport './ui/Input.js';\nimport './ui/MessageFeedbackFailedModal.js';\nimport './chunks/bundle-Cf0UgZwi.js';\nimport './GroupChannel/components/SuggestedReplies.js';\nimport './chunks/bundle-Due9yzp6.js';\nimport './GroupChannel/components/FileViewer.js';\nimport './chunks/bundle-CqpGyIDR.js';\nimport './GroupChannel/components/RemoveMessageModal.js';\nimport './chunks/bundle-D0TYbkjN.js';\nimport './chunks/bundle-Zvm5CMGT.js';\nimport './GroupChannel/components/UnreadCount.js';\nimport './GroupChannel/components/FrozenNotification.js';\nimport './ui/TypingIndicatorBubble.js';\nimport './Channel/utils/getMessagePartsInfo.js';\nimport './Channel/utils/compareMessagesForGrouping.js';\nimport './chunks/bundle-CMLImr6T.js';\nimport './GroupChannel/components/MessageInputWrapper.js';\nimport './chunks/bundle-DX5U-zhB.js';\nimport './GroupChannel/components/SuggestedMentionList.js';\nimport './ui/QuoteMessageInput.js';\nimport './VoiceRecorder/useVoiceRecorder.js';\nimport './chunks/bundle-B2SAqHzx.js';\nimport './chunks/bundle-DAz5E5O_.js';\nimport './GroupChannelList/context.js';\nimport './GroupChannelList/components/GroupChannelListUI.js';\nimport './chunks/bundle-CRcPMrRq.js';\nimport './GroupChannelList/components/GroupChannelListHeader.js';\nimport './EditUserProfile.js';\nimport './EditUserProfile/context.js';\nimport './EditUserProfile/components/EditUserProfileUI.js';\nimport './chunks/bundle-DvsVgg5f.js';\nimport './chunks/bundle-DSn10d8F.js';\nimport './GroupChannelList/components/GroupChannelPreviewAction.js';\nimport './GroupChannelList/components/GroupChannelListItem.js';\nimport './chunks/bundle-C3GXmMjX.js';\nimport './ui/Badge.js';\nimport './ui/MentionUserLabel.js';\nimport './GroupChannelList/components/AddGroupChannel.js';\nimport './chunks/bundle-Ba2Z_B16.js';\nimport './CreateChannel.js';\nimport './CreateChannel/components/CreateChannelUI.js';\nimport './chunks/bundle-CBUfFuFR.js';\nimport './CreateChannel/components/InviteUsers.js';\nimport './CreateChannel/components/SelectChannelType.js';\nimport './Channel/context.js';\nimport './chunks/bundle-CpjASiz4.js';\nimport './chunks/bundle-CZUYMubi.js';\nimport './chunks/bundle-chiYJ8F8.js';\nimport './chunks/bundle-H8J7tAed.js';\nimport './chunks/bundle-T6fVCCb7.js';\nimport './Channel/components/ChannelUI.js';\nimport './Channel/components/ChannelHeader.js';\nimport './Channel/components/MessageList.js';\nimport './Channel/components/Message.js';\nimport './Channel/components/FileViewer.js';\nimport './Channel/components/RemoveMessageModal.js';\nimport './chunks/bundle-ClMRT1R_.js';\nimport './Channel/components/MessageInput.js';\nimport './chunks/bundle-BeheAFz4.js';\nimport './ChannelList/components/ChannelListUI.js';\nimport './ChannelList/components/ChannelPreview.js';\nimport './ChannelList/components/AddChannel.js';\nimport './ChannelSettings/components/ChannelSettingsUI.js';\nimport './ChannelSettings/context.js';\nimport './ChannelSettings/components/ChannelSettingsHeader.js';\nimport './ChannelSettings/components/ChannelProfile.js';\nimport './ChannelSettings/components/EditDetailsModal.js';\nimport './ChannelSettings/components/LeaveChannel.js';\nimport './ChannelSettings/components/ChannelSettingsMenuItem.js';\nimport './ChannelSettings/components/ChannelSettingMenuList.js';\nimport './ChannelSettings/hooks/useMenuList.js';\nimport './chunks/bundle-DHpCLtwn.js';\nimport './chunks/bundle-BjjAXlnY.js';\nimport './chunks/bundle-DQk06wFZ.js';\nimport './ui/Toggle.js';\nimport './MessageSearch/components/MessageSearchUI.js';\nimport './MessageSearch/context.js';\nimport './ui/MessageSearchItem.js';\nimport './ui/MessageSearchFileItem.js';\nimport './Thread/context.js';\nimport './Thread/context/types.js';\nimport './Thread/components/ThreadUI.js';\nimport './Thread/components/ParentMessageInfo.js';\nimport './chunks/bundle-D6ZpcPbH.js';\nimport './Thread/components/ParentMessageInfoItem.js';\nimport './chunks/bundle-BsAIw_77.js';\nimport './chunks/bundle-C3Ty1Yuy.js';\nimport './Thread/components/ThreadHeader.js';\nimport './Thread/components/ThreadList.js';\nimport './Thread/components/ThreadListItem.js';\nimport 'date-fns';\nimport './Thread/components/ThreadMessageInput.js';\nimport './Channel/hooks/useHandleUploadFiles.js';\n\nvar DesktopLayout = function (props) {\n    var isReactionEnabled = props.isReactionEnabled, replyType = props.replyType, isMessageGroupingEnabled = props.isMessageGroupingEnabled, isMultipleFilesMessageEnabled = props.isMultipleFilesMessageEnabled, allowProfileEdit = props.allowProfileEdit, showSearchIcon = props.showSearchIcon, onProfileEditSuccess = props.onProfileEditSuccess, disableAutoSelect = props.disableAutoSelect, currentChannel = props.currentChannel, setCurrentChannel = props.setCurrentChannel, showSettings = props.showSettings, setShowSettings = props.setShowSettings, showSearch = props.showSearch, setShowSearch = props.setShowSearch, highlightedMessage = props.highlightedMessage, setHighlightedMessage = props.setHighlightedMessage, startingPoint = props.startingPoint, setStartingPoint = props.setStartingPoint, showThread = props.showThread, setShowThread = props.setShowThread, threadTargetMessage = props.threadTargetMessage, setThreadTargetMessage = props.setThreadTargetMessage, enableLegacyChannelModules = props.enableLegacyChannelModules;\n    var updateFocusedChannel = function (channel) {\n        setStartingPoint === null || setStartingPoint === void 0 ? void 0 : setStartingPoint(null);\n        setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(null);\n        if (channel) {\n            setCurrentChannel(channel);\n        }\n        else {\n            setCurrentChannel(undefined);\n        }\n    };\n    var onClickThreadReply = function (_a) {\n        var message = _a.message;\n        // parent message\n        setShowSettings(false);\n        setShowSearch(false);\n        if (replyType === 'THREAD') {\n            setThreadTargetMessage(message);\n            setShowThread(true);\n        }\n    };\n    var channelListProps = {\n        allowProfileEdit: allowProfileEdit,\n        activeChannelUrl: currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url,\n        onProfileEditSuccess: onProfileEditSuccess,\n        disableAutoSelect: disableAutoSelect,\n        onChannelSelect: updateFocusedChannel,\n        // for GroupChannelList\n        selectedChannelUrl: currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url,\n        onChannelCreated: updateFocusedChannel,\n        onUserProfileUpdated: onProfileEditSuccess,\n    };\n    var channelProps = {\n        channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || '',\n        onChatHeaderActionClick: function () {\n            setShowSearch(false);\n            setShowThread(false);\n            setShowSettings(!showSettings);\n        },\n        onSearchClick: function () {\n            setShowSettings(false);\n            setShowThread(false);\n            setShowSearch(!showSearch);\n        },\n        onReplyInThread: onClickThreadReply,\n        onQuoteMessageClick: function (_a) {\n            var message = _a.message;\n            // thread message\n            setShowSettings(false);\n            setShowSearch(false);\n            if (replyType === 'THREAD') {\n                setThreadTargetMessage(message);\n                setShowThread(true);\n            }\n        },\n        animatedMessage: highlightedMessage,\n        onMessageAnimated: function () { return setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(null); },\n        showSearchIcon: showSearchIcon,\n        startingPoint: startingPoint !== null && startingPoint !== void 0 ? startingPoint : undefined,\n        isReactionEnabled: isReactionEnabled,\n        replyType: replyType,\n        isMessageGroupingEnabled: isMessageGroupingEnabled,\n        isMultipleFilesMessageEnabled: isMultipleFilesMessageEnabled,\n        // for GroupChannel\n        animatedMessageId: highlightedMessage,\n        onReplyInThreadClick: onClickThreadReply,\n    };\n    return (React__default.createElement(\"div\", { className: \"sendbird-app__wrap\", id: APP_LAYOUT_ROOT },\n        React__default.createElement(\"div\", { className: \"sendbird-app__channellist-wrap\" }, enableLegacyChannelModules ? React__default.createElement(ChannelList, __assign({}, channelListProps)) : React__default.createElement(GroupChannelList, __assign({}, channelListProps))),\n        React__default.createElement(\"div\", { className: classnames('sendbird-app__conversation-wrap', showSettings && 'sendbird-app__conversation--settings-open', showSearch && 'sendbird-app__conversation--search-open') }, enableLegacyChannelModules ? React__default.createElement(Channel, __assign({}, channelProps)) : React__default.createElement(GroupChannel, __assign({}, channelProps))),\n        showSettings && (React__default.createElement(\"div\", { className: \"sendbird-app__settingspanel-wrap\" },\n            React__default.createElement(ChannelSettings, { className: \"sendbird-channel-settings\", channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || '', onCloseClick: function () {\n                    setShowSettings(false);\n                } }))),\n        showSearch && (React__default.createElement(\"div\", { className: \"sendbird-app__searchpanel-wrap\" },\n            React__default.createElement(MessageSearchPannel, { channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || '', onResultClick: function (message) {\n                    if (message.messageId === highlightedMessage) {\n                        setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(null);\n                        setTimeout(function () {\n                            setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(message.messageId);\n                        });\n                    }\n                    else {\n                        setStartingPoint === null || setStartingPoint === void 0 ? void 0 : setStartingPoint(message.createdAt);\n                        setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(message.messageId);\n                    }\n                }, onCloseClick: function () {\n                    setShowSearch(false);\n                } }))),\n        showThread && (React__default.createElement(Thread, { className: \"sendbird-app__thread\", channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || '', message: threadTargetMessage, onHeaderActionClick: function () {\n                setShowThread(false);\n            }, onMoveToParentMessage: function (_a) {\n                var message = _a.message, channel = _a.channel;\n                if ((channel === null || channel === void 0 ? void 0 : channel.url) !== (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url)) {\n                    setCurrentChannel(channel);\n                }\n                if ((message === null || message === void 0 ? void 0 : message.messageId) !== highlightedMessage) {\n                    setStartingPoint === null || setStartingPoint === void 0 ? void 0 : setStartingPoint(message === null || message === void 0 ? void 0 : message.createdAt);\n                }\n                setTimeout(function () {\n                    setStartingPoint === null || setStartingPoint === void 0 ? void 0 : setStartingPoint(null);\n                    setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(message === null || message === void 0 ? void 0 : message.messageId);\n                }, 500);\n            } }))));\n};\n\nvar PANELS;\n(function (PANELS) {\n    PANELS[\"CHANNEL_LIST\"] = \"CHANNEL_LIST\";\n    PANELS[\"CHANNEL\"] = \"CHANNEL\";\n    PANELS[\"CHANNEL_SETTINGS\"] = \"CHANNEL_SETTINGS\";\n    PANELS[\"MESSAGE_SEARCH\"] = \"MESSAGE_SEARCH\";\n    PANELS[\"THREAD\"] = \"THREAD\";\n})(PANELS || (PANELS = {}));\nvar MobileLayout = function (props) {\n    var _a, _b, _c;\n    var replyType = props.replyType, isMessageGroupingEnabled = props.isMessageGroupingEnabled, isMultipleFilesMessageEnabled = props.isMultipleFilesMessageEnabled, allowProfileEdit = props.allowProfileEdit, isReactionEnabled = props.isReactionEnabled, showSearchIcon = props.showSearchIcon, onProfileEditSuccess = props.onProfileEditSuccess, currentChannel = props.currentChannel, setCurrentChannel = props.setCurrentChannel, startingPoint = props.startingPoint, setStartingPoint = props.setStartingPoint, threadTargetMessage = props.threadTargetMessage, setThreadTargetMessage = props.setThreadTargetMessage, highlightedMessage = props.highlightedMessage, setHighlightedMessage = props.setHighlightedMessage, enableLegacyChannelModules = props.enableLegacyChannelModules;\n    var _d = useState(PANELS.CHANNEL_LIST), panel = _d[0], setPanel = _d[1];\n    var store = useSendbirdStateContext();\n    var sdk = (_b = (_a = store === null || store === void 0 ? void 0 : store.stores) === null || _a === void 0 ? void 0 : _a.sdkStore) === null || _b === void 0 ? void 0 : _b.sdk;\n    var userId = (_c = store === null || store === void 0 ? void 0 : store.config) === null || _c === void 0 ? void 0 : _c.userId;\n    var pause = useVoicePlayerContext().pause;\n    var goToMessage = function (message, timeoutCb) {\n        setStartingPoint === null || setStartingPoint === void 0 ? void 0 : setStartingPoint((message === null || message === void 0 ? void 0 : message.createdAt) || null);\n        setTimeout(function () {\n            timeoutCb === null || timeoutCb === void 0 ? void 0 : timeoutCb((message === null || message === void 0 ? void 0 : message.messageId) || null);\n        }, 500);\n    };\n    useEffect(function () {\n        if (panel !== PANELS.CHANNEL) {\n            goToMessage(null, function () { return setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(null); });\n        }\n    }, [panel]);\n    useEffect(function () {\n        var _a, _b;\n        var handlerId = uuidv4();\n        if ((_a = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _a === void 0 ? void 0 : _a.addGroupChannelHandler) {\n            var handler = new GroupChannelHandler({\n                onUserBanned: function (groupChannel, user) {\n                    if (groupChannel.url === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) && (user === null || user === void 0 ? void 0 : user.userId) === userId) {\n                        setPanel(PANELS.CHANNEL_LIST);\n                    }\n                },\n                onChannelDeleted: function (channelUrl) {\n                    if (channelUrl === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url)) {\n                        setPanel(PANELS.CHANNEL_LIST);\n                    }\n                },\n                onUserLeft: function (groupChannel, user) {\n                    if (groupChannel.url === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) && (user === null || user === void 0 ? void 0 : user.userId) === userId) {\n                        setPanel(PANELS.CHANNEL_LIST);\n                    }\n                },\n            });\n            (_b = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _b === void 0 ? void 0 : _b.addGroupChannelHandler(handlerId, handler);\n        }\n        return function () {\n            var _a, _b;\n            (_b = (_a = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _a === void 0 ? void 0 : _a.removeGroupChannelHandler) === null || _b === void 0 ? void 0 : _b.call(_a, handlerId);\n        };\n    }, [sdk, currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]);\n    // if currentChannel is changed while on Thread\n    // then change panel type to CHANNEL\n    useEffect(function () {\n        if (panel === PANELS.THREAD) {\n            setPanel(PANELS.CHANNEL);\n        }\n    }, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]);\n    var channelListProps = {\n        allowProfileEdit: allowProfileEdit,\n        onProfileEditSuccess: onProfileEditSuccess,\n        disableAutoSelect: true,\n        onChannelSelect: function (channel) {\n            setCurrentChannel(channel !== null && channel !== void 0 ? channel : undefined);\n            if (channel) {\n                setPanel(PANELS.CHANNEL);\n            }\n            else {\n                setPanel(PANELS.CHANNEL_LIST);\n            }\n        },\n        // for GroupChannelList\n        onChannelCreated: function (channel) {\n            setCurrentChannel(channel);\n            setPanel(PANELS.CHANNEL);\n        },\n        onUserProfileUpdated: onProfileEditSuccess,\n    };\n    var channelProps = {\n        channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || '',\n        onChatHeaderActionClick: function () {\n            setPanel(PANELS.CHANNEL_SETTINGS);\n        },\n        onBackClick: function () {\n            setPanel(PANELS.CHANNEL_LIST);\n            pause(ALL);\n        },\n        onSearchClick: function () {\n            setPanel(PANELS.MESSAGE_SEARCH);\n        },\n        onReplyInThread: function (_a) {\n            var message = _a.message;\n            if (replyType === 'THREAD') {\n                setPanel(PANELS.THREAD);\n                setThreadTargetMessage(message);\n            }\n        },\n        onQuoteMessageClick: function (_a) {\n            var message = _a.message;\n            // thread message\n            if (replyType === 'THREAD') {\n                setThreadTargetMessage(message);\n                setPanel(PANELS.THREAD);\n            }\n        },\n        animatedMessage: highlightedMessage,\n        onMessageAnimated: function () { return setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(null); },\n        showSearchIcon: showSearchIcon,\n        startingPoint: startingPoint !== null && startingPoint !== void 0 ? startingPoint : undefined,\n        isReactionEnabled: isReactionEnabled,\n        replyType: replyType,\n        isMessageGroupingEnabled: isMessageGroupingEnabled,\n        isMultipleFilesMessageEnabled: isMultipleFilesMessageEnabled,\n        // for GroupChannel\n        animatedMessageId: highlightedMessage,\n        onReplyInThreadClick: function (_a) {\n            var message = _a.message;\n            if (replyType === 'THREAD') {\n                setPanel(PANELS.THREAD);\n                setThreadTargetMessage(message);\n            }\n        },\n    };\n    return (React__default.createElement(\"div\", { className: \"sb_mobile\", id: APP_LAYOUT_ROOT },\n        panel === PANELS.CHANNEL_LIST && (React__default.createElement(\"div\", { className: \"sb_mobile__panelwrap\" }, enableLegacyChannelModules ? React__default.createElement(ChannelList, __assign({}, channelListProps)) : React__default.createElement(GroupChannelList, __assign({}, channelListProps)))),\n        panel === PANELS.CHANNEL && (React__default.createElement(\"div\", { className: \"sb_mobile__panelwrap\" }, enableLegacyChannelModules ? React__default.createElement(Channel, __assign({}, channelProps)) : React__default.createElement(GroupChannel, __assign({}, channelProps)))),\n        panel === PANELS.CHANNEL_SETTINGS && (React__default.createElement(\"div\", { className: \"sb_mobile__panelwrap\" },\n            React__default.createElement(ChannelSettings, { channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || '', onCloseClick: function () {\n                    setPanel(PANELS.CHANNEL);\n                }, onLeaveChannel: function () {\n                    setPanel(PANELS.CHANNEL_LIST);\n                } }))),\n        panel === PANELS.MESSAGE_SEARCH && (React__default.createElement(\"div\", { className: \"sb_mobile__panelwrap\" },\n            React__default.createElement(MessageSearchPannel, { channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || '', onCloseClick: function () {\n                    setPanel(PANELS.CHANNEL);\n                }, onResultClick: function (message) {\n                    setPanel(PANELS.CHANNEL);\n                    goToMessage(message, function (messageId) {\n                        setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(messageId);\n                    });\n                } }))),\n        panel === PANELS.THREAD && (React__default.createElement(\"div\", { className: \"sb_mobile__panelwrap\" },\n            React__default.createElement(Thread, { channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || '', message: threadTargetMessage, onHeaderActionClick: function () {\n                    setPanel(PANELS.CHANNEL);\n                    pause(ALL);\n                }, onMoveToParentMessage: function (_a) {\n                    var message = _a.message, channel = _a.channel;\n                    setCurrentChannel(channel);\n                    goToMessage(message, function (messageId) {\n                        setPanel(PANELS.CHANNEL);\n                        setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(messageId);\n                    });\n                } })))));\n};\n\nvar AppLayout = function (props) {\n    var _a, _b, _c;\n    var isMessageGroupingEnabled = props.isMessageGroupingEnabled, allowProfileEdit = props.allowProfileEdit, onProfileEditSuccess = props.onProfileEditSuccess, disableAutoSelect = props.disableAutoSelect, currentChannel = props.currentChannel, setCurrentChannel = props.setCurrentChannel, enableLegacyChannelModules = props.enableLegacyChannelModules;\n    var globalStore = useSendbirdStateContext();\n    var globalConfigs = globalStore.config;\n    var _d = useState(false), showThread = _d[0], setShowThread = _d[1];\n    var _e = useState(null), threadTargetMessage = _e[0], setThreadTargetMessage = _e[1];\n    var _f = useState(false), showSettings = _f[0], setShowSettings = _f[1];\n    var _g = useState(false), showSearch = _g[0], setShowSearch = _g[1];\n    var _h = useState(null), highlightedMessage = _h[0], setHighlightedMessage = _h[1];\n    var _j = useState(null), startingPoint = _j[0], setStartingPoint = _j[1];\n    var isMobile = useMediaQueryContext().isMobile;\n    /**\n     * Below configs can be set via Dashboard UIKit config setting but as a lower priority than App props.\n     * So need to be have fallback value \\w global configs even though each prop values are undefined\n     */\n    var replyType = (_a = props.replyType) !== null && _a !== void 0 ? _a : getCaseResolvedReplyType(globalConfigs.groupChannel.replyType).upperCase;\n    var isReactionEnabled = (_b = props.isReactionEnabled) !== null && _b !== void 0 ? _b : globalConfigs.groupChannel.enableReactions;\n    var showSearchIcon = (_c = props.showSearchIcon) !== null && _c !== void 0 ? _c : globalConfigs.groupChannelSettings.enableMessageSearch;\n    return (React__default.createElement(React__default.Fragment, null, isMobile\n        ? (React__default.createElement(MobileLayout, { replyType: replyType, showSearchIcon: showSearchIcon, isReactionEnabled: isReactionEnabled, isMessageGroupingEnabled: isMessageGroupingEnabled, allowProfileEdit: allowProfileEdit, onProfileEditSuccess: onProfileEditSuccess, currentChannel: currentChannel, setCurrentChannel: setCurrentChannel, highlightedMessage: highlightedMessage, setHighlightedMessage: setHighlightedMessage, startingPoint: startingPoint, setStartingPoint: setStartingPoint, threadTargetMessage: threadTargetMessage, setThreadTargetMessage: setThreadTargetMessage, enableLegacyChannelModules: enableLegacyChannelModules }))\n        : (React__default.createElement(DesktopLayout, { replyType: replyType, isReactionEnabled: isReactionEnabled, showSearchIcon: showSearchIcon, isMessageGroupingEnabled: isMessageGroupingEnabled, allowProfileEdit: allowProfileEdit, onProfileEditSuccess: onProfileEditSuccess, disableAutoSelect: disableAutoSelect, currentChannel: currentChannel, setCurrentChannel: setCurrentChannel, showThread: showThread, setShowThread: setShowThread, threadTargetMessage: threadTargetMessage, setThreadTargetMessage: setThreadTargetMessage, showSettings: showSettings, setShowSettings: setShowSettings, showSearch: showSearch, setShowSearch: setShowSearch, highlightedMessage: highlightedMessage, setHighlightedMessage: setHighlightedMessage, startingPoint: startingPoint, setStartingPoint: setStartingPoint, enableLegacyChannelModules: enableLegacyChannelModules }))));\n};\n\n/**\n * This is a drop in Chat solution\n * Can also be used as an example for creating\n * default chat apps\n */\nfunction App(props) {\n    var appId = props.appId, userId = props.userId, _a = props.accessToken, accessToken = _a === void 0 ? '' : _a, _b = props.customApiHost, customApiHost = _b === void 0 ? '' : _b, _c = props.customWebSocketHost, customWebSocketHost = _c === void 0 ? '' : _c, breakpoint = props.breakpoint, _d = props.theme, theme = _d === void 0 ? 'light' : _d, userListQuery = props.userListQuery, _e = props.nickname, nickname = _e === void 0 ? '' : _e, _f = props.profileUrl, profileUrl = _f === void 0 ? '' : _f, dateLocale = props.dateLocale, _g = props.config, config = _g === void 0 ? {} : _g, voiceRecord = props.voiceRecord, _h = props.isMessageGroupingEnabled, isMessageGroupingEnabled = _h === void 0 ? true : _h, colorSet = props.colorSet, stringSet = props.stringSet, _j = props.allowProfileEdit, allowProfileEdit = _j === void 0 ? false : _j, _k = props.disableMarkAsDelivered, disableMarkAsDelivered = _k === void 0 ? false : _k, renderUserProfile = props.renderUserProfile, onProfileEditSuccess = props.onProfileEditSuccess, _l = props.imageCompression, imageCompression = _l === void 0 ? {} : _l, _m = props.disableAutoSelect, disableAutoSelect = _m === void 0 ? false : _m, sdkInitParams = props.sdkInitParams, customExtensionParams = props.customExtensionParams, eventHandlers = props.eventHandlers, isMultipleFilesMessageEnabled = props.isMultipleFilesMessageEnabled, _o = props.isUserIdUsedForNickname, isUserIdUsedForNickname = _o === void 0 ? true : _o, _p = props.enableLegacyChannelModules, enableLegacyChannelModules = _p === void 0 ? false : _p, uikitOptions = props.uikitOptions, _q = props.htmlTextDirection, htmlTextDirection = _q === void 0 ? 'ltr' : _q, \n    // The below configs are duplicates of the Dashboard UIKit Configs.\n    // Since their default values will be set in the Sendbird component,\n    // we don't need to set them here.\n    showSearchIcon = props.showSearchIcon, isMentionEnabled = props.isMentionEnabled, isReactionEnabled = props.isReactionEnabled, replyType = props.replyType, disableUserProfile = props.disableUserProfile, isVoiceMessageEnabled = props.isVoiceMessageEnabled, isTypingIndicatorEnabledOnChannelList = props.isTypingIndicatorEnabledOnChannelList, isMessageReceiptStatusEnabledOnChannelList = props.isMessageReceiptStatusEnabledOnChannelList;\n    var _r = useState(), currentChannel = _r[0], setCurrentChannel = _r[1];\n    return (React__default.createElement(SendbirdProvider, { stringSet: stringSet, appId: appId, userId: userId, accessToken: accessToken, customApiHost: customApiHost, customWebSocketHost: customWebSocketHost, breakpoint: breakpoint, theme: theme, nickname: nickname, profileUrl: profileUrl, dateLocale: dateLocale, userListQuery: userListQuery, config: config, colorSet: colorSet, disableMarkAsDelivered: disableMarkAsDelivered, renderUserProfile: renderUserProfile, imageCompression: imageCompression, isMultipleFilesMessageEnabled: isMultipleFilesMessageEnabled, voiceRecord: voiceRecord, onUserProfileMessage: function (channel) {\n            setCurrentChannel(channel);\n        }, uikitOptions: uikitOptions, isUserIdUsedForNickname: isUserIdUsedForNickname, sdkInitParams: sdkInitParams, customExtensionParams: customExtensionParams, eventHandlers: eventHandlers, isTypingIndicatorEnabledOnChannelList: isTypingIndicatorEnabledOnChannelList, isMessageReceiptStatusEnabledOnChannelList: isMessageReceiptStatusEnabledOnChannelList, replyType: replyType, showSearchIcon: showSearchIcon, disableUserProfile: disableUserProfile, isReactionEnabled: isReactionEnabled, isMentionEnabled: isMentionEnabled, isVoiceMessageEnabled: isVoiceMessageEnabled, htmlTextDirection: htmlTextDirection },\n        React__default.createElement(AppLayout, { isMessageGroupingEnabled: isMessageGroupingEnabled, allowProfileEdit: allowProfileEdit, onProfileEditSuccess: onProfileEditSuccess, disableAutoSelect: disableAutoSelect, currentChannel: currentChannel, setCurrentChannel: setCurrentChannel, enableLegacyChannelModules: enableLegacyChannelModules, isReactionEnabled: isReactionEnabled, replyType: replyType, showSearchIcon: showSearchIcon })));\n}\n\nexport { App as default };\n//# sourceMappingURL=App.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}