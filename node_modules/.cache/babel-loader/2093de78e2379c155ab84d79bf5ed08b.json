{"ast":null,"code":"import { useState, useEffect } from 'react';\nfunction useReconnectOnIdle(isOnline, currentGroupChannel, reconnectOnIdle) {\n  if (reconnectOnIdle === void 0) {\n    reconnectOnIdle = true;\n  }\n  var _a = useState(false),\n    isTabHidden = _a[0],\n    setIsTabHidden = _a[1];\n  var wasOffline = !isOnline;\n  useEffect(function () {\n    var handleVisibilityChange = function () {\n      if (reconnectOnIdle) {\n        setIsTabHidden(document.hidden);\n      }\n    };\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return function () {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [reconnectOnIdle, document.hidden]);\n  var shouldReconnect = wasOffline && !!currentGroupChannel && !isTabHidden;\n  return {\n    shouldReconnect: shouldReconnect\n  };\n}\nexport { useReconnectOnIdle as u };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction useReconnectOnIdle(isOnline, currentGroupChannel, reconnectOnIdle) {\n    if (reconnectOnIdle === void 0) { reconnectOnIdle = true; }\n    var _a = useState(false), isTabHidden = _a[0], setIsTabHidden = _a[1];\n    var wasOffline = !isOnline;\n    useEffect(function () {\n        var handleVisibilityChange = function () {\n            if (reconnectOnIdle) {\n                setIsTabHidden(document.hidden);\n            }\n        };\n        document.addEventListener('visibilitychange', handleVisibilityChange);\n        return function () {\n            document.removeEventListener('visibilitychange', handleVisibilityChange);\n        };\n    }, [reconnectOnIdle, document.hidden]);\n    var shouldReconnect = wasOffline && !!currentGroupChannel && !isTabHidden;\n    return { shouldReconnect: shouldReconnect };\n}\n\nexport { useReconnectOnIdle as u };\n//# sourceMappingURL=bundle-H8J7tAed.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}