{"ast":null,"code":"import React__default, { useState, useCallback } from 'react';\nimport { _ as __assign } from '../chunks/bundle-BQi9-O76.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport '../withSendbird.js';\n\n/**\n * The default value of `checked` should be null\n * to support both case of controlled and uncontrolled component\n * ref: https://github.com/aaronshaf/react-toggle#props\n */\nvar noop = function () {};\nvar TOGGLE_DEFAULT_VALUE = {\n  checked: null,\n  defaultChecked: false,\n  disabled: false,\n  onChange: noop,\n  onFocus: noop,\n  onBlur: noop\n};\nvar ToggleContext = React__default.createContext(TOGGLE_DEFAULT_VALUE);\nfunction useToggleContext() {\n  var context = React__default.useContext(ToggleContext);\n  if (context === undefined) {\n    throw new Error('@sendbird/uikit-react/ui/Toggle: useToggleContext must be used within a ToggleContainer.');\n  }\n  return context;\n}\n\n// Props Explanation https://github.com/aaronshaf/react-toggle#props\nfunction ToggleContainer(_a) {\n  var _b = _a.checked,\n    checked = _b === void 0 ? TOGGLE_DEFAULT_VALUE.checked : _b,\n    // null\n    _c = _a.defaultChecked,\n    // null\n    defaultChecked = _c === void 0 ? TOGGLE_DEFAULT_VALUE.defaultChecked : _c,\n    _d = _a.disabled,\n    disabled = _d === void 0 ? TOGGLE_DEFAULT_VALUE.disabled : _d,\n    _e = _a.onChange,\n    onChange = _e === void 0 ? TOGGLE_DEFAULT_VALUE.onChange : _e,\n    _f = _a.onFocus,\n    onFocus = _f === void 0 ? TOGGLE_DEFAULT_VALUE.onFocus : _f,\n    _g = _a.onBlur,\n    onBlur = _g === void 0 ? TOGGLE_DEFAULT_VALUE.onBlur : _g,\n    children = _a.children;\n  var _h = useState(defaultChecked || false),\n    isChecked = _h[0],\n    setChecked = _h[1];\n  var handleChange = useCallback(function (e) {\n    if (disabled) {\n      return;\n    }\n    if (checked === null) {\n      setChecked(e.currentTarget.checked);\n    }\n    onChange(e);\n  }, [onChange, checked]);\n  return React__default.createElement(ToggleContext.Provider, {\n    value: {\n      checked: checked !== null ? checked : isChecked,\n      disabled: disabled,\n      onChange: handleChange,\n      onFocus: function (e) {\n        if (!disabled) {\n          onFocus(e);\n        }\n      },\n      onBlur: function (e) {\n        if (!disabled) {\n          onBlur(e);\n        }\n      }\n    }\n  }, children);\n}\nfunction filterNumber(input) {\n  if (typeof input !== 'string' && typeof input !== 'number') {\n    try {\n      var config = useSendbirdStateContext().config;\n      var logger = config.logger;\n      logger.warning('@sendbird/uikit-react/ui/Toggle: TypeError - expected string or number.', input);\n    } catch (_) {/* noop */}\n    return [];\n  }\n  if (typeof input === 'number') {\n    return [input];\n  }\n  var regex = /(-?\\d+)(\\.\\d+)?/g;\n  var numbers = input.match(regex) || [];\n  return numbers.map(parseFloat);\n}\nfunction ToggleUI(props) {\n  var _a;\n  var _b = props.reversed,\n    reversed = _b === void 0 ? false : _b,\n    _c = props.width,\n    width = _c === void 0 ? '40px' : _c,\n    _d = props.animationDuration,\n    animationDuration = _d === void 0 ? '0.5s' : _d,\n    _e = props.style,\n    style = _e === void 0 ? {} : _e,\n    _f = props.name,\n    name = _f === void 0 ? '' : _f,\n    _g = props.id,\n    id = _g === void 0 ? '' : _g,\n    _h = props.ariaLabel,\n    ariaLabel = _h === void 0 ? '' : _h,\n    _j = props.ariaLabelledby,\n    ariaLabelledby = _j === void 0 ? '' : _j;\n  var _k = useToggleContext(),\n    checked = _k.checked,\n    disabled = _k.disabled,\n    onChange = _k.onChange,\n    onFocus = _k.onFocus,\n    onBlur = _k.onBlur;\n  // animation should not be activated in the initialization step\n  var _l = useState(''),\n    animatedClassName = _l[0],\n    setAnimatedClassName = _l[1];\n  var toggleWidth = (_a = filterNumber(width)) === null || _a === void 0 ? void 0 : _a[0];\n  var toggleHeight = toggleWidth / 2;\n  // The size of dot should be 60% of toggle height\n  var dotSize = toggleHeight * 0.6;\n  return React__default.createElement(\"label\", {\n    className: ['sendbird-input-toggle-button', animatedClassName, checked ? 'sendbird-input-toggle-button--checked' : 'sendbird-input-toggle-button--unchecked', disabled ? 'sendbird-input-toggle-button--disabled' : [], reversed ? 'sendbird-input-toggle-button--reversed' : []].flat().join(' '),\n    \"data-testid\": \"sendbird-input-toggle-button\",\n    style: __assign({\n      width: \"\".concat(toggleWidth, \"px\"),\n      height: \"\".concat(toggleHeight, \"px\"),\n      borderRadius: \"\".concat(dotSize, \"px\")\n    }, style)\n  }, React__default.createElement(\"div\", {\n    className: ['sendbird-input-toggle-button__inner-dot', checked ? 'sendbird-input-toggle-button__inner-dot--activate' : 'sendbird-input-toggle-button__inner-dot--inactivate'].join(' '),\n    style: {\n      width: \"\".concat(dotSize, \"px\"),\n      height: \"\".concat(dotSize, \"px\"),\n      animationDuration: animationDuration\n    }\n  }), React__default.createElement(\"input\", {\n    type: \"checkbox\",\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledby,\n    name: name,\n    id: id,\n    checked: checked !== null && checked !== void 0 ? checked : undefined,\n    disabled: disabled,\n    onChange: function (e) {\n      onChange === null || onChange === void 0 ? void 0 : onChange(e);\n      setAnimatedClassName(e.currentTarget.checked ? 'sendbird-input-toggle-button--turned-on' : 'sendbird-input-toggle-button--turned-off');\n    },\n    onFocus: onFocus,\n    onBlur: onBlur\n  }));\n}\nfunction Toggle(props) {\n  var\n    // ToggleProvider\n    checked = props.checked,\n    defaultChecked = props.defaultChecked,\n    disabled = props.disabled,\n    onChange = props.onChange,\n    onFocus = props.onFocus,\n    onBlur = props.onBlur,\n    // ToggleUI\n    className = props.className,\n    reversed = props.reversed,\n    width = props.width,\n    // height will be half of width\n    animationDuration = props.animationDuration,\n    style = props.style,\n    name = props.name,\n    id = props.id,\n    ariaLabel = props.ariaLabel,\n    ariaLabelledby = props.ariaLabelledby;\n  return React__default.createElement(\"div\", {\n    className: \"sendbird-ui-toggle \".concat(className)\n  }, React__default.createElement(ToggleContainer, {\n    checked: checked,\n    defaultChecked: defaultChecked,\n    disabled: disabled,\n    onChange: onChange,\n    onFocus: onFocus,\n    onBlur: onBlur\n  }, React__default.createElement(ToggleUI, {\n    reversed: reversed,\n    width: width,\n    animationDuration: animationDuration,\n    style: style,\n    name: name,\n    id: id,\n    ariaLabel: ariaLabel,\n    ariaLabelledby: ariaLabelledby\n  })));\n}\nexport { Toggle, ToggleContainer, ToggleUI, useToggleContext };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { useState, useCallback } from 'react';\nimport { _ as __assign } from '../chunks/bundle-BQi9-O76.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport '../withSendbird.js';\n\n/**\n * The default value of `checked` should be null\n * to support both case of controlled and uncontrolled component\n * ref: https://github.com/aaronshaf/react-toggle#props\n */\nvar noop = function () { };\nvar TOGGLE_DEFAULT_VALUE = {\n    checked: null,\n    defaultChecked: false,\n    disabled: false,\n    onChange: noop,\n    onFocus: noop,\n    onBlur: noop,\n};\nvar ToggleContext = React__default.createContext(TOGGLE_DEFAULT_VALUE);\nfunction useToggleContext() {\n    var context = React__default.useContext(ToggleContext);\n    if (context === undefined) {\n        throw new Error('@sendbird/uikit-react/ui/Toggle: useToggleContext must be used within a ToggleContainer.');\n    }\n    return context;\n}\n\n// Props Explanation https://github.com/aaronshaf/react-toggle#props\nfunction ToggleContainer(_a) {\n    var _b = _a.checked, checked = _b === void 0 ? TOGGLE_DEFAULT_VALUE.checked : _b, // null\n    _c = _a.defaultChecked, // null\n    defaultChecked = _c === void 0 ? TOGGLE_DEFAULT_VALUE.defaultChecked : _c, _d = _a.disabled, disabled = _d === void 0 ? TOGGLE_DEFAULT_VALUE.disabled : _d, _e = _a.onChange, onChange = _e === void 0 ? TOGGLE_DEFAULT_VALUE.onChange : _e, _f = _a.onFocus, onFocus = _f === void 0 ? TOGGLE_DEFAULT_VALUE.onFocus : _f, _g = _a.onBlur, onBlur = _g === void 0 ? TOGGLE_DEFAULT_VALUE.onBlur : _g, children = _a.children;\n    var _h = useState(defaultChecked || false), isChecked = _h[0], setChecked = _h[1];\n    var handleChange = useCallback(function (e) {\n        if (disabled) {\n            return;\n        }\n        if (checked === null) {\n            setChecked(e.currentTarget.checked);\n        }\n        onChange(e);\n    }, [onChange, checked]);\n    return (React__default.createElement(ToggleContext.Provider, { value: {\n            checked: checked !== null ? checked : isChecked,\n            disabled: disabled,\n            onChange: handleChange,\n            onFocus: function (e) {\n                if (!disabled) {\n                    onFocus(e);\n                }\n            },\n            onBlur: function (e) {\n                if (!disabled) {\n                    onBlur(e);\n                }\n            },\n        } }, children));\n}\n\nfunction filterNumber(input) {\n    if (typeof input !== 'string' && typeof input !== 'number') {\n        try {\n            var config = useSendbirdStateContext().config;\n            var logger = config.logger;\n            logger.warning('@sendbird/uikit-react/ui/Toggle: TypeError - expected string or number.', input);\n        }\n        catch (_) { /* noop */ }\n        return [];\n    }\n    if (typeof input === 'number') {\n        return [input];\n    }\n    var regex = /(-?\\d+)(\\.\\d+)?/g;\n    var numbers = input.match(regex) || [];\n    return numbers.map(parseFloat);\n}\n\nfunction ToggleUI(props) {\n    var _a;\n    var _b = props.reversed, reversed = _b === void 0 ? false : _b, _c = props.width, width = _c === void 0 ? '40px' : _c, _d = props.animationDuration, animationDuration = _d === void 0 ? '0.5s' : _d, _e = props.style, style = _e === void 0 ? {} : _e, _f = props.name, name = _f === void 0 ? '' : _f, _g = props.id, id = _g === void 0 ? '' : _g, _h = props.ariaLabel, ariaLabel = _h === void 0 ? '' : _h, _j = props.ariaLabelledby, ariaLabelledby = _j === void 0 ? '' : _j;\n    var _k = useToggleContext(), checked = _k.checked, disabled = _k.disabled, onChange = _k.onChange, onFocus = _k.onFocus, onBlur = _k.onBlur;\n    // animation should not be activated in the initialization step\n    var _l = useState(''), animatedClassName = _l[0], setAnimatedClassName = _l[1];\n    var toggleWidth = (_a = filterNumber(width)) === null || _a === void 0 ? void 0 : _a[0];\n    var toggleHeight = toggleWidth / 2;\n    // The size of dot should be 60% of toggle height\n    var dotSize = toggleHeight * 0.6;\n    return (React__default.createElement(\"label\", { className: [\n            'sendbird-input-toggle-button',\n            animatedClassName,\n            checked ? 'sendbird-input-toggle-button--checked' : 'sendbird-input-toggle-button--unchecked',\n            disabled ? 'sendbird-input-toggle-button--disabled' : [],\n            reversed ? 'sendbird-input-toggle-button--reversed' : [],\n        ].flat().join(' '), \"data-testid\": \"sendbird-input-toggle-button\", style: __assign({ width: \"\".concat(toggleWidth, \"px\"), height: \"\".concat(toggleHeight, \"px\"), borderRadius: \"\".concat(dotSize, \"px\") }, style) },\n        React__default.createElement(\"div\", { className: [\n                'sendbird-input-toggle-button__inner-dot',\n                checked\n                    ? 'sendbird-input-toggle-button__inner-dot--activate'\n                    : 'sendbird-input-toggle-button__inner-dot--inactivate',\n            ].join(' '), style: {\n                width: \"\".concat(dotSize, \"px\"),\n                height: \"\".concat(dotSize, \"px\"),\n                animationDuration: animationDuration,\n            } }),\n        React__default.createElement(\"input\", { type: \"checkbox\", \"aria-label\": ariaLabel, \"aria-labelledby\": ariaLabelledby, name: name, id: id, checked: checked !== null && checked !== void 0 ? checked : undefined, disabled: disabled, onChange: function (e) {\n                onChange === null || onChange === void 0 ? void 0 : onChange(e);\n                setAnimatedClassName(e.currentTarget.checked ? 'sendbird-input-toggle-button--turned-on' : 'sendbird-input-toggle-button--turned-off');\n            }, onFocus: onFocus, onBlur: onBlur })));\n}\n\nfunction Toggle(props) {\n    var \n    // ToggleProvider\n    checked = props.checked, defaultChecked = props.defaultChecked, disabled = props.disabled, onChange = props.onChange, onFocus = props.onFocus, onBlur = props.onBlur, \n    // ToggleUI\n    className = props.className, reversed = props.reversed, width = props.width, \n    // height will be half of width\n    animationDuration = props.animationDuration, style = props.style, name = props.name, id = props.id, ariaLabel = props.ariaLabel, ariaLabelledby = props.ariaLabelledby;\n    return (React__default.createElement(\"div\", { className: \"sendbird-ui-toggle \".concat(className) },\n        React__default.createElement(ToggleContainer, { checked: checked, defaultChecked: defaultChecked, disabled: disabled, onChange: onChange, onFocus: onFocus, onBlur: onBlur },\n            React__default.createElement(ToggleUI, { reversed: reversed, width: width, animationDuration: animationDuration, style: style, name: name, id: id, ariaLabel: ariaLabel, ariaLabelledby: ariaLabelledby }))));\n}\n\nexport { Toggle, ToggleContainer, ToggleUI, useToggleContext };\n//# sourceMappingURL=Toggle.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}