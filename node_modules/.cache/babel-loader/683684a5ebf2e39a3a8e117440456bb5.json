{"ast":null,"code":"import React__default, { useState, useEffect } from 'react';\nvar DEFAULT_MOBILE = false;\n// const DEFAULT_MOBILE = '768px';\nvar MOBILE_CLASSNAME = 'sendbird--mobile-mode';\nvar MediaQueryContext = React__default.createContext({\n  breakpoint: DEFAULT_MOBILE,\n  isMobile: false\n});\nvar addClassNameToBody = function () {\n  try {\n    var body = document.querySelector('body');\n    body === null || body === void 0 ? void 0 : body.classList.add(MOBILE_CLASSNAME);\n  } catch (_a) {\n    // noop\n  }\n};\nvar removeClassNameFromBody = function () {\n  try {\n    var body = document.querySelector('body');\n    body === null || body === void 0 ? void 0 : body.classList.remove(MOBILE_CLASSNAME);\n  } catch (_a) {\n    // noop\n  }\n};\nvar MediaQueryProvider = function (props) {\n  var children = props.children,\n    logger = props.logger;\n  var breakpoint = (props === null || props === void 0 ? void 0 : props.breakpoint) || false;\n  var _a = useState(false),\n    isMobile = _a[0],\n    setIsMobile = _a[1];\n  useEffect(function () {\n    var _a;\n    var updateSize = function () {\n      var _a;\n      if (typeof breakpoint === 'boolean') {\n        setIsMobile(breakpoint);\n        if (breakpoint) {\n          addClassNameToBody();\n        } else {\n          removeClassNameFromBody();\n        }\n      } else {\n        var mq = window.matchMedia(\"(max-width: \".concat(breakpoint, \")\"));\n        (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, \"MediaQueryProvider: Screensize updated to \".concat(breakpoint));\n        if (mq.matches) {\n          setIsMobile(true);\n          addClassNameToBody();\n        } else {\n          setIsMobile(false);\n          removeClassNameFromBody();\n        }\n      }\n    };\n    updateSize();\n    window.addEventListener('resize', updateSize);\n    (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, 'MediaQueryProvider: addEventListener', {\n      updateSize: updateSize\n    });\n    return function () {\n      var _a;\n      window.removeEventListener('resize', updateSize);\n      (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, 'MediaQueryProvider: removeEventListener', {\n        updateSize: updateSize\n      });\n    };\n  }, [breakpoint]);\n  return React__default.createElement(MediaQueryContext.Provider, {\n    value: {\n      breakpoint: breakpoint,\n      isMobile: isMobile\n    }\n  }, children);\n};\nvar useMediaQueryContext = function () {\n  return React__default.useContext(MediaQueryContext);\n};\nexport { MediaQueryProvider as M, useMediaQueryContext as u };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { useState, useEffect } from 'react';\n\nvar DEFAULT_MOBILE = false;\n// const DEFAULT_MOBILE = '768px';\nvar MOBILE_CLASSNAME = 'sendbird--mobile-mode';\nvar MediaQueryContext = React__default.createContext({\n    breakpoint: DEFAULT_MOBILE,\n    isMobile: false,\n});\nvar addClassNameToBody = function () {\n    try {\n        var body = document.querySelector('body');\n        body === null || body === void 0 ? void 0 : body.classList.add(MOBILE_CLASSNAME);\n    }\n    catch (_a) {\n        // noop\n    }\n};\nvar removeClassNameFromBody = function () {\n    try {\n        var body = document.querySelector('body');\n        body === null || body === void 0 ? void 0 : body.classList.remove(MOBILE_CLASSNAME);\n    }\n    catch (_a) {\n        // noop\n    }\n};\nvar MediaQueryProvider = function (props) {\n    var children = props.children, logger = props.logger;\n    var breakpoint = (props === null || props === void 0 ? void 0 : props.breakpoint) || false;\n    var _a = useState(false), isMobile = _a[0], setIsMobile = _a[1];\n    useEffect(function () {\n        var _a;\n        var updateSize = function () {\n            var _a;\n            if (typeof breakpoint === 'boolean') {\n                setIsMobile(breakpoint);\n                if (breakpoint) {\n                    addClassNameToBody();\n                }\n                else {\n                    removeClassNameFromBody();\n                }\n            }\n            else {\n                var mq = window.matchMedia(\"(max-width: \".concat(breakpoint, \")\"));\n                (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, \"MediaQueryProvider: Screensize updated to \".concat(breakpoint));\n                if (mq.matches) {\n                    setIsMobile(true);\n                    addClassNameToBody();\n                }\n                else {\n                    setIsMobile(false);\n                    removeClassNameFromBody();\n                }\n            }\n        };\n        updateSize();\n        window.addEventListener('resize', updateSize);\n        (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, 'MediaQueryProvider: addEventListener', { updateSize: updateSize });\n        return function () {\n            var _a;\n            window.removeEventListener('resize', updateSize);\n            (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, 'MediaQueryProvider: removeEventListener', { updateSize: updateSize });\n        };\n    }, [breakpoint]);\n    return (React__default.createElement(MediaQueryContext.Provider, { value: { breakpoint: breakpoint, isMobile: isMobile } }, children));\n};\nvar useMediaQueryContext = function () { return React__default.useContext(MediaQueryContext); };\n\nexport { MediaQueryProvider as M, useMediaQueryContext as u };\n//# sourceMappingURL=bundle-f-SpnOx2.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}