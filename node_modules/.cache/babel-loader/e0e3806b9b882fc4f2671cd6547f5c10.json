{"ast":null,"code":"import React__default from 'react';\nimport { C as ContextMenu, b as MenuItems, c as MenuItem } from './bundle-CwKZj-B6.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { u as useLocalization } from './bundle-cQZ3UZoG.js';\nvar OpenChannelMessageStatusTypes = {\n  NONE: 'none',\n  PENDING: 'pending',\n  FAILED: 'failed',\n  CANCELED: 'canceled',\n  SUCCEEDED: 'succeeded'\n};\nvar getSenderFromMessage = function (message) {\n  // @ts-ignore\n  return message.sender || message._sender;\n};\nvar checkIsSent = function (status) {\n  return status === OpenChannelMessageStatusTypes.SUCCEEDED;\n};\nvar checkIsPending = function (status) {\n  return status === OpenChannelMessageStatusTypes.PENDING;\n};\nvar checkIsFailed = function (status) {\n  return status === OpenChannelMessageStatusTypes.FAILED;\n};\nvar checkIsByMe = function (message, userId) {\n  return getSenderFromMessage(message).userId === userId;\n};\nvar isFineCopy = function (_a) {\n  var _b;\n  var message = _a.message;\n  return (message === null || message === void 0 ? void 0 : message.messageType) === 'user' && ((_b = message === null || message === void 0 ? void 0 : message.message) === null || _b === void 0 ? void 0 : _b.length) > 0;\n};\nvar isFineResend = function (_a) {\n  var message = _a.message,\n    status = _a.status,\n    userId = _a.userId;\n  return checkIsByMe(message, userId) && checkIsFailed(status)\n  // @ts-ignore\n  && (message === null || message === void 0 ? void 0 : message.isResendable);\n};\nvar isFineEdit = function (_a) {\n  var _b;\n  var message = _a.message,\n    status = _a.status,\n    userId = _a.userId;\n  return checkIsByMe(message, userId) && checkIsSent(status) && ((_b = message === null || message === void 0 ? void 0 : message.isUserMessage) === null || _b === void 0 ? void 0 : _b.call(message));\n};\nvar isFineDelete = function (_a) {\n  var message = _a.message,\n    userId = _a.userId;\n  return checkIsByMe(message, userId);\n};\nvar isFineDownload = function (_a) {\n  var _b;\n  var message = _a.message,\n    status = _a.status;\n  if (((_b = message === null || message === void 0 ? void 0 : message.isFileMessage) === null || _b === void 0 ? void 0 : _b.call(message)) && checkIsSent(status)) {\n    return true;\n  }\n  return false;\n};\nvar showMenuTrigger = function (props) {\n  var message = props.message,\n    status = props.status,\n    userId = props.userId;\n  // @ts-ignore\n  if (message.messageType === 'user') {\n    return isFineDelete({\n      message: message,\n      status: status,\n      userId: userId\n    }) || isFineEdit({\n      message: message,\n      status: status,\n      userId: userId\n    })\n    // @ts-ignore\n    || isFineCopy({\n      message: message,\n      status: status,\n      userId: userId\n    }) || isFineResend({\n      message: message,\n      status: status,\n      userId: userId\n    });\n  } else {\n    return isFineDelete({\n      message: message,\n      status: status,\n      userId: userId\n    }) || isFineResend({\n      message: message,\n      status: status,\n      userId: userId\n    });\n  }\n};\nvar OpenChannelMobileMenu = function (props) {\n  var _a, _b;\n  var message = props.message,\n    parentRef = props.parentRef,\n    resendMessage = props.resendMessage,\n    showEdit = props.showEdit,\n    showRemove = props.showRemove,\n    copyToClipboard = props.copyToClipboard,\n    hideMenu = props.hideMenu,\n    _c = props.isEphemeral,\n    isEphemeral = _c === void 0 ? false : _c;\n  var userMessage = message;\n  var status = message === null || message === void 0 ? void 0 : message.sendingStatus;\n  var stringSet = useLocalization().stringSet;\n  var userId = (_b = (_a = useSendbirdStateContext()) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.userId;\n  var fileMessage = message;\n  return React__default.createElement(ContextMenu, {\n    isOpen: true,\n    menuItems: function () {\n      return React__default.createElement(MenuItems, {\n        className: \"sendbird-openchannel__mobile-menu\",\n        parentRef: parentRef,\n        parentContainRef: parentRef,\n        closeDropdown: hideMenu\n      }, isFineCopy({\n        message: userMessage,\n        userId: userId,\n        status: status\n      }) && React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__copy\",\n        onClick: function () {\n          copyToClipboard === null || copyToClipboard === void 0 ? void 0 : copyToClipboard();\n        },\n        testID: \"open_channel_mobile_context_menu_copy\"\n      }, React__default.createElement(React__default.Fragment, null, stringSet.CONTEXT_MENU_DROPDOWN__COPY)), !isEphemeral && isFineEdit({\n        message: message,\n        userId: userId,\n        status: status\n      }) && React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__edit\",\n        onClick: function () {\n          showEdit === null || showEdit === void 0 ? void 0 : showEdit();\n        },\n        testID: \"open_channel_mobile_context_menu_edit\"\n      }, React__default.createElement(React__default.Fragment, null, stringSet.CONTEXT_MENU_DROPDOWN__EDIT)), isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && React__default.createElement(MenuItem, {\n        onClick: function () {\n          resendMessage === null || resendMessage === void 0 ? void 0 : resendMessage();\n        },\n        testID: \"open_channel_mobile_context_menu_resend\"\n      }, React__default.createElement(React__default.Fragment, null, stringSet.CONTEXT_MENU_DROPDOWN__RESEND)), !isEphemeral && isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && React__default.createElement(MenuItem, {\n        onClick: function () {\n          showRemove === null || showRemove === void 0 ? void 0 : showRemove();\n        },\n        testID: \"open_channel_mobile_context_menu_delete\"\n      }, React__default.createElement(React__default.Fragment, null, stringSet.CONTEXT_MENU_DROPDOWN__DELETE)), isFineDownload({\n        message: message,\n        status: status\n      }) && React__default.createElement(MenuItem, {\n        onClick: function () {\n          hideMenu();\n        },\n        testID: \"open_channel_mobile_context_menu_download_file\"\n      }, React__default.createElement(\"a\", {\n        className: \"sendbird-openchannel__mobile-menu-hyperlink\",\n        rel: \"noopener noreferrer\",\n        href: fileMessage === null || fileMessage === void 0 ? void 0 : fileMessage.url,\n        target: \"_blank\"\n      }, stringSet.CONTEXT_MENU_DROPDOWN__SAVE)));\n    }\n  });\n};\nexport { OpenChannelMobileMenu as O, isFineEdit as a, isFineResend as b, isFineDelete as c, checkIsPending as d, checkIsFailed as e, checkIsSent as f, getSenderFromMessage as g, isFineCopy as i, showMenuTrigger as s };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default from 'react';\nimport { C as ContextMenu, b as MenuItems, c as MenuItem } from './bundle-CwKZj-B6.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { u as useLocalization } from './bundle-cQZ3UZoG.js';\n\nvar OpenChannelMessageStatusTypes = {\n    NONE: 'none',\n    PENDING: 'pending',\n    FAILED: 'failed',\n    CANCELED: 'canceled',\n    SUCCEEDED: 'succeeded',\n};\nvar getSenderFromMessage = function (message) {\n    // @ts-ignore\n    return message.sender || message._sender;\n};\nvar checkIsSent = function (status) { return (status === OpenChannelMessageStatusTypes.SUCCEEDED); };\nvar checkIsPending = function (status) { return (status === OpenChannelMessageStatusTypes.PENDING); };\nvar checkIsFailed = function (status) { return (status === OpenChannelMessageStatusTypes.FAILED); };\nvar checkIsByMe = function (message, userId) { return (getSenderFromMessage(message).userId === userId); };\nvar isFineCopy = function (_a) {\n    var _b;\n    var message = _a.message;\n    return ((message === null || message === void 0 ? void 0 : message.messageType) === 'user' && ((_b = message === null || message === void 0 ? void 0 : message.message) === null || _b === void 0 ? void 0 : _b.length) > 0);\n};\nvar isFineResend = function (_a) {\n    var message = _a.message, status = _a.status, userId = _a.userId;\n    return checkIsByMe(message, userId)\n        && checkIsFailed(status)\n        // @ts-ignore\n        && (message === null || message === void 0 ? void 0 : message.isResendable);\n};\nvar isFineEdit = function (_a) {\n    var _b;\n    var message = _a.message, status = _a.status, userId = _a.userId;\n    return checkIsByMe(message, userId) && checkIsSent(status) && ((_b = message === null || message === void 0 ? void 0 : message.isUserMessage) === null || _b === void 0 ? void 0 : _b.call(message));\n};\nvar isFineDelete = function (_a) {\n    var message = _a.message, userId = _a.userId;\n    return checkIsByMe(message, userId);\n};\nvar isFineDownload = function (_a) {\n    var _b;\n    var message = _a.message, status = _a.status;\n    if (((_b = message === null || message === void 0 ? void 0 : message.isFileMessage) === null || _b === void 0 ? void 0 : _b.call(message)) && checkIsSent(status)) {\n        return true;\n    }\n    return false;\n};\nvar showMenuTrigger = function (props) {\n    var message = props.message, status = props.status, userId = props.userId;\n    // @ts-ignore\n    if (message.messageType === 'user') {\n        return (isFineDelete({ message: message, status: status, userId: userId })\n            || isFineEdit({ message: message, status: status, userId: userId })\n            // @ts-ignore\n            || isFineCopy({ message: message, status: status, userId: userId })\n            || isFineResend({ message: message, status: status, userId: userId }));\n    }\n    else {\n        return (isFineDelete({ message: message, status: status, userId: userId })\n            || isFineResend({ message: message, status: status, userId: userId }));\n    }\n};\n\nvar OpenChannelMobileMenu = function (props) {\n    var _a, _b;\n    var message = props.message, parentRef = props.parentRef, resendMessage = props.resendMessage, showEdit = props.showEdit, showRemove = props.showRemove, copyToClipboard = props.copyToClipboard, hideMenu = props.hideMenu, _c = props.isEphemeral, isEphemeral = _c === void 0 ? false : _c;\n    var userMessage = message;\n    var status = message === null || message === void 0 ? void 0 : message.sendingStatus;\n    var stringSet = useLocalization().stringSet;\n    var userId = (_b = (_a = useSendbirdStateContext()) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.userId;\n    var fileMessage = message;\n    return (React__default.createElement(ContextMenu, { isOpen: true, menuItems: function () { return (React__default.createElement(MenuItems, { className: \"sendbird-openchannel__mobile-menu\", parentRef: parentRef, parentContainRef: parentRef, closeDropdown: hideMenu },\n            isFineCopy({ message: userMessage, userId: userId, status: status }) && (React__default.createElement(MenuItem, { className: \"sendbird-openchannel-og-message__top__context-menu__copy\", onClick: function () {\n                    copyToClipboard === null || copyToClipboard === void 0 ? void 0 : copyToClipboard();\n                }, testID: \"open_channel_mobile_context_menu_copy\" },\n                React__default.createElement(React__default.Fragment, null, stringSet.CONTEXT_MENU_DROPDOWN__COPY))),\n            (!isEphemeral && isFineEdit({ message: message, userId: userId, status: status })) && (React__default.createElement(MenuItem, { className: \"sendbird-openchannel-og-message__top__context-menu__edit\", onClick: function () {\n                    showEdit === null || showEdit === void 0 ? void 0 : showEdit();\n                }, testID: \"open_channel_mobile_context_menu_edit\" },\n                React__default.createElement(React__default.Fragment, null, stringSet.CONTEXT_MENU_DROPDOWN__EDIT))),\n            isFineResend({ message: message, userId: userId, status: status }) && (React__default.createElement(MenuItem, { onClick: function () {\n                    resendMessage === null || resendMessage === void 0 ? void 0 : resendMessage();\n                }, testID: \"open_channel_mobile_context_menu_resend\" },\n                React__default.createElement(React__default.Fragment, null, stringSet.CONTEXT_MENU_DROPDOWN__RESEND))),\n            (!isEphemeral && isFineDelete({ message: message, userId: userId, status: status })) && (React__default.createElement(MenuItem, { onClick: function () {\n                    showRemove === null || showRemove === void 0 ? void 0 : showRemove();\n                }, testID: \"open_channel_mobile_context_menu_delete\" },\n                React__default.createElement(React__default.Fragment, null, stringSet.CONTEXT_MENU_DROPDOWN__DELETE))),\n            isFineDownload({ message: message, status: status }) && (React__default.createElement(MenuItem, { onClick: function () {\n                    hideMenu();\n                }, testID: \"open_channel_mobile_context_menu_download_file\" },\n                React__default.createElement(\"a\", { className: \"sendbird-openchannel__mobile-menu-hyperlink\", rel: \"noopener noreferrer\", href: fileMessage === null || fileMessage === void 0 ? void 0 : fileMessage.url, target: \"_blank\" }, stringSet.CONTEXT_MENU_DROPDOWN__SAVE))))); } }));\n};\n\nexport { OpenChannelMobileMenu as O, isFineEdit as a, isFineResend as b, isFineDelete as c, checkIsPending as d, checkIsFailed as e, checkIsSent as f, getSenderFromMessage as g, isFineCopy as i, showMenuTrigger as s };\n//# sourceMappingURL=bundle-BdZytjCG.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}