{"ast":null,"code":"import { a as __awaiter, b as __generator, _ as __assign } from '../../chunks/bundle-BQi9-O76.js';\nimport React__default, { forwardRef, useRef, useLayoutEffect, useState, useEffect } from 'react';\nimport { useGroupChannelHandler } from '@sendbird/uikit-tools';\nimport { k as isSendableMessage, T as TypingIndicatorType } from '../../chunks/bundle-DxTN4_0p.js';\nimport PlaceHolder, { PlaceHolderTypes } from '../../ui/PlaceHolder.js';\nimport Icon, { IconTypes, IconColors } from '../../ui/Icon.js';\nimport { Message } from './Message.js';\nimport { UnreadCount } from './UnreadCount.js';\nimport { FrozenNotification } from './FrozenNotification.js';\nimport { S as SCROLL_BUFFER } from '../../chunks/bundle-DCMGp6rH.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport TypingIndicatorBubble from '../../ui/TypingIndicatorBubble.js';\nimport { useGroupChannelContext } from '../context.js';\nimport { n as noop, d as deleteNullish } from '../../chunks/bundle-BgwzpLeQ.js';\nimport { getMessagePartsInfo } from '../../Channel/utils/getMessagePartsInfo.js';\nimport { MessageProvider } from '../../Message/context.js';\nimport { g as getComponentKeyFromMessage } from '../../chunks/bundle-C3ktHDOc.js';\nimport { a as isAboutSame } from '../../chunks/bundle-CMLImr6T.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-cQZ3UZoG.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../chunks/bundle-DhKQeIfP.js';\nimport '../../ui/Loader.js';\nimport '../../chunks/bundle-Dnj0fmAf.js';\nimport '../../chunks/bundle-CAdqcqOm.js';\nimport '../../chunks/bundle-CveCFQYP.js';\nimport '../../Message/hooks/useDirtyGetMentions.js';\nimport '../../ui/DateSeparator.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nimport '../../ui/MessageInput.js';\nimport '../../chunks/bundle-0qSTzMXb.js';\nimport '../../ui/IconButton.js';\nimport '../../ui/Button.js';\nimport '../../chunks/bundle-TZQ6dJCG.js';\nimport 'dompurify';\nimport '../../chunks/bundle-0nQK2G2O.js';\nimport '../../chunks/bundle-B6edg1g0.js';\nimport '../../chunks/bundle-DhGZA5UP.js';\nimport '../../chunks/bundle-GUbI4JcD.js';\nimport '../../withSendbird.js';\nimport '../../ui/MessageContent.js';\nimport '../../chunks/bundle-vuBlPTsL.js';\nimport '../../chunks/bundle-BHK1eF5R.js';\nimport '../../chunks/bundle-F5koPk19.js';\nimport '../../chunks/bundle-DkBecO3w.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport 'react-dom';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport '../../ui/SortByRow.js';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '../../ui/MessageItemReactionMenu.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../ui/ReactionButton.js';\nimport '../../chunks/bundle-AfQS5DGf.js';\nimport '../../chunks/bundle-f-SpnOx2.js';\nimport '../../ui/EmojiReactions.js';\nimport '../../ui/ReactionBadge.js';\nimport '../../ui/BottomSheet.js';\nimport '../../chunks/bundle-CXdo2kR_.js';\nimport 'css-vars-ponyfill';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../ui/UserListItem.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '../../chunks/bundle-CFosTNce.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/Checkbox.js';\nimport '../../ui/UserProfile.js';\nimport '../../sendbirdSelectors.js';\nimport '../../chunks/bundle-b6TpX_JP.js';\nimport '../../ui/Tooltip.js';\nimport '../../ui/TooltipWrapper.js';\nimport '../../chunks/bundle-BNDaXsLn.js';\nimport '../../ui/AdminMessage.js';\nimport '../../ui/QuoteMessage.js';\nimport '../../chunks/bundle-BqMHiKkl.js';\nimport '@sendbird/chat/message';\nimport '../../ui/MobileMenu.js';\nimport '../../ui/ThreadReplies.js';\nimport '../../ui/OGMessageItemBody.js';\nimport '../../chunks/bundle-DofK8ySe.js';\nimport '../../ui/MentionLabel.js';\nimport '../../ui/LinkLabel.js';\nimport '../../ui/TextMessageItemBody.js';\nimport '../../ui/FileMessageItemBody.js';\nimport '../../ui/TextButton.js';\nimport '../../chunks/bundle-ZVq6xGXk.js';\nimport '../../ui/FileViewer.js';\nimport '../../chunks/bundle-Gdl-rzQC.js';\nimport '../../ui/VoiceMessageItemBody.js';\nimport '../../ui/ProgressBar.js';\nimport '../../VoicePlayer/useVoicePlayer.js';\nimport '../../ui/PlaybackTime.js';\nimport '../../ui/ThumbnailMessageItemBody.js';\nimport '../../ui/UnknownMessageItemBody.js';\nimport '../../ui/TemplateMessageItemBody.js';\nimport '../../chunks/bundle-uLjwqZrR.js';\nimport '../../ui/FallbackTemplateMessageItemBody.tsx.js';\nimport '../../ui/LoadingTemplateMessageItemBody.tsx.js';\nimport '../../ui/FeedbackIconButton.js';\nimport '../../ui/MobileFeedbackMenu.js';\nimport '../../ui/MessageFeedbackModal.js';\nimport '../../ui/Input.js';\nimport '../../ui/MessageFeedbackFailedModal.js';\nimport '../../chunks/bundle-Cf0UgZwi.js';\nimport './SuggestedReplies.js';\nimport '../../chunks/bundle-Due9yzp6.js';\nimport './FileViewer.js';\nimport '../../chunks/bundle-CqpGyIDR.js';\nimport '../../chunks/bundle-y29vL7zu.js';\nimport '../../chunks/bundle-fHeMHhND.js';\nimport '../../chunks/bundle-Df65wuUZ.js';\nimport './RemoveMessageModal.js';\nimport '../../chunks/bundle-D0TYbkjN.js';\nimport '../../chunks/bundle-Zvm5CMGT.js';\nimport '../../Channel/utils/compareMessagesForGrouping.js';\nvar InfiniteList = forwardRef(function (props, listRef) {\n  var messages = props.messages,\n    renderMessage = props.renderMessage,\n    scrollPositionRef = props.scrollPositionRef,\n    scrollDistanceFromBottomRef = props.scrollDistanceFromBottomRef,\n    onLoadPrevious = props.onLoadPrevious,\n    onLoadNext = props.onLoadNext,\n    _a = props.loadThreshold,\n    loadThreshold = _a === void 0 ? 0.05 : _a,\n    typingIndicator = props.typingIndicator,\n    _b = props.onScrollPosition,\n    onScrollPosition = _b === void 0 ? noop : _b,\n    initDeps = props.initDeps;\n  var isFetching = React__default.useRef(false);\n  var direction = React__default.useRef();\n  var oldScrollTop = useRef(0);\n  // SideEffect: scroll to bottom on initialized\n  useLayoutEffect(function () {\n    if (listRef.current) {\n      listRef.current.scrollTop = listRef.current.scrollHeight;\n    }\n  }, initDeps);\n  // SideEffect: keep scroll position\n  useLayoutEffect(function () {\n    if (listRef.current) {\n      if (direction.current === 'top') {\n        listRef.current.scrollTop = listRef.current.scrollHeight - scrollPositionRef.current;\n      }\n      if (direction.current === 'bottom') {\n        listRef.current.scrollTop = oldScrollTop.current;\n      }\n      direction.current = undefined;\n    }\n  }, [listRef.current, messages.length]);\n  var handleScroll = function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var list, threshold;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!listRef.current) return [2 /*return*/];\n            list = listRef.current;\n            onScrollPosition(getReachedStatus(list));\n            scrollPositionRef.current = list.scrollHeight - list.scrollTop;\n            scrollDistanceFromBottomRef.current = scrollPositionRef.current - list.clientHeight;\n            oldScrollTop.current = list.scrollTop;\n            if (isFetching.current) return [2 /*return*/];\n            threshold = list.clientHeight * Math.min(Math.max(0, loadThreshold), 1);\n            if (!(list.scrollTop <= threshold)) return [3 /*break*/, 2];\n            isFetching.current = true;\n            direction.current = 'top';\n            return [4 /*yield*/, onLoadPrevious()];\n          case 1:\n            _a.sent();\n            isFetching.current = false;\n            return [3 /*break*/, 5];\n          case 2:\n            if (!(list.scrollHeight - list.scrollTop - list.clientHeight <= threshold)) return [3 /*break*/, 4];\n            isFetching.current = true;\n            direction.current = 'bottom';\n            return [4 /*yield*/, onLoadNext()];\n          case 3:\n            _a.sent();\n            isFetching.current = false;\n            return [3 /*break*/, 5];\n          case 4:\n            direction.current = undefined;\n            _a.label = 5;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  return React__default.createElement(\"div\", {\n    className: \"sendbird-conversation__scroll-container\"\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-conversation__padding\"\n  }), React__default.createElement(\"div\", {\n    ref: listRef,\n    className: \"sendbird-conversation__messages-padding\",\n    \"data-testid\": \"sendbird-message-list-container\",\n    onScroll: handleScroll\n  }, messages.map(function (message, index) {\n    return renderMessage({\n      message: message,\n      index: index\n    });\n  }), typingIndicator));\n});\nfunction getReachedStatus(element) {\n  if (isAboutSame(element.scrollTop, 0, SCROLL_BUFFER)) {\n    return 'top';\n  }\n  if (isAboutSame(element.scrollHeight, element.clientHeight + element.scrollTop, SCROLL_BUFFER)) {\n    return 'bottom';\n  }\n  return 'middle';\n}\nvar MessageList = function (props) {\n  var _a, _b, _c, _d, _e;\n  var _f = props.className,\n    className = _f === void 0 ? '' : _f;\n  var _g = deleteNullish(props),\n    _h = _g.renderMessage,\n    renderMessage = _h === void 0 ? function (props) {\n      return React__default.createElement(Message, __assign({}, props));\n    } : _h,\n    renderMessageContent = _g.renderMessageContent,\n    renderSuggestedReplies = _g.renderSuggestedReplies,\n    renderCustomSeparator = _g.renderCustomSeparator,\n    _j = _g.renderPlaceholderLoader,\n    renderPlaceholderLoader = _j === void 0 ? function () {\n      return React__default.createElement(PlaceHolder, {\n        type: PlaceHolderTypes.LOADING\n      });\n    } : _j,\n    _k = _g.renderPlaceholderEmpty,\n    renderPlaceholderEmpty = _k === void 0 ? function () {\n      return React__default.createElement(PlaceHolder, {\n        className: \"sendbird-conversation__no-messages\",\n        type: PlaceHolderTypes.NO_MESSAGES\n      });\n    } : _k,\n    _l = _g.renderFrozenNotification,\n    renderFrozenNotification = _l === void 0 ? function () {\n      return React__default.createElement(FrozenNotification, {\n        className: \"sendbird-conversation__messages__notification\"\n      });\n    } : _l;\n  var _m = useGroupChannelContext(),\n    channelUrl = _m.channelUrl,\n    hasNext = _m.hasNext,\n    loading = _m.loading,\n    messages = _m.messages,\n    newMessages = _m.newMessages,\n    scrollToBottom = _m.scrollToBottom,\n    isScrollBottomReached = _m.isScrollBottomReached,\n    isMessageGroupingEnabled = _m.isMessageGroupingEnabled,\n    scrollRef = _m.scrollRef,\n    scrollDistanceFromBottomRef = _m.scrollDistanceFromBottomRef,\n    scrollPositionRef = _m.scrollPositionRef,\n    currentChannel = _m.currentChannel,\n    replyType = _m.replyType,\n    scrollPubSub = _m.scrollPubSub,\n    loadNext = _m.loadNext,\n    loadPrevious = _m.loadPrevious,\n    setIsScrollBottomReached = _m.setIsScrollBottomReached,\n    resetNewMessages = _m.resetNewMessages;\n  var store = useSendbirdStateContext();\n  var _o = useState(),\n    unreadSinceDate = _o[0],\n    setUnreadSinceDate = _o[1];\n  useEffect(function () {\n    if (isScrollBottomReached) {\n      setUnreadSinceDate(undefined);\n    } else {\n      setUnreadSinceDate(new Date());\n    }\n  }, [isScrollBottomReached]);\n  /**\n   * 1. Move the message list scroll\n   *    when each message's height is changed by `reactions` OR `showEdit`\n   * 2. Keep the scrollBottom value after fetching new message list\n   */\n  var onMessageContentSizeChanged = function (isBottomMessageAffected) {\n    if (isBottomMessageAffected === void 0) {\n      isBottomMessageAffected = false;\n    }\n    var elem = scrollRef.current;\n    if (elem) {\n      var latestDistance = scrollDistanceFromBottomRef.current;\n      var currentDistance = elem.scrollHeight - elem.scrollTop - elem.offsetHeight;\n      if (latestDistance < currentDistance && (!isBottomMessageAffected || latestDistance < SCROLL_BUFFER)) {\n        var diff = currentDistance - latestDistance;\n        // Move the scroll as much as the height of the message has changed\n        scrollPubSub.publish('scroll', {\n          top: elem.scrollTop + diff,\n          lazy: false,\n          animated: false\n        });\n      }\n    }\n  };\n  var renderer = {\n    frozenNotification: function () {\n      if (!currentChannel || !currentChannel.isFrozen) return null;\n      return renderFrozenNotification();\n    },\n    unreadMessagesNotification: function () {\n      if (isScrollBottomReached || !unreadSinceDate) return null;\n      return React__default.createElement(UnreadCount, {\n        className: \"sendbird-conversation__messages__notification\",\n        count: newMessages.length,\n        lastReadAt: unreadSinceDate,\n        onClick: function () {\n          return scrollToBottom();\n        }\n      });\n    },\n    scrollToBottomButton: function () {\n      if (!hasNext() && isScrollBottomReached) return null;\n      return React__default.createElement(\"div\", {\n        className: \"sendbird-conversation__scroll-bottom-button\",\n        onClick: function () {\n          return scrollToBottom();\n        },\n        onKeyDown: function () {\n          return scrollToBottom();\n        },\n        tabIndex: 0,\n        role: \"button\"\n      }, React__default.createElement(Icon, {\n        width: \"24px\",\n        height: \"24px\",\n        type: IconTypes.CHEVRON_DOWN,\n        fillColor: IconColors.PRIMARY\n      }));\n    }\n  };\n  if (loading) {\n    return renderPlaceholderLoader();\n  }\n  if (messages.length === 0) {\n    return renderPlaceholderEmpty();\n  }\n  return React__default.createElement(React__default.Fragment, null, React__default.createElement(\"div\", {\n    className: \"sendbird-conversation__messages \".concat(className)\n  }, React__default.createElement(InfiniteList, {\n    ref: scrollRef,\n    initDeps: [channelUrl],\n    scrollPositionRef: scrollPositionRef,\n    scrollDistanceFromBottomRef: scrollDistanceFromBottomRef,\n    onLoadNext: loadNext,\n    onLoadPrevious: loadPrevious,\n    onScrollPosition: function (it) {\n      var isScrollBottomReached = it === 'bottom';\n      if (newMessages.length > 0 && isScrollBottomReached) {\n        resetNewMessages();\n      }\n      setIsScrollBottomReached(isScrollBottomReached);\n    },\n    messages: messages,\n    renderMessage: function (_a) {\n      var message = _a.message,\n        index = _a.index;\n      var _b = getMessagePartsInfo({\n          allMessages: messages,\n          replyType: replyType !== null && replyType !== void 0 ? replyType : 'NONE',\n          isMessageGroupingEnabled: isMessageGroupingEnabled !== null && isMessageGroupingEnabled !== void 0 ? isMessageGroupingEnabled : false,\n          currentIndex: index,\n          currentMessage: message,\n          currentChannel: currentChannel\n        }),\n        chainTop = _b.chainTop,\n        chainBottom = _b.chainBottom,\n        hasSeparator = _b.hasSeparator;\n      var isOutgoingMessage = isSendableMessage(message) && message.sender.userId === store.config.userId;\n      return React__default.createElement(MessageProvider, {\n        message: message,\n        key: getComponentKeyFromMessage(message),\n        isByMe: isOutgoingMessage\n      }, renderMessage({\n        handleScroll: onMessageContentSizeChanged,\n        message: message,\n        hasSeparator: hasSeparator,\n        chainTop: chainTop,\n        chainBottom: chainBottom,\n        renderMessageContent: renderMessageContent,\n        renderSuggestedReplies: renderSuggestedReplies,\n        renderCustomSeparator: renderCustomSeparator\n      }));\n    },\n    typingIndicator: !hasNext() && ((_b = (_a = store === null || store === void 0 ? void 0 : store.config) === null || _a === void 0 ? void 0 : _a.groupChannel) === null || _b === void 0 ? void 0 : _b.enableTypingIndicator) && ((_e = (_d = (_c = store === null || store === void 0 ? void 0 : store.config) === null || _c === void 0 ? void 0 : _c.groupChannel) === null || _d === void 0 ? void 0 : _d.typingIndicatorTypes) === null || _e === void 0 ? void 0 : _e.has(TypingIndicatorType.Bubble)) && React__default.createElement(TypingIndicatorBubbleWrapper, {\n      channelUrl: channelUrl,\n      handleScroll: onMessageContentSizeChanged\n    })\n  }), React__default.createElement(React__default.Fragment, null, renderer.frozenNotification()), React__default.createElement(React__default.Fragment, null, renderer.unreadMessagesNotification()), React__default.createElement(React__default.Fragment, null, renderer.scrollToBottomButton())));\n};\nvar TypingIndicatorBubbleWrapper = function (props) {\n  var stores = useSendbirdStateContext().stores;\n  var _a = useState([]),\n    typingMembers = _a[0],\n    setTypingMembers = _a[1];\n  useGroupChannelHandler(stores.sdkStore.sdk, {\n    onTypingStatusUpdated: function (channel) {\n      if (channel.url === props.channelUrl) {\n        setTypingMembers(channel.getTypingUsers());\n      }\n    }\n  });\n  return React__default.createElement(TypingIndicatorBubble, {\n    typingMembers: typingMembers,\n    handleScroll: props.handleScroll\n  });\n};\nexport { MessageList, MessageList as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { a as __awaiter, b as __generator, _ as __assign } from '../../chunks/bundle-BQi9-O76.js';\nimport React__default, { forwardRef, useRef, useLayoutEffect, useState, useEffect } from 'react';\nimport { useGroupChannelHandler } from '@sendbird/uikit-tools';\nimport { k as isSendableMessage, T as TypingIndicatorType } from '../../chunks/bundle-DxTN4_0p.js';\nimport PlaceHolder, { PlaceHolderTypes } from '../../ui/PlaceHolder.js';\nimport Icon, { IconTypes, IconColors } from '../../ui/Icon.js';\nimport { Message } from './Message.js';\nimport { UnreadCount } from './UnreadCount.js';\nimport { FrozenNotification } from './FrozenNotification.js';\nimport { S as SCROLL_BUFFER } from '../../chunks/bundle-DCMGp6rH.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport TypingIndicatorBubble from '../../ui/TypingIndicatorBubble.js';\nimport { useGroupChannelContext } from '../context.js';\nimport { n as noop, d as deleteNullish } from '../../chunks/bundle-BgwzpLeQ.js';\nimport { getMessagePartsInfo } from '../../Channel/utils/getMessagePartsInfo.js';\nimport { MessageProvider } from '../../Message/context.js';\nimport { g as getComponentKeyFromMessage } from '../../chunks/bundle-C3ktHDOc.js';\nimport { a as isAboutSame } from '../../chunks/bundle-CMLImr6T.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-cQZ3UZoG.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../chunks/bundle-DhKQeIfP.js';\nimport '../../ui/Loader.js';\nimport '../../chunks/bundle-Dnj0fmAf.js';\nimport '../../chunks/bundle-CAdqcqOm.js';\nimport '../../chunks/bundle-CveCFQYP.js';\nimport '../../Message/hooks/useDirtyGetMentions.js';\nimport '../../ui/DateSeparator.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nimport '../../ui/MessageInput.js';\nimport '../../chunks/bundle-0qSTzMXb.js';\nimport '../../ui/IconButton.js';\nimport '../../ui/Button.js';\nimport '../../chunks/bundle-TZQ6dJCG.js';\nimport 'dompurify';\nimport '../../chunks/bundle-0nQK2G2O.js';\nimport '../../chunks/bundle-B6edg1g0.js';\nimport '../../chunks/bundle-DhGZA5UP.js';\nimport '../../chunks/bundle-GUbI4JcD.js';\nimport '../../withSendbird.js';\nimport '../../ui/MessageContent.js';\nimport '../../chunks/bundle-vuBlPTsL.js';\nimport '../../chunks/bundle-BHK1eF5R.js';\nimport '../../chunks/bundle-F5koPk19.js';\nimport '../../chunks/bundle-DkBecO3w.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport 'react-dom';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport '../../ui/SortByRow.js';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '../../ui/MessageItemReactionMenu.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../ui/ReactionButton.js';\nimport '../../chunks/bundle-AfQS5DGf.js';\nimport '../../chunks/bundle-f-SpnOx2.js';\nimport '../../ui/EmojiReactions.js';\nimport '../../ui/ReactionBadge.js';\nimport '../../ui/BottomSheet.js';\nimport '../../chunks/bundle-CXdo2kR_.js';\nimport 'css-vars-ponyfill';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../ui/UserListItem.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '../../chunks/bundle-CFosTNce.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/Checkbox.js';\nimport '../../ui/UserProfile.js';\nimport '../../sendbirdSelectors.js';\nimport '../../chunks/bundle-b6TpX_JP.js';\nimport '../../ui/Tooltip.js';\nimport '../../ui/TooltipWrapper.js';\nimport '../../chunks/bundle-BNDaXsLn.js';\nimport '../../ui/AdminMessage.js';\nimport '../../ui/QuoteMessage.js';\nimport '../../chunks/bundle-BqMHiKkl.js';\nimport '@sendbird/chat/message';\nimport '../../ui/MobileMenu.js';\nimport '../../ui/ThreadReplies.js';\nimport '../../ui/OGMessageItemBody.js';\nimport '../../chunks/bundle-DofK8ySe.js';\nimport '../../ui/MentionLabel.js';\nimport '../../ui/LinkLabel.js';\nimport '../../ui/TextMessageItemBody.js';\nimport '../../ui/FileMessageItemBody.js';\nimport '../../ui/TextButton.js';\nimport '../../chunks/bundle-ZVq6xGXk.js';\nimport '../../ui/FileViewer.js';\nimport '../../chunks/bundle-Gdl-rzQC.js';\nimport '../../ui/VoiceMessageItemBody.js';\nimport '../../ui/ProgressBar.js';\nimport '../../VoicePlayer/useVoicePlayer.js';\nimport '../../ui/PlaybackTime.js';\nimport '../../ui/ThumbnailMessageItemBody.js';\nimport '../../ui/UnknownMessageItemBody.js';\nimport '../../ui/TemplateMessageItemBody.js';\nimport '../../chunks/bundle-uLjwqZrR.js';\nimport '../../ui/FallbackTemplateMessageItemBody.tsx.js';\nimport '../../ui/LoadingTemplateMessageItemBody.tsx.js';\nimport '../../ui/FeedbackIconButton.js';\nimport '../../ui/MobileFeedbackMenu.js';\nimport '../../ui/MessageFeedbackModal.js';\nimport '../../ui/Input.js';\nimport '../../ui/MessageFeedbackFailedModal.js';\nimport '../../chunks/bundle-Cf0UgZwi.js';\nimport './SuggestedReplies.js';\nimport '../../chunks/bundle-Due9yzp6.js';\nimport './FileViewer.js';\nimport '../../chunks/bundle-CqpGyIDR.js';\nimport '../../chunks/bundle-y29vL7zu.js';\nimport '../../chunks/bundle-fHeMHhND.js';\nimport '../../chunks/bundle-Df65wuUZ.js';\nimport './RemoveMessageModal.js';\nimport '../../chunks/bundle-D0TYbkjN.js';\nimport '../../chunks/bundle-Zvm5CMGT.js';\nimport '../../Channel/utils/compareMessagesForGrouping.js';\n\nvar InfiniteList = forwardRef(function (props, listRef) {\n    var messages = props.messages, renderMessage = props.renderMessage, scrollPositionRef = props.scrollPositionRef, scrollDistanceFromBottomRef = props.scrollDistanceFromBottomRef, onLoadPrevious = props.onLoadPrevious, onLoadNext = props.onLoadNext, _a = props.loadThreshold, loadThreshold = _a === void 0 ? 0.05 : _a, typingIndicator = props.typingIndicator, _b = props.onScrollPosition, onScrollPosition = _b === void 0 ? noop : _b, initDeps = props.initDeps;\n    var isFetching = React__default.useRef(false);\n    var direction = React__default.useRef();\n    var oldScrollTop = useRef(0);\n    // SideEffect: scroll to bottom on initialized\n    useLayoutEffect(function () {\n        if (listRef.current) {\n            listRef.current.scrollTop = listRef.current.scrollHeight;\n        }\n    }, initDeps);\n    // SideEffect: keep scroll position\n    useLayoutEffect(function () {\n        if (listRef.current) {\n            if (direction.current === 'top') {\n                listRef.current.scrollTop = listRef.current.scrollHeight - scrollPositionRef.current;\n            }\n            if (direction.current === 'bottom') {\n                listRef.current.scrollTop = oldScrollTop.current;\n            }\n            direction.current = undefined;\n        }\n    }, [listRef.current, messages.length]);\n    var handleScroll = function () { return __awaiter(void 0, void 0, void 0, function () {\n        var list, threshold;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (!listRef.current)\n                        return [2 /*return*/];\n                    list = listRef.current;\n                    onScrollPosition(getReachedStatus(list));\n                    scrollPositionRef.current = list.scrollHeight - list.scrollTop;\n                    scrollDistanceFromBottomRef.current = scrollPositionRef.current - list.clientHeight;\n                    oldScrollTop.current = list.scrollTop;\n                    if (isFetching.current)\n                        return [2 /*return*/];\n                    threshold = list.clientHeight * Math.min(Math.max(0, loadThreshold), 1);\n                    if (!(list.scrollTop <= threshold)) return [3 /*break*/, 2];\n                    isFetching.current = true;\n                    direction.current = 'top';\n                    return [4 /*yield*/, onLoadPrevious()];\n                case 1:\n                    _a.sent();\n                    isFetching.current = false;\n                    return [3 /*break*/, 5];\n                case 2:\n                    if (!(list.scrollHeight - list.scrollTop - list.clientHeight <= threshold)) return [3 /*break*/, 4];\n                    isFetching.current = true;\n                    direction.current = 'bottom';\n                    return [4 /*yield*/, onLoadNext()];\n                case 3:\n                    _a.sent();\n                    isFetching.current = false;\n                    return [3 /*break*/, 5];\n                case 4:\n                    direction.current = undefined;\n                    _a.label = 5;\n                case 5: return [2 /*return*/];\n            }\n        });\n    }); };\n    return (React__default.createElement(\"div\", { className: \"sendbird-conversation__scroll-container\" },\n        React__default.createElement(\"div\", { className: \"sendbird-conversation__padding\" }),\n        React__default.createElement(\"div\", { ref: listRef, className: \"sendbird-conversation__messages-padding\", \"data-testid\": \"sendbird-message-list-container\", onScroll: handleScroll },\n            messages.map(function (message, index) { return renderMessage({ message: message, index: index }); }),\n            typingIndicator)));\n});\nfunction getReachedStatus(element) {\n    if (isAboutSame(element.scrollTop, 0, SCROLL_BUFFER)) {\n        return 'top';\n    }\n    if (isAboutSame(element.scrollHeight, element.clientHeight + element.scrollTop, SCROLL_BUFFER)) {\n        return 'bottom';\n    }\n    return 'middle';\n}\n\nvar MessageList = function (props) {\n    var _a, _b, _c, _d, _e;\n    var _f = props.className, className = _f === void 0 ? '' : _f;\n    var _g = deleteNullish(props), _h = _g.renderMessage, renderMessage = _h === void 0 ? function (props) { return React__default.createElement(Message, __assign({}, props)); } : _h, renderMessageContent = _g.renderMessageContent, renderSuggestedReplies = _g.renderSuggestedReplies, renderCustomSeparator = _g.renderCustomSeparator, _j = _g.renderPlaceholderLoader, renderPlaceholderLoader = _j === void 0 ? function () { return React__default.createElement(PlaceHolder, { type: PlaceHolderTypes.LOADING }); } : _j, _k = _g.renderPlaceholderEmpty, renderPlaceholderEmpty = _k === void 0 ? function () { return React__default.createElement(PlaceHolder, { className: \"sendbird-conversation__no-messages\", type: PlaceHolderTypes.NO_MESSAGES }); } : _k, _l = _g.renderFrozenNotification, renderFrozenNotification = _l === void 0 ? function () { return React__default.createElement(FrozenNotification, { className: \"sendbird-conversation__messages__notification\" }); } : _l;\n    var _m = useGroupChannelContext(), channelUrl = _m.channelUrl, hasNext = _m.hasNext, loading = _m.loading, messages = _m.messages, newMessages = _m.newMessages, scrollToBottom = _m.scrollToBottom, isScrollBottomReached = _m.isScrollBottomReached, isMessageGroupingEnabled = _m.isMessageGroupingEnabled, scrollRef = _m.scrollRef, scrollDistanceFromBottomRef = _m.scrollDistanceFromBottomRef, scrollPositionRef = _m.scrollPositionRef, currentChannel = _m.currentChannel, replyType = _m.replyType, scrollPubSub = _m.scrollPubSub, loadNext = _m.loadNext, loadPrevious = _m.loadPrevious, setIsScrollBottomReached = _m.setIsScrollBottomReached, resetNewMessages = _m.resetNewMessages;\n    var store = useSendbirdStateContext();\n    var _o = useState(), unreadSinceDate = _o[0], setUnreadSinceDate = _o[1];\n    useEffect(function () {\n        if (isScrollBottomReached) {\n            setUnreadSinceDate(undefined);\n        }\n        else {\n            setUnreadSinceDate(new Date());\n        }\n    }, [isScrollBottomReached]);\n    /**\n     * 1. Move the message list scroll\n     *    when each message's height is changed by `reactions` OR `showEdit`\n     * 2. Keep the scrollBottom value after fetching new message list\n     */\n    var onMessageContentSizeChanged = function (isBottomMessageAffected) {\n        if (isBottomMessageAffected === void 0) { isBottomMessageAffected = false; }\n        var elem = scrollRef.current;\n        if (elem) {\n            var latestDistance = scrollDistanceFromBottomRef.current;\n            var currentDistance = elem.scrollHeight - elem.scrollTop - elem.offsetHeight;\n            if (latestDistance < currentDistance && (!isBottomMessageAffected || latestDistance < SCROLL_BUFFER)) {\n                var diff = currentDistance - latestDistance;\n                // Move the scroll as much as the height of the message has changed\n                scrollPubSub.publish('scroll', { top: elem.scrollTop + diff, lazy: false, animated: false });\n            }\n        }\n    };\n    var renderer = {\n        frozenNotification: function () {\n            if (!currentChannel || !currentChannel.isFrozen)\n                return null;\n            return renderFrozenNotification();\n        },\n        unreadMessagesNotification: function () {\n            if (isScrollBottomReached || !unreadSinceDate)\n                return null;\n            return (React__default.createElement(UnreadCount, { className: \"sendbird-conversation__messages__notification\", count: newMessages.length, lastReadAt: unreadSinceDate, onClick: function () { return scrollToBottom(); } }));\n        },\n        scrollToBottomButton: function () {\n            if (!hasNext() && isScrollBottomReached)\n                return null;\n            return (React__default.createElement(\"div\", { className: \"sendbird-conversation__scroll-bottom-button\", onClick: function () { return scrollToBottom(); }, onKeyDown: function () { return scrollToBottom(); }, tabIndex: 0, role: \"button\" },\n                React__default.createElement(Icon, { width: \"24px\", height: \"24px\", type: IconTypes.CHEVRON_DOWN, fillColor: IconColors.PRIMARY })));\n        },\n    };\n    if (loading) {\n        return renderPlaceholderLoader();\n    }\n    if (messages.length === 0) {\n        return renderPlaceholderEmpty();\n    }\n    return (React__default.createElement(React__default.Fragment, null,\n        React__default.createElement(\"div\", { className: \"sendbird-conversation__messages \".concat(className) },\n            React__default.createElement(InfiniteList, { ref: scrollRef, initDeps: [channelUrl], scrollPositionRef: scrollPositionRef, scrollDistanceFromBottomRef: scrollDistanceFromBottomRef, onLoadNext: loadNext, onLoadPrevious: loadPrevious, onScrollPosition: function (it) {\n                    var isScrollBottomReached = it === 'bottom';\n                    if (newMessages.length > 0 && isScrollBottomReached) {\n                        resetNewMessages();\n                    }\n                    setIsScrollBottomReached(isScrollBottomReached);\n                }, messages: messages, renderMessage: function (_a) {\n                    var message = _a.message, index = _a.index;\n                    var _b = getMessagePartsInfo({\n                        allMessages: messages,\n                        replyType: replyType !== null && replyType !== void 0 ? replyType : 'NONE',\n                        isMessageGroupingEnabled: isMessageGroupingEnabled !== null && isMessageGroupingEnabled !== void 0 ? isMessageGroupingEnabled : false,\n                        currentIndex: index,\n                        currentMessage: message,\n                        currentChannel: currentChannel,\n                    }), chainTop = _b.chainTop, chainBottom = _b.chainBottom, hasSeparator = _b.hasSeparator;\n                    var isOutgoingMessage = isSendableMessage(message) && message.sender.userId === store.config.userId;\n                    return (React__default.createElement(MessageProvider, { message: message, key: getComponentKeyFromMessage(message), isByMe: isOutgoingMessage }, renderMessage({\n                        handleScroll: onMessageContentSizeChanged,\n                        message: message,\n                        hasSeparator: hasSeparator,\n                        chainTop: chainTop,\n                        chainBottom: chainBottom,\n                        renderMessageContent: renderMessageContent,\n                        renderSuggestedReplies: renderSuggestedReplies,\n                        renderCustomSeparator: renderCustomSeparator,\n                    })));\n                }, typingIndicator: !hasNext()\n                    && ((_b = (_a = store === null || store === void 0 ? void 0 : store.config) === null || _a === void 0 ? void 0 : _a.groupChannel) === null || _b === void 0 ? void 0 : _b.enableTypingIndicator)\n                    && ((_e = (_d = (_c = store === null || store === void 0 ? void 0 : store.config) === null || _c === void 0 ? void 0 : _c.groupChannel) === null || _d === void 0 ? void 0 : _d.typingIndicatorTypes) === null || _e === void 0 ? void 0 : _e.has(TypingIndicatorType.Bubble)) && (React__default.createElement(TypingIndicatorBubbleWrapper, { channelUrl: channelUrl, handleScroll: onMessageContentSizeChanged })) }),\n            React__default.createElement(React__default.Fragment, null, renderer.frozenNotification()),\n            React__default.createElement(React__default.Fragment, null, renderer.unreadMessagesNotification()),\n            React__default.createElement(React__default.Fragment, null, renderer.scrollToBottomButton()))));\n};\nvar TypingIndicatorBubbleWrapper = function (props) {\n    var stores = useSendbirdStateContext().stores;\n    var _a = useState([]), typingMembers = _a[0], setTypingMembers = _a[1];\n    useGroupChannelHandler(stores.sdkStore.sdk, {\n        onTypingStatusUpdated: function (channel) {\n            if (channel.url === props.channelUrl) {\n                setTypingMembers(channel.getTypingUsers());\n            }\n        },\n    });\n    return React__default.createElement(TypingIndicatorBubble, { typingMembers: typingMembers, handleScroll: props.handleScroll });\n};\n\nexport { MessageList, MessageList as default };\n//# sourceMappingURL=MessageList.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}