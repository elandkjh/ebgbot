{"ast":null,"code":"import React__default, { useMemo, useState, useRef } from 'react';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport { u as useLocalization } from '../../chunks/bundle-cQZ3UZoG.js';\nimport { g as getChannelTitle } from '../../chunks/bundle-CVBleWtM.js';\nimport { useThreadContext } from '../context.js';\nimport ParentMessageInfo from './ParentMessageInfo.js';\nimport ThreadHeader from './ThreadHeader.js';\nimport ThreadList from './ThreadList.js';\nimport ThreadMessageInput from './ThreadMessageInput.js';\nimport { ParentMessageStateTypes, ThreadListStateTypes } from '../context/types.js';\nimport PlaceHolder, { PlaceHolderTypes } from '../../ui/PlaceHolder.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../chunks/bundle-DhKQeIfP.js';\nimport { i as isAboutSame } from '../../chunks/bundle-T6fVCCb7.js';\nimport { MessageProvider } from '../../Message/context.js';\nimport '../../withSendbird.js';\nimport '../../chunks/bundle-BQi9-O76.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '@sendbird/chat';\nimport '../../chunks/bundle-b6TpX_JP.js';\nimport '../../chunks/bundle-CpjASiz4.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '../../chunks/bundle-CZUYMubi.js';\nimport '@sendbird/chat/message';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../chunks/bundle-CAdqcqOm.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-D6ZpcPbH.js';\nimport '../../chunks/bundle-CXdo2kR_.js';\nimport '../../chunks/bundle-DxTN4_0p.js';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-BgwzpLeQ.js';\nimport 'react-dom';\nimport '../../chunks/bundle-f-SpnOx2.js';\nimport '../../ui/IconButton.js';\nimport '../../ui/Button.js';\nimport '../../ui/Icon.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat/openChannel';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport '../../ui/SortByRow.js';\nimport '../../chunks/bundle-Zvm5CMGT.js';\nimport './ParentMessageInfoItem.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../ui/TextButton.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nimport '../../ui/EmojiReactions.js';\nimport '../../ui/ReactionBadge.js';\nimport '../../ui/ReactionButton.js';\nimport '../../chunks/bundle-AfQS5DGf.js';\nimport '../../ui/BottomSheet.js';\nimport '../../ui/UserListItem.js';\nimport '../../chunks/bundle-CFosTNce.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/Checkbox.js';\nimport '../../ui/UserProfile.js';\nimport '../../sendbirdSelectors.js';\nimport '../../ui/Tooltip.js';\nimport '../../ui/TooltipWrapper.js';\nimport '../../chunks/bundle-BNDaXsLn.js';\nimport '../../ui/VoiceMessageItemBody.js';\nimport '../../ui/ProgressBar.js';\nimport '../../VoicePlayer/useVoicePlayer.js';\nimport '../../ui/PlaybackTime.js';\nimport '../../ui/Loader.js';\nimport '../../chunks/bundle-DofK8ySe.js';\nimport '../../chunks/bundle-GUbI4JcD.js';\nimport '../../ui/MentionLabel.js';\nimport '../../ui/LinkLabel.js';\nimport '../../chunks/bundle-ZVq6xGXk.js';\nimport '../../ui/FileViewer.js';\nimport '../../chunks/bundle-Gdl-rzQC.js';\nimport '../../chunks/bundle-CMLImr6T.js';\nimport '../../chunks/bundle-BsAIw_77.js';\nimport '../../chunks/bundle-Due9yzp6.js';\nimport '../../chunks/bundle-CveCFQYP.js';\nimport '../../chunks/bundle-0qSTzMXb.js';\nimport '../../ui/MessageItemReactionMenu.js';\nimport '../../ui/MessageInput.js';\nimport '../../chunks/bundle-TZQ6dJCG.js';\nimport 'dompurify';\nimport '../../chunks/bundle-0nQK2G2O.js';\nimport '../../chunks/bundle-B6edg1g0.js';\nimport '../../chunks/bundle-DhGZA5UP.js';\nimport '../../chunks/bundle-C3Ty1Yuy.js';\nimport '../../ui/MobileMenu.js';\nimport '../../Message/hooks/useDirtyGetMentions.js';\nimport '../../chunks/bundle-fHeMHhND.js';\nimport '../../chunks/bundle-DkBecO3w.js';\nimport '../../chunks/bundle-Cf0UgZwi.js';\nimport '../../ui/Header.js';\nimport './ThreadListItem.js';\nimport '../../ui/DateSeparator.js';\nimport '../../chunks/bundle-vuBlPTsL.js';\nimport '../../chunks/bundle-BHK1eF5R.js';\nimport '../../chunks/bundle-F5koPk19.js';\nimport '../../ui/TextMessageItemBody.js';\nimport '../../ui/OGMessageItemBody.js';\nimport '../../ui/FileMessageItemBody.js';\nimport '../../ui/ThumbnailMessageItemBody.js';\nimport '../../chunks/bundle-BqMHiKkl.js';\nimport '../../ui/UnknownMessageItemBody.js';\nimport '../../Channel/utils/compareMessagesForGrouping.js';\nimport 'date-fns';\nimport '../../chunks/bundle-DX5U-zhB.js';\nimport '../../chunks/bundle-C3ktHDOc.js';\nimport '../../GroupChannel/components/SuggestedMentionList.js';\nimport '../../ui/QuoteMessageInput.js';\nimport '../../VoiceRecorder/useVoiceRecorder.js';\nimport '../../chunks/bundle-B2SAqHzx.js';\nimport '../../chunks/bundle-DAz5E5O_.js';\nimport '../../GroupChannel/context.js';\nimport '../../chunks/bundle-y29vL7zu.js';\nimport '../../chunks/bundle-Df65wuUZ.js';\nimport '../../Channel/hooks/useHandleUploadFiles.js';\nvar useMemorizedHeader = function (_a) {\n  var renderHeader = _a.renderHeader;\n  return useMemo(function () {\n    if (typeof renderHeader === 'function') {\n      return renderHeader();\n    }\n    return null;\n  }, [renderHeader]);\n};\nvar useMemorizedParentMessageInfo = function (_a) {\n  var parentMessage = _a.parentMessage,\n    parentMessageState = _a.parentMessageState,\n    renderParentMessageInfo = _a.renderParentMessageInfo,\n    renderParentMessageInfoPlaceholder = _a.renderParentMessageInfoPlaceholder;\n  return useMemo(function () {\n    if (parentMessageState === ParentMessageStateTypes.NIL || parentMessageState === ParentMessageStateTypes.LOADING || parentMessageState === ParentMessageStateTypes.INVALID) {\n      if (typeof renderParentMessageInfoPlaceholder === 'function') {\n        return renderParentMessageInfoPlaceholder(parentMessageState);\n      }\n      switch (parentMessageState) {\n        case ParentMessageStateTypes.NIL:\n          {\n            return React__default.createElement(PlaceHolder, {\n              className: \"sendbird-thread-ui__parent-message-info placeholder-nil\",\n              type: PlaceHolderTypes.NO_RESULTS,\n              iconSize: \"64px\"\n            });\n          }\n        case ParentMessageStateTypes.LOADING:\n          {\n            return React__default.createElement(PlaceHolder, {\n              className: \"sendbird-thread-ui__parent-message-info placeholder-loading\",\n              type: PlaceHolderTypes.LOADING,\n              iconSize: \"64px\"\n            });\n          }\n        case ParentMessageStateTypes.INVALID:\n          {\n            return React__default.createElement(PlaceHolder, {\n              className: \"sendbird-thread-ui__parent-message-info placeholder-invalid\",\n              type: PlaceHolderTypes.WRONG,\n              iconSize: \"64px\"\n            });\n          }\n        default:\n          {\n            return null;\n          }\n      }\n    } else if (parentMessageState === ParentMessageStateTypes.INITIALIZED) {\n      if (typeof renderParentMessageInfo === 'function') {\n        return renderParentMessageInfo();\n      }\n    }\n    return null;\n  }, [parentMessage, parentMessageState, renderParentMessageInfo, renderParentMessageInfoPlaceholder]);\n};\nvar useMemorizedThreadList = function (_a) {\n  var threadListState = _a.threadListState,\n    renderThreadListPlaceHolder = _a.renderThreadListPlaceHolder;\n  return useMemo(function () {\n    if (threadListState === ThreadListStateTypes.NIL || threadListState === ThreadListStateTypes.LOADING || threadListState === ThreadListStateTypes.INVALID) {\n      if (typeof renderThreadListPlaceHolder === 'function') {\n        return renderThreadListPlaceHolder(threadListState);\n      }\n      switch (threadListState) {\n        case ThreadListStateTypes.LOADING:\n          {\n            return React__default.createElement(PlaceHolder, {\n              className: \"sendbird-thread-ui__thread-list placeholder-loading\",\n              type: PlaceHolderTypes.LOADING,\n              iconSize: \"64px\"\n            });\n          }\n        case ThreadListStateTypes.INVALID:\n          {\n            return React__default.createElement(PlaceHolder, {\n              className: \"sendbird-thread-ui__thread-list placeholder-invalid\",\n              type: PlaceHolderTypes.WRONG,\n              iconSize: \"64px\"\n            });\n          }\n        case ThreadListStateTypes.NIL:\n          {\n            return React__default.createElement(React__default.Fragment, null);\n          }\n        default:\n          {\n            return null;\n          }\n      }\n    }\n    return null;\n  }, [threadListState, renderThreadListPlaceHolder]);\n};\nvar ThreadUI = function (_a) {\n  var _b, _c, _d, _e;\n  var renderHeader = _a.renderHeader,\n    _f = _a.renderParentMessageInfo,\n    renderParentMessageInfo = _f === void 0 ? function () {\n      return React__default.createElement(ParentMessageInfo, {\n        className: \"sendbird-thread-ui__parent-message-info\"\n      });\n    } : _f,\n    renderMessage = _a.renderMessage,\n    renderMessageInput = _a.renderMessageInput,\n    renderCustomSeparator = _a.renderCustomSeparator,\n    renderParentMessageInfoPlaceholder = _a.renderParentMessageInfoPlaceholder,\n    renderThreadListPlaceHolder = _a.renderThreadListPlaceHolder,\n    renderFileUploadIcon = _a.renderFileUploadIcon,\n    renderVoiceMessageIcon = _a.renderVoiceMessageIcon,\n    renderSendMessageIcon = _a.renderSendMessageIcon;\n  var stores = useSendbirdStateContext().stores;\n  var currentUserId = (_d = (_c = (_b = stores === null || stores === void 0 ? void 0 : stores.sdkStore) === null || _b === void 0 ? void 0 : _b.sdk) === null || _c === void 0 ? void 0 : _c.currentUser) === null || _d === void 0 ? void 0 : _d.userId;\n  var stringSet = useLocalization().stringSet;\n  var _g = useThreadContext(),\n    currentChannel = _g.currentChannel,\n    allThreadMessages = _g.allThreadMessages,\n    parentMessage = _g.parentMessage,\n    parentMessageState = _g.parentMessageState,\n    threadListState = _g.threadListState,\n    hasMorePrev = _g.hasMorePrev,\n    hasMoreNext = _g.hasMoreNext,\n    fetchPrevThreads = _g.fetchPrevThreads,\n    fetchNextThreads = _g.fetchNextThreads,\n    onHeaderActionClick = _g.onHeaderActionClick,\n    onMoveToParentMessage = _g.onMoveToParentMessage;\n  var replyCount = allThreadMessages.length;\n  var isByMe = currentUserId === ((_e = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.sender) === null || _e === void 0 ? void 0 : _e.userId);\n  // Memoized custom components\n  var MemorizedHeader = useMemorizedHeader({\n    renderHeader: renderHeader\n  });\n  var MemorizedParentMessageInfo = useMemorizedParentMessageInfo({\n    parentMessage: parentMessage,\n    parentMessageState: parentMessageState,\n    renderParentMessageInfo: renderParentMessageInfo,\n    renderParentMessageInfoPlaceholder: renderParentMessageInfoPlaceholder\n  });\n  var MemorizedThreadList = useMemorizedThreadList({\n    threadListState: threadListState,\n    renderThreadListPlaceHolder: renderThreadListPlaceHolder\n  });\n  // scroll\n  var _h = useState(0),\n    scrollBottom = _h[0],\n    setScrollBottom = _h[1];\n  var scrollRef = useRef(null);\n  var onScroll = function (e) {\n    var _a;\n    var element = e.target;\n    var scrollTop = element.scrollTop,\n      clientHeight = element.clientHeight,\n      scrollHeight = element.scrollHeight;\n    var threadItemNodes = (_a = scrollRef.current) === null || _a === void 0 ? void 0 : _a.querySelectorAll('.sendbird-thread-list-item');\n    var firstNode = threadItemNodes === null || threadItemNodes === void 0 ? void 0 : threadItemNodes[0];\n    if (isAboutSame(scrollTop, 0, 10) && hasMorePrev) {\n      fetchPrevThreads(function (messages) {\n        var _a;\n        if (messages) {\n          try {\n            (_a = firstNode === null || firstNode === void 0 ? void 0 : firstNode.scrollIntoView) === null || _a === void 0 ? void 0 : _a.call(firstNode, {\n              block: 'start',\n              inline: 'nearest'\n            });\n          } catch (error) {\n            //\n          }\n        }\n      });\n    }\n    if (isAboutSame(clientHeight + scrollTop, scrollHeight, 10) && hasMoreNext) {\n      var scrollTop_1 = scrollTop;\n      fetchNextThreads(function (messages) {\n        if (messages) {\n          try {\n            element.scrollTop = scrollTop_1;\n            if (scrollRef.current) {\n              scrollRef.current.scrollTop = scrollTop_1;\n            }\n          } catch (error) {\n            //\n          }\n        }\n      });\n    }\n    // save the lastest scroll bottom value\n    if (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) {\n      var current = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;\n      setScrollBottom(current.scrollHeight - current.scrollTop - current.offsetHeight);\n    }\n  };\n  return React__default.createElement(\"div\", {\n    className: 'sendbird-thread-ui'\n  }, MemorizedHeader || React__default.createElement(ThreadHeader, {\n    className: \"sendbird-thread-ui__header\",\n    channelName: getChannelTitle(currentChannel, currentUserId !== null && currentUserId !== void 0 ? currentUserId : '', stringSet),\n    onActionIconClick: onHeaderActionClick,\n    onChannelNameClick: function () {\n      onMoveToParentMessage === null || onMoveToParentMessage === void 0 ? void 0 : onMoveToParentMessage({\n        message: parentMessage,\n        channel: currentChannel\n      });\n    }\n  }), React__default.createElement(\"div\", {\n    className: \"sendbird-thread-ui--scroll\",\n    ref: scrollRef,\n    onScroll: onScroll\n  }, React__default.createElement(MessageProvider, {\n    message: parentMessage,\n    isByMe: isByMe\n  }, MemorizedParentMessageInfo), replyCount > 0 && React__default.createElement(\"div\", {\n    className: \"sendbird-thread-ui__reply-counts\"\n  }, React__default.createElement(Label, {\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_3\n  }, \"\".concat(replyCount, \" \").concat(replyCount > 1 ? stringSet.THREAD__THREAD_REPLIES : stringSet.THREAD__THREAD_REPLY))), MemorizedThreadList || React__default.createElement(ThreadList, {\n    className: \"sendbird-thread-ui__thread-list\",\n    renderMessage: renderMessage,\n    renderCustomSeparator: renderCustomSeparator,\n    scrollRef: scrollRef,\n    scrollBottom: scrollBottom\n  })), (renderMessageInput === null || renderMessageInput === void 0 ? void 0 : renderMessageInput()) || React__default.createElement(ThreadMessageInput, {\n    className: \"sendbird-thread-ui__message-input\",\n    renderFileUploadIcon: renderFileUploadIcon,\n    renderVoiceMessageIcon: renderVoiceMessageIcon,\n    renderSendMessageIcon: renderSendMessageIcon\n  }));\n};\nexport { ThreadUI as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { useMemo, useState, useRef } from 'react';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport { u as useLocalization } from '../../chunks/bundle-cQZ3UZoG.js';\nimport { g as getChannelTitle } from '../../chunks/bundle-CVBleWtM.js';\nimport { useThreadContext } from '../context.js';\nimport ParentMessageInfo from './ParentMessageInfo.js';\nimport ThreadHeader from './ThreadHeader.js';\nimport ThreadList from './ThreadList.js';\nimport ThreadMessageInput from './ThreadMessageInput.js';\nimport { ParentMessageStateTypes, ThreadListStateTypes } from '../context/types.js';\nimport PlaceHolder, { PlaceHolderTypes } from '../../ui/PlaceHolder.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../chunks/bundle-DhKQeIfP.js';\nimport { i as isAboutSame } from '../../chunks/bundle-T6fVCCb7.js';\nimport { MessageProvider } from '../../Message/context.js';\nimport '../../withSendbird.js';\nimport '../../chunks/bundle-BQi9-O76.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '@sendbird/chat';\nimport '../../chunks/bundle-b6TpX_JP.js';\nimport '../../chunks/bundle-CpjASiz4.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '../../chunks/bundle-CZUYMubi.js';\nimport '@sendbird/chat/message';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../chunks/bundle-CAdqcqOm.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../chunks/bundle-D6ZpcPbH.js';\nimport '../../chunks/bundle-CXdo2kR_.js';\nimport '../../chunks/bundle-DxTN4_0p.js';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-BgwzpLeQ.js';\nimport 'react-dom';\nimport '../../chunks/bundle-f-SpnOx2.js';\nimport '../../ui/IconButton.js';\nimport '../../ui/Button.js';\nimport '../../ui/Icon.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '@sendbird/chat/openChannel';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport '../../ui/SortByRow.js';\nimport '../../chunks/bundle-Zvm5CMGT.js';\nimport './ParentMessageInfoItem.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../ui/TextButton.js';\nimport '../../chunks/bundle-rA4afvKU.js';\nimport '../../ui/EmojiReactions.js';\nimport '../../ui/ReactionBadge.js';\nimport '../../ui/ReactionButton.js';\nimport '../../chunks/bundle-AfQS5DGf.js';\nimport '../../ui/BottomSheet.js';\nimport '../../ui/UserListItem.js';\nimport '../../chunks/bundle-CFosTNce.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/Checkbox.js';\nimport '../../ui/UserProfile.js';\nimport '../../sendbirdSelectors.js';\nimport '../../ui/Tooltip.js';\nimport '../../ui/TooltipWrapper.js';\nimport '../../chunks/bundle-BNDaXsLn.js';\nimport '../../ui/VoiceMessageItemBody.js';\nimport '../../ui/ProgressBar.js';\nimport '../../VoicePlayer/useVoicePlayer.js';\nimport '../../ui/PlaybackTime.js';\nimport '../../ui/Loader.js';\nimport '../../chunks/bundle-DofK8ySe.js';\nimport '../../chunks/bundle-GUbI4JcD.js';\nimport '../../ui/MentionLabel.js';\nimport '../../ui/LinkLabel.js';\nimport '../../chunks/bundle-ZVq6xGXk.js';\nimport '../../ui/FileViewer.js';\nimport '../../chunks/bundle-Gdl-rzQC.js';\nimport '../../chunks/bundle-CMLImr6T.js';\nimport '../../chunks/bundle-BsAIw_77.js';\nimport '../../chunks/bundle-Due9yzp6.js';\nimport '../../chunks/bundle-CveCFQYP.js';\nimport '../../chunks/bundle-0qSTzMXb.js';\nimport '../../ui/MessageItemReactionMenu.js';\nimport '../../ui/MessageInput.js';\nimport '../../chunks/bundle-TZQ6dJCG.js';\nimport 'dompurify';\nimport '../../chunks/bundle-0nQK2G2O.js';\nimport '../../chunks/bundle-B6edg1g0.js';\nimport '../../chunks/bundle-DhGZA5UP.js';\nimport '../../chunks/bundle-C3Ty1Yuy.js';\nimport '../../ui/MobileMenu.js';\nimport '../../Message/hooks/useDirtyGetMentions.js';\nimport '../../chunks/bundle-fHeMHhND.js';\nimport '../../chunks/bundle-DkBecO3w.js';\nimport '../../chunks/bundle-Cf0UgZwi.js';\nimport '../../ui/Header.js';\nimport './ThreadListItem.js';\nimport '../../ui/DateSeparator.js';\nimport '../../chunks/bundle-vuBlPTsL.js';\nimport '../../chunks/bundle-BHK1eF5R.js';\nimport '../../chunks/bundle-F5koPk19.js';\nimport '../../ui/TextMessageItemBody.js';\nimport '../../ui/OGMessageItemBody.js';\nimport '../../ui/FileMessageItemBody.js';\nimport '../../ui/ThumbnailMessageItemBody.js';\nimport '../../chunks/bundle-BqMHiKkl.js';\nimport '../../ui/UnknownMessageItemBody.js';\nimport '../../Channel/utils/compareMessagesForGrouping.js';\nimport 'date-fns';\nimport '../../chunks/bundle-DX5U-zhB.js';\nimport '../../chunks/bundle-C3ktHDOc.js';\nimport '../../GroupChannel/components/SuggestedMentionList.js';\nimport '../../ui/QuoteMessageInput.js';\nimport '../../VoiceRecorder/useVoiceRecorder.js';\nimport '../../chunks/bundle-B2SAqHzx.js';\nimport '../../chunks/bundle-DAz5E5O_.js';\nimport '../../GroupChannel/context.js';\nimport '../../chunks/bundle-y29vL7zu.js';\nimport '../../chunks/bundle-Df65wuUZ.js';\nimport '../../Channel/hooks/useHandleUploadFiles.js';\n\nvar useMemorizedHeader = function (_a) {\n    var renderHeader = _a.renderHeader;\n    return useMemo(function () {\n        if (typeof renderHeader === 'function') {\n            return renderHeader();\n        }\n        return null;\n    }, [renderHeader]);\n};\n\nvar useMemorizedParentMessageInfo = function (_a) {\n    var parentMessage = _a.parentMessage, parentMessageState = _a.parentMessageState, renderParentMessageInfo = _a.renderParentMessageInfo, renderParentMessageInfoPlaceholder = _a.renderParentMessageInfoPlaceholder;\n    return useMemo(function () {\n        if (parentMessageState === ParentMessageStateTypes.NIL\n            || parentMessageState === ParentMessageStateTypes.LOADING\n            || parentMessageState === ParentMessageStateTypes.INVALID) {\n            if (typeof renderParentMessageInfoPlaceholder === 'function') {\n                return renderParentMessageInfoPlaceholder(parentMessageState);\n            }\n            switch (parentMessageState) {\n                case ParentMessageStateTypes.NIL: {\n                    return (React__default.createElement(PlaceHolder, { className: \"sendbird-thread-ui__parent-message-info placeholder-nil\", type: PlaceHolderTypes.NO_RESULTS, iconSize: \"64px\" }));\n                }\n                case ParentMessageStateTypes.LOADING: {\n                    return (React__default.createElement(PlaceHolder, { className: \"sendbird-thread-ui__parent-message-info placeholder-loading\", type: PlaceHolderTypes.LOADING, iconSize: \"64px\" }));\n                }\n                case ParentMessageStateTypes.INVALID: {\n                    return (React__default.createElement(PlaceHolder, { className: \"sendbird-thread-ui__parent-message-info placeholder-invalid\", type: PlaceHolderTypes.WRONG, iconSize: \"64px\" }));\n                }\n                default: {\n                    return null;\n                }\n            }\n        }\n        else if (parentMessageState === ParentMessageStateTypes.INITIALIZED) {\n            if (typeof renderParentMessageInfo === 'function') {\n                return renderParentMessageInfo();\n            }\n        }\n        return null;\n    }, [\n        parentMessage,\n        parentMessageState,\n        renderParentMessageInfo,\n        renderParentMessageInfoPlaceholder,\n    ]);\n};\n\nvar useMemorizedThreadList = function (_a) {\n    var threadListState = _a.threadListState, renderThreadListPlaceHolder = _a.renderThreadListPlaceHolder;\n    return useMemo(function () {\n        if (threadListState === ThreadListStateTypes.NIL\n            || threadListState === ThreadListStateTypes.LOADING\n            || threadListState === ThreadListStateTypes.INVALID) {\n            if (typeof renderThreadListPlaceHolder === 'function') {\n                return renderThreadListPlaceHolder(threadListState);\n            }\n            switch (threadListState) {\n                case ThreadListStateTypes.LOADING: {\n                    return (React__default.createElement(PlaceHolder, { className: \"sendbird-thread-ui__thread-list placeholder-loading\", type: PlaceHolderTypes.LOADING, iconSize: \"64px\" }));\n                }\n                case ThreadListStateTypes.INVALID: {\n                    return (React__default.createElement(PlaceHolder, { className: \"sendbird-thread-ui__thread-list placeholder-invalid\", type: PlaceHolderTypes.WRONG, iconSize: \"64px\" }));\n                }\n                case ThreadListStateTypes.NIL: {\n                    return React__default.createElement(React__default.Fragment, null);\n                }\n                default: {\n                    return null;\n                }\n            }\n        }\n        return null;\n    }, [\n        threadListState,\n        renderThreadListPlaceHolder,\n    ]);\n};\n\nvar ThreadUI = function (_a) {\n    var _b, _c, _d, _e;\n    var renderHeader = _a.renderHeader, _f = _a.renderParentMessageInfo, renderParentMessageInfo = _f === void 0 ? function () { return React__default.createElement(ParentMessageInfo, { className: \"sendbird-thread-ui__parent-message-info\" }); } : _f, renderMessage = _a.renderMessage, renderMessageInput = _a.renderMessageInput, renderCustomSeparator = _a.renderCustomSeparator, renderParentMessageInfoPlaceholder = _a.renderParentMessageInfoPlaceholder, renderThreadListPlaceHolder = _a.renderThreadListPlaceHolder, renderFileUploadIcon = _a.renderFileUploadIcon, renderVoiceMessageIcon = _a.renderVoiceMessageIcon, renderSendMessageIcon = _a.renderSendMessageIcon;\n    var stores = useSendbirdStateContext().stores;\n    var currentUserId = (_d = (_c = (_b = stores === null || stores === void 0 ? void 0 : stores.sdkStore) === null || _b === void 0 ? void 0 : _b.sdk) === null || _c === void 0 ? void 0 : _c.currentUser) === null || _d === void 0 ? void 0 : _d.userId;\n    var stringSet = useLocalization().stringSet;\n    var _g = useThreadContext(), currentChannel = _g.currentChannel, allThreadMessages = _g.allThreadMessages, parentMessage = _g.parentMessage, parentMessageState = _g.parentMessageState, threadListState = _g.threadListState, hasMorePrev = _g.hasMorePrev, hasMoreNext = _g.hasMoreNext, fetchPrevThreads = _g.fetchPrevThreads, fetchNextThreads = _g.fetchNextThreads, onHeaderActionClick = _g.onHeaderActionClick, onMoveToParentMessage = _g.onMoveToParentMessage;\n    var replyCount = allThreadMessages.length;\n    var isByMe = currentUserId === ((_e = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.sender) === null || _e === void 0 ? void 0 : _e.userId);\n    // Memoized custom components\n    var MemorizedHeader = useMemorizedHeader({ renderHeader: renderHeader });\n    var MemorizedParentMessageInfo = useMemorizedParentMessageInfo({\n        parentMessage: parentMessage,\n        parentMessageState: parentMessageState,\n        renderParentMessageInfo: renderParentMessageInfo,\n        renderParentMessageInfoPlaceholder: renderParentMessageInfoPlaceholder,\n    });\n    var MemorizedThreadList = useMemorizedThreadList({\n        threadListState: threadListState,\n        renderThreadListPlaceHolder: renderThreadListPlaceHolder,\n    });\n    // scroll\n    var _h = useState(0), scrollBottom = _h[0], setScrollBottom = _h[1];\n    var scrollRef = useRef(null);\n    var onScroll = function (e) {\n        var _a;\n        var element = e.target;\n        var scrollTop = element.scrollTop, clientHeight = element.clientHeight, scrollHeight = element.scrollHeight;\n        var threadItemNodes = (_a = scrollRef.current) === null || _a === void 0 ? void 0 : _a.querySelectorAll('.sendbird-thread-list-item');\n        var firstNode = threadItemNodes === null || threadItemNodes === void 0 ? void 0 : threadItemNodes[0];\n        if (isAboutSame(scrollTop, 0, 10) && hasMorePrev) {\n            fetchPrevThreads(function (messages) {\n                var _a;\n                if (messages) {\n                    try {\n                        (_a = firstNode === null || firstNode === void 0 ? void 0 : firstNode.scrollIntoView) === null || _a === void 0 ? void 0 : _a.call(firstNode, { block: 'start', inline: 'nearest' });\n                    }\n                    catch (error) {\n                        //\n                    }\n                }\n            });\n        }\n        if (isAboutSame(clientHeight + scrollTop, scrollHeight, 10) && hasMoreNext) {\n            var scrollTop_1 = scrollTop;\n            fetchNextThreads(function (messages) {\n                if (messages) {\n                    try {\n                        element.scrollTop = scrollTop_1;\n                        if (scrollRef.current) {\n                            scrollRef.current.scrollTop = scrollTop_1;\n                        }\n                    }\n                    catch (error) {\n                        //\n                    }\n                }\n            });\n        }\n        // save the lastest scroll bottom value\n        if (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) {\n            var current = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;\n            setScrollBottom(current.scrollHeight - current.scrollTop - current.offsetHeight);\n        }\n    };\n    return (React__default.createElement(\"div\", { className: 'sendbird-thread-ui' },\n        MemorizedHeader || (React__default.createElement(ThreadHeader, { className: \"sendbird-thread-ui__header\", channelName: getChannelTitle(currentChannel, currentUserId !== null && currentUserId !== void 0 ? currentUserId : '', stringSet), onActionIconClick: onHeaderActionClick, onChannelNameClick: function () {\n                onMoveToParentMessage === null || onMoveToParentMessage === void 0 ? void 0 : onMoveToParentMessage({ message: parentMessage, channel: currentChannel });\n            } })),\n        React__default.createElement(\"div\", { className: \"sendbird-thread-ui--scroll\", ref: scrollRef, onScroll: onScroll },\n            React__default.createElement(MessageProvider, { message: parentMessage, isByMe: isByMe }, MemorizedParentMessageInfo),\n            replyCount > 0 && (React__default.createElement(\"div\", { className: \"sendbird-thread-ui__reply-counts\" },\n                React__default.createElement(Label, { type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_3 }, \"\".concat(replyCount, \" \").concat(replyCount > 1 ? stringSet.THREAD__THREAD_REPLIES : stringSet.THREAD__THREAD_REPLY)))),\n            MemorizedThreadList || (React__default.createElement(ThreadList, { className: \"sendbird-thread-ui__thread-list\", renderMessage: renderMessage, renderCustomSeparator: renderCustomSeparator, scrollRef: scrollRef, scrollBottom: scrollBottom }))),\n        (renderMessageInput === null || renderMessageInput === void 0 ? void 0 : renderMessageInput()) || (React__default.createElement(ThreadMessageInput, { className: \"sendbird-thread-ui__message-input\", renderFileUploadIcon: renderFileUploadIcon, renderVoiceMessageIcon: renderVoiceMessageIcon, renderSendMessageIcon: renderSendMessageIcon }))));\n};\n\nexport { ThreadUI as default };\n//# sourceMappingURL=ThreadUI.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}