{"ast":null,"code":"import { a as __awaiter, b as __generator } from '../../chunks/bundle-BQi9-O76.js';\nimport React__default, { useMemo, useState } from 'react';\nimport { u as useLocalization } from '../../chunks/bundle-cQZ3UZoG.js';\nimport { l as isUserMessage, d as isEditedMessage, m as getUIKitMessageType, n as getUIKitMessageTypes, o as getUIKitFileType, t as truncateString, c as isMultipleFilesMessage, i as isVoiceMessage, p as isThumbnailMessage, q as isSentMessage, r as isVideoMessage, s as isGifMessage, b as isFileMessage } from '../../chunks/bundle-DxTN4_0p.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../chunks/bundle-DhKQeIfP.js';\nimport ImageRenderer from '../../ui/ImageRenderer.js';\nimport Icon, { IconTypes, IconColors } from '../../ui/Icon.js';\nimport TextButton from '../../ui/TextButton.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport EmojiReactions from '../../ui/EmojiReactions.js';\nimport { useThreadContext } from '../context.js';\nimport { VoiceMessageItemBody } from '../../ui/VoiceMessageItemBody.js';\nimport { T as TextFragment } from '../../chunks/bundle-DofK8ySe.js';\nimport { t as tokenizeMessage } from '../../chunks/bundle-GUbI4JcD.js';\nimport { u as useThreadMessageKindKeySelector, a as useFileInfoListWithUploaded, M as MultipleFilesMessageItemBody, T as ThreadMessageKind } from '../../chunks/bundle-ZVq6xGXk.js';\nimport { u as useMediaQueryContext } from '../../chunks/bundle-f-SpnOx2.js';\nimport { C as Colors } from '../../chunks/bundle-rA4afvKU.js';\nimport { o as openURL } from '../../chunks/bundle-BgwzpLeQ.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../withSendbird.js';\nimport '../../ui/ReactionBadge.js';\nimport '../../ui/ReactionButton.js';\nimport '../../chunks/bundle-AfQS5DGf.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport 'react-dom';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport '../../ui/SortByRow.js';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '../../ui/IconButton.js';\nimport '../../ui/BottomSheet.js';\nimport '../../chunks/bundle-CXdo2kR_.js';\nimport '../../ui/Button.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../ui/UserListItem.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '../../chunks/bundle-CFosTNce.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/Checkbox.js';\nimport '../../ui/UserProfile.js';\nimport '../../sendbirdSelectors.js';\nimport '../../chunks/bundle-b6TpX_JP.js';\nimport '../../ui/Tooltip.js';\nimport '../../ui/TooltipWrapper.js';\nimport '../../Message/context.js';\nimport '../../chunks/bundle-BNDaXsLn.js';\nimport '../../chunks/bundle-T6fVCCb7.js';\nimport '../../chunks/bundle-CMLImr6T.js';\nimport '@sendbird/chat/message';\nimport '../context/types.js';\nimport '../../chunks/bundle-CpjASiz4.js';\nimport '../../chunks/bundle-CZUYMubi.js';\nimport '../../ui/ProgressBar.js';\nimport '../../VoicePlayer/useVoicePlayer.js';\nimport '../../ui/PlaybackTime.js';\nimport '../../ui/Loader.js';\nimport '../../ui/MentionLabel.js';\nimport '../../ui/LinkLabel.js';\nimport '../../ui/FileViewer.js';\nimport '../../chunks/bundle-Gdl-rzQC.js';\nfunction ParentMessageInfoItem(_a) {\n  var _this = this;\n  var _b, _c, _d, _e, _f, _g, _h, _j;\n  var className = _a.className,\n    message = _a.message,\n    showFileViewer = _a.showFileViewer,\n    _k = _a.onBeforeDownloadFileMessage,\n    onBeforeDownloadFileMessage = _k === void 0 ? null : _k;\n  var _l = useSendbirdStateContext(),\n    stores = _l.stores,\n    config = _l.config,\n    eventHandlers = _l.eventHandlers;\n  var logger = config.logger;\n  var onPressUserProfileHandler = (_b = eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.reaction) === null || _b === void 0 ? void 0 : _b.onPressUserProfile;\n  var currentUserId = (_d = (_c = stores === null || stores === void 0 ? void 0 : stores.userStore) === null || _c === void 0 ? void 0 : _c.user) === null || _d === void 0 ? void 0 : _d.userId;\n  var stringSet = useLocalization().stringSet;\n  var _m = useThreadContext(),\n    currentChannel = _m.currentChannel,\n    emojiContainer = _m.emojiContainer,\n    nicknamesMap = _m.nicknamesMap,\n    toggleReaction = _m.toggleReaction;\n  var isMobile = useMediaQueryContext().isMobile;\n  var isReactionEnabled = config.groupChannel.enableReactions;\n  var isMentionEnabled = config.groupChannel.enableMention;\n  var threadMessageKindKey = useThreadMessageKindKeySelector({\n    threadMessageKind: ThreadMessageKind.PARENT,\n    isMobile: isMobile\n  });\n  // For MultipleFilesMessage only.\n  var statefulFileInfoList = useFileInfoListWithUploaded(message);\n  var isMentionedMessage = isMentionEnabled && ((_e = message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate) === null || _e === void 0 ? void 0 : _e.length) > 0 && (message === null || message === void 0 ? void 0 : message.mentionedUsers) && message.mentionedUsers.length > 0;\n  // Emoji reactions\n  var isReactionActivated = isReactionEnabled && config.groupChannel.replyType === 'thread' && ((_f = message === null || message === void 0 ? void 0 : message.reactions) === null || _f === void 0 ? void 0 : _f.length) > 0;\n  var tokens = useMemo(function () {\n    var _a;\n    if (isMentionedMessage) {\n      return tokenizeMessage({\n        mentionedUsers: (_a = message === null || message === void 0 ? void 0 : message.mentionedUsers) !== null && _a !== void 0 ? _a : undefined,\n        messageText: message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate,\n        includeMarkdown: config.groupChannel.enableMarkdownForUserMessage\n      });\n    }\n    return tokenizeMessage({\n      messageText: message === null || message === void 0 ? void 0 : message.message,\n      includeMarkdown: config.groupChannel.enableMarkdownForUserMessage\n    });\n  }, [message === null || message === void 0 ? void 0 : message.updatedAt, message === null || message === void 0 ? void 0 : message.message]);\n  // Only for the FileMessageItemBody\n  var downloadFileWithUrl = function () {\n    if (isFileMessage(message)) openURL(message.url);\n  };\n  var handleOnClickTextButton = onBeforeDownloadFileMessage ? function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var allowDownload, err_1;\n      var _a, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!(message.messageType === 'file')) return [3 /*break*/, 4];\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, onBeforeDownloadFileMessage({\n              message: message\n            })];\n          case 2:\n            allowDownload = _c.sent();\n            if (allowDownload) {\n              downloadFileWithUrl();\n            } else {\n              (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, 'ParentMessageInfoItem: Not allowed to download.');\n            }\n            return [3 /*break*/, 4];\n          case 3:\n            err_1 = _c.sent();\n            (_b = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b === void 0 ? void 0 : _b.call(logger, 'ParentMessageInfoItem: Error occurred while determining download continuation:', err_1);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  } : downloadFileWithUrl;\n  // Thumbnail mesage\n  var _o = useState(false),\n    isImageRendered = _o[0],\n    setImageRendered = _o[1];\n  var thumbnailUrl = ((_g = message === null || message === void 0 ? void 0 : message.thumbnails) === null || _g === void 0 ? void 0 : _g.length) > 0 ? (_h = message === null || message === void 0 ? void 0 : message.thumbnails[0]) === null || _h === void 0 ? void 0 : _h.url : '';\n  return React__default.createElement(\"div\", {\n    className: \"sendbird-parent-message-info-item \".concat(className)\n  }, isUserMessage(message) && React__default.createElement(Label, {\n    className: \"sendbird-parent-message-info-item__text-message\",\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, React__default.createElement(TextFragment, {\n    tokens: tokens\n  }), isEditedMessage(message) && React__default.createElement(Label, {\n    className: \"sendbird-parent-message-info-item__text-message edited\",\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_2\n  }, \" \".concat(stringSet.MESSAGE_EDITED, \" \"))),\n  // Instead of the FileMessageItemBody component\n  getUIKitMessageType(message) === getUIKitMessageTypes().FILE && React__default.createElement(\"div\", {\n    className: \"sendbird-parent-message-info-item__file-message\"\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-parent-message-info-item__file-message__file-icon\"\n  }, React__default.createElement(Icon, {\n    className: \"sendbird-parent-message-info-item__file-message__file-icon__icon\",\n    type: {\n      IMAGE: IconTypes.PHOTO,\n      VIDEO: IconTypes.PLAY,\n      AUDIO: IconTypes.FILE_AUDIO,\n      GIF: IconTypes.GIF,\n      OTHERS: IconTypes.FILE_DOCUMENT\n    }[getUIKitFileType(message === null || message === void 0 ? void 0 : message.type)],\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  })), React__default.createElement(TextButton, {\n    className: \"sendbird-parent-message-info-item__file-message__file-name\",\n    onClick: handleOnClickTextButton,\n    color: Colors.ONBACKGROUND_1\n  }, React__default.createElement(Label, {\n    className: \"sendbird-parent-message-info-item__file-message__file-name__text\",\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, truncateString((message === null || message === void 0 ? void 0 : message.name) || (message === null || message === void 0 ? void 0 : message.url), 30)))), isMultipleFilesMessage(message) && React__default.createElement(MultipleFilesMessageItemBody, {\n    className: \"sendbird-parent-message-info-item__multiple-files-message-wrapper\",\n    message: message,\n    isByMe: false,\n    isReactionEnabled: isReactionEnabled,\n    threadMessageKindKey: threadMessageKindKey,\n    statefulFileInfoList: statefulFileInfoList,\n    onBeforeDownloadFileMessage: onBeforeDownloadFileMessage\n  }), isVoiceMessage(message) && React__default.createElement(\"div\", {\n    className: \"sendbird-parent-message-info-item__voice-message\"\n  }, React__default.createElement(VoiceMessageItemBody, {\n    className: \"sendbird-parent-message-info-item__voice-message__item\",\n    message: message,\n    channelUrl: currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url,\n    isByMe: false,\n    isReactionEnabled: isReactionEnabled\n  })), isThumbnailMessage(message) && React__default.createElement(\"div\", {\n    className: \"sendbird-parent-message-info-item__thumbnail-message\",\n    onClick: function () {\n      if (isSentMessage(message)) {\n        showFileViewer === null || showFileViewer === void 0 ? void 0 : showFileViewer(true);\n      }\n    }\n  }, React__default.createElement(ImageRenderer, {\n    className: \"sendbird-parent-message-info-item__thumbnail-message__thumbnail\",\n    url: thumbnailUrl || (message === null || message === void 0 ? void 0 : message.url) || (message === null || message === void 0 ? void 0 : message.plainUrl),\n    alt: message === null || message === void 0 ? void 0 : message.type,\n    width: \"200px\",\n    height: \"148px\",\n    onLoad: function () {\n      setImageRendered(true);\n    },\n    placeHolder: function (_a) {\n      var style = _a.style;\n      return React__default.createElement(\"div\", {\n        className: \"sendbird-parent-message-info-item__thumbnail-message__placeholder\",\n        style: style\n      }, React__default.createElement(\"div\", {\n        className: \"sendbird-parent-message-info-item__thumbnail-message__placeholder__icon\"\n      }, React__default.createElement(Icon, {\n        type: isVideoMessage(message) ? IconTypes.PLAY : IconTypes.PHOTO,\n        fillColor: IconColors.ON_BACKGROUND_2,\n        width: \"34px\",\n        height: \"34px\"\n      })));\n    }\n  }), isVideoMessage(message) && !thumbnailUrl && !isImageRendered && React__default.createElement(\"video\", {\n    className: \"sendbird-parent-message-info-item__thumbnail-message__video\"\n  }, React__default.createElement(\"source\", {\n    src: (message === null || message === void 0 ? void 0 : message.url) || (message === null || message === void 0 ? void 0 : message.plainUrl),\n    type: message === null || message === void 0 ? void 0 : message.type\n  })), React__default.createElement(\"div\", {\n    className: \"sendbird-parent-message-info-item__thumbnail-message__image-cover\"\n  }), (isVideoMessage(message) || isGifMessage(message)) && React__default.createElement(\"div\", {\n    className: \"sendbird-parent-message-info-item__thumbnail-message__icon-wrapper\"\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-parent-message-info-item__thumbnail-message__icon-wrapper__icon\"\n  }, React__default.createElement(Icon, {\n    type: isVideoMessage(message) ? IconTypes.PLAY : IconTypes.GIF,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"34px\",\n    height: \"34px\"\n  })))), getUIKitMessageType(message) === ((_j = getUIKitMessageTypes === null || getUIKitMessageTypes === void 0 ? void 0 : getUIKitMessageTypes()) === null || _j === void 0 ? void 0 : _j.UNKNOWN) && React__default.createElement(\"div\", {\n    className: \"sendbird-parent-message-info-item__unknown-message\"\n  }, React__default.createElement(Label, {\n    className: \"sendbird-parent-message-info-item__unknown-message__header\",\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.UNKNOWN__UNKNOWN_MESSAGE_TYPE), React__default.createElement(Label, {\n    className: \"sendbird-parent-message-info-item__unknown-message__description\",\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_2\n  }, stringSet.UNKNOWN__CANNOT_READ_MESSAGE)), isReactionActivated && React__default.createElement(\"div\", {\n    className: \"sendbird-parent-message-info__reactions\"\n  }, React__default.createElement(EmojiReactions, {\n    userId: currentUserId,\n    message: message,\n    channel: currentChannel,\n    isByMe: false,\n    emojiContainer: emojiContainer,\n    memberNicknamesMap: nicknamesMap,\n    toggleReaction: toggleReaction,\n    onPressUserProfile: onPressUserProfileHandler\n  })));\n}\nexport { ParentMessageInfoItem as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { a as __awaiter, b as __generator } from '../../chunks/bundle-BQi9-O76.js';\nimport React__default, { useMemo, useState } from 'react';\nimport { u as useLocalization } from '../../chunks/bundle-cQZ3UZoG.js';\nimport { l as isUserMessage, d as isEditedMessage, m as getUIKitMessageType, n as getUIKitMessageTypes, o as getUIKitFileType, t as truncateString, c as isMultipleFilesMessage, i as isVoiceMessage, p as isThumbnailMessage, q as isSentMessage, r as isVideoMessage, s as isGifMessage, b as isFileMessage } from '../../chunks/bundle-DxTN4_0p.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../chunks/bundle-DhKQeIfP.js';\nimport ImageRenderer from '../../ui/ImageRenderer.js';\nimport Icon, { IconTypes, IconColors } from '../../ui/Icon.js';\nimport TextButton from '../../ui/TextButton.js';\nimport { useSendbirdStateContext } from '../../useSendbirdStateContext.js';\nimport EmojiReactions from '../../ui/EmojiReactions.js';\nimport { useThreadContext } from '../context.js';\nimport { VoiceMessageItemBody } from '../../ui/VoiceMessageItemBody.js';\nimport { T as TextFragment } from '../../chunks/bundle-DofK8ySe.js';\nimport { t as tokenizeMessage } from '../../chunks/bundle-GUbI4JcD.js';\nimport { u as useThreadMessageKindKeySelector, a as useFileInfoListWithUploaded, M as MultipleFilesMessageItemBody, T as ThreadMessageKind } from '../../chunks/bundle-ZVq6xGXk.js';\nimport { u as useMediaQueryContext } from '../../chunks/bundle-f-SpnOx2.js';\nimport { C as Colors } from '../../chunks/bundle-rA4afvKU.js';\nimport { o as openURL } from '../../chunks/bundle-BgwzpLeQ.js';\nimport '../../chunks/bundle-Bwk5KPwK.js';\nimport '../../chunks/bundle-bdDHjHH6.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../chunks/bundle-CNWAfTVw.js';\nimport '../../chunks/bundle-CA85nVxp.js';\nimport '../../withSendbird.js';\nimport '../../ui/ReactionBadge.js';\nimport '../../ui/ReactionButton.js';\nimport '../../chunks/bundle-AfQS5DGf.js';\nimport '../../chunks/bundle-CwKZj-B6.js';\nimport 'react-dom';\nimport '@sendbird/chat';\nimport '@sendbird/chat/openChannel';\nimport '../../ui/SortByRow.js';\nimport '../../chunks/bundle-etuaqevl.js';\nimport '../../ui/IconButton.js';\nimport '../../ui/BottomSheet.js';\nimport '../../chunks/bundle-CXdo2kR_.js';\nimport '../../ui/Button.js';\nimport '@sendbird/uikit-tools';\nimport 'css-vars-ponyfill';\nimport '../../chunks/bundle-DDeWOERD.js';\nimport '../../chunks/bundle-DCMGp6rH.js';\nimport '../../ui/UserListItem.js';\nimport '../../chunks/bundle-BrTJ5Zbd.js';\nimport '../../chunks/bundle-CFosTNce.js';\nimport '../../chunks/bundle-DXRRGizV.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/Checkbox.js';\nimport '../../ui/UserProfile.js';\nimport '../../sendbirdSelectors.js';\nimport '../../chunks/bundle-b6TpX_JP.js';\nimport '../../ui/Tooltip.js';\nimport '../../ui/TooltipWrapper.js';\nimport '../../Message/context.js';\nimport '../../chunks/bundle-BNDaXsLn.js';\nimport '../../chunks/bundle-T6fVCCb7.js';\nimport '../../chunks/bundle-CMLImr6T.js';\nimport '@sendbird/chat/message';\nimport '../context/types.js';\nimport '../../chunks/bundle-CpjASiz4.js';\nimport '../../chunks/bundle-CZUYMubi.js';\nimport '../../ui/ProgressBar.js';\nimport '../../VoicePlayer/useVoicePlayer.js';\nimport '../../ui/PlaybackTime.js';\nimport '../../ui/Loader.js';\nimport '../../ui/MentionLabel.js';\nimport '../../ui/LinkLabel.js';\nimport '../../ui/FileViewer.js';\nimport '../../chunks/bundle-Gdl-rzQC.js';\n\nfunction ParentMessageInfoItem(_a) {\n    var _this = this;\n    var _b, _c, _d, _e, _f, _g, _h, _j;\n    var className = _a.className, message = _a.message, showFileViewer = _a.showFileViewer, _k = _a.onBeforeDownloadFileMessage, onBeforeDownloadFileMessage = _k === void 0 ? null : _k;\n    var _l = useSendbirdStateContext(), stores = _l.stores, config = _l.config, eventHandlers = _l.eventHandlers;\n    var logger = config.logger;\n    var onPressUserProfileHandler = (_b = eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.reaction) === null || _b === void 0 ? void 0 : _b.onPressUserProfile;\n    var currentUserId = (_d = (_c = stores === null || stores === void 0 ? void 0 : stores.userStore) === null || _c === void 0 ? void 0 : _c.user) === null || _d === void 0 ? void 0 : _d.userId;\n    var stringSet = useLocalization().stringSet;\n    var _m = useThreadContext(), currentChannel = _m.currentChannel, emojiContainer = _m.emojiContainer, nicknamesMap = _m.nicknamesMap, toggleReaction = _m.toggleReaction;\n    var isMobile = useMediaQueryContext().isMobile;\n    var isReactionEnabled = config.groupChannel.enableReactions;\n    var isMentionEnabled = config.groupChannel.enableMention;\n    var threadMessageKindKey = useThreadMessageKindKeySelector({\n        threadMessageKind: ThreadMessageKind.PARENT,\n        isMobile: isMobile,\n    });\n    // For MultipleFilesMessage only.\n    var statefulFileInfoList = useFileInfoListWithUploaded(message);\n    var isMentionedMessage = isMentionEnabled\n        && ((_e = message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate) === null || _e === void 0 ? void 0 : _e.length) > 0\n        && (message === null || message === void 0 ? void 0 : message.mentionedUsers)\n        && message.mentionedUsers.length > 0;\n    // Emoji reactions\n    var isReactionActivated = isReactionEnabled\n        && config.groupChannel.replyType === 'thread'\n        && ((_f = message === null || message === void 0 ? void 0 : message.reactions) === null || _f === void 0 ? void 0 : _f.length) > 0;\n    var tokens = useMemo(function () {\n        var _a;\n        if (isMentionedMessage) {\n            return tokenizeMessage({\n                mentionedUsers: (_a = message === null || message === void 0 ? void 0 : message.mentionedUsers) !== null && _a !== void 0 ? _a : undefined,\n                messageText: message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate,\n                includeMarkdown: config.groupChannel.enableMarkdownForUserMessage,\n            });\n        }\n        return tokenizeMessage({\n            messageText: message === null || message === void 0 ? void 0 : message.message,\n            includeMarkdown: config.groupChannel.enableMarkdownForUserMessage,\n        });\n    }, [message === null || message === void 0 ? void 0 : message.updatedAt, message === null || message === void 0 ? void 0 : message.message]);\n    // Only for the FileMessageItemBody\n    var downloadFileWithUrl = function () {\n        if (isFileMessage(message))\n            openURL(message.url);\n    };\n    var handleOnClickTextButton = onBeforeDownloadFileMessage\n        ? function () { return __awaiter(_this, void 0, void 0, function () {\n            var allowDownload, err_1;\n            var _a, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (!(message.messageType === 'file')) return [3 /*break*/, 4];\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, onBeforeDownloadFileMessage({ message: message })];\n                    case 2:\n                        allowDownload = _c.sent();\n                        if (allowDownload) {\n                            downloadFileWithUrl();\n                        }\n                        else {\n                            (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, 'ParentMessageInfoItem: Not allowed to download.');\n                        }\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_1 = _c.sent();\n                        (_b = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b === void 0 ? void 0 : _b.call(logger, 'ParentMessageInfoItem: Error occurred while determining download continuation:', err_1);\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        }); }\n        : downloadFileWithUrl;\n    // Thumbnail mesage\n    var _o = useState(false), isImageRendered = _o[0], setImageRendered = _o[1];\n    var thumbnailUrl = ((_g = message === null || message === void 0 ? void 0 : message.thumbnails) === null || _g === void 0 ? void 0 : _g.length) > 0\n        ? (_h = message === null || message === void 0 ? void 0 : message.thumbnails[0]) === null || _h === void 0 ? void 0 : _h.url : '';\n    return (React__default.createElement(\"div\", { className: \"sendbird-parent-message-info-item \".concat(className) },\n        isUserMessage(message) && (React__default.createElement(Label, { className: \"sendbird-parent-message-info-item__text-message\", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_1 },\n            React__default.createElement(TextFragment, { tokens: tokens }),\n            isEditedMessage(message) && (React__default.createElement(Label, { className: \"sendbird-parent-message-info-item__text-message edited\", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_2 }, \" \".concat(stringSet.MESSAGE_EDITED, \" \"))))),\n        // Instead of the FileMessageItemBody component\n        (getUIKitMessageType(message) === getUIKitMessageTypes().FILE) && (React__default.createElement(\"div\", { className: \"sendbird-parent-message-info-item__file-message\" },\n            React__default.createElement(\"div\", { className: \"sendbird-parent-message-info-item__file-message__file-icon\" },\n                React__default.createElement(Icon, { className: \"sendbird-parent-message-info-item__file-message__file-icon__icon\", type: {\n                        IMAGE: IconTypes.PHOTO,\n                        VIDEO: IconTypes.PLAY,\n                        AUDIO: IconTypes.FILE_AUDIO,\n                        GIF: IconTypes.GIF,\n                        OTHERS: IconTypes.FILE_DOCUMENT,\n                    }[getUIKitFileType(message === null || message === void 0 ? void 0 : message.type)], fillColor: IconColors.PRIMARY, width: \"24px\", height: \"24px\" })),\n            React__default.createElement(TextButton, { className: \"sendbird-parent-message-info-item__file-message__file-name\", onClick: handleOnClickTextButton, color: Colors.ONBACKGROUND_1 },\n                React__default.createElement(Label, { className: \"sendbird-parent-message-info-item__file-message__file-name__text\", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_1 }, truncateString((message === null || message === void 0 ? void 0 : message.name) || (message === null || message === void 0 ? void 0 : message.url), 30))))),\n        isMultipleFilesMessage(message) && (React__default.createElement(MultipleFilesMessageItemBody, { className: \"sendbird-parent-message-info-item__multiple-files-message-wrapper\", message: message, isByMe: false, isReactionEnabled: isReactionEnabled, threadMessageKindKey: threadMessageKindKey, statefulFileInfoList: statefulFileInfoList, onBeforeDownloadFileMessage: onBeforeDownloadFileMessage })),\n        isVoiceMessage(message) && (React__default.createElement(\"div\", { className: \"sendbird-parent-message-info-item__voice-message\" },\n            React__default.createElement(VoiceMessageItemBody, { className: \"sendbird-parent-message-info-item__voice-message__item\", message: message, channelUrl: currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url, isByMe: false, isReactionEnabled: isReactionEnabled }))),\n        isThumbnailMessage(message) && (React__default.createElement(\"div\", { className: \"sendbird-parent-message-info-item__thumbnail-message\", onClick: function () {\n                if (isSentMessage(message)) {\n                    showFileViewer === null || showFileViewer === void 0 ? void 0 : showFileViewer(true);\n                }\n            } },\n            React__default.createElement(ImageRenderer, { className: \"sendbird-parent-message-info-item__thumbnail-message__thumbnail\", url: thumbnailUrl || (message === null || message === void 0 ? void 0 : message.url) || (message === null || message === void 0 ? void 0 : message.plainUrl), alt: message === null || message === void 0 ? void 0 : message.type, width: \"200px\", height: \"148px\", onLoad: function () { setImageRendered(true); }, placeHolder: function (_a) {\n                    var style = _a.style;\n                    return (React__default.createElement(\"div\", { className: \"sendbird-parent-message-info-item__thumbnail-message__placeholder\", style: style },\n                        React__default.createElement(\"div\", { className: \"sendbird-parent-message-info-item__thumbnail-message__placeholder__icon\" },\n                            React__default.createElement(Icon, { type: isVideoMessage(message) ? IconTypes.PLAY : IconTypes.PHOTO, fillColor: IconColors.ON_BACKGROUND_2, width: \"34px\", height: \"34px\" }))));\n                } }),\n            (isVideoMessage(message) && !thumbnailUrl) && !isImageRendered && (React__default.createElement(\"video\", { className: \"sendbird-parent-message-info-item__thumbnail-message__video\" },\n                React__default.createElement(\"source\", { src: (message === null || message === void 0 ? void 0 : message.url) || (message === null || message === void 0 ? void 0 : message.plainUrl), type: message === null || message === void 0 ? void 0 : message.type }))),\n            React__default.createElement(\"div\", { className: \"sendbird-parent-message-info-item__thumbnail-message__image-cover\" }),\n            (isVideoMessage(message) || isGifMessage(message)) && (React__default.createElement(\"div\", { className: \"sendbird-parent-message-info-item__thumbnail-message__icon-wrapper\" },\n                React__default.createElement(\"div\", { className: \"sendbird-parent-message-info-item__thumbnail-message__icon-wrapper__icon\" },\n                    React__default.createElement(Icon, { type: isVideoMessage(message) ? IconTypes.PLAY : IconTypes.GIF, fillColor: IconColors.ON_BACKGROUND_2, width: \"34px\", height: \"34px\" })))))),\n        getUIKitMessageType(message) === ((_j = getUIKitMessageTypes === null || getUIKitMessageTypes === void 0 ? void 0 : getUIKitMessageTypes()) === null || _j === void 0 ? void 0 : _j.UNKNOWN) && (React__default.createElement(\"div\", { className: \"sendbird-parent-message-info-item__unknown-message\" },\n            React__default.createElement(Label, { className: \"sendbird-parent-message-info-item__unknown-message__header\", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.UNKNOWN__UNKNOWN_MESSAGE_TYPE),\n            React__default.createElement(Label, { className: \"sendbird-parent-message-info-item__unknown-message__description\", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_2 }, stringSet.UNKNOWN__CANNOT_READ_MESSAGE))),\n        isReactionActivated && (React__default.createElement(\"div\", { className: \"sendbird-parent-message-info__reactions\" },\n            React__default.createElement(EmojiReactions, { userId: currentUserId, message: message, channel: currentChannel, isByMe: false, emojiContainer: emojiContainer, memberNicknamesMap: nicknamesMap, toggleReaction: toggleReaction, onPressUserProfile: onPressUserProfileHandler })))));\n}\n\nexport { ParentMessageInfoItem as default };\n//# sourceMappingURL=ParentMessageInfoItem.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}