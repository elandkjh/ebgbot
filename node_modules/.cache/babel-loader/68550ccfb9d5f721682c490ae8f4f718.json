{"ast":null,"code":"import React__default, { createContext, useReducer, useContext } from 'react';\nimport { _ as __assign } from './bundle-BQi9-O76.js';\nimport { j as VOICE_MESSAGE_FILE_NAME__XM4A, k as VOICE_MESSAGE_MIME_TYPE__XM4A, e as VOICE_MESSAGE_FILE_NAME, a as VOICE_MESSAGE_MIME_TYPE, l as VOICE_PLAYER_ROOT_ID, V as VOICE_PLAYER_AUDIO_ID } from './bundle-DCMGp6rH.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { a as isSafari } from './bundle-CNWAfTVw.js';\nvar INITIALIZE_AUDIO_UNIT = 'INITIALIZE_AUDIO_UNIT';\nvar RESET_AUDIO_UNIT = 'RESET_AUDIO_UNIT';\nvar SET_CURRENT_PLAYER = 'SET_CURRENT_PLAYER';\nvar ON_VOICE_PLAYER_PLAY = 'ON_VOICE_PLAYER_PLAY';\nvar ON_VOICE_PLAYER_PAUSE = 'ON_VOICE_PLAYER_PAUSE';\nvar ON_CURRENT_TIME_UPDATE = 'ON_CURRENT_TIME_UPDATE';\nvar VOICE_PLAYER_STATUS = {\n  IDLE: 'IDLE',\n  PREPARING: 'PREPARING',\n  PLAYING: 'PLAYING',\n  PAUSED: 'PAUSED',\n  COMPLETED: 'COMPLETED'\n};\nvar AudioUnitDefaultValue = function () {\n  return {\n    audioFile: null,\n    playbackTime: 0,\n    duration: 1000,\n    playingStatus: VOICE_PLAYER_STATUS.IDLE\n  };\n};\nvar voicePlayerInitialState = {\n  currentPlayer: null,\n  currentGroupKey: '',\n  audioStorage: {}\n};\nfunction voicePlayerReducer(state, action) {\n  var _a, _b, _c, _d, _e;\n  var _f, _g, _h, _j;\n  switch (action.type) {\n    case INITIALIZE_AUDIO_UNIT:\n      {\n        var groupKey = action.payload.groupKey;\n        var audioUnit = ((_f = state.audioStorage) === null || _f === void 0 ? void 0 : _f[groupKey]) ? state.audioStorage[groupKey] : AudioUnitDefaultValue();\n        audioUnit.playingStatus = VOICE_PLAYER_STATUS.PREPARING;\n        return __assign(__assign({}, state), {\n          audioStorage: __assign(__assign({}, state.audioStorage), (_a = {}, _a[groupKey] = audioUnit, _a))\n        });\n      }\n    case RESET_AUDIO_UNIT:\n      {\n        var groupKey = action.payload.groupKey;\n        return __assign(__assign({}, state), {\n          audioStorage: __assign(__assign({}, state.audioStorage), (_b = {}, _b[groupKey] = AudioUnitDefaultValue(), _b))\n        });\n      }\n    case SET_CURRENT_PLAYER:\n      {\n        var _k = action.payload,\n          audioPlayer = _k.audioPlayer,\n          groupKey = _k.groupKey;\n        return __assign(__assign({}, state), {\n          currentPlayer: audioPlayer,\n          currentGroupKey: groupKey\n        });\n      }\n    case ON_VOICE_PLAYER_PLAY:\n      {\n        var _l = action.payload,\n          groupKey = _l.groupKey,\n          audioFile = _l.audioFile;\n        var audioUnit = ((_g = state.audioStorage) === null || _g === void 0 ? void 0 : _g[groupKey]) ? state.audioStorage[groupKey] : AudioUnitDefaultValue();\n        audioUnit.audioFile = audioFile;\n        audioUnit.playingStatus = VOICE_PLAYER_STATUS.PLAYING;\n        return __assign(__assign({}, state), {\n          audioStorage: __assign(__assign({}, state.audioStorage), (_c = {}, _c[groupKey] = audioUnit, _c))\n        });\n      }\n    case ON_VOICE_PLAYER_PAUSE:\n      {\n        var _m = action.payload,\n          groupKey = _m.groupKey,\n          duration = _m.duration,\n          currentTime = _m.currentTime;\n        var audioUnit = ((_h = state.audioStorage) === null || _h === void 0 ? void 0 : _h[groupKey]) ? state.audioStorage[groupKey] : AudioUnitDefaultValue();\n        audioUnit.playingStatus = VOICE_PLAYER_STATUS.PAUSED;\n        if (duration === currentTime) {\n          audioUnit.playbackTime = 0;\n        }\n        return __assign(__assign({}, state), {\n          audioStorage: __assign(__assign({}, state.audioStorage), (_d = {}, _d[groupKey] = audioUnit, _d))\n        });\n      }\n    case ON_CURRENT_TIME_UPDATE:\n      {\n        var groupKey = action.payload.groupKey;\n        var _o = state.currentPlayer,\n          currentTime = _o.currentTime,\n          duration = _o.duration;\n        var audioUnit = ((_j = state.audioStorage) === null || _j === void 0 ? void 0 : _j[groupKey]) ? state.audioStorage[groupKey] : AudioUnitDefaultValue();\n        // sometimes the final time update is fired AFTER the pause event when audio is finished\n        if (audioUnit.playbackTime === audioUnit.duration && audioUnit.playingStatus === VOICE_PLAYER_STATUS.PAUSED) {\n          audioUnit.playbackTime = 0;\n        } else if (currentTime > 0 && duration > 0) {\n          audioUnit.playbackTime = currentTime;\n          audioUnit.duration = duration;\n        }\n        return __assign(__assign({}, state), {\n          audioStorage: __assign(__assign({}, state.audioStorage), (_e = {}, _e[groupKey] = audioUnit, _e))\n        });\n      }\n    default:\n      return state;\n  }\n}\nvar generateGroupKey = function (channelUrl, key) {\n  if (channelUrl === void 0) {\n    channelUrl = '';\n  }\n  if (key === void 0) {\n    key = '';\n  }\n  return \"\".concat(channelUrl, \"-\").concat(key);\n};\n/**\n * Parses and returns the correct MIME type based on the browser.\n * If the browser is Safari and the file type is m4a, use 'audio/x-m4a' for the audio player.\n * Safari doesn't support 'audio/mp3' well.\n * Also, 'audio/m4a' should be converted to 'audio/x-m4a' to be correctly played in Safari.\n * @link: https://sendbird.atlassian.net/browse/CLNP-2997\n *\n * @param mimeType - The original MIME type.\n * @returns Converted file name and MIME type.\n */\nvar getParsedVoiceAudioFileInfo = function (mimeType) {\n  if (isSafari(navigator.userAgent) && mimeType.includes('m4a')) {\n    return {\n      name: VOICE_MESSAGE_FILE_NAME__XM4A,\n      mimeType: VOICE_MESSAGE_MIME_TYPE__XM4A\n    };\n  }\n  return {\n    name: VOICE_MESSAGE_FILE_NAME,\n    mimeType: VOICE_MESSAGE_MIME_TYPE\n  };\n};\nvar ALL = 'ALL';\nvar noop = function () {};\nvar VoicePlayerStoreDefaultValue = {\n  currentGroupKey: '',\n  currentPlayer: null,\n  audioStorage: {}\n};\nvar Context = createContext({\n  play: noop,\n  pause: noop,\n  stop: noop,\n  voicePlayerStore: VoicePlayerStoreDefaultValue\n});\nvar VoicePlayerProvider = function (_a) {\n  var children = _a.children;\n  var _b = useReducer(voicePlayerReducer, voicePlayerInitialState),\n    voicePlayerStore = _b[0],\n    voicePlayerDispatcher = _b[1];\n  var currentGroupKey = voicePlayerStore.currentGroupKey,\n    currentPlayer = voicePlayerStore.currentPlayer,\n    audioStorage = voicePlayerStore.audioStorage;\n  var config = useSendbirdStateContext().config;\n  var logger = config.logger;\n  var stop = function (text) {\n    if (text === void 0) {\n      text = '';\n    }\n    if (currentGroupKey.includes(text)) {\n      logger.info('VoicePlayer: Pause playing(by text).');\n      pause(currentGroupKey);\n    }\n  };\n  var pause = function (groupKey) {\n    if (currentPlayer) {\n      if (groupKey === currentGroupKey) {\n        logger.info('VoicePlayer: Pause playing(by group key).');\n        currentPlayer.pause();\n      } else if (groupKey === ALL) {\n        logger.info('VoicePlayer: Pause playing(all).');\n        currentPlayer.pause();\n      }\n    } else {\n      logger.warning('VoicePlayer: No currentPlayer to pause.');\n    }\n  };\n  var play = function (_a) {\n    var groupKey = _a.groupKey,\n      audioFile = _a.audioFile,\n      _b = _a.audioFileUrl,\n      audioFileUrl = _b === void 0 ? '' : _b,\n      _c = _a.audioFileMimeType,\n      audioFileMimeType = _c === void 0 ? VOICE_MESSAGE_MIME_TYPE : _c;\n    if (groupKey !== currentGroupKey) {\n      pause(currentGroupKey);\n    }\n    // Clear the previous AudioPlayer element\n    var voicePlayerRoot = document.getElementById(VOICE_PLAYER_ROOT_ID);\n    var voicePlayerAudioElement = document.getElementById(VOICE_PLAYER_AUDIO_ID);\n    if (voicePlayerRoot && voicePlayerAudioElement) {\n      voicePlayerRoot.removeChild(voicePlayerAudioElement);\n    }\n    logger.info('VoicePlayer: Start getting audio file.');\n    new Promise(function (resolve, reject) {\n      var _a;\n      voicePlayerDispatcher({\n        type: INITIALIZE_AUDIO_UNIT,\n        payload: {\n          groupKey: groupKey\n        }\n      });\n      // audio file passed as a parameter\n      if (audioFile) {\n        logger.info('VoicePlayer: Use the audioFile instance.');\n        resolve(audioFile);\n        return;\n      }\n      // audio file from the audioStorage\n      var cachedAudioFile = (_a = audioStorage === null || audioStorage === void 0 ? void 0 : audioStorage[groupKey]) === null || _a === void 0 ? void 0 : _a.audioFile;\n      if (cachedAudioFile) {\n        logger.info('VoicePlayer: Get from the audioStorage.');\n        resolve(cachedAudioFile);\n        return;\n      }\n      // fetch the audio file from URL\n      fetch(audioFileUrl).then(function (res) {\n        return res.blob();\n      }).then(function (blob) {\n        var audioFile = new File([blob], getParsedVoiceAudioFileInfo(audioFileMimeType).name, {\n          lastModified: new Date().getTime(),\n          type: getParsedVoiceAudioFileInfo(audioFileMimeType).mimeType\n        });\n        resolve(audioFile);\n        logger.info('VoicePlayer: Get the audioFile from URL.');\n      }).catch(reject);\n    }).then(function (audioFile) {\n      var _a;\n      var voicePlayerRoot = document.getElementById(VOICE_PLAYER_ROOT_ID);\n      logger.info('VoicePlayer: Succeeded getting audio file.', {\n        audioFile: audioFile\n      });\n      var currentAudioUnit = audioStorage[groupKey] || AudioUnitDefaultValue();\n      var audioPlayer = new Audio((_a = URL === null || URL === void 0 ? void 0 : URL.createObjectURL) === null || _a === void 0 ? void 0 : _a.call(URL, audioFile));\n      audioPlayer.id = VOICE_PLAYER_AUDIO_ID;\n      audioPlayer.currentTime = currentAudioUnit.playbackTime;\n      audioPlayer.volume = 1;\n      audioPlayer.loop = false;\n      audioPlayer.onplaying = function () {\n        logger.info('VoicePlayer: OnPlaying event is called from audioPlayer', {\n          groupKey: groupKey,\n          audioPlayer: audioPlayer\n        });\n        voicePlayerDispatcher({\n          type: ON_VOICE_PLAYER_PLAY,\n          payload: {\n            groupKey: groupKey,\n            audioFile: audioFile\n          }\n        });\n      };\n      audioPlayer.onpause = function () {\n        logger.info('VoicePlayer: OnPause event is called from audioPlayer', {\n          groupKey: groupKey,\n          audioPlayer: audioPlayer\n        });\n        voicePlayerDispatcher({\n          type: ON_VOICE_PLAYER_PAUSE,\n          payload: {\n            groupKey: groupKey,\n            duration: audioPlayer.duration,\n            currentTime: audioPlayer.currentTime\n          }\n        });\n      };\n      audioPlayer.ontimeupdate = function () {\n        voicePlayerDispatcher({\n          type: ON_CURRENT_TIME_UPDATE,\n          payload: {\n            groupKey: groupKey\n          }\n        });\n      };\n      audioPlayer.onerror = function (error) {\n        logger.error('VoicePlayer: Failed to load the audioFile on the audio player.', error);\n        voicePlayerDispatcher({\n          type: RESET_AUDIO_UNIT,\n          payload: {\n            groupKey: groupKey\n          }\n        });\n      };\n      audioPlayer.dataset.sbGroupId = groupKey;\n      // clean up the previous audio player\n      try {\n        voicePlayerRoot === null || voicePlayerRoot === void 0 ? void 0 : voicePlayerRoot.childNodes.forEach(function (node) {\n          var _a, _b;\n          var element = node;\n          var thisGroupKey = (_a = element.dataset) === null || _a === void 0 ? void 0 : _a.sbGroupKey;\n          if (thisGroupKey !== groupKey) {\n            (_b = element === null || element === void 0 ? void 0 : element.pause) === null || _b === void 0 ? void 0 : _b.call(element);\n            voicePlayerRoot.removeChild(element);\n            logger.info('VoicePlayer: Removed other player.', {\n              element: element\n            });\n          }\n        });\n      } finally {\n        audioPlayer === null || audioPlayer === void 0 ? void 0 : audioPlayer.play();\n        voicePlayerRoot === null || voicePlayerRoot === void 0 ? void 0 : voicePlayerRoot.appendChild(audioPlayer);\n        voicePlayerDispatcher({\n          type: SET_CURRENT_PLAYER,\n          payload: {\n            groupKey: groupKey,\n            audioPlayer: audioPlayer\n          }\n        });\n        logger.info('VoicePlayer: Succeeded playing audio player.', {\n          groupKey: groupKey,\n          audioPlayer: audioPlayer\n        });\n      }\n    }).catch(function (error) {\n      logger.warning('VoicePlayer: Failed loading audio file with URL.', error);\n      voicePlayerDispatcher({\n        type: RESET_AUDIO_UNIT,\n        payload: {\n          groupKey: groupKey\n        }\n      });\n    });\n  };\n  return React__default.createElement(Context.Provider, {\n    value: {\n      play: play,\n      pause: pause,\n      stop: stop,\n      voicePlayerStore: voicePlayerStore\n    }\n  }, React__default.createElement(\"div\", {\n    id: VOICE_PLAYER_ROOT_ID,\n    style: {\n      display: 'none'\n    }\n  }), children);\n};\nvar useVoicePlayerContext = function () {\n  return useContext(Context);\n};\nexport { AudioUnitDefaultValue as A, VOICE_PLAYER_STATUS as V, ALL as a, VoicePlayerProvider as b, generateGroupKey as g, useVoicePlayerContext as u };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React__default, { createContext, useReducer, useContext } from 'react';\nimport { _ as __assign } from './bundle-BQi9-O76.js';\nimport { j as VOICE_MESSAGE_FILE_NAME__XM4A, k as VOICE_MESSAGE_MIME_TYPE__XM4A, e as VOICE_MESSAGE_FILE_NAME, a as VOICE_MESSAGE_MIME_TYPE, l as VOICE_PLAYER_ROOT_ID, V as VOICE_PLAYER_AUDIO_ID } from './bundle-DCMGp6rH.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nimport { a as isSafari } from './bundle-CNWAfTVw.js';\n\nvar INITIALIZE_AUDIO_UNIT = 'INITIALIZE_AUDIO_UNIT';\nvar RESET_AUDIO_UNIT = 'RESET_AUDIO_UNIT';\nvar SET_CURRENT_PLAYER = 'SET_CURRENT_PLAYER';\nvar ON_VOICE_PLAYER_PLAY = 'ON_VOICE_PLAYER_PLAY';\nvar ON_VOICE_PLAYER_PAUSE = 'ON_VOICE_PLAYER_PAUSE';\nvar ON_CURRENT_TIME_UPDATE = 'ON_CURRENT_TIME_UPDATE';\n\nvar VOICE_PLAYER_STATUS = {\n    IDLE: 'IDLE',\n    PREPARING: 'PREPARING',\n    PLAYING: 'PLAYING',\n    PAUSED: 'PAUSED',\n    COMPLETED: 'COMPLETED',\n};\nvar AudioUnitDefaultValue = function () { return ({\n    audioFile: null,\n    playbackTime: 0,\n    duration: 1000,\n    playingStatus: VOICE_PLAYER_STATUS.IDLE,\n}); };\nvar voicePlayerInitialState = {\n    currentPlayer: null,\n    currentGroupKey: '',\n    audioStorage: {},\n};\n\nfunction voicePlayerReducer(state, action) {\n    var _a, _b, _c, _d, _e;\n    var _f, _g, _h, _j;\n    switch (action.type) {\n        case INITIALIZE_AUDIO_UNIT: {\n            var groupKey = action.payload.groupKey;\n            var audioUnit = (((_f = state.audioStorage) === null || _f === void 0 ? void 0 : _f[groupKey]) ? state.audioStorage[groupKey] : AudioUnitDefaultValue());\n            audioUnit.playingStatus = VOICE_PLAYER_STATUS.PREPARING;\n            return __assign(__assign({}, state), { audioStorage: __assign(__assign({}, state.audioStorage), (_a = {}, _a[groupKey] = audioUnit, _a)) });\n        }\n        case RESET_AUDIO_UNIT: {\n            var groupKey = action.payload.groupKey;\n            return __assign(__assign({}, state), { audioStorage: __assign(__assign({}, state.audioStorage), (_b = {}, _b[groupKey] = AudioUnitDefaultValue(), _b)) });\n        }\n        case SET_CURRENT_PLAYER: {\n            var _k = action.payload, audioPlayer = _k.audioPlayer, groupKey = _k.groupKey;\n            return __assign(__assign({}, state), { currentPlayer: audioPlayer, currentGroupKey: groupKey });\n        }\n        case ON_VOICE_PLAYER_PLAY: {\n            var _l = action.payload, groupKey = _l.groupKey, audioFile = _l.audioFile;\n            var audioUnit = (((_g = state.audioStorage) === null || _g === void 0 ? void 0 : _g[groupKey]) ? state.audioStorage[groupKey] : AudioUnitDefaultValue());\n            audioUnit.audioFile = audioFile;\n            audioUnit.playingStatus = VOICE_PLAYER_STATUS.PLAYING;\n            return __assign(__assign({}, state), { audioStorage: __assign(__assign({}, state.audioStorage), (_c = {}, _c[groupKey] = audioUnit, _c)) });\n        }\n        case ON_VOICE_PLAYER_PAUSE: {\n            var _m = action.payload, groupKey = _m.groupKey, duration = _m.duration, currentTime = _m.currentTime;\n            var audioUnit = (((_h = state.audioStorage) === null || _h === void 0 ? void 0 : _h[groupKey]) ? state.audioStorage[groupKey] : AudioUnitDefaultValue());\n            audioUnit.playingStatus = VOICE_PLAYER_STATUS.PAUSED;\n            if (duration === currentTime) {\n                audioUnit.playbackTime = 0;\n            }\n            return __assign(__assign({}, state), { audioStorage: __assign(__assign({}, state.audioStorage), (_d = {}, _d[groupKey] = audioUnit, _d)) });\n        }\n        case ON_CURRENT_TIME_UPDATE: {\n            var groupKey = action.payload.groupKey;\n            var _o = state.currentPlayer, currentTime = _o.currentTime, duration = _o.duration;\n            var audioUnit = (((_j = state.audioStorage) === null || _j === void 0 ? void 0 : _j[groupKey]) ? state.audioStorage[groupKey] : AudioUnitDefaultValue());\n            // sometimes the final time update is fired AFTER the pause event when audio is finished\n            if (audioUnit.playbackTime === audioUnit.duration && audioUnit.playingStatus === VOICE_PLAYER_STATUS.PAUSED) {\n                audioUnit.playbackTime = 0;\n            }\n            else if (currentTime > 0 && duration > 0) {\n                audioUnit.playbackTime = currentTime;\n                audioUnit.duration = duration;\n            }\n            return __assign(__assign({}, state), { audioStorage: __assign(__assign({}, state.audioStorage), (_e = {}, _e[groupKey] = audioUnit, _e)) });\n        }\n        default:\n            return state;\n    }\n}\n\nvar generateGroupKey = function (channelUrl, key) {\n    if (channelUrl === void 0) { channelUrl = ''; }\n    if (key === void 0) { key = ''; }\n    return (\"\".concat(channelUrl, \"-\").concat(key));\n};\n/**\n * Parses and returns the correct MIME type based on the browser.\n * If the browser is Safari and the file type is m4a, use 'audio/x-m4a' for the audio player.\n * Safari doesn't support 'audio/mp3' well.\n * Also, 'audio/m4a' should be converted to 'audio/x-m4a' to be correctly played in Safari.\n * @link: https://sendbird.atlassian.net/browse/CLNP-2997\n *\n * @param mimeType - The original MIME type.\n * @returns Converted file name and MIME type.\n */\nvar getParsedVoiceAudioFileInfo = function (mimeType) {\n    if (isSafari(navigator.userAgent) && mimeType.includes('m4a')) {\n        return {\n            name: VOICE_MESSAGE_FILE_NAME__XM4A,\n            mimeType: VOICE_MESSAGE_MIME_TYPE__XM4A,\n        };\n    }\n    return {\n        name: VOICE_MESSAGE_FILE_NAME,\n        mimeType: VOICE_MESSAGE_MIME_TYPE,\n    };\n};\n\nvar ALL = 'ALL';\nvar noop = function () { };\nvar VoicePlayerStoreDefaultValue = {\n    currentGroupKey: '',\n    currentPlayer: null,\n    audioStorage: {},\n};\nvar Context = createContext({\n    play: noop,\n    pause: noop,\n    stop: noop,\n    voicePlayerStore: VoicePlayerStoreDefaultValue,\n});\nvar VoicePlayerProvider = function (_a) {\n    var children = _a.children;\n    var _b = useReducer(voicePlayerReducer, voicePlayerInitialState), voicePlayerStore = _b[0], voicePlayerDispatcher = _b[1];\n    var currentGroupKey = voicePlayerStore.currentGroupKey, currentPlayer = voicePlayerStore.currentPlayer, audioStorage = voicePlayerStore.audioStorage;\n    var config = useSendbirdStateContext().config;\n    var logger = config.logger;\n    var stop = function (text) {\n        if (text === void 0) { text = ''; }\n        if (currentGroupKey.includes(text)) {\n            logger.info('VoicePlayer: Pause playing(by text).');\n            pause(currentGroupKey);\n        }\n    };\n    var pause = function (groupKey) {\n        if (currentPlayer) {\n            if (groupKey === currentGroupKey) {\n                logger.info('VoicePlayer: Pause playing(by group key).');\n                currentPlayer.pause();\n            }\n            else if (groupKey === ALL) {\n                logger.info('VoicePlayer: Pause playing(all).');\n                currentPlayer.pause();\n            }\n        }\n        else {\n            logger.warning('VoicePlayer: No currentPlayer to pause.');\n        }\n    };\n    var play = function (_a) {\n        var groupKey = _a.groupKey, audioFile = _a.audioFile, _b = _a.audioFileUrl, audioFileUrl = _b === void 0 ? '' : _b, _c = _a.audioFileMimeType, audioFileMimeType = _c === void 0 ? VOICE_MESSAGE_MIME_TYPE : _c;\n        if (groupKey !== currentGroupKey) {\n            pause(currentGroupKey);\n        }\n        // Clear the previous AudioPlayer element\n        var voicePlayerRoot = document.getElementById(VOICE_PLAYER_ROOT_ID);\n        var voicePlayerAudioElement = document.getElementById(VOICE_PLAYER_AUDIO_ID);\n        if (voicePlayerRoot && voicePlayerAudioElement) {\n            voicePlayerRoot.removeChild(voicePlayerAudioElement);\n        }\n        logger.info('VoicePlayer: Start getting audio file.');\n        new Promise(function (resolve, reject) {\n            var _a;\n            voicePlayerDispatcher({\n                type: INITIALIZE_AUDIO_UNIT,\n                payload: { groupKey: groupKey },\n            });\n            // audio file passed as a parameter\n            if (audioFile) {\n                logger.info('VoicePlayer: Use the audioFile instance.');\n                resolve(audioFile);\n                return;\n            }\n            // audio file from the audioStorage\n            var cachedAudioFile = (_a = audioStorage === null || audioStorage === void 0 ? void 0 : audioStorage[groupKey]) === null || _a === void 0 ? void 0 : _a.audioFile;\n            if (cachedAudioFile) {\n                logger.info('VoicePlayer: Get from the audioStorage.');\n                resolve(cachedAudioFile);\n                return;\n            }\n            // fetch the audio file from URL\n            fetch(audioFileUrl)\n                .then(function (res) { return res.blob(); })\n                .then(function (blob) {\n                var audioFile = new File([blob], getParsedVoiceAudioFileInfo(audioFileMimeType).name, {\n                    lastModified: new Date().getTime(),\n                    type: getParsedVoiceAudioFileInfo(audioFileMimeType).mimeType,\n                });\n                resolve(audioFile);\n                logger.info('VoicePlayer: Get the audioFile from URL.');\n            })\n                .catch(reject);\n        })\n            .then(function (audioFile) {\n            var _a;\n            var voicePlayerRoot = document.getElementById(VOICE_PLAYER_ROOT_ID);\n            logger.info('VoicePlayer: Succeeded getting audio file.', { audioFile: audioFile });\n            var currentAudioUnit = audioStorage[groupKey] || AudioUnitDefaultValue();\n            var audioPlayer = new Audio((_a = URL === null || URL === void 0 ? void 0 : URL.createObjectURL) === null || _a === void 0 ? void 0 : _a.call(URL, audioFile));\n            audioPlayer.id = VOICE_PLAYER_AUDIO_ID;\n            audioPlayer.currentTime = currentAudioUnit.playbackTime;\n            audioPlayer.volume = 1;\n            audioPlayer.loop = false;\n            audioPlayer.onplaying = function () {\n                logger.info('VoicePlayer: OnPlaying event is called from audioPlayer', { groupKey: groupKey, audioPlayer: audioPlayer });\n                voicePlayerDispatcher({\n                    type: ON_VOICE_PLAYER_PLAY,\n                    payload: { groupKey: groupKey, audioFile: audioFile },\n                });\n            };\n            audioPlayer.onpause = function () {\n                logger.info('VoicePlayer: OnPause event is called from audioPlayer', { groupKey: groupKey, audioPlayer: audioPlayer });\n                voicePlayerDispatcher({\n                    type: ON_VOICE_PLAYER_PAUSE,\n                    payload: { groupKey: groupKey, duration: audioPlayer.duration, currentTime: audioPlayer.currentTime },\n                });\n            };\n            audioPlayer.ontimeupdate = function () {\n                voicePlayerDispatcher({\n                    type: ON_CURRENT_TIME_UPDATE,\n                    payload: { groupKey: groupKey },\n                });\n            };\n            audioPlayer.onerror = function (error) {\n                logger.error('VoicePlayer: Failed to load the audioFile on the audio player.', error);\n                voicePlayerDispatcher({\n                    type: RESET_AUDIO_UNIT,\n                    payload: { groupKey: groupKey },\n                });\n            };\n            audioPlayer.dataset.sbGroupId = groupKey;\n            // clean up the previous audio player\n            try {\n                voicePlayerRoot === null || voicePlayerRoot === void 0 ? void 0 : voicePlayerRoot.childNodes.forEach(function (node) {\n                    var _a, _b;\n                    var element = node;\n                    var thisGroupKey = (_a = element.dataset) === null || _a === void 0 ? void 0 : _a.sbGroupKey;\n                    if (thisGroupKey !== groupKey) {\n                        (_b = element === null || element === void 0 ? void 0 : element.pause) === null || _b === void 0 ? void 0 : _b.call(element);\n                        voicePlayerRoot.removeChild(element);\n                        logger.info('VoicePlayer: Removed other player.', { element: element });\n                    }\n                });\n            }\n            finally {\n                audioPlayer === null || audioPlayer === void 0 ? void 0 : audioPlayer.play();\n                voicePlayerRoot === null || voicePlayerRoot === void 0 ? void 0 : voicePlayerRoot.appendChild(audioPlayer);\n                voicePlayerDispatcher({\n                    type: SET_CURRENT_PLAYER,\n                    payload: { groupKey: groupKey, audioPlayer: audioPlayer },\n                });\n                logger.info('VoicePlayer: Succeeded playing audio player.', { groupKey: groupKey, audioPlayer: audioPlayer });\n            }\n        })\n            .catch(function (error) {\n            logger.warning('VoicePlayer: Failed loading audio file with URL.', error);\n            voicePlayerDispatcher({\n                type: RESET_AUDIO_UNIT,\n                payload: { groupKey: groupKey },\n            });\n        });\n    };\n    return (React__default.createElement(Context.Provider, { value: {\n            play: play,\n            pause: pause,\n            stop: stop,\n            voicePlayerStore: voicePlayerStore,\n        } },\n        React__default.createElement(\"div\", { id: VOICE_PLAYER_ROOT_ID, style: { display: 'none' } }),\n        children));\n};\nvar useVoicePlayerContext = function () { return useContext(Context); };\n\nexport { AudioUnitDefaultValue as A, VOICE_PLAYER_STATUS as V, ALL as a, VoicePlayerProvider as b, generateGroupKey as g, useVoicePlayerContext as u };\n//# sourceMappingURL=bundle-DDeWOERD.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}