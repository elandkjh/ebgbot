{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport React, { createContext, useCallback, useContext, useState } from 'react';\nimport { applicationAttributes } from '../../constants/index.js';\nimport { usePreservedCallback } from '../../hooks/index.js';\nimport { snakeToCamel } from '../../utils/convertors.js';\nimport { UIKitConfigManager } from './configManager.js';\nimport { createInitialRemoteConfig, initialConfig } from './initialConfig.js';\nimport { getConfigsByPriority, isRawSBUConfigPayload } from './utils.js';\nfunction getApplicationAttributes(sdk) {\n  var _a, _b;\n  return (_b = (_a = sdk.appInfo) === null || _a === void 0 ? void 0 : _a.applicationAttributes) !== null && _b !== void 0 ? _b : [];\n}\nconst UIKitConfigContext = createContext({\n  initDashboardConfigs: () => Promise.resolve(),\n  configs: initialConfig,\n  configsWithAppAttr: () => initialConfig\n});\nconst UIKitConfigProvider = ({\n  storage,\n  children,\n  localConfigs = {}\n}) => {\n  // Set by Feature Config setting in Dashboard\n  const [remoteConfigs, setRemoteConfigs] = useState(createInitialRemoteConfig);\n  const [manager] = useState(() => new UIKitConfigManager(storage));\n  const initDashboardConfigs = useCallback(sdk => __awaiter(void 0, void 0, void 0, function* () {\n    // Compare the sdk uikitConfig's lastUpdatedAt <-> stored one\n    const storedConfigPayload = yield manager.init(sdk.appId);\n    if (sdk.appInfo && sdk.appInfo.uikitConfigInfo.lastUpdatedAt === storedConfigPayload.updatedAt) {\n      setRemoteConfigs(storedConfigPayload.configuration);\n    } else {\n      try {\n        const response = yield sdk.getUIKitConfiguration();\n        if (isRawSBUConfigPayload(response.json)) {\n          const remoteConfigPayload = snakeToCamel(response.json);\n          const updatedConfigPayload = yield manager.update(remoteConfigPayload);\n          setRemoteConfigs(updatedConfigPayload.configuration);\n        }\n      } catch (_a) {\n        setRemoteConfigs(storedConfigPayload.configuration);\n      }\n    }\n  }), [manager]);\n  const configs = getConfigsByPriority(localConfigs, remoteConfigs);\n  const configsWithAppAttr = usePreservedCallback(sdk => ({\n    groupChannel: {\n      channel: {\n        get enableReactions() {\n          return configs.groupChannel.channel.enableReactions && getApplicationAttributes(sdk).includes(applicationAttributes.reactions);\n        },\n        get enableReactionsSupergroup() {\n          return configs.groupChannel.channel.enableReactionsSupergroup && getApplicationAttributes(sdk).includes(applicationAttributes.reactions);\n        },\n        get enableOgtag() {\n          return configs.groupChannel.channel.enableOgtag && getApplicationAttributes(sdk).includes(applicationAttributes.enable_og_tag);\n        }\n      },\n      setting: {\n        get enableMessageSearch() {\n          return configs.groupChannel.setting.enableMessageSearch && getApplicationAttributes(sdk).includes(applicationAttributes.message_search_v3);\n        }\n      }\n    },\n    openChannel: {\n      channel: {\n        get enableOgtag() {\n          return configs.openChannel.channel.enableOgtag && getApplicationAttributes(sdk).includes(applicationAttributes.enable_og_tag);\n        }\n      }\n    }\n  }));\n  return React.createElement(UIKitConfigContext.Provider, {\n    value: {\n      initDashboardConfigs,\n      configs,\n      configsWithAppAttr\n    }\n  }, children);\n};\nconst useUIKitConfig = () => useContext(UIKitConfigContext);\nexport { UIKitConfigContext, UIKitConfigProvider, useUIKitConfig };","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","React","createContext","useCallback","useContext","useState","applicationAttributes","usePreservedCallback","snakeToCamel","UIKitConfigManager","createInitialRemoteConfig","initialConfig","getConfigsByPriority","isRawSBUConfigPayload","getApplicationAttributes","sdk","_a","_b","appInfo","UIKitConfigContext","initDashboardConfigs","configs","configsWithAppAttr","UIKitConfigProvider","storage","children","localConfigs","remoteConfigs","setRemoteConfigs","manager","storedConfigPayload","init","appId","uikitConfigInfo","lastUpdatedAt","updatedAt","configuration","response","getUIKitConfiguration","json","remoteConfigPayload","updatedConfigPayload","update","groupChannel","channel","enableReactions","includes","reactions","enableReactionsSupergroup","enableOgtag","enable_og_tag","setting","enableMessageSearch","message_search_v3","openChannel","createElement","Provider","useUIKitConfig"],"sources":["D:/ebgbot/node_modules/@sendbird/uikit-react/node_modules/@sendbird/uikit-tools/dist/esm/uikitConfiguration/internal/context.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport React, { createContext, useCallback, useContext, useState } from 'react';\nimport { applicationAttributes } from '../../constants/index.js';\nimport { usePreservedCallback } from '../../hooks/index.js';\nimport { snakeToCamel } from '../../utils/convertors.js';\nimport { UIKitConfigManager } from './configManager.js';\nimport { createInitialRemoteConfig, initialConfig } from './initialConfig.js';\nimport { getConfigsByPriority, isRawSBUConfigPayload } from './utils.js';\nfunction getApplicationAttributes(sdk) {\n    var _a, _b;\n    return (_b = (_a = sdk.appInfo) === null || _a === void 0 ? void 0 : _a.applicationAttributes) !== null && _b !== void 0 ? _b : [];\n}\nconst UIKitConfigContext = createContext({\n    initDashboardConfigs: () => Promise.resolve(),\n    configs: initialConfig,\n    configsWithAppAttr: () => initialConfig,\n});\nconst UIKitConfigProvider = ({ storage, children, localConfigs = {} }) => {\n    // Set by Feature Config setting in Dashboard\n    const [remoteConfigs, setRemoteConfigs] = useState(createInitialRemoteConfig);\n    const [manager] = useState(() => new UIKitConfigManager(storage));\n    const initDashboardConfigs = useCallback((sdk) => __awaiter(void 0, void 0, void 0, function* () {\n        // Compare the sdk uikitConfig's lastUpdatedAt <-> stored one\n        const storedConfigPayload = yield manager.init(sdk.appId);\n        if (sdk.appInfo && sdk.appInfo.uikitConfigInfo.lastUpdatedAt === storedConfigPayload.updatedAt) {\n            setRemoteConfigs(storedConfigPayload.configuration);\n        }\n        else {\n            try {\n                const response = yield sdk.getUIKitConfiguration();\n                if (isRawSBUConfigPayload(response.json)) {\n                    const remoteConfigPayload = snakeToCamel(response.json);\n                    const updatedConfigPayload = yield manager.update(remoteConfigPayload);\n                    setRemoteConfigs(updatedConfigPayload.configuration);\n                }\n            }\n            catch (_a) {\n                setRemoteConfigs(storedConfigPayload.configuration);\n            }\n        }\n    }), [manager]);\n    const configs = getConfigsByPriority(localConfigs, remoteConfigs);\n    const configsWithAppAttr = usePreservedCallback((sdk) => ({\n        groupChannel: {\n            channel: {\n                get enableReactions() {\n                    return (configs.groupChannel.channel.enableReactions &&\n                        getApplicationAttributes(sdk).includes(applicationAttributes.reactions));\n                },\n                get enableReactionsSupergroup() {\n                    return (configs.groupChannel.channel.enableReactionsSupergroup &&\n                        getApplicationAttributes(sdk).includes(applicationAttributes.reactions));\n                },\n                get enableOgtag() {\n                    return (configs.groupChannel.channel.enableOgtag &&\n                        getApplicationAttributes(sdk).includes(applicationAttributes.enable_og_tag));\n                },\n            },\n            setting: {\n                get enableMessageSearch() {\n                    return (configs.groupChannel.setting.enableMessageSearch &&\n                        getApplicationAttributes(sdk).includes(applicationAttributes.message_search_v3));\n                },\n            },\n        },\n        openChannel: {\n            channel: {\n                get enableOgtag() {\n                    return (configs.openChannel.channel.enableOgtag &&\n                        getApplicationAttributes(sdk).includes(applicationAttributes.enable_og_tag));\n                },\n            },\n        },\n    }));\n    return (React.createElement(UIKitConfigContext.Provider, { value: { initDashboardConfigs, configs, configsWithAppAttr } }, children));\n};\nconst useUIKitConfig = () => useContext(UIKitConfigContext);\nexport { UIKitConfigContext, UIKitConfigProvider, useUIKitConfig };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}