{"ast":null,"code":"import { _ as __assign, a as __awaiter, b as __generator, c as __spreadArray, d as __rest } from './bundle-BQi9-O76.js';\nimport React__default, { useState, useContext, useEffect, useMemo, useCallback } from 'react';\nimport { Role } from '@sendbird/chat';\nimport { L as LocalizationContext, u as useLocalization } from './bundle-cQZ3UZoG.js';\nimport { useChannelSettingsContext } from '../ChannelSettings/context.js';\nimport Button, { ButtonTypes, ButtonSizes } from '../ui/Button.js';\nimport { U as UserListItemMenu } from './bundle-BjjAXlnY.js';\nimport { UserListItem } from '../ui/UserListItem.js';\nimport { M as Modal } from './bundle-CXdo2kR_.js';\nimport { n as noop } from './bundle-BgwzpLeQ.js';\nimport { u as useOnScrollPositionChangeDetector } from './bundle-DvsVgg5f.js';\nimport './bundle-DhKQeIfP.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\nfunction MembersModal(_a) {\n  var _this = this;\n  var onCancel = _a.onCancel,\n    _b = _a.renderUserListItem,\n    renderUserListItem = _b === void 0 ? function (props) {\n      return React__default.createElement(UserListItem, __assign({}, props));\n    } : _b,\n    _c = _a.memberListQueryParams,\n    memberListQueryParams = _c === void 0 ? {} : _c;\n  var _d = useState([]),\n    members = _d[0],\n    setMembers = _d[1];\n  var _e = useState(null),\n    memberQuery = _e[0],\n    setMemberQuery = _e[1];\n  var channel = useChannelSettingsContext().channel;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  useEffect(function () {\n    var memberListQuery = channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery(__assign({\n      limit: 20\n    }, memberListQueryParams));\n    memberListQuery === null || memberListQuery === void 0 ? void 0 : memberListQuery.next().then(function (members) {\n      setMembers(members);\n    });\n    setMemberQuery(memberListQuery !== null && memberListQuery !== void 0 ? memberListQuery : null);\n  }, []);\n  return React__default.createElement(\"div\", null, React__default.createElement(Modal, {\n    isFullScreenOnMobile: true,\n    hideFooter: true,\n    onCancel: function () {\n      return onCancel();\n    },\n    onSubmit: noop,\n    titleText: stringSet.CHANNEL_SETTING__MEMBERS__SEE_ALL_MEMBERS\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-more-members__popup-scroll\",\n    onScroll: useOnScrollPositionChangeDetector({\n      onReachedBottom: function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            if (memberQuery && memberQuery.hasNext) {\n              memberQuery.next().then(function (o) {\n                setMembers(__spreadArray(__spreadArray([], members, true), o, true));\n              });\n            }\n            return [2 /*return*/];\n          });\n        });\n      }\n    })\n  }, members.map(function (member, index) {\n    return React__default.createElement(React__default.Fragment, {\n      key: member.userId\n    }, renderUserListItem({\n      // NOTE: This `index` is used to display the current user's user item at the top when customizing externally.\n      index: index,\n      user: member,\n      channel: channel,\n      renderListItemMenu: function (props) {\n        return React__default.createElement(UserListItemMenu, __assign({}, props, {\n          onToggleOperatorState: function (_a) {\n            var isOperator = _a.newStatus;\n            var newMembers = __spreadArray([], members, true);\n            for (var _i = 0, newMembers_1 = newMembers; _i < newMembers_1.length; _i++) {\n              var newMember = newMembers_1[_i];\n              if (newMember.userId === member.userId) {\n                newMember.role = isOperator ? Role.OPERATOR : Role.NONE;\n                break;\n              }\n            }\n            setMembers(newMembers);\n          },\n          onToggleMuteState: function (_a) {\n            var isMuted = _a.newStatus;\n            var newMembers = __spreadArray([], members, true);\n            for (var _i = 0, newMembers_2 = newMembers; _i < newMembers_2.length; _i++) {\n              var newMember = newMembers_2[_i];\n              if (newMember.userId === member.userId) {\n                newMember.isMuted = isMuted;\n                break;\n              }\n            }\n            setMembers(newMembers);\n          },\n          onToggleBanState: function () {\n            setMembers(members.filter(function (_a) {\n              var userId = _a.userId;\n              return userId !== member.userId;\n            }));\n          }\n        }));\n      }\n    }));\n  }))));\n}\nfunction InviteUsersModal(_a) {\n  var _this = this;\n  var _b, _c, _d;\n  var onCancel = _a.onCancel,\n    onSubmit = _a.onSubmit,\n    _e = _a.renderUserListItem,\n    renderUserListItem = _e === void 0 ? function (props) {\n      return React__default.createElement(UserListItem, __assign({}, props));\n    } : _e;\n  var _f = useState([]),\n    users = _f[0],\n    setUsers = _f[1];\n  var _g = useState(null),\n    userListQuery = _g[0],\n    setUserListQuery = _g[1];\n  var _h = useState({}),\n    selectedUsers = _h[0],\n    setSelectedUsers = _h[1];\n  var state = useSendbirdStateContext();\n  var sdk = (_c = (_b = state === null || state === void 0 ? void 0 : state.stores) === null || _b === void 0 ? void 0 : _b.sdkStore) === null || _c === void 0 ? void 0 : _c.sdk;\n  var globalUserListQuery = (_d = state === null || state === void 0 ? void 0 : state.config) === null || _d === void 0 ? void 0 : _d.userListQuery;\n  var _j = useChannelSettingsContext(),\n    channel = _j.channel,\n    overrideInviteUser = _j.overrideInviteUser,\n    queries = _j.queries;\n  var stringSet = useLocalization().stringSet;\n  var onScroll = useOnScrollPositionChangeDetector({\n    onReachedBottom: function () {\n      return __awaiter(this, void 0, void 0, function () {\n        var users_1;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!(userListQuery === null || userListQuery === void 0 ? void 0 : userListQuery.hasNext)) return [3 /*break*/, 2];\n              return [4 /*yield*/, userListQuery.next()];\n            case 1:\n              users_1 = _a.sent();\n              setUsers(function (prev) {\n                return __spreadArray(__spreadArray([], prev, true), users_1, true);\n              });\n              _a.label = 2;\n            case 2:\n              return [2 /*return*/];\n          }\n        });\n      });\n    }\n  });\n  var onInviteUsers = function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var userIdsToInvite;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            userIdsToInvite = Object.keys(selectedUsers);\n            if (!(channel && typeof overrideInviteUser === 'function')) return [3 /*break*/, 1];\n            overrideInviteUser({\n              users: userIdsToInvite,\n              onClose: onCancel,\n              channel: channel\n            });\n            return [3 /*break*/, 3];\n          case 1:\n            return [4 /*yield*/, channel === null || channel === void 0 ? void 0 : channel.inviteWithUserIds(userIdsToInvite)];\n          case 2:\n            _a.sent();\n            onSubmit(userIdsToInvite);\n            _a.label = 3;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  var onSelectUser = function (user) {\n    setSelectedUsers(function (_a) {\n      var draft = __rest(_a, []);\n      if (draft[user.userId]) {\n        delete draft[user.userId];\n      } else {\n        draft[user.userId] = user;\n      }\n      return draft;\n    });\n  };\n  var membersMap = useMemo(function () {\n    var _a;\n    var _b, _c;\n    // UIKit policy: In a super or broadcast channel, do not check the members when inviting users.\n    if ((channel === null || channel === void 0 ? void 0 : channel.isSuper) || (channel === null || channel === void 0 ? void 0 : channel.isBroadcast)) return _a = {}, _a[(_c = (_b = sdk.currentUser) === null || _b === void 0 ? void 0 : _b.userId) !== null && _c !== void 0 ? _c : ''] = sdk.currentUser, _a;\n    return channel === null || channel === void 0 ? void 0 : channel.members.reduce(function (acc, cur) {\n      acc[cur.userId] = cur;\n      return acc;\n    }, {});\n  }, [channel === null || channel === void 0 ? void 0 : channel.members.length]);\n  useEffect(function () {\n    var fetchUsersAndSetQuery = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var query, users_2;\n        var _a;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              query = (_a = globalUserListQuery === null || globalUserListQuery === void 0 ? void 0 : globalUserListQuery()) !== null && _a !== void 0 ? _a : sdk === null || sdk === void 0 ? void 0 : sdk.createApplicationUserListQuery(queries === null || queries === void 0 ? void 0 : queries.applicationUserListQuery);\n              if (!query) return [3 /*break*/, 2];\n              return [4 /*yield*/, query.next()];\n            case 1:\n              users_2 = _b.sent();\n              setUserListQuery(query);\n              setUsers(users_2);\n              _b.label = 2;\n            case 2:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n    fetchUsersAndSetQuery();\n  }, [sdk]);\n  return React__default.createElement(\"div\", null, React__default.createElement(Modal, {\n    isFullScreenOnMobile: true,\n    disabled: Object.keys(selectedUsers).length === 0,\n    submitText: stringSet.BUTTON__INVITE,\n    type: ButtonTypes.PRIMARY,\n    onCancel: function () {\n      return onCancel();\n    },\n    onSubmit: onInviteUsers,\n    titleText: stringSet.CHANNEL_SETTING__MEMBERS__SELECT_TITLE\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-more-members__popup-scroll\",\n    onScroll: onScroll\n  }, React__default.createElement(\"div\", {\n    className: \"sendbird-more-members__popup-scroll__inner\"\n  }, users.map(function (user) {\n    var isMember = Boolean(membersMap ? membersMap[user.userId] : false);\n    var isSelected = Boolean(selectedUsers[user.userId]);\n    return React__default.createElement(React__default.Fragment, {\n      key: user.userId\n    }, renderUserListItem({\n      user: user,\n      checkBox: true,\n      checked: isMember || isSelected,\n      disabled: isMember,\n      onChange: function () {\n        return onSelectUser(user);\n      }\n    }));\n  })))));\n}\nvar MemberList = function (_a) {\n  var _b = _a.renderUserListItem,\n    renderUserListItem = _b === void 0 ? function (props) {\n      return React__default.createElement(UserListItem, __assign({}, props));\n    } : _b,\n    _c = _a.memberListQueryParams,\n    memberListQueryParams = _c === void 0 ? {} : _c;\n  var _d = useState([]),\n    members = _d[0],\n    setMembers = _d[1];\n  var _e = useState(false),\n    hasNext = _e[0],\n    setHasNext = _e[1];\n  var _f = useState(false),\n    showAllMembers = _f[0],\n    setShowAllMembers = _f[1];\n  var _g = useState(false),\n    showInviteUsers = _g[0],\n    setShowInviteUsers = _g[1];\n  var _h = useChannelSettingsContext(),\n    channel = _h.channel,\n    forceUpdateUI = _h.forceUpdateUI;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var refreshList = useCallback(function () {\n    if (!channel) {\n      setMembers([]);\n      return;\n    }\n    var memberUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery(__assign({\n      limit: 10\n    }, memberListQueryParams));\n    memberUserListQuery.next().then(function (members) {\n      setMembers(members);\n      setHasNext(memberUserListQuery.hasNext);\n    });\n  }, [channel === null || channel === void 0 ? void 0 : channel.url, channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery]);\n  useEffect(refreshList, [channel === null || channel === void 0 ? void 0 : channel.url]);\n  return React__default.createElement(\"div\", {\n    className: \"sendbird-channel-settings-member-list\"\n  }, members.map(function (member, index) {\n    return React__default.createElement(React__default.Fragment, {\n      key: member.userId\n    }, renderUserListItem({\n      // NOTE: This `index` is used to display the current user's user item at the top when customizing externally.\n      index: index,\n      user: member,\n      channel: channel,\n      size: 'small',\n      avatarSize: '24px',\n      renderListItemMenu: function (props) {\n        return React__default.createElement(UserListItemMenu, __assign({}, props, {\n          onToggleOperatorState: function (_a) {\n            var isOperator = _a.newStatus;\n            var newMembers = __spreadArray([], members, true);\n            for (var _i = 0, newMembers_1 = newMembers; _i < newMembers_1.length; _i++) {\n              var newMember = newMembers_1[_i];\n              if (newMember.userId === member.userId) {\n                newMember.role = isOperator ? Role.OPERATOR : Role.NONE;\n                break;\n              }\n            }\n            setMembers(newMembers);\n          },\n          onToggleMuteState: function (_a) {\n            var isMuted = _a.newStatus;\n            var newMembers = __spreadArray([], members, true);\n            for (var _i = 0, newMembers_2 = newMembers; _i < newMembers_2.length; _i++) {\n              var newMember = newMembers_2[_i];\n              if (newMember.userId === member.userId) {\n                newMember.isMuted = isMuted;\n                break;\n              }\n            }\n            setMembers(newMembers);\n          },\n          onToggleBanState: function () {\n            setMembers(members.filter(function (_a) {\n              var userId = _a.userId;\n              return userId !== member.userId;\n            }));\n          }\n        }));\n      }\n    }));\n  }), React__default.createElement(\"div\", {\n    className: \"sendbird-channel-settings-accordion__footer\"\n  }, hasNext && React__default.createElement(Button, {\n    type: ButtonTypes.SECONDARY,\n    size: ButtonSizes.SMALL,\n    onClick: function () {\n      return setShowAllMembers(true);\n    }\n  }, stringSet.CHANNEL_SETTING__MEMBERS__SEE_ALL_MEMBERS), React__default.createElement(Button, {\n    type: ButtonTypes.SECONDARY,\n    size: ButtonSizes.SMALL,\n    onClick: function () {\n      return setShowInviteUsers(true);\n    }\n  }, stringSet.CHANNEL_SETTING__MEMBERS__INVITE_MEMBER)), showAllMembers && React__default.createElement(MembersModal, {\n    onCancel: function () {\n      setShowAllMembers(false);\n      refreshList();\n      forceUpdateUI();\n    },\n    renderUserListItem: renderUserListItem,\n    memberListQueryParams: memberListQueryParams\n  }), showInviteUsers && React__default.createElement(InviteUsersModal, {\n    onCancel: function () {\n      return setShowInviteUsers(false);\n    },\n    onSubmit: function () {\n      setShowInviteUsers(false);\n      refreshList();\n      forceUpdateUI();\n    },\n    renderUserListItem: renderUserListItem\n  }));\n};\nexport { MemberList as M };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { _ as __assign, a as __awaiter, b as __generator, c as __spreadArray, d as __rest } from './bundle-BQi9-O76.js';\nimport React__default, { useState, useContext, useEffect, useMemo, useCallback } from 'react';\nimport { Role } from '@sendbird/chat';\nimport { L as LocalizationContext, u as useLocalization } from './bundle-cQZ3UZoG.js';\nimport { useChannelSettingsContext } from '../ChannelSettings/context.js';\nimport Button, { ButtonTypes, ButtonSizes } from '../ui/Button.js';\nimport { U as UserListItemMenu } from './bundle-BjjAXlnY.js';\nimport { UserListItem } from '../ui/UserListItem.js';\nimport { M as Modal } from './bundle-CXdo2kR_.js';\nimport { n as noop } from './bundle-BgwzpLeQ.js';\nimport { u as useOnScrollPositionChangeDetector } from './bundle-DvsVgg5f.js';\nimport './bundle-DhKQeIfP.js';\nimport { useSendbirdStateContext } from '../useSendbirdStateContext.js';\n\nfunction MembersModal(_a) {\n    var _this = this;\n    var onCancel = _a.onCancel, _b = _a.renderUserListItem, renderUserListItem = _b === void 0 ? function (props) { return React__default.createElement(UserListItem, __assign({}, props)); } : _b, _c = _a.memberListQueryParams, memberListQueryParams = _c === void 0 ? {} : _c;\n    var _d = useState([]), members = _d[0], setMembers = _d[1];\n    var _e = useState(null), memberQuery = _e[0], setMemberQuery = _e[1];\n    var channel = useChannelSettingsContext().channel;\n    var stringSet = useContext(LocalizationContext).stringSet;\n    useEffect(function () {\n        var memberListQuery = channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery(__assign({ limit: 20 }, memberListQueryParams));\n        memberListQuery === null || memberListQuery === void 0 ? void 0 : memberListQuery.next().then(function (members) {\n            setMembers(members);\n        });\n        setMemberQuery(memberListQuery !== null && memberListQuery !== void 0 ? memberListQuery : null);\n    }, []);\n    return (React__default.createElement(\"div\", null,\n        React__default.createElement(Modal, { isFullScreenOnMobile: true, hideFooter: true, onCancel: function () { return onCancel(); }, onSubmit: noop, titleText: stringSet.CHANNEL_SETTING__MEMBERS__SEE_ALL_MEMBERS },\n            React__default.createElement(\"div\", { className: \"sendbird-more-members__popup-scroll\", onScroll: useOnScrollPositionChangeDetector({\n                    onReachedBottom: function () { return __awaiter(_this, void 0, void 0, function () {\n                        return __generator(this, function (_a) {\n                            if (memberQuery && memberQuery.hasNext) {\n                                memberQuery.next().then(function (o) {\n                                    setMembers(__spreadArray(__spreadArray([], members, true), o, true));\n                                });\n                            }\n                            return [2 /*return*/];\n                        });\n                    }); },\n                }) }, members.map(function (member, index) { return (React__default.createElement(React__default.Fragment, { key: member.userId }, renderUserListItem({\n                // NOTE: This `index` is used to display the current user's user item at the top when customizing externally.\n                index: index,\n                user: member,\n                channel: channel,\n                renderListItemMenu: function (props) { return (React__default.createElement(UserListItemMenu, __assign({}, props, { onToggleOperatorState: function (_a) {\n                        var isOperator = _a.newStatus;\n                        var newMembers = __spreadArray([], members, true);\n                        for (var _i = 0, newMembers_1 = newMembers; _i < newMembers_1.length; _i++) {\n                            var newMember = newMembers_1[_i];\n                            if (newMember.userId === member.userId) {\n                                newMember.role = isOperator ? Role.OPERATOR : Role.NONE;\n                                break;\n                            }\n                        }\n                        setMembers(newMembers);\n                    }, onToggleMuteState: function (_a) {\n                        var isMuted = _a.newStatus;\n                        var newMembers = __spreadArray([], members, true);\n                        for (var _i = 0, newMembers_2 = newMembers; _i < newMembers_2.length; _i++) {\n                            var newMember = newMembers_2[_i];\n                            if (newMember.userId === member.userId) {\n                                newMember.isMuted = isMuted;\n                                break;\n                            }\n                        }\n                        setMembers(newMembers);\n                    }, onToggleBanState: function () {\n                        setMembers(members.filter(function (_a) {\n                            var userId = _a.userId;\n                            return userId !== member.userId;\n                        }));\n                    } }))); },\n            }))); })))));\n}\n\nfunction InviteUsersModal(_a) {\n    var _this = this;\n    var _b, _c, _d;\n    var onCancel = _a.onCancel, onSubmit = _a.onSubmit, _e = _a.renderUserListItem, renderUserListItem = _e === void 0 ? function (props) { return React__default.createElement(UserListItem, __assign({}, props)); } : _e;\n    var _f = useState([]), users = _f[0], setUsers = _f[1];\n    var _g = useState(null), userListQuery = _g[0], setUserListQuery = _g[1];\n    var _h = useState({}), selectedUsers = _h[0], setSelectedUsers = _h[1];\n    var state = useSendbirdStateContext();\n    var sdk = (_c = (_b = state === null || state === void 0 ? void 0 : state.stores) === null || _b === void 0 ? void 0 : _b.sdkStore) === null || _c === void 0 ? void 0 : _c.sdk;\n    var globalUserListQuery = (_d = state === null || state === void 0 ? void 0 : state.config) === null || _d === void 0 ? void 0 : _d.userListQuery;\n    var _j = useChannelSettingsContext(), channel = _j.channel, overrideInviteUser = _j.overrideInviteUser, queries = _j.queries;\n    var stringSet = useLocalization().stringSet;\n    var onScroll = useOnScrollPositionChangeDetector({\n        onReachedBottom: function () {\n            return __awaiter(this, void 0, void 0, function () {\n                var users_1;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (!(userListQuery === null || userListQuery === void 0 ? void 0 : userListQuery.hasNext)) return [3 /*break*/, 2];\n                            return [4 /*yield*/, userListQuery.next()];\n                        case 1:\n                            users_1 = _a.sent();\n                            setUsers(function (prev) { return __spreadArray(__spreadArray([], prev, true), users_1, true); });\n                            _a.label = 2;\n                        case 2: return [2 /*return*/];\n                    }\n                });\n            });\n        },\n    });\n    var onInviteUsers = function () { return __awaiter(_this, void 0, void 0, function () {\n        var userIdsToInvite;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    userIdsToInvite = Object.keys(selectedUsers);\n                    if (!(channel && typeof overrideInviteUser === 'function')) return [3 /*break*/, 1];\n                    overrideInviteUser({ users: userIdsToInvite, onClose: onCancel, channel: channel });\n                    return [3 /*break*/, 3];\n                case 1: return [4 /*yield*/, (channel === null || channel === void 0 ? void 0 : channel.inviteWithUserIds(userIdsToInvite))];\n                case 2:\n                    _a.sent();\n                    onSubmit(userIdsToInvite);\n                    _a.label = 3;\n                case 3: return [2 /*return*/];\n            }\n        });\n    }); };\n    var onSelectUser = function (user) {\n        setSelectedUsers(function (_a) {\n            var draft = __rest(_a, []);\n            if (draft[user.userId]) {\n                delete draft[user.userId];\n            }\n            else {\n                draft[user.userId] = user;\n            }\n            return draft;\n        });\n    };\n    var membersMap = useMemo(function () {\n        var _a;\n        var _b, _c;\n        // UIKit policy: In a super or broadcast channel, do not check the members when inviting users.\n        if ((channel === null || channel === void 0 ? void 0 : channel.isSuper) || (channel === null || channel === void 0 ? void 0 : channel.isBroadcast))\n            return _a = {}, _a[(_c = (_b = sdk.currentUser) === null || _b === void 0 ? void 0 : _b.userId) !== null && _c !== void 0 ? _c : ''] = sdk.currentUser, _a;\n        return channel === null || channel === void 0 ? void 0 : channel.members.reduce(function (acc, cur) {\n            acc[cur.userId] = cur;\n            return acc;\n        }, {});\n    }, [channel === null || channel === void 0 ? void 0 : channel.members.length]);\n    useEffect(function () {\n        var fetchUsersAndSetQuery = function () { return __awaiter(_this, void 0, void 0, function () {\n            var query, users_2;\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        query = (_a = globalUserListQuery === null || globalUserListQuery === void 0 ? void 0 : globalUserListQuery()) !== null && _a !== void 0 ? _a : sdk === null || sdk === void 0 ? void 0 : sdk.createApplicationUserListQuery(queries === null || queries === void 0 ? void 0 : queries.applicationUserListQuery);\n                        if (!query) return [3 /*break*/, 2];\n                        return [4 /*yield*/, query.next()];\n                    case 1:\n                        users_2 = _b.sent();\n                        setUserListQuery(query);\n                        setUsers(users_2);\n                        _b.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        }); };\n        fetchUsersAndSetQuery();\n    }, [sdk]);\n    return (React__default.createElement(\"div\", null,\n        React__default.createElement(Modal, { isFullScreenOnMobile: true, disabled: Object.keys(selectedUsers).length === 0, submitText: stringSet.BUTTON__INVITE, type: ButtonTypes.PRIMARY, onCancel: function () { return onCancel(); }, onSubmit: onInviteUsers, titleText: stringSet.CHANNEL_SETTING__MEMBERS__SELECT_TITLE },\n            React__default.createElement(\"div\", { className: \"sendbird-more-members__popup-scroll\", onScroll: onScroll },\n                React__default.createElement(\"div\", { className: \"sendbird-more-members__popup-scroll__inner\" }, users.map(function (user) {\n                    var isMember = Boolean(membersMap ? membersMap[user.userId] : false);\n                    var isSelected = Boolean(selectedUsers[user.userId]);\n                    return (React__default.createElement(React__default.Fragment, { key: user.userId }, renderUserListItem({\n                        user: user,\n                        checkBox: true,\n                        checked: isMember || isSelected,\n                        disabled: isMember,\n                        onChange: function () { return onSelectUser(user); },\n                    })));\n                }))))));\n}\n\nvar MemberList = function (_a) {\n    var _b = _a.renderUserListItem, renderUserListItem = _b === void 0 ? function (props) { return React__default.createElement(UserListItem, __assign({}, props)); } : _b, _c = _a.memberListQueryParams, memberListQueryParams = _c === void 0 ? {} : _c;\n    var _d = useState([]), members = _d[0], setMembers = _d[1];\n    var _e = useState(false), hasNext = _e[0], setHasNext = _e[1];\n    var _f = useState(false), showAllMembers = _f[0], setShowAllMembers = _f[1];\n    var _g = useState(false), showInviteUsers = _g[0], setShowInviteUsers = _g[1];\n    var _h = useChannelSettingsContext(), channel = _h.channel, forceUpdateUI = _h.forceUpdateUI;\n    var stringSet = useContext(LocalizationContext).stringSet;\n    var refreshList = useCallback(function () {\n        if (!channel) {\n            setMembers([]);\n            return;\n        }\n        var memberUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery(__assign({ limit: 10 }, memberListQueryParams));\n        memberUserListQuery.next().then(function (members) {\n            setMembers(members);\n            setHasNext(memberUserListQuery.hasNext);\n        });\n    }, [channel === null || channel === void 0 ? void 0 : channel.url, channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery]);\n    useEffect(refreshList, [channel === null || channel === void 0 ? void 0 : channel.url]);\n    return (React__default.createElement(\"div\", { className: \"sendbird-channel-settings-member-list\" },\n        members.map(function (member, index) { return (React__default.createElement(React__default.Fragment, { key: member.userId }, renderUserListItem({\n            // NOTE: This `index` is used to display the current user's user item at the top when customizing externally.\n            index: index,\n            user: member,\n            channel: channel,\n            size: 'small',\n            avatarSize: '24px',\n            renderListItemMenu: function (props) { return (React__default.createElement(UserListItemMenu, __assign({}, props, { onToggleOperatorState: function (_a) {\n                    var isOperator = _a.newStatus;\n                    var newMembers = __spreadArray([], members, true);\n                    for (var _i = 0, newMembers_1 = newMembers; _i < newMembers_1.length; _i++) {\n                        var newMember = newMembers_1[_i];\n                        if (newMember.userId === member.userId) {\n                            newMember.role = isOperator ? Role.OPERATOR : Role.NONE;\n                            break;\n                        }\n                    }\n                    setMembers(newMembers);\n                }, onToggleMuteState: function (_a) {\n                    var isMuted = _a.newStatus;\n                    var newMembers = __spreadArray([], members, true);\n                    for (var _i = 0, newMembers_2 = newMembers; _i < newMembers_2.length; _i++) {\n                        var newMember = newMembers_2[_i];\n                        if (newMember.userId === member.userId) {\n                            newMember.isMuted = isMuted;\n                            break;\n                        }\n                    }\n                    setMembers(newMembers);\n                }, onToggleBanState: function () {\n                    setMembers(members.filter(function (_a) {\n                        var userId = _a.userId;\n                        return userId !== member.userId;\n                    }));\n                } }))); },\n        }))); }),\n        React__default.createElement(\"div\", { className: \"sendbird-channel-settings-accordion__footer\" },\n            hasNext && (React__default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function () { return setShowAllMembers(true); } }, stringSet.CHANNEL_SETTING__MEMBERS__SEE_ALL_MEMBERS)),\n            React__default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function () { return setShowInviteUsers(true); } }, stringSet.CHANNEL_SETTING__MEMBERS__INVITE_MEMBER)),\n        showAllMembers && (React__default.createElement(MembersModal, { onCancel: function () {\n                setShowAllMembers(false);\n                refreshList();\n                forceUpdateUI();\n            }, renderUserListItem: renderUserListItem, memberListQueryParams: memberListQueryParams })),\n        showInviteUsers && (React__default.createElement(InviteUsersModal, { onCancel: function () { return setShowInviteUsers(false); }, onSubmit: function () {\n                setShowInviteUsers(false);\n                refreshList();\n                forceUpdateUI();\n            }, renderUserListItem: renderUserListItem }))));\n};\n\nexport { MemberList as M };\n//# sourceMappingURL=bundle-DQk06wFZ.js.map\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module"}