var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { FlexSizeSpecValue, Layout, createMessageTemplate, createParser, createRenderer, } from '@sendbird/uikit-message-template';
import { Carousel } from '../components/Carousel';
import ReactMessageTemplateImage from '../components/ReactMessageTemplateImage';
import { useMessageContext } from '../context/MessageContextProvider';
import { useRecalculateWidth } from '../hook/useRecalculationSize';
import '../index.css';
import { getDefaultStyles, setAlign, setImageAspectRatio, setImageStyle, setTextAlign, setTextStyle, setViewProps, webkitLineClampStyles, } from '../styles';
const hasValidUrlProtocol = (url = '') => ['http://', 'https://', 'ftp://'].some((protocol) => url.startsWith(protocol));
/**
 * @param url - url to be checked
 * @returns url with http:// protocol if it doesn't have any protocol
 * @example
 * returnUrl('www.sendbird.com') // returns 'http://www.sendbird.com'
 * returnUrl('https://www.sendbird.com') // returns 'https://www.sendbird.com'
 * returnUrl('ftp://www.sendbird.com') // returns 'ftp://www.sendbird.com'
 * returnUrl('sendbird.com') // returns 'https://sendbird.com'
 **/
const returnUrl = (url = '') => {
    if (hasValidUrlProtocol(url)) {
        return url;
    }
    return `https://${url}`;
};
// todo: semantic html here is not perfect, need to revisit. Same for Button
const ActionHandler = ({ className = '', style, children, props }) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
    const { recalculatedStyle, elemRef } = useRecalculateWidth({ style, props });
    const { message, handleWebAction, handleCustomAction, handlePredefinedAction } = useMessageContext();
    const onClick = (e) => {
        var _a, _b, _c, _d, _e, _f, _g;
        if (((_a = props === null || props === void 0 ? void 0 : props.action) === null || _a === void 0 ? void 0 : _a.type) === 'web') {
            if (handleWebAction) {
                handleWebAction(e, props.action, message);
            }
            else {
                (_c = window === null || window === void 0 ? void 0 : window.open(returnUrl((_b = props === null || props === void 0 ? void 0 : props.action) === null || _b === void 0 ? void 0 : _b.data), '_blank', 'noopener noreferrer')) === null || _c === void 0 ? void 0 : _c.focus();
            }
        }
        if (((_d = props === null || props === void 0 ? void 0 : props.action) === null || _d === void 0 ? void 0 : _d.type) === 'custom') {
            if (handleCustomAction) {
                handleCustomAction(e, props.action, message);
            }
            else {
                (_f = window === null || window === void 0 ? void 0 : window.open(returnUrl((_e = props === null || props === void 0 ? void 0 : props.action) === null || _e === void 0 ? void 0 : _e.data), '_blank', 'noopener noreferrer')) === null || _f === void 0 ? void 0 : _f.focus();
            }
        }
        if (((_g = props === null || props === void 0 ? void 0 : props.action) === null || _g === void 0 ? void 0 : _g.type) === 'uikit') {
            handlePredefinedAction === null || handlePredefinedAction === void 0 ? void 0 : handlePredefinedAction(e, props.action, message);
        }
    };
    const borderClass = ((_a = props.viewStyle) === null || _a === void 0 ? void 0 : _a.borderWidth) ? ' sb-message-template__border' : '';
    if (className === 'sb-message-template__text-button') {
        return (React.createElement("button", { className: `${className}${borderClass}`, "data-sb-template-id": props.elementId, style: Object.assign(Object.assign({}, style), { paddingTop: (_c = (_b = props.viewStyle) === null || _b === void 0 ? void 0 : _b.padding) === null || _c === void 0 ? void 0 : _c.top, paddingRight: (_e = (_d = props.viewStyle) === null || _d === void 0 ? void 0 : _d.padding) === null || _e === void 0 ? void 0 : _e.right, paddingBottom: (_g = (_f = props.viewStyle) === null || _f === void 0 ? void 0 : _f.padding) === null || _g === void 0 ? void 0 : _g.bottom, paddingLeft: (_j = (_h = props.viewStyle) === null || _h === void 0 ? void 0 : _h.padding) === null || _j === void 0 ? void 0 : _j.left }), onClick: onClick }, children));
    }
    const { display, flexDirection, justifyContent, alignItems, objectFit } = recalculatedStyle, wrapperStyles = __rest(recalculatedStyle, ["display", "flexDirection", "justifyContent", "alignItems", "objectFit"]);
    return (React.createElement("div", { ref: elemRef, className: `${className}${borderClass} ${(props === null || props === void 0 ? void 0 : props.action) ? 'sb-message-template__action' : ''}`, "data-sb-template-id": props.elementId, style: wrapperStyles, onClick: onClick },
        React.createElement("div", { style: {
                display,
                flexDirection,
                justifyContent,
                alignItems,
                objectFit,
                width: '100%',
                height: '100%',
                paddingTop: (_l = (_k = props.viewStyle) === null || _k === void 0 ? void 0 : _k.padding) === null || _l === void 0 ? void 0 : _l.top,
                paddingRight: (_o = (_m = props.viewStyle) === null || _m === void 0 ? void 0 : _m.padding) === null || _o === void 0 ? void 0 : _o.right,
                paddingBottom: (_q = (_p = props.viewStyle) === null || _p === void 0 ? void 0 : _p.padding) === null || _q === void 0 ? void 0 : _q.bottom,
                paddingLeft: (_s = (_r = props.viewStyle) === null || _r === void 0 ? void 0 : _r.padding) === null || _s === void 0 ? void 0 : _s.left,
            } }, children)));
};
/**
 * Text that is fixed or fill parent should be wrapped in a div with max-width: 100% and max-height: 100%
 * This is to prevent text from overflowing the padding of the container
 */
function isFixedOrFill(view) {
    var _a, _b, _c, _d;
    const heightType = (_a = view === null || view === void 0 ? void 0 : view.height) === null || _a === void 0 ? void 0 : _a.type;
    const widthType = (_b = view === null || view === void 0 ? void 0 : view.width) === null || _b === void 0 ? void 0 : _b.type;
    const isFixedDiamension = heightType === 'fixed' || widthType === 'fixed';
    const isFill = (heightType === 'flex' && ((_c = view === null || view === void 0 ? void 0 : view.height) === null || _c === void 0 ? void 0 : _c.value) === FlexSizeSpecValue.FillParent) ||
        (widthType === 'flex' && ((_d = view === null || view === void 0 ? void 0 : view.width) === null || _d === void 0 ? void 0 : _d.value) === FlexSizeSpecValue.FillParent);
    return isFixedDiamension || isFill;
}
function convertNewlinesToBr(text) {
    return text.split('\n').map((line, index) => (React.createElement(React.Fragment, { key: index },
        line,
        React.createElement("br", null))));
}
function renderText(view) {
    const { text, maxTextLines } = view;
    const isToBeWrapped = isFixedOrFill(view);
    const isMultiLine = maxTextLines != null && maxTextLines > 0;
    const convertedText = convertNewlinesToBr(text);
    if (isMultiLine || isToBeWrapped) {
        const wrapperStyling = Object.assign(Object.assign({}, ((isMultiLine || isToBeWrapped) && { maxWidth: '100%' })), (isToBeWrapped && { maxHeight: '100%', overflow: 'hidden' }));
        return (React.createElement("div", { style: wrapperStyling }, isMultiLine ? React.createElement("div", { style: webkitLineClampStyles(maxTextLines) }, convertedText) : convertedText));
    }
    return isMultiLine ? React.createElement("div", { style: webkitLineClampStyles(maxTextLines) }, convertedText) : convertedText;
}
export const renderer = createRenderer({
    views: {
        box(props) {
            return (React.createElement(ActionHandler, { className: "sb-message-template__box", elementId: props.elementId, style: props.parsedProperties, props: props }, props.children));
        },
        text(props) {
            return (React.createElement(ActionHandler, { className: "sb-message-template__text", elementId: props.elementId, style: props.parsedProperties, props: props }, renderText(props)));
        },
        image(props) {
            var _a;
            // todo: add image backup
            return (React.createElement(ActionHandler, { className: "sb-message-template__image-container", elementId: props.elementId, style: props.parsedProperties, props: props },
                React.createElement(ReactMessageTemplateImage, { className: "sb-message-template__image", alt: "image", src: props.imageUrl, style: { width: '100%', height: '100%', aspectRatio: 'inherit', objectFit: 'inherit' }, tintColor: (_a = props.imageStyle) === null || _a === void 0 ? void 0 : _a.tintColor, metaData: props.metaData })));
        },
        textButton(props) {
            return (React.createElement(ActionHandler, { className: "sb-message-template__text-button", elementId: props.elementId, style: props.parsedProperties, props: props }, renderText(Object.assign({ maxTextLines: 1 }, props))));
        },
        imageButton(props) {
            var _a;
            return (React.createElement(ActionHandler, { className: "sb-message-template__image-container sb-message-template__image-button", elementId: props.elementId, style: props.parsedProperties, props: props },
                React.createElement(ReactMessageTemplateImage, { className: "sb-message-template__image", alt: "image-button", src: props.imageUrl, style: { width: '100%', height: '100%', aspectRatio: 'inherit', objectFit: 'inherit' }, tintColor: (_a = props.imageStyle) === null || _a === void 0 ? void 0 : _a.tintColor, metaData: props.metaData })));
        },
        carouselView(props) {
            return React.createElement(Carousel, { gap: props.spacing }, props.children);
        },
    },
});
export const parser = createParser({
    mapBoxProps(props, options) {
        const styles = getDefaultStyles();
        setViewProps(styles, props, options);
        setAlign(styles, props.layout, props.align);
        return styles;
    },
    mapTextProps(props, options) {
        var _a;
        const styles = getDefaultStyles({ whiteSpace: 'pre-line' });
        // Better not set flex 1 to text
        setViewProps(styles, props, options);
        setTextStyle(styles, props, options);
        setAlign(styles, Layout.Row, props.align);
        setTextAlign(styles, (_a = props.align) === null || _a === void 0 ? void 0 : _a.horizontal);
        return styles;
    },
    mapImageProps(props, options) {
        const styles = getDefaultStyles();
        setViewProps(styles, props, options);
        setImageStyle(styles, props.imageStyle);
        setImageAspectRatio(styles, props);
        return styles;
    },
    mapTextButtonProps(props, options) {
        const styles = getDefaultStyles({ whiteSpace: 'pre-line', alignItems: 'center', justifyContent: 'center' });
        setViewProps(styles, props, options);
        setTextStyle(styles, Object.assign(Object.assign({}, props), { textStyle: Object.assign({ weight: 500 }, props.textStyle) }), options);
        return styles;
    },
    mapImageButtonProps(props, options) {
        const styles = getDefaultStyles();
        setViewProps(styles, props, options);
        setImageStyle(styles, props.imageStyle);
        setImageAspectRatio(styles, props);
        return styles;
    },
    mapCarouselProps(props, options) {
        const styles = getDefaultStyles();
        setViewProps(styles, props, options);
        return styles;
    },
});
export const { MessageTemplate } = createMessageTemplate({
    renderer,
    parser,
    Container: ({ children, className }) => {
        return (React.createElement("div", { className: `sb-message-template__parent ${className}`, style: {
                display: 'flex',
                flexDirection: 'column',
                maxWidth: 400,
                marginBottom: 24,
            } }, children));
    },
});
