import { ComponentType, FlexSizeSpecValue, Layout, MediaContentMode, alignInFlex, defaultProperties, } from '@sendbird/uikit-message-template';
import { isNumber, isWrappedText } from '../util';
export function getDefaultStyles(overrides) {
    return Object.assign({ display: 'flex', overflow: 'hidden', boxSizing: 'border-box' }, overrides);
}
export function setViewProps(styles, props, options) {
    var _a;
    setViewSize(styles, props, options);
    setViewStyle(styles, props);
    // [Padding] Just parse the values as numbers; the actual value has been set in the ActionHandler.
    if ((_a = props.viewStyle) === null || _a === void 0 ? void 0 : _a.padding) {
        const padding = props.viewStyle.padding;
        if (isNumber(padding.top))
            padding.top = Number(padding.top);
        if (isNumber(padding.bottom))
            padding.bottom = Number(padding.bottom);
        if (isNumber(padding.left))
            padding.left = Number(padding.left);
        if (isNumber(padding.right))
            padding.right = Number(padding.right);
    }
}
function setBorderStyle(styles, borderWidth, borderColor, radius) {
    if (borderWidth) {
        styles['--border-width'] = `${borderWidth}px`;
        styles['--border-color'] = borderColor || 'transparent';
    }
    if (radius) {
        styles['borderRadius'] = Number(radius);
        styles['--border-radius'] = `${radius}px`;
    }
}
export function setViewStyle(styles, props) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    const { viewStyle } = props;
    if (isNumber((_a = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _a === void 0 ? void 0 : _a.top))
        styles['marginTop'] = Number((_b = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _b === void 0 ? void 0 : _b.top);
    if (isNumber((_c = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _c === void 0 ? void 0 : _c.bottom))
        styles['marginBottom'] = Number((_d = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _d === void 0 ? void 0 : _d.bottom);
    if (isNumber((_e = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _e === void 0 ? void 0 : _e.left))
        styles['marginLeft'] = Number((_f = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _f === void 0 ? void 0 : _f.left);
    if (isNumber((_g = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _g === void 0 ? void 0 : _g.right))
        styles['marginRight'] = Number((_h = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _h === void 0 ? void 0 : _h.right);
    const marginHorizontal = Number((_j = styles.marginLeft) !== null && _j !== void 0 ? _j : '0') + Number((_k = styles.marginRight) !== null && _k !== void 0 ? _k : '0');
    if (marginHorizontal > 0 && styles.width === '100%')
        styles.width = `calc(100% - ${marginHorizontal}px)`;
    if (viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.backgroundColor)
        styles['backgroundColor'] = viewStyle.backgroundColor;
    // use JSON.stringify to escape special characters in image URL
    if (viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.backgroundImageUrl) {
        styles['backgroundImage'] = `url(${JSON.stringify(viewStyle.backgroundImageUrl)})`;
        styles['backgroundSize'] = '100%';
        styles['backgroundPosition'] = 'center';
    }
    setBorderStyle(styles, viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.borderWidth, viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.borderColor, viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.radius);
}
function getViewSizeStyle(width, height, parentLayout) {
    const style = {};
    if (width.type === 'flex' && width.value == FlexSizeSpecValue.FillParent) {
        style['width'] = '100%';
        if (parentLayout === Layout.Row) {
            style['flex'] = 1;
        }
    }
    else if (width.type === 'fixed' && width.value >= 0) {
        style['width'] = Number(width.value);
    }
    if (height.type === 'flex' && height.value == FlexSizeSpecValue.FillParent) {
        style['height'] = '100%';
        if (parentLayout === Layout.Column) {
            style['flex'] = 1;
        }
    }
    else if (height.type === 'fixed' && height.value >= 0) {
        style['height'] = Number(height.value);
    }
    return style;
}
export function setViewSize(styles, props, options) {
    var _a, _b;
    const { width: defaultWidth, height: defaultHeight } = defaultProperties.view.size;
    const { parentLayout } = options;
    const sizeStyle = getViewSizeStyle((_a = props.width) !== null && _a !== void 0 ? _a : defaultWidth, (_b = props.height) !== null && _b !== void 0 ? _b : defaultHeight, parentLayout);
    Object.assign(styles, sizeStyle);
}
export function setAlign(styles, layout = defaultProperties.box.layout, align = defaultProperties.box.align) {
    if (layout === Layout.Row) {
        styles['flexDirection'] = 'row';
        styles['alignItems'] = alignInFlex(align.vertical);
        styles['justifyContent'] = alignInFlex(align.horizontal);
    }
    if (layout === Layout.Column) {
        styles['flexDirection'] = 'column';
        styles['alignItems'] = alignInFlex(align.horizontal);
        styles['justifyContent'] = alignInFlex(align.vertical);
    }
}
export function setTextAlign(styles, align = defaultProperties.box.align.horizontal) {
    styles.textAlign = align;
}
export function setImageStyle(styles, imageStyle) {
    const { contentMode = MediaContentMode.AspectFit } = imageStyle || {};
    if (contentMode) {
        switch (contentMode) {
            case MediaContentMode.AspectFill:
                styles['objectFit'] = 'cover';
                break;
            case MediaContentMode.AspectFit:
                styles['objectFit'] = 'contain';
                break;
            case MediaContentMode.ScalesToFill:
                styles['objectFit'] = 'fill';
                break;
        }
    }
}
// uses image meta-data to render images that doesn't break the UI
// https://sendbird.atlassian.net/wiki/spaces/UK/pages/2008220608/Message+template+-+Image+policy
export function setImageAspectRatio(styles, props) {
    var _a, _b, _c, _d;
    const imageMetaData = props === null || props === void 0 ? void 0 : props.metaData;
    if (!(imageMetaData === null || imageMetaData === void 0 ? void 0 : imageMetaData.pixelHeight) || !(imageMetaData === null || imageMetaData === void 0 ? void 0 : imageMetaData.pixelWidth)) {
        return;
    }
    if (((_a = props === null || props === void 0 ? void 0 : props.width) === null || _a === void 0 ? void 0 : _a.type) === 'fixed' || ((_b = props === null || props === void 0 ? void 0 : props.height) === null || _b === void 0 ? void 0 : _b.type) === 'fixed') {
        return;
    }
    styles['aspectRatio'] = `${(_c = props === null || props === void 0 ? void 0 : props.metaData) === null || _c === void 0 ? void 0 : _c.pixelWidth} / ${(_d = props === null || props === void 0 ? void 0 : props.metaData) === null || _d === void 0 ? void 0 : _d.pixelHeight}`;
}
export function webkitLineClampStyles(numberOfLines) {
    return {
        WebkitLineClamp: numberOfLines,
        WebkitBoxOrient: 'vertical',
        display: '-webkit-box',
        overflow: 'hidden',
        overflowWrap: 'anywhere',
        flex: 1,
    };
}
export function setTextStyle(styles, props, options) {
    const { textStyle, width } = props;
    // TODO: Change default as design
    const { size, color, weight = 'normal' } = textStyle || {};
    if (size)
        styles['fontSize'] = Number(size);
    if (color)
        styles['color'] = color;
    if (weight)
        styles['fontWeight'] = weight;
    if ((width === null || width === void 0 ? void 0 : width.value) == FlexSizeSpecValue.WrapContent) {
        styles['maxWidth'] = '100%';
    }
    if (props.type === ComponentType.Text) {
        const { siblings, elemIdx } = options;
        // To push out any subsequent components from the container,
        // if a prior one is long enough to occupy an entire line
        // @link https://sendbird.atlassian.net/browse/NOTI-709
        if (siblings != null && siblings.length >= 2 && siblings.every(isWrappedText)) {
            styles.flexShrink = siblings.length - 1 === elemIdx ? 1 : 0;
        }
    }
}
