import React from 'react';
import { SizeContextProvider } from '../context/SizeProvider';
import { ComponentType } from '../types/components';
import { CompositeComponentType } from '../types/components';
import { SUPPORTED_TEMPLATE_VERSIONS, isTemplateVersionSupported } from '../utils';
import { setTemplateItemId } from '../utils/templateItemId';
import { defaultProperties } from './defaultValues';
import { createParser } from './parser';
import { createRenderer } from './renderer';
export const createMessageTemplate = (opts) => {
    const Container = opts.Container || React.Fragment;
    const UnknownMessage = opts.UnknownMessage || (() => null);
    const parser = opts.parser || createParser();
    const renderer = opts.renderer || createRenderer();
    const MessageTemplateBase = ({ templateItems, parentLayout = defaultProperties.box.layout, isRoot = false, }) => {
        const renderItems = templateItems;
        return (React.createElement(React.Fragment, null, renderItems.map((item, index, siblings) => {
            const { properties } = parser.parse(item, { parentLayout, elemIdx: index, siblings });
            const props = {
                key: index,
                parentLayout,
                parsedProperties: properties,
                siblings,
            };
            switch (item.type) {
                // CompositeComponent should be top level component
                case CompositeComponentType.Carousel: {
                    if (!isRoot) {
                        throw new Error('Cannot parse template item as Carousel if the template item is not the root.');
                    }
                    if (!item.items || !Array.isArray(item.items) || item.items.length === 0) {
                        throw new Error('Cannot parse template item as Carousel if carousel has no items.');
                    }
                    return (React.createElement(renderer.carouselView, Object.assign({}, item, props), item.items.map((items, index) => (React.createElement(MessageTemplateBase, { key: index, templateItems: items || [], parentLayout: parentLayout })))));
                }
                case ComponentType.Box: {
                    return (React.createElement(renderer.box, Object.assign({}, item, props),
                        React.createElement(MessageTemplateBase, { templateItems: item.items || [], parentLayout: item.layout })));
                }
                case ComponentType.Text: {
                    return React.createElement(renderer.text, Object.assign({}, item, props));
                }
                case ComponentType.Image: {
                    return React.createElement(renderer.image, Object.assign({}, item, props));
                }
                case ComponentType.TextButton: {
                    return React.createElement(renderer.textButton, Object.assign({}, item, props));
                }
                case ComponentType.ImageButton: {
                    return React.createElement(renderer.imageButton, Object.assign({}, item, props));
                }
                default: {
                    // or throw new Error('Cannot parse template item')
                    return React.createElement(UnknownMessage, { item: item });
                }
            }
        })));
    };
    return {
        MessageTemplate: ({ parentLayout = defaultProperties.rootLayout, templateVersion, templateItems, }) => {
            const items = setTemplateItemId(templateItems);
            if (!isTemplateVersionSupported(templateVersion)) {
                /**
                 * I choose to throw instead of returning UnknownMessage because UnknownMessage syntax (required prop: item) is not what UIKit wants.
                 */
                throw new Error(`Cannot parse template item due to unsupported template version: ${templateVersion}, ${SUPPORTED_TEMPLATE_VERSIONS}`);
            }
            let isCarousel = false;
            if (Array.isArray(items) && items.length > 0) {
                isCarousel = items[0].type === CompositeComponentType.Carousel;
            }
            return (React.createElement(SizeContextProvider, null,
                React.createElement(Container, { className: isCarousel ? 'sb-message-template__parent_for_carousel' : '' },
                    React.createElement(MessageTemplateBase, { parentLayout: parentLayout, templateItems: items, isRoot: true }))));
        },
        MessageTemplateBase,
    };
};
