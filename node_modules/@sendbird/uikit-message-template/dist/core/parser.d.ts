import { Box, type Carousel, ComponentsUnion, Image, ImageButton, Text, TextButton } from '../types/components';
import type { Layout } from '../types/styles';
export type ParserMapOptions = {
    parentLayout: Layout;
    elemIdx?: number;
    siblings?: Array<ComponentsUnion['properties']>;
};
export type ParserTransform = <T extends ComponentsUnion['properties'] = ComponentsUnion['properties']>(properties: T) => T;
interface CreateParserParams<ParsedProperties> {
    defaultMapper?(...args: any[]): any;
    mapBoxProps?(properties: Box, options: ParserMapOptions): ParsedProperties;
    mapTextProps?(properties: Text, options: ParserMapOptions): ParsedProperties;
    mapImageProps?(properties: Image, options: ParserMapOptions): ParsedProperties;
    mapTextButtonProps?(properties: TextButton, options: ParserMapOptions): ParsedProperties;
    mapImageButtonProps?(properties: ImageButton, options: ParserMapOptions): ParsedProperties;
    mapCarouselProps?(properties: Carousel, options: ParserMapOptions): ParsedProperties;
    transforms?: ParserTransform[];
}
export interface Parser<ParsedProperties> {
    parse(properties: ComponentsUnion['properties'], options: ParserMapOptions): {
        properties: ParsedProperties | undefined;
    };
}
export declare const createParser: <ParsedProperties = string | object>(params?: CreateParserParams<ParsedProperties> | undefined) => Parser<ParsedProperties>;
interface ByAppearance<T> {
    light: T;
    dark: T;
}
interface DefaultStyle {
    _: undefined;
}
export declare const DEFAULT_PARSER_VALUES: ByAppearance<DefaultStyle>;
export {};
