// -------- Set property mapper
import {
  Box,
  type Carousel,
  ComponentType,
  ComponentsUnion,
  CompositeComponentType,
  Image,
  ImageButton,
  Text,
  TextButton,
} from '../types/components';
import type { Layout } from '../types/styles';

export type ParserMapOptions = {
  parentLayout: Layout;
  elemIdx?: number;
  siblings?: Array<ComponentsUnion['properties']>;
};

export type ParserTransform = <T extends ComponentsUnion['properties'] = ComponentsUnion['properties']>(
  properties: T,
) => T;

interface CreateParserParams<ParsedProperties> {
  defaultMapper?(...args: any[]): any;
  mapBoxProps?(properties: Box, options: ParserMapOptions): ParsedProperties;
  mapTextProps?(properties: Text, options: ParserMapOptions): ParsedProperties;
  mapImageProps?(properties: Image, options: ParserMapOptions): ParsedProperties;
  mapTextButtonProps?(properties: TextButton, options: ParserMapOptions): ParsedProperties;
  mapImageButtonProps?(properties: ImageButton, options: ParserMapOptions): ParsedProperties;
  mapCarouselProps?(properties: Carousel, options: ParserMapOptions): ParsedProperties;
  transforms?: ParserTransform[];
}

export interface Parser<ParsedProperties> {
  parse(
    properties: ComponentsUnion['properties'],
    options: ParserMapOptions,
  ): {
    properties: ParsedProperties | undefined;
  };
}

const MAPPER: CreateParserParams<any>['defaultMapper'] = () => undefined;

export const createParser = <ParsedProperties = object | string>(
  params?: CreateParserParams<ParsedProperties>,
): Parser<ParsedProperties> => {
  const defaultMapper = params?.defaultMapper || MAPPER;
  const mapper: Omit<Required<CreateParserParams<ParsedProperties>>, 'transforms'> = {
    defaultMapper,
    mapBoxProps: params?.mapBoxProps || defaultMapper,
    mapTextProps: params?.mapTextProps || defaultMapper,
    mapImageProps: params?.mapImageProps || defaultMapper,
    mapTextButtonProps: params?.mapTextButtonProps || defaultMapper,
    mapImageButtonProps: params?.mapImageButtonProps || defaultMapper,
    mapCarouselProps: params?.mapCarouselProps || defaultMapper,
  };
  const transforms = params?.transforms || [];

  return {
    parse(rawItem, options) {
      const item = transforms.reduce((it, transform) => transform(it), rawItem);
      switch (item.type) {
        case ComponentType.Box: {
          return { properties: mapper.mapBoxProps(item, options) };
        }
        case ComponentType.Text: {
          return { properties: mapper.mapTextProps(item, options) };
        }
        case ComponentType.Image: {
          return { properties: mapper.mapImageProps(item, options) };
        }
        case ComponentType.TextButton: {
          return { properties: mapper.mapTextButtonProps(item, options) };
        }
        case ComponentType.ImageButton: {
          return { properties: mapper.mapImageButtonProps(item, options) };
        }
        case CompositeComponentType.Carousel: {
          return { properties: mapper.mapCarouselProps(item, options) };
        }
        default:
          return { properties: undefined };
      }
    },
  };
};

// -------- Default values
interface ByAppearance<T> {
  light: T;
  dark: T;
}

interface DefaultStyle {
  _: undefined;
}

export const DEFAULT_PARSER_VALUES: ByAppearance<DefaultStyle> = {
  light: { _: undefined },
  dark: { _: undefined },
};
